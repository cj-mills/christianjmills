<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Christian Mills</title>
<link>christianjmills.com/blog.html</link>
<atom:link href="christianjmills.com/blog.xml" rel="self" type="application/rss+xml"/>
<description>This is Christian Mills&#39; personal Blog.</description>
<image>
<url>christianjmills.com/images/logo.png</url>
<title>Christian Mills</title>
<link>christianjmills.com/blog.html</link>
<height>142</height>
<width>144</width>
</image>
<generator>quarto-1.4.555</generator>
<lastBuildDate>Thu, 06 Jun 2024 07:00:00 GMT</lastBuildDate>
<item>
  <title>CUDA MODE Lecture 2 : Ch.1-3 PMPP Book</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/cuda-mode-notes/lecture-002/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/cuda-mode-notes.html"><strong>CUDA Mode Lecture Notes</strong></a>: My notes from the <strong>CUDA MODE</strong> reading group lectures run by <strong>Andreas Kopf</strong> and <strong>Mark Saroufim</strong>.</li>
</ul>
</div>
</div>
<ul>
<li>Lecture Information</li>
<li>Ch.1: Introduction</li>
<li>Ch.2: Heterogeneous Data Parallel Computing</li>
<li>Ch.3: Multidimensional Grids and Data</li>
</ul>
<section id="lecture-information" class="level2">
<h2 class="anchored" data-anchor-id="lecture-information">Lecture Information</h2>
<p><strong>Speaker:</strong> Andreas Kopf</p>
<p><strong>Topic:</strong> PMPP Book Ch. 1-3</p>
<p><strong>Resources:</strong></p>
<ul>
<li><strong>Lecture Slides:</strong> <a href="https://docs.google.com/presentation/d/1deqvEHdqEC4LHUpStO6z3TT77Dt84fNAvTIAxBJgDck/edit#slide=id.g2b1444253e5_1_75">CUDA Mode: Lecture 2</a></li>
<li><strong>Textbook:</strong> <a href="https://www.amazon.com/Programming-Massively-Parallel-Processors-Hands/dp/0323912311/">Programming Massively Parallel Processors</a></li>
<li><strong>GitHub Repository:</strong> <a href="https://github.com/cuda-mode/lectures/tree/main/lecture_002">CUDA MODE Lecture 2</a></li>
<li><strong>Discord Channel:</strong> <a href="https://discord.gg/cudamode">CUDA MODE</a></li>
<li><strong>YouTube Channel:</strong> <a href="https://www.youtube.com/@CUDAMODE">CUDA MODE</a></li>
</ul>
</section>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<ul>
<li>Timestamp: <a href="https://youtu.be/NQ-0D5Ti2dc?si=59R0B3U5I8SLKY8K&amp;t=60">1:00</a></li>
</ul>
<section id="motivation" class="level3">
<h3 class="anchored" data-anchor-id="motivation">Motivation</h3>
<ul>
<li><p>Optimize GPU performance as much as possible</p></li>
<li><p>Applications:</p>
<ul>
<li>simulate and model worlds
<ul>
<li>games</li>
<li>weather</li>
<li>proteins</li>
<li>robotics</li>
</ul></li>
</ul></li>
<li><p>Bigger models are smarter</p>
<ul>
<li>speed and size improvements can have a significant impact on useability</li>
</ul></li>
<li><p>GPUs are the backbon of modern deep learning</p></li>
</ul>
</section>
<section id="history" class="level3">
<h3 class="anchored" data-anchor-id="history">History</h3>
<ul>
<li>Classic software uses sequential programs
<ul>
<li>executed one step at a time</li>
<li>relied on higher CPU clock rates for improved performance</li>
</ul></li>
<li>Higher clock rate trend for CPUs slowed in 2003 due to energy consumption and heat dissipation challenges
<ul>
<li>Increasing frequency would make the chip to hot to cool feasibly</li>
</ul></li>
<li>Multi-core CPU came up
<ul>
<li>Developers had to learn multi-threading
<ul>
<li>New challenges such as deadlocks and race conditions</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="rise-of-cuda" class="level3">
<h3 class="anchored" data-anchor-id="rise-of-cuda">Rise of CUDA</h3>
<ul>
<li>Compute Unified Device Architecture</li>
<li>CUDA is all about parallel programs
<ul>
<li>divide work among threads</li>
</ul></li>
<li>GPUs have much higher peak FLOPS than multi-core CPUs
<ul>
<li>Benefits highly parallelized programs</li>
<li>Not suitable for largely sequential programs</li>
</ul></li>
<li>CPU+GPU
<ul>
<li>Run sequential parts on CPU and numerically intensive parts on GPU</li>
</ul></li>
<li>GPGPU
<ul>
<li>Before CUDA tricks were used to compute with graphics APIs like OpenGL and Direct3D</li>
</ul></li>
<li>GPU programming is now attractive to developers due to massive availability</li>
</ul>
</section>
<section id="amdahls-law" class="level3">
<h3 class="anchored" data-anchor-id="amdahls-law">Amdahl’s Law</h3>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?%0Aspeedup%20=%20(%20Slow%20%5C%20System%20%5C%20Time%20)/(Fast%20%5C%20System%20%5C%20Time)%0A"></p></li>
<li><p>achievable speedup is limited by the parallelizable portion of <img src="https://latex.codecogs.com/png.latex?p"></p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%0Aspeedup%20%3C%20%5Cfrac%7B1%7D%7B1-p%7D%0A"></p>
<ul>
<li>If <img src="https://latex.codecogs.com/png.latex?p"> is <img src="https://latex.codecogs.com/png.latex?90%5C%25">, <img src="https://latex.codecogs.com/png.latex?speedup%20%3C%2010X"></li>
</ul></li>
<li><p><img src="https://latex.codecogs.com/png.latex?p%20%3E%2099%5C%25"> for many real applications</p>
<ul>
<li>especially for large datasets</li>
<li>speedups <img src="https://latex.codecogs.com/png.latex?%3E%20100X"> are attainable</li>
</ul></li>
</ul>
</section>
<section id="challenges" class="level3">
<h3 class="anchored" data-anchor-id="challenges">Challenges</h3>
<ul>
<li>“If you do not care about performance, parallel programming is very easy”</li>
<li>In practice, designing parallel algorithms is harder than sequential algorithms
<ul>
<li>Parallelizing recurrent computations requires nonintuitive thinking
<ul>
<li>prefix sum
<ul>
<li><a href="https://en.wikipedia.org/wiki/Prefix_sum">Wikipedia Page</a></li>
</ul></li>
</ul></li>
</ul></li>
<li>Speed is often limited by memory latency/throughput (memory bound)
<ul>
<li>Often need to read something to the GPU, perform some computation, and the write back the result
<ul>
<li>LLM inference generates token by token</li>
</ul></li>
</ul></li>
<li>Input data characteristics can significantly influence performance of parallel programs
<ul>
<li>LLMs short or large sequences</li>
<li>Might need different kernels optimized for different input shapes</li>
</ul></li>
<li>Not all applications are “embarrassingly parallel”
<ul>
<li>Synchronization imposes overhead
<ul>
<li>Need to wait for GPU operations to complete</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="main-goals-of-the-book" class="level3">
<h3 class="anchored" data-anchor-id="main-goals-of-the-book">Main Goals of the Book</h3>
<ol type="1">
<li>Parallel programming &amp; computational thinking
<ul>
<li>Aims to build a foundation for parallel programming in general</li>
<li>Uses GPUs as a learning vehicle
<ul>
<li>Techniques apply to other accelerators</li>
<li>Concepts are introduced through hands-on CUDA examples</li>
</ul></li>
</ul></li>
<li>Correct &amp; reliable parallel programing
<ul>
<li>Debugging both functions and performance</li>
<li>Understanding where things are fast and slow and how to improve the slow parts</li>
</ul></li>
<li>Scalability
<ul>
<li>Regularize and localize memory access</li>
<li>How to organize memory</li>
</ul></li>
</ol>
</section>
</section>
<section id="heterogeneous-data-parallel-computing" class="level2">
<h2 class="anchored" data-anchor-id="heterogeneous-data-parallel-computing">Heterogeneous Data Parallel Computing</h2>
<ul>
<li><p>Timestamp: <a href="https://youtu.be/NQ-0D5Ti2dc?si=ZeFGj3WVYDF_TI96&amp;t=511">8:31</a></p></li>
<li><p>heterogeneous: CPU + GPU</p></li>
<li><p>data parallelism: break work down into computations that can be executed independently</p></li>
</ul>
<section id="cuda-c" class="level3">
<h3 class="anchored" data-anchor-id="cuda-c">CUDA C</h3>
<ul>
<li>extends ANSI C with minimal new syntax</li>
<li>Terminology
<ul>
<li>CPU=host</li>
<li>GPU=device</li>
<li>Kernels: device code functions</li>
</ul></li>
<li>CUDA C source can be a mixture of host &amp; device code</li>
<li>grid of threads
<ul>
<li>Many threads are launched to execute a kernel</li>
</ul></li>
<li>CPU &amp; GPU code runs concurrently (overlapped)
<ul>
<li>Kernels launch and run on GPU asynchronously</li>
<li>Need to wait for the kernels to finish before copying data back to CPU</li>
</ul></li>
<li>Don’t be afraid to launch many threads on GPU
<ul>
<li>One thread per output tensor is fine</li>
</ul></li>
</ul>
</section>
<section id="cuda-essentials-memory-allocation" class="level3">
<h3 class="anchored" data-anchor-id="cuda-essentials-memory-allocation">CUDA Essentials: Memory Allocation</h3>
<ul>
<li><p>NVIDIA devices come with their own DRAM (device) global memory</p></li>
<li><p><code>cudaMalloc</code> &amp; <code>cudaFree</code>:</p>
<ul>
<li><p><code>cudaMalloc</code>: Allocate device global memory</p></li>
<li><p><code>cudaFree</code>: Free device global memory</p></li>
<li><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb1-1">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>A_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">size_t</span> size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">sizeof</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// size in bytes</span></span>
<span id="cb1-3">  cudaMalloc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**)&amp;</span>A_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// pointer to pointer</span></span>
<span id="cb1-4">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb1-5">  cudaFree<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div></li>
<li><p>Code convention</p>
<ul>
<li><code>_d</code> for device pointer</li>
<li><code>_h</code> for host</li>
</ul></li>
<li><p><code>cudaMemcpy</code></p>
<ul>
<li><p>Copy data from CPU memory to GPU memory and vice versa</p></li>
<li><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb2-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// copy input vectors to device (host -&gt; device)</span></span>
<span id="cb2-2">  cudaMemcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>A_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> A_h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> cudaMemcpyHostToDevice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-3">  cudaMemcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>B_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> B_h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> cudaMemcpyHostToDevice<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb2-4">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb2-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// transfer result back to CPU memory (device -&gt; host)</span></span>
<span id="cb2-6">  cudaMemcpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>C_h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> C_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> cudaMemcpyDeviceToHost<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="cuda-error-handling" class="level3">
<h3 class="anchored" data-anchor-id="cuda-error-handling">CUDA Error Handling</h3>
<ul>
<li>CUDA functions return <code>cudaError_t</code>
<ul>
<li><code>cudaSuccess</code> for successful operation</li>
</ul></li>
<li>Always check returned error status</li>
</ul>
</section>
<section id="kernel-functions-fn" class="level3">
<h3 class="anchored" data-anchor-id="kernel-functions-fn">Kernel functions <code>fn&lt;&lt;&gt;&gt;</code></h3>
<ul>
<li>Launching kernel
<ul>
<li>grid of threads is launched</li>
</ul></li>
<li>All threads execute the same code
<ul>
<li>SPMD: Single Program Multiple Data</li>
</ul></li>
<li>Threads are hierarchically organized into grid blocks &amp; thread blocks
<ul>
<li>Up to 1024 threads in a thread block</li>
</ul></li>
</ul>
</section>
<section id="kernel-coordinates" class="level3">
<h3 class="anchored" data-anchor-id="kernel-coordinates">Kernel Coordinates</h3>
<ul>
<li><p>Built-in variables available inside the kernel</p>
<ul>
<li><code>blockIdx</code>: the area code for a telephone
<ul>
<li>Note: Blocks are a logical organization of threads, not physical</li>
</ul></li>
<li><code>threadIdx</code>: the local phone number</li>
<li>These are ‘coordinates’ that allow threads to identify which portion of the data to process</li>
<li>Can use <code>blockIdx</code> and <code>threadIdx</code> to uniquely identify threads</li>
<li><code>blockDim</code>: tells us the number of threads in a block</li>
</ul></li>
<li><p>For vector addition, we can calculate the array index of the thread</p>
<ul>
<li><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb3-1">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div></li>
</ul></li>
<li><p>All threads in a grid execute the same kernel code</p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-mode-notes/lecture-002/images/book-figure-2-9.png" class="img-fluid figure-img"></p>
<figcaption>Programming Massively Parallel Processors - Figure 2.9</figcaption>
</figure>
</div>
</section>
<section id="cuda-c-keywords-for-function-declaration" class="level3">
<h3 class="anchored" data-anchor-id="cuda-c-keywords-for-function-declaration">CUDA C keywords for function declaration</h3>
<table class="caption-top table">
<colgroup>
<col style="width: 27%">
<col style="width: 21%">
<col style="width: 15%">
<col style="width: 35%">
</colgroup>
<thead>
<tr class="header">
<th>Qualifier Keyword</th>
<th>Callable From</th>
<th>Executed On</th>
<th>Executed By</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>__host__</code> (default)</td>
<td>Host</td>
<td>Host</td>
<td>Caller host thread</td>
</tr>
<tr class="even">
<td><code>__global__</code></td>
<td>Host (or Device)</td>
<td>Device</td>
<td>New grid of device threads</td>
</tr>
<tr class="odd">
<td><code>__device__</code></td>
<td>Device</td>
<td>Device</td>
<td>Caller device thread</td>
</tr>
</tbody>
</table>
<ul>
<li><p><code>__global__</code> &amp; <code>__host__</code></p>
<ul>
<li>Tell the compiler whether the function should live on the device or host</li>
<li>Declare a kernel function with <code>__global__</code>
<ul>
<li>Calling a <code>__global__</code> function launches new grid of CUDA threads</li>
</ul></li>
</ul></li>
<li><p>Functions declared with <code>__device__</code> can be called from within CUDA thread</p>
<ul>
<li>Does not launch a new thread</li>
<li>Only accessible from within kernels</li>
</ul></li>
<li><p>If both <code>__host__</code> and <code>__device__</code> are used in a function declaration</p>
<ul>
<li>CPU and GPU versions will be compiled</li>
</ul></li>
</ul>
</section>
<section id="calling-kernels" class="level3">
<h3 class="anchored" data-anchor-id="calling-kernels">Calling Kernels</h3>
<ul>
<li><p>Kernel configuration is specified between <code>&lt;&lt;&lt;</code> and <code>&gt;&gt;&gt;</code></p></li>
<li><p>Number of blocks, number of threads in each block</p></li>
<li><div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define the number of threads per block.</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Each block will have 256 threads.</span></span>
<span id="cb4-3">dim3 numThreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the number of blocks needed to cover the entire vector.</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Use ceiling division to ensure that the number of blocks is sufficient</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// to handle all elements of the vector 'n'.</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The formula (n + numThreads.x - 1) / numThreads.x ensures this.</span></span>
<span id="cb4-9">dim3 numBlocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> numThreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> numThreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Launch the vector addition kernel with the calculated number of blocks and threads.</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This will execute the vecAddKernel function on the GPU with 'numBlocks' blocks,</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// each containing 'numThreads.x' threads.</span></span>
<span id="cb4-14">vecAddKernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;&lt;</span>numBlocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> numThreads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;(</span>A_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> B_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> C_d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span></code></pre></div></li>
</ul>
</section>
<section id="compiler" class="level3">
<h3 class="anchored" data-anchor-id="compiler">Compiler</h3>
<ul>
<li>nvcc
<ul>
<li>NVIDIA C Compiler</li>
<li>Use to compiler kernels into PTX (CUDA assembly)</li>
</ul></li>
<li>PTX
<ul>
<li>Parallel Thread Execution</li>
<li>Low-level VM &amp; instruction set</li>
</ul></li>
<li>Grahics driver translates PTX into executable binary code (SASS)
<ul>
<li>SASS is the low-level assembly language that compiles to binary microcode, which executes natively on NVIDIA GPU hardware.</li>
</ul></li>
</ul>
</section>
<section id="code-example-vector-addition" class="level3">
<h3 class="anchored" data-anchor-id="code-example-vector-addition">Code Example: Vector addition</h3>
<ul>
<li><p>main concept: replace loop with a grid of threads</p></li>
<li><p>easily parallelizable</p>
<ul>
<li>all additions can be computed independently</li>
</ul></li>
<li><p>Naive GPU vector addition</p>
<ol type="1">
<li>Allocate device memory for vectors</li>
<li>Transfer inputs from host to device</li>
<li>Launch kernel and perform addition operations</li>
<li>Copy outputs from device to host</li>
<li>Free device memory</li>
</ol>
<ul>
<li>The ratio of data transfer vs compute is not very good
<ul>
<li>Normally keep data on the GPU as long as possible to asynchronously schedule many kernel launches</li>
</ul></li>
</ul></li>
<li><p>Figure from slide 13:</p>
<ul>
<li>One thread per vector element</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-mode-notes/lecture-002/images/slide-13-figure.png" class="img-fluid figure-img"></p>
<figcaption>slide-13-figure</figcaption>
</figure>
</div></li>
<li><p>Data sizes might not be perfectly divisible by block sizes</p>
<ul>
<li>always check bounds</li>
</ul></li>
<li><p>Prevent threads of boundary block to read/write outside allocated memory</p></li>
<li><div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/**</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@brief</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> CUDA kernel to compute the element-wise sum of two vectors.</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * This kernel function performs the pair-wise addition of elements from</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * vectors A and B, and stores the result in vector C.</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@param</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="cv" style="color: #5E5E5E;
background-color: null;
font-style: italic;">A</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> Pointer to the first input vector (array) in device memory.</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@param</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="cv" style="color: #5E5E5E;
background-color: null;
font-style: italic;">B</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> Pointer to the second input vector (array) in device memory.</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@param</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="cv" style="color: #5E5E5E;
background-color: null;
font-style: italic;">C</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> Pointer to the output vector (array) in device memory.</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@param</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="cv" style="color: #5E5E5E;
background-color: null;
font-style: italic;">n</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> The number of elements in the vectors.</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> */</span></span>
<span id="cb5-12">__global__</span>
<span id="cb5-13"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> vecAddKernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the unique index for the thread</span></span>
<span id="cb5-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-16"></span>
<span id="cb5-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the index is within the bounds of the arrays</span></span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Perform the element-wise addition</span></span>
<span id="cb5-20">        C<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> B<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb5-21">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-22"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></li>
</ul>
</section>
<section id="code-example-kernel-to-convert-an-rgb-image-to-grayscale" class="level3">
<h3 class="anchored" data-anchor-id="code-example-kernel-to-convert-an-rgb-image-to-grayscale">Code Example: Kernel to convert an RGB image to grayscale</h3>
<ul>
<li><p>Each RGB pixel can be converted individually</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?%0ALuminance%20=%20r%5Ccdot%7B0.21%7D%20+%20g%5Ccdot%7B0.72%7D%20+%20b%5Ccdot%7B0.07%7D%0A"></p></li>
<li><p>Simple weighted sum</p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-mode-notes/lecture-002/images/book-figure-2-2.png" class="img-fluid figure-img"></p>
<figcaption>Programming Massively Parallel Processors - Figure 2.2</figcaption>
</figure>
</div>
</section>
</section>
<section id="multidimensional-grids-and-data" class="level2">
<h2 class="anchored" data-anchor-id="multidimensional-grids-and-data">Multidimensional Grids and Data</h2>
<ul>
<li>Timestamp: <a href="https://youtu.be/NQ-0D5Ti2dc?si=k2a0vvryolFT8AsZ&amp;t=1495">24:55</a></li>
</ul>
<section id="cuda-grid" class="level3">
<h3 class="anchored" data-anchor-id="cuda-grid">CUDA Grid</h3>
<ul>
<li><p>2-level hierarchy</p>
<ul>
<li>Blocks and threads</li>
</ul></li>
<li><p>Idea: Map threads to multi-dimensional data (e.g., an image)</p></li>
<li><p>All threads in a grid execute the same kernel</p></li>
<li><p>Threads in the same block can access the same shared memory</p></li>
<li><p>Max block size: 1024</p></li>
<li><p>Built-in 3D coordinates of a thread</p>
<ul>
<li><code>blockIdx</code> and <code>threadIdx</code> identify which portion of the data to process</li>
</ul></li>
<li><p>shape of grid &amp; blocks</p>
<ul>
<li><code>gridDim</code>: number of blocks in the grid</li>
<li><code>blockDim</code>: number of threads in a block</li>
</ul></li>
<li><p>A multidimensional example of CUDA grid organization:</p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-mode-notes/lecture-002/images/book-figure-3-1.png" class="img-fluid figure-img" style="width:67.0%"></p>
<figcaption>Programming Massively Parallel Processors - Figure 3.1</figcaption>
</figure>
</div>
<ul>
<li><p>Grid can be different for each kernel launch</p>
<ul>
<li>Normally dependent on data shapes</li>
</ul></li>
<li><p>Typical grids contain thousands to millions of threads</p></li>
<li><p>Simple Strategy</p>
<ul>
<li>One thread per output element
<ul>
<li>One thread per pixel</li>
<li>One thread per tensor element</li>
</ul></li>
</ul></li>
<li><p>Threads can be scheduled in any order</p>
<ul>
<li>A larger thread index does not necessarily indicate the thread is running after a thread with a lower index</li>
</ul></li>
<li><p>Can use fewer than 3 dims (set others to 1)</p>
<ul>
<li><p>1D for sequences, 2D for images, etc.</p></li>
<li><div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb6-1">  dim3 grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-2">  dim3 block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb6-3">  kernelFunction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;&lt;</span>grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;(..);</span></span>
<span id="cb6-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Number of threads: 128*32 = 4096</span></span></code></pre></div></li>
</ul></li>
</ul>
</section>
<section id="built-in-variables" class="level3">
<h3 class="anchored" data-anchor-id="built-in-variables">Built-in Variables</h3>
<ul>
<li><p>Built-in variables inside kernels:</p>
<ul>
<li><div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb7-1">  blockIdx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// dim3 block coordinate</span></span>
<span id="cb7-2">  threadIdx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// dim3 thread coordinate</span></span>
<span id="cb7-3">  blockDim <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of threads in a block</span></span>
<span id="cb7-4">  gridDim <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// number of blocks in a grid</span></span></code></pre></div></li>
<li><code>blockDim</code> and <code>gridDim</code> have the same values in all threads</li>
</ul></li>
</ul>
</section>
<section id="nd-arrays-in-memory" class="level3">
<h3 class="anchored" data-anchor-id="nd-arrays-in-memory">nd-Arrays in Memory</h3>
<ul>
<li>memory of multi-dim arrays under the hood is a flat 1-dimensional array</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-mode-notes/lecture-002/images/slide-28-actual-layout.png" class="img-fluid figure-img"></p>
<figcaption>Slide 28: Actual layout in memory</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-mode-notes/lecture-002/images/slide-28-logical-layout.png" class="img-fluid figure-img"></p>
<figcaption>Slide 28: Logical view of data</figcaption>
</figure>
</div>
<ul>
<li><p>2d array can be linearized in different ways</p>
<ul>
<li><pre class="text"><code>  A B C D E F G H I</code></pre></li>
<li><p>row-major</p>
<ul>
<li><pre class="text"><code>  A B C
  D E F
  G H I</code></pre></li>
<li>Most common</li>
</ul></li>
<li><p>column-major</p>
<ul>
<li><pre class="text"><code>  A D G
  B E H
  C F I</code></pre></li>
<li>Used in fortran</li>
</ul></li>
</ul></li>
<li><p>PyTorch tensors and numpy arrays use strides to specify how elements are laid out in memory</p>
<ul>
<li>For a <img src="https://latex.codecogs.com/png.latex?4%20%5Ctimes%204"> matrix, the stride would be <img src="https://latex.codecogs.com/png.latex?4"> to get to the next row.
<ul>
<li>After four elements, you end up in the next row.</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="code-example-image-blur" class="level3">
<h3 class="anchored" data-anchor-id="code-example-image-blur">Code Example: Image Blur</h3>
<ul>
<li><p>mean filter example <code>blurKernel</code>:</p>
<ul>
<li><div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// CUDA kernel to perform a simple box blur on an input image</span></span>
<span id="cb11-2">__global__</span>
<span id="cb11-3"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> blurKernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>in<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the column and row index of the pixel this thread is processing</span></span>
<span id="cb11-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb11-7"></span>
<span id="cb11-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ensure the thread is within the image bounds</span></span>
<span id="cb11-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-10">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pixVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Variable to accumulate the sum of pixel values</span></span>
<span id="cb11-11">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Variable to count the number of valid pixels in the blur region</span></span>
<span id="cb11-12"></span>
<span id="cb11-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Loop over the surrounding pixels within the blur region</span></span>
<span id="cb11-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> blurRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>BLUR_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> blurRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> BLUR_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>blurRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-15">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> blurCol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>BLUR_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> blurCol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> BLUR_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>blurCol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-16">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> curRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blurRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Current row index in the blur region</span></span>
<span id="cb11-17">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> curCol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blurCol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Current column index in the blur region</span></span>
<span id="cb11-18"></span>
<span id="cb11-19">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the current pixel is within the image bounds</span></span>
<span id="cb11-20">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>curRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> curRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> curCol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> curCol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-21">                    pixVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> in<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>curRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curCol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Accumulate the pixel value</span></span>
<span id="cb11-22">                    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>pixels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Increment the count of valid pixels</span></span>
<span id="cb11-23">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-24">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-25">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-26"></span>
<span id="cb11-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the average pixel value and store it in the output image</span></span>
<span id="cb11-28">        out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span>pixVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> pixels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb11-29">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-30"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></li>
</ul></li>
<li><p>each thread writes one output element, read multiple values</p></li>
<li><p>single plane in book, can be easily extended to multi-channel</p></li>
<li><p>shows row-major pixel memory access (in &amp; out pointers)</p></li>
<li><p>track of how many pixel values are summed</p></li>
<li><p>Handling boundary conditions for pixels near the edges of the image:</p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-mode-notes/lecture-002/images/book-figure-3-9.png" class="img-fluid figure-img"></p>
<figcaption>Programming Massively Parallel Processors - Figure 3.9</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb12-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb12-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.cpp_extension <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_inline</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled" title="CUDA Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
CUDA Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre class="text"><code></code></pre>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb14-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;torch/types.h&gt;</span></span>
<span id="cb14-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda.h&gt;</span></span>
<span id="cb14-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda_runtime.h&gt;</span></span>
<span id="cb14-4"></span>
<span id="cb14-5"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;c10/cuda/CUDAException.h&gt;</span></span>
<span id="cb14-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;c10/cuda/CUDAStream.h&gt;</span></span>
<span id="cb14-7"></span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// CUDA kernel for applying a mean filter to an image</span></span>
<span id="cb14-10">__global__</span>
<span id="cb14-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> mean_filter_kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the column, row, and channel this thread is responsible for</span></span>
<span id="cb14-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> channel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>z<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-16"></span>
<span id="cb14-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Base offset for the current channel</span></span>
<span id="cb14-18">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> baseOffset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> channel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-19"></span>
<span id="cb14-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ensure the thread is within image bounds</span></span>
<span id="cb14-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-22">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pixVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Accumulator for the pixel values</span></span>
<span id="cb14-23">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Counter for the number of pixels summed</span></span>
<span id="cb14-24"></span>
<span id="cb14-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Iterate over the kernel window</span></span>
<span id="cb14-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> blurRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> blurRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> blurRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-27">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> blurCol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> blurCol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> blurCol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-28">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> curRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blurRow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-29">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> curCol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> blurCol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-30"></span>
<span id="cb14-31">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check if the current position is within image bounds</span></span>
<span id="cb14-32">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>curRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> curRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> curCol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> curCol <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-33">                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Accumulate pixel value and count the number of pixels</span></span>
<span id="cb14-34">                    pixVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>baseOffset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curRow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> curCol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb14-35">                    pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-36">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-37">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-38">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-39"></span>
<span id="cb14-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Write the averaged value to the output image</span></span>
<span id="cb14-41">        output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>baseOffset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)(</span>pixVal <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> pixels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-42">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-43"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-44"></span>
<span id="cb14-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Helper function for ceiling unsigned integer division</span></span>
<span id="cb14-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inline</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> cdiv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-48"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-49"></span>
<span id="cb14-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Main function to apply the mean filter to an image using CUDA</span></span>
<span id="cb14-51">torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Tensor mean_filter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Tensor image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> radius<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb14-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ensure the input image is on the GPU, is of byte type, and radius is positive</span></span>
<span id="cb14-53">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span>type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>kCUDA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-54">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>kByte<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-55">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>radius <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-56"></span>
<span id="cb14-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Get image dimensions and number of channels</span></span>
<span id="cb14-58">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-59">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-61"></span>
<span id="cb14-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create an empty tensor to store the result</span></span>
<span id="cb14-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>empty_like<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-64"></span>
<span id="cb14-65">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define the number of threads per block and number of blocks</span></span>
<span id="cb14-66">    dim3 threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-67">    dim3 number_of_blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span></span>
<span id="cb14-68">        cdiv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span></span>
<span id="cb14-69">        cdiv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb14-70">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-71"></span>
<span id="cb14-72">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Launch the CUDA kernel</span></span>
<span id="cb14-73">    mean_filter_kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;&lt;</span>number_of_blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>getCurrentCUDAStream<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()&gt;&gt;&gt;(</span></span>
<span id="cb14-74">        result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(),</span></span>
<span id="cb14-75">        image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(),</span></span>
<span id="cb14-76">        width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-77">        height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb14-78">        radius</span>
<span id="cb14-79">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb14-80"></span>
<span id="cb14-81">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check for any CUDA errors (calls cudaGetLastError())</span></span>
<span id="cb14-82">    C10_CUDA_KERNEL_LAUNCH_CHECK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb14-83"></span>
<span id="cb14-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the filtered image</span></span>
<span id="cb14-85">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb14-86"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the CUDA kernel and C++ wrapper</span></span>
<span id="cb15-2">cuda_source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb15-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#include &lt;c10/cuda/CUDAException.h&gt;</span></span>
<span id="cb15-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#include &lt;c10/cuda/CUDAStream.h&gt;</span></span>
<span id="cb15-5"></span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// CUDA kernel for applying a mean filter to an image</span></span>
<span id="cb15-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">__global__</span></span>
<span id="cb15-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">void mean_filter_kernel(unsigned char* output, unsigned char* input, int width, int height, int radius) {</span></span>
<span id="cb15-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Calculate the column, row, and channel this thread is responsible for</span></span>
<span id="cb15-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    int col = blockIdx.x * blockDim.x + threadIdx.x;</span></span>
<span id="cb15-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    int row = blockIdx.y * blockDim.y + threadIdx.y;</span></span>
<span id="cb15-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    int channel = threadIdx.z;</span></span>
<span id="cb15-14"></span>
<span id="cb15-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Base offset for the current channel</span></span>
<span id="cb15-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    int baseOffset = channel * height * width;</span></span>
<span id="cb15-17"></span>
<span id="cb15-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Ensure the thread is within image bounds</span></span>
<span id="cb15-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    if (col &lt; width &amp;&amp; row &lt; height) {</span></span>
<span id="cb15-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        int pixVal = 0; // Accumulator for the pixel values</span></span>
<span id="cb15-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        int pixels = 0; // Counter for the number of pixels summed</span></span>
<span id="cb15-22"></span>
<span id="cb15-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        // Iterate over the kernel window</span></span>
<span id="cb15-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        for (int blurRow = -radius; blurRow &lt;= radius; blurRow += 1) {</span></span>
<span id="cb15-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            for (int blurCol = -radius; blurCol &lt;= radius; blurCol += 1) {</span></span>
<span id="cb15-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                int curRow = row + blurRow;</span></span>
<span id="cb15-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                int curCol = col + blurCol;</span></span>
<span id="cb15-28"></span>
<span id="cb15-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                // Check if the current position is within image bounds</span></span>
<span id="cb15-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                if (curRow &gt;= 0 &amp;&amp; curRow &lt; height &amp;&amp; curCol &gt;= 0 &amp;&amp; curCol &lt; width) {</span></span>
<span id="cb15-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                    // Accumulate pixel value and count the number of pixels</span></span>
<span id="cb15-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                    pixVal += input[baseOffset + curRow * width + curCol];</span></span>
<span id="cb15-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                    pixels += 1;</span></span>
<span id="cb15-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                }</span></span>
<span id="cb15-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            }</span></span>
<span id="cb15-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        }</span></span>
<span id="cb15-37"></span>
<span id="cb15-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        // Write the averaged value to the output image</span></span>
<span id="cb15-39"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        output[baseOffset + row * width + col] = (unsigned char)(pixVal / pixels);</span></span>
<span id="cb15-40"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    }</span></span>
<span id="cb15-41"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-42"></span>
<span id="cb15-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// Helper function for ceiling unsigned integer division</span></span>
<span id="cb15-44"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">inline unsigned int cdiv(unsigned int a, unsigned int b) {</span></span>
<span id="cb15-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    return (a + b - 1) / b;</span></span>
<span id="cb15-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-47"></span>
<span id="cb15-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// Main function to apply the mean filter to an image using CUDA</span></span>
<span id="cb15-49"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">torch::Tensor mean_filter(torch::Tensor image, int radius) {</span></span>
<span id="cb15-50"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Ensure the input image is on the GPU, is of byte type, and radius is positive</span></span>
<span id="cb15-51"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    assert(image.device().type() == torch::kCUDA);</span></span>
<span id="cb15-52"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    assert(image.dtype() == torch::kByte);</span></span>
<span id="cb15-53"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    assert(radius &gt; 0);</span></span>
<span id="cb15-54"></span>
<span id="cb15-55"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Get image dimensions and number of channels</span></span>
<span id="cb15-56"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    const auto channels = image.size(0);</span></span>
<span id="cb15-57"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    const auto height = image.size(1);</span></span>
<span id="cb15-58"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    const auto width = image.size(2);</span></span>
<span id="cb15-59"></span>
<span id="cb15-60"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Create an empty tensor to store the result</span></span>
<span id="cb15-61"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    auto result = torch::empty_like(image);</span></span>
<span id="cb15-62"></span>
<span id="cb15-63"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Define the number of threads per block and number of blocks</span></span>
<span id="cb15-64"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    dim3 threads_per_block(16, 16, channels);</span></span>
<span id="cb15-65"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    dim3 number_of_blocks(</span></span>
<span id="cb15-66"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        cdiv(width, threads_per_block.x),</span></span>
<span id="cb15-67"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        cdiv(height, threads_per_block.y)</span></span>
<span id="cb15-68"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    );</span></span>
<span id="cb15-69"></span>
<span id="cb15-70"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Launch the CUDA kernel</span></span>
<span id="cb15-71"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    mean_filter_kernel&lt;&lt;&lt;number_of_blocks, threads_per_block, 0, torch::cuda::getCurrentCUDAStream()&gt;&gt;&gt;(</span></span>
<span id="cb15-72"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        result.data_ptr&lt;unsigned char&gt;(),</span></span>
<span id="cb15-73"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        image.data_ptr&lt;unsigned char&gt;(),</span></span>
<span id="cb15-74"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        width,</span></span>
<span id="cb15-75"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        height,</span></span>
<span id="cb15-76"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        radius</span></span>
<span id="cb15-77"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    );</span></span>
<span id="cb15-78"></span>
<span id="cb15-79"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Check for any CUDA errors (calls cudaGetLastError())</span></span>
<span id="cb15-80"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    C10_CUDA_KERNEL_LAUNCH_CHECK();</span></span>
<span id="cb15-81"></span>
<span id="cb15-82"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Return the filtered image</span></span>
<span id="cb15-83"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    return result;</span></span>
<span id="cb15-84"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-85"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb15-86"></span>
<span id="cb15-87">cpp_source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torch::Tensor mean_filter(torch::Tensor image, int radius);"</span></span></code></pre></div>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">build_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./load_inline_cuda'</span>)</span>
<span id="cb16-2">build_dir.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the defined C++/CUDA extension as a PyTorch extension.</span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This enables using the `mean_filter` function as if it were a native PyTorch function.</span></span>
<span id="cb17-3">mean_filter_extension <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_inline(</span>
<span id="cb17-4">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean_filter_extension'</span>,   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unique name for the extension</span></span>
<span id="cb17-5">    cpp_sources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cpp_source,           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># C++ source code containing the CPU implementation</span></span>
<span id="cb17-6">    cuda_sources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cuda_source,         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CUDA source code for GPU implementation</span></span>
<span id="cb17-7">    functions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean_filter'</span>],      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of functions to expose to Python</span></span>
<span id="cb17-8">    with_cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable CUDA support</span></span>
<span id="cb17-9">    extra_cuda_cflags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-O2"</span>],        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compiler flags for optimizing the CUDA code</span></span>
<span id="cb17-10">    build_directory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(build_dir),   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Directory to store the compiled extension</span></span>
<span id="cb17-11">)</span></code></pre></div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the path to the image file</span></span>
<span id="cb18-2">img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./Grace_Hopper.jpg'</span>)</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image using PIL (Python Imaging Library)</span></span>
<span id="cb18-5">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_path)</span>
<span id="cb18-6">test_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-mode-notes/lecture-002/images/output_6_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a NumPy array, then to a PyTorch tensor</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rearrange the tensor dimensions from (H, W, C) to (C, H, W) and move it to GPU</span></span>
<span id="cb19-3">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.array(test_img)).permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).contiguous().cuda()</span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the mean filter to the tensor using a kernel size of 8</span></span>
<span id="cb19-6">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_filter_extension.mean_filter(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span></code></pre></div>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the filtered tensor back to a NumPy array, rearrange dimensions back to (H, W, C)</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and create an image from the array using PIL</span></span>
<span id="cb20-3">output_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.fromarray(y.cpu().permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).numpy())</span>
<span id="cb20-4">output_img</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-mode-notes/lecture-002/images/output_8_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="matrix-multiplication" class="level3">
<h3 class="anchored" data-anchor-id="matrix-multiplication">Matrix Multiplication</h3>
<ul>
<li><p>Staple of science, engineering, and deep learning</p></li>
<li><p>Computer inner-products of rows and columns</p></li>
<li><p>Strategy: 1 thread per output matrix element</p></li>
<li><p>Example: Multiplying square matrices (rows == cols)</p>
<ul>
<li><div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/**</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@brief</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> Matrix multiplication kernel function.</span></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * This kernel performs the multiplication of two matrices M and N, storing the result in matrix P.</span></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> *</span></span>
<span id="cb21-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@param</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="cv" style="color: #5E5E5E;
background-color: null;
font-style: italic;">M</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> Pointer to the first input matrix.</span></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@param</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="cv" style="color: #5E5E5E;
background-color: null;
font-style: italic;">N</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> Pointer to the second input matrix.</span></span>
<span id="cb21-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@param</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="cv" style="color: #5E5E5E;
background-color: null;
font-style: italic;">P</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> Pointer to the output matrix.</span></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> * </span><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@param</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> </span><span class="cv" style="color: #5E5E5E;
background-color: null;
font-style: italic;">Width</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> The width of the input and output matrices (assuming square matrices).</span></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> */</span></span>
<span id="cb21-11">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> MatrixMulKernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> P<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> Width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the row index of the P matrix element and M matrix element</span></span>
<span id="cb21-13">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the column index of the P matrix element and N matrix element</span></span>
<span id="cb21-15">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-16"></span>
<span id="cb21-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ensure that row and column indices are within bounds</span></span>
<span id="cb21-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> Width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> Width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-19">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span> Pvalue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Initialize the output value for element P[row][col]</span></span>
<span id="cb21-20"></span>
<span id="cb21-21">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Perform the dot product of the row of M and column of N</span></span>
<span id="cb21-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> Width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">++</span>k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-23">            Pvalue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> M<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb21-24">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-25"></span>
<span id="cb21-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Store the result in the P matrix</span></span>
<span id="cb21-27">        P<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pvalue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb21-28">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></li>
</ul></li>
<li><p>Matrix multiplication using multiple blocks by tiling P:</p></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-mode-notes/lecture-002/images/book-figure-3-10.png" class="img-fluid figure-img" style="width:85.0%"></p>
<figcaption>Programming Massively Parallel Processors - Figure 3.10</figcaption>
</figure>
</div>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>cuda</category>
  <category>pytorch</category>
  <guid>christianjmills.com/posts/cuda-mode-notes/lecture-002/</guid>
  <pubDate>Thu, 06 Jun 2024 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Fine-Tuning Workshop 1: When and Why to Fine-Tune an LLM</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/mastering-llms-course-notes/workshop-001/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/mastering-llms-course-notes.html"><strong>Mastering LLMs Course Notes</strong></a>: My notes from the course <strong>Mastering LLMs: A Conference For Developers &amp; Data Scientists</strong> by <strong>Hamel Husain</strong> and <strong>Dan Becker</strong>.</li>
</ul>
</div>
</div>
<ul>
<li>Key Takeaways</li>
<li>Course Overview</li>
<li>When to Fine-Tune</li>
<li>Understanding Fine-Tuning</li>
<li>Case Study: Logistics Company Regression Problem</li>
<li>Case Study: Honeycomb Natural Language Query Assistant</li>
<li>Q&amp;A Session #1</li>
<li>Chatbots</li>
<li>Preference Optimization</li>
<li>Evaluating Use Cases for Fine-Tuning</li>
<li>Q&amp;A Session #2</li>
</ul>
<section id="key-takeaways" class="level2">
<h2 class="anchored" data-anchor-id="key-takeaways">Key Takeaways</h2>
<ul>
<li><strong>Start simple:</strong> Focus on prompt engineering and using pre-trained models like those from OpenAI before jumping into the complexity of fine-tuning.</li>
<li><strong>Fine-tune strategically:</strong> Consider fine-tuning when you need bespoke behavior, have unique data, or require data privacy.</li>
<li><strong>Templating is crucial:</strong> Pay close attention to consistency in templating between training and inference to avoid unexpected model behavior.</li>
<li><strong>Evaluate rigorously:</strong> Use domain-specific evaluations and metrics to measure model performance and guide fine-tuning decisions.</li>
<li><strong>Preference optimization shows promise:</strong> Techniques like Direct Preference Optimization (DPO) can train models to outperform even human experts by learning from comparative feedback.</li>
</ul>
</section>
<section id="course-overview" class="level2">
<h2 class="anchored" data-anchor-id="course-overview">Course Overview</h2>
<ul>
<li><strong>Focus:</strong> Actionable insights and practical guidance from real-world experience in deploying LLMs for various business needs.</li>
<li><strong>Philosophy:</strong>
<ul>
<li>Prioritize practical value over project ideas that only sound cool.</li>
<li>Start with simple, straightforward solutions and progressively refine them.</li>
<li>Ship prototypes quickly for rapid iteration and feedback.</li>
</ul></li>
<li><strong>Workflow:</strong>
<ul>
<li>Start with prompt engineering before considering fine-tuning.
<ul>
<li>Prompt engineering provides much faster iteration and experimentation.</li>
<li>The results from prompt engineering will help inform whether fine-tuning is necessary.</li>
</ul></li>
<li>Iterate quickly with simple prototypes.
<ul>
<li>Build and show people concrete things, so they can provide feedback.</li>
<li>Simple prototypes almost always work well enough to start making progress.</li>
</ul></li>
<li>Incorporate evaluations (Evals) to measure and improve model performance.
<ul>
<li>Blog Post: <a href="https://hamel.dev/blog/posts/evals/">Your AI Product Needs Evals</a></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="when-to-fine-tune" class="level2">
<h2 class="anchored" data-anchor-id="when-to-fine-tune">When to Fine-Tune</h2>
<ul>
<li><strong>Don’t fine-tune for generic behavior:</strong>
<ul>
<li>Use existing powerful models like OpenAI’s GPT or Anthropic’s models via API for tasks where they excel.</li>
<li>Increasingly larger context windows allows us to fit more examples to fit into a prompt.</li>
<li>You should have some minimal evaluation system that you hit a wall on with prompting alone, before considering fine-tuning.</li>
</ul></li>
<li><strong>Do fine-tune for bespoke behavior:</strong>
<ul>
<li>When you need specific outputs or behavior not achievable through prompt engineering alone.</li>
<li>When you have a narrow, well-defined problem domain and sufficient data for training.
<ul>
<li>Fine-tuning requires examples of desired inputs and outputs for supervised learning.</li>
</ul></li>
<li>When data privacy and model ownership are critical.</li>
<li>When you need improved quality and lower latency compared to large pre-trained models.</li>
<li>Requires proper operational setup and significant value use cases.</li>
</ul></li>
<li><strong>Iteration Speed &amp; Complexity:</strong> Fine-tuning involves slower iteration cycles and operational complexities compared to using pre-trained models.</li>
</ul>
</section>
<section id="understanding-fine-tuning" class="level2">
<h2 class="anchored" data-anchor-id="understanding-fine-tuning">Understanding Fine-Tuning</h2>
<ul>
<li><strong>Pre-training:</strong> Training LLMs on massive text datasets to learn language fundamentals and next-token prediction.</li>
<li><strong>Building on Pre-trained Models:</strong>
<ul>
<li>Fine-tuning adapts pre-trained models with vast general language knowledge to excel in specific domains.</li>
<li>Fine-tuning harnesses the next-token prediction mechanism used in pre-training to generate desired outputs.</li>
</ul></li>
<li><strong>Importance of Input-Output Examples</strong>
<ul>
<li>Fine-tuning requires clear examples of desired inputs and outputs.</li>
<li>Documentation alone isn’t sufficient; practical examples are necessary.</li>
<li>Mixed quality of training data (e.g., varied quality of human-written summaries) can lead to mediocre model performance.</li>
</ul></li>
<li><strong>Templating for Inference Control:</strong>
<ul>
<li>Guides the model to produce specific outputs by short-circuiting pre-trained behavior.</li>
<li>Inputs and outputs are placed within a consistent template to guide the model during inference.</li>
<li>Crucial for aligning training and inference.</li>
<li>Defines the structure of input and output text to guide the model.<br>
</li>
<li>Inconsistencies in templating are a major source of errors.
<ul>
<li>Templates must be identical between training and inference.</li>
<li>There are many kinds of templates and it is easy to misinterpret them.</li>
<li>Many tools try to abstract away and automate building templates and something often goes wrong.</li>
<li>Blog Post: <a href="https://hamel.dev/notes/llm/finetuning/05_tokenizer_gotchas.html">Tokenization Gotchas</a></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="case-study-logistics-company-regression-problem" class="level2">
<h2 class="anchored" data-anchor-id="case-study-logistics-company-regression-problem">Case Study: Logistics Company Regression Problem</h2>
<section id="overview" class="level3">
<h3 class="anchored" data-anchor-id="overview">Overview</h3>
<ul>
<li><strong>Task:</strong> Logistics company (e.g., UPS, DHL, USPS) needed to predict item value based on an 80-character description.</li>
<li><strong>Takeaways:</strong> Highlights the importance of understanding and preparing the training data, the limitations of fine-tuning for specific regression tasks, and the practical issues encountered with this approach.</li>
</ul>
</section>
<section id="traditional-nlp-and-ml-approaches" class="level3">
<h3 class="anchored" data-anchor-id="traditional-nlp-and-ml-approaches">Traditional NLP and ML Approaches</h3>
<ul>
<li><strong>Classical Techniques:</strong> Initial consideration to use traditional NLP and ML methods.</li>
<li><strong>Bag of Words Representation:</strong> Highlighted issue where models fail to recognize unseen words or infrequent words due to limited data.</li>
</ul>
</section>
<section id="fine-tuning-large-language-models" class="level3">
<h3 class="anchored" data-anchor-id="fine-tuning-large-language-models">Fine-Tuning Large Language Models</h3>
<ul>
<li><strong>Initial Approach:</strong> Attempted to use a large language model (LLM) with and without fine-tuning for regression.</li>
<li><strong>Outcome:</strong> The model learned patterns in the data that were not ideal for the task.</li>
</ul>
</section>
<section id="key-observations-from-fine-tuning" class="level3">
<h3 class="anchored" data-anchor-id="key-observations-from-fine-tuning">Key Observations from Fine-Tuning</h3>
<ul>
<li><strong>Round Numbers:</strong> The model tended to predict round numbers frequently because past entries often used round numbers.</li>
<li><strong>Mismatch in Values:</strong> Conventional ML models can predict approximate values (e.g., $97 vs.&nbsp;$100), which is often more useful than exact but less frequent round number predictions by the LLM.</li>
<li><strong>Training Data Limitations:</strong> Training data often contained inaccuracies, such as undervalued entries to avoid insurance costs.</li>
</ul>
</section>
<section id="data-representation-and-preprocessing" class="level3">
<h3 class="anchored" data-anchor-id="data-representation-and-preprocessing">Data Representation and Preprocessing</h3>
<ul>
<li><strong>Description Complexity:</strong> Corporate descriptions were often abbreviated or used acronyms, making them hard to interpret both for humans and models.</li>
<li><strong>Pre-trained Model Limitations:</strong> Pre-trained models struggled with unknown abbreviations or context-specific terms not encountered during pre-training.</li>
</ul>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<ul>
<li><strong>Unsuccessful Case Study:</strong> The fine-tuning approach was largely unsuccessful due to predictable data issues.</li>
</ul>
</section>
<section id="insights-and-recommendations" class="level3">
<h3 class="anchored" data-anchor-id="insights-and-recommendations">Insights and Recommendations</h3>
<ul>
<li><strong>Data Quality:</strong> Emphasized the importance of high-quality, representative training data for desired future behavior.</li>
<li><strong>Raw Data Examination:</strong> Stressed the need to carefully inspect raw data, a common yet frequently overlooked step in data science.</li>
<li><strong>Practicality of ML Solutions:</strong> For this case, traditional ML and NLP techniques did not provide satisfactory results, leading to the retention of the manual workflow.</li>
</ul>
</section>
</section>
<section id="case-study-honeycomb-natural-language-query-assistant" class="level2">
<h2 class="anchored" data-anchor-id="case-study-honeycomb-natural-language-query-assistant">Case Study: Honeycomb Natural Language Query Assistant</h2>
<section id="overview-1" class="level3">
<h3 class="anchored" data-anchor-id="overview-1">Overview</h3>
<ul>
<li><p><strong>Task:</strong> Building a system for Honeycomb, an observability platform that logs telemetry data about software applications, that translates natural language queries into the platform’s domain-specific query language.</p></li>
<li><p><strong>Takeaways:</strong> Highlights the importance of fine-tuning in addressing domain-specific challenges, improving model performance, and meeting business requirements such as data privacy and operational efficiency.</p></li>
</ul>
</section>
<section id="honeycomb-platform-overview" class="level3">
<h3 class="anchored" data-anchor-id="honeycomb-platform-overview">Honeycomb Platform Overview</h3>
<ul>
<li>Honeycomb is an observability platform.</li>
<li>Logs telemetry data like page load times, database response times, and application bottlenecks.</li>
<li>Users query this data using a domain-specific query language.</li>
</ul>
</section>
<section id="initial-solution-natural-language-query-assistant" class="level3">
<h3 class="anchored" data-anchor-id="initial-solution-natural-language-query-assistant">Initial Solution: Natural Language Query Assistant</h3>
<ul>
<li><strong>Problem:</strong> Users must learn a specific query language to use Honeycomb effectively.</li>
<li><strong>Solution:</strong> Create a natural language query assistant that translates user queries into Honeycomb’s query language using large language models (LLMs).</li>
<li><strong>Initial Approach:</strong>
<ul>
<li>User provides a query and schema (list of column names from the user’s data).</li>
<li>Prompt assembled with user input and schema sent to GPT-3/GPT-3.5.</li>
<li>Generated a Honeycomb query based on the prompt.</li>
</ul></li>
</ul>
</section>
<section id="prompt-structure" class="level3">
<h3 class="anchored" data-anchor-id="prompt-structure">Prompt Structure</h3>
<ol type="1">
<li><strong>System Message:</strong>
<ul>
<li>“Honeycomb AI suggests queries based on user input.”</li>
</ul></li>
<li><strong>Columns Section:</strong>
<ul>
<li>Schema from the user’s data inserted here.</li>
</ul></li>
<li><strong>Query Spec:</strong>
<ul>
<li>Simplified programming manual for Honeycomb’s query language.</li>
<li>Contains operations and comments on their usage.</li>
</ul></li>
<li><strong>Tips Section:</strong>
<ul>
<li>Guidelines to handle different failure modes and edge cases.</li>
<li>Example: Handling time ranges correctly.</li>
</ul></li>
<li><strong>Few-Shot Examples:</strong>
<ul>
<li>Examples of natural language queries and corresponding Honeycomb query outputs.</li>
</ul></li>
</ol>
</section>
<section id="challenges-with-initial-solution" class="level3">
<h3 class="anchored" data-anchor-id="challenges-with-initial-solution">Challenges with Initial Solution</h3>
<ul>
<li><strong>Expressing Query Language Nuances:</strong>
<ul>
<li>Hard to capture all idioms and best practices of the query language.</li>
<li>GPT-3.5 lacks extensive exposure to Honeycomb’s specific query language.</li>
</ul></li>
<li><strong>Tips Section Complexity:</strong>
<ul>
<li>Tips devolved into numerous if-then statements.</li>
<li>Difficult for the language model to follow multiple conditionals.</li>
</ul></li>
<li><strong>Few-Shot Examples Limitations:</strong>
<ul>
<li>Hard to cover all edge cases.</li>
<li>Dynamic few-shot examples could help but were not implemented.</li>
</ul></li>
</ul>
</section>
<section id="business-challenges" class="level3">
<h3 class="anchored" data-anchor-id="business-challenges">Business Challenges</h3>
<ul>
<li><strong>Data Privacy:</strong>
<ul>
<li>Need permission to send customer data to OpenAI.</li>
<li>Preference to keep data within a trusted boundary.</li>
</ul></li>
<li><strong>Quality vs.&nbsp;Latency Tradeoff:</strong>
<ul>
<li>GPT-4 offered higher quality but was too slow and expensive.</li>
<li>Goal: Train a smaller, faster model with comparable quality.</li>
</ul></li>
<li><strong>Narrow Domain Problem:</strong>
<ul>
<li>Honeycomb queries are a focused, narrow domain ideal for fine-tuning.</li>
</ul></li>
<li><strong>Impracticality of Extensive Prompt Engineering:</strong>
<ul>
<li>Hard to manually encode all nuances of the query language.</li>
<li>Fine-tuning with many examples is more practical.</li>
</ul></li>
</ul>
</section>
<section id="fine-tuning-solution" class="level3">
<h3 class="anchored" data-anchor-id="fine-tuning-solution">Fine-Tuning Solution</h3>
<ul>
<li><strong>Advantages:</strong>
<ul>
<li>Faster, more compliant with data privacy needs.</li>
<li>Higher quality responses compared to GPT-3.5.</li>
</ul></li>
<li><strong>Implementation:</strong>
<ul>
<li>Fine-tuned a model using synthetic data provided by Honeycomb.</li>
<li>The process and challenges encountered during fine-tuning will be simulated in the course.</li>
</ul></li>
</ul>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ol type="1">
<li><strong>Implement Fine-Tuning:</strong>
<ul>
<li>Use synthetic data to replicate and improve the model.</li>
<li>Focus on capturing edge cases and nuances in the training data.</li>
</ul></li>
<li><strong>Optimize for Performance:</strong>
<ul>
<li>Balance model size and latency to ensure quick responses without sacrificing quality.</li>
</ul></li>
<li><strong>Ensure Data Privacy:</strong>
<ul>
<li>Keep data within a trusted boundary to comply with customer privacy requirements.</li>
</ul></li>
<li><strong>Regularly Update Few-Shot Examples:</strong>
<ul>
<li>Dynamically generate examples to cover new edge cases and improve model accuracy.</li>
</ul></li>
<li><strong>Monitor and Iterate:</strong>
<ul>
<li>Continuously monitor model performance and iteratively improve based on user feedback and new data.</li>
</ul></li>
</ol>
</section>
</section>
<section id="qa-session-1" class="level2">
<h2 class="anchored" data-anchor-id="qa-session-1">Q&amp;A Session #1</h2>
<p>This Q&amp;A session covers various aspects of fine-tuning machine learning models, particularly focusing on fine-tuning versus retrieval-augmented generation (RAG), function calling, and synthetic data generation. It also touches upon the use of base models versus instruction-tuned models and the appropriate amount of data for fine-tuning.</p>
<section id="fine-tuning-vs.-rag" class="level3">
<h3 class="anchored" data-anchor-id="fine-tuning-vs.-rag">Fine-Tuning vs.&nbsp;RAG</h3>
<ul>
<li><strong>Definitions</strong>:
<ul>
<li><strong>Fine-Tuning</strong>: Adjusting a pre-trained model with additional data to improve performance in specific tasks.</li>
<li><strong>RAG (Retrieval-Augmented Generation)</strong>: Combines information retrieval with generation to produce responses based on external documents.</li>
</ul></li>
<li><strong>Key Point</strong>: Fine-tuning and RAG are not mutually exclusive; they can complement each other.</li>
<li><strong>Process</strong>: Validate the need for fine-tuning by ensuring good prompts and effective RAG.</li>
</ul>
</section>
<section id="fine-tuning-for-function-calls" class="level3">
<h3 class="anchored" data-anchor-id="fine-tuning-for-function-calls">Fine-Tuning for Function Calls</h3>
<ul>
<li><strong>Capability</strong>: Models can be fine-tuned to improve at making function calls.</li>
<li><strong>Examples</strong>: Open models like LLaMA 3 and LLaMA 2 have been fine-tuned for function calling.</li>
<li><strong>Challenges</strong>: Identify and use good training data with successful function call examples while filtering out failures.</li>
</ul>
</section>
<section id="data-requirements-for-fine-tuning" class="level3">
<h3 class="anchored" data-anchor-id="data-requirements-for-fine-tuning">Data Requirements for Fine-Tuning</h3>
<ul>
<li><strong>Amount of Data</strong>: Success with as few as 100 samples, though this varies by problem scope.</li>
<li><strong>Broad Scope Problems</strong>: Require more data to cover the problem space adequately.</li>
<li><strong>Narrow Scope Problems</strong>: Can often be fine-tuned with relatively little data.</li>
</ul>
</section>
<section id="synthetic-data-generation" class="level3">
<h3 class="anchored" data-anchor-id="synthetic-data-generation">Synthetic Data Generation</h3>
<ul>
<li><strong>Importance</strong>: Helps overcome data scarcity in specific domains.</li>
<li><strong>Methods</strong>: Use powerful models to generate synthetic data, perturb existing data, and create test cases.</li>
<li><strong>Practical Example</strong>: Honeycomb example shows generating synthetic data to test and train models.</li>
</ul>
</section>
<section id="base-models-vs.-instruction-tuned-models" class="level3">
<h3 class="anchored" data-anchor-id="base-models-vs.-instruction-tuned-models">Base Models vs.&nbsp;Instruction-Tuned Models</h3>
<ul>
<li><strong>Base Models</strong>: Not fine-tuned for specific instructions, allowing more control over fine-tuning processes.</li>
<li><strong>Instruction-Tuned Models</strong>: Pre-fine-tuned to respond to instructions, useful in broader chat-based applications.</li>
<li><strong>Preference</strong>: Often uses base models to avoid template conflicts and ensure specific fine-tuning needs.</li>
</ul>
</section>
<section id="model-size-for-fine-tuning" class="level3">
<h3 class="anchored" data-anchor-id="model-size-for-fine-tuning">Model Size for Fine-Tuning</h3>
<ul>
<li><strong>Preferred Size</strong>: Starts with smaller models (e.g., 7 billion parameters) and scales up based on complexity and performance needs.</li>
<li><strong>Trade-Offs</strong>: Larger models require more resources and justification due to higher costs and hosting difficulties.</li>
</ul>
</section>
<section id="multimodal-fine-tuning" class="level3">
<h3 class="anchored" data-anchor-id="multimodal-fine-tuning">Multimodal Fine-Tuning</h3>
<ul>
<li><strong>Example Project</strong>: Fine-tuning models to write alt text for images to assist visually impaired users.</li>
<li><strong>Tools</strong>: The LLaVA model is recommended for fine-tuning multimodal tasks.</li>
</ul>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ol type="1">
<li><strong>Validate the Need for Fine-Tuning</strong>: Before starting, ensure you have good prompts and effective RAG if applicable.</li>
<li><strong>Choose the Right Data</strong>: Use high-quality, successful examples for fine-tuning and filter out poor results.</li>
<li><strong>Start Small</strong>: Begin with smaller models and incrementally increase size based on performance needs.</li>
<li><strong>Leverage Synthetic Data</strong>: Generate and use synthetic data to supplement training data, especially in data-scarce domains.</li>
<li><strong>Understand Model Types</strong>: Choose between base models and instruction-tuned models based on the specific use case and desired control over fine-tuning.</li>
<li><strong>Explore Multimodal Capabilities</strong>: Consider multimodal fine-tuning for tasks that require handling both text and images, utilizing models like LLaVA.</li>
</ol>
</section>
</section>
<section id="chatbots" class="level2">
<h2 class="anchored" data-anchor-id="chatbots">Chatbots</h2>
<section id="overview-2" class="level3">
<h3 class="anchored" data-anchor-id="overview-2">Overview</h3>
<ul>
<li><strong>Topic:</strong> Delves into the common pitfalls and considerations when working with LLM-powered chatbots.</li>
<li><strong>Takaways:</strong> Highlights why general-purpose chatbots are often a bad idea, with unrealistic expectations and overly broad scope leading to poor user experiences and significant challenges in development.</li>
</ul>
</section>
<section id="importance-of-saying-no-to-general-purpose-chatbots" class="level3">
<h3 class="anchored" data-anchor-id="importance-of-saying-no-to-general-purpose-chatbots">Importance of Saying No to General-Purpose Chatbots</h3>
<ul>
<li><strong>Prevalence of Chatbot Requests</strong>: When working with LLMs, most clients will request a chatbot.</li>
<li><strong>Need for Caution</strong>: It’s often necessary to push back on these requests due to potential complications.</li>
</ul>
</section>
<section id="case-study-rechat-real-estate-crm-tool" class="level3">
<h3 class="anchored" data-anchor-id="case-study-rechat-real-estate-crm-tool">Case Study: Rechat Real Estate CRM Tool</h3>
<ul>
<li><strong>Initial Concept</strong>: A CRM tool for real estate that integrated multiple functionalities (appointments, listings, social media marketing).</li>
<li><strong>Initial Implementation</strong>: Started with a broad chat interface labeled “Ask Lucy anything.”
<ul>
<li><strong>Problems with Broad Scope</strong>:
<ul>
<li>Unmanageable surface area.</li>
<li>User expectations mismatched with capabilities.</li>
<li>Difficult to make progress on scoped tasks.</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="lessons-from-rechat-case-study" class="level3">
<h3 class="anchored" data-anchor-id="lessons-from-rechat-case-study">Lessons from Rechat Case Study</h3>
<ul>
<li><strong>Scoped Interfaces</strong>: Guide users towards specific tasks.</li>
<li><strong>Fine-Tuning Challenges</strong>: Difficult to fine-tune against a large and varied set of functions.</li>
</ul>
</section>
<section id="managing-user-expectations" class="level3">
<h3 class="anchored" data-anchor-id="managing-user-expectations">Managing User Expectations</h3>
<ul>
<li><strong>High User Expectations</strong>: Users often assume chatbots can handle any request, leading to disappointment.</li>
<li><strong>Setting Realistic Boundaries</strong>: Important to guide users on what the chatbot can realistically do.</li>
</ul>
</section>
<section id="real-world-example-dpd-chatbot-incident" class="level3">
<h3 class="anchored" data-anchor-id="real-world-example-dpd-chatbot-incident">Real-World Example: DPD Chatbot Incident</h3>
<ul>
<li><strong>Background</strong>: A chatbot released for a package delivery company, DPD, faced issues on launch.</li>
<li><strong>Incident</strong>: The chatbot swore in response to a user’s prompt, leading to negative publicity.
<ul>
<li><strong>Media Coverage</strong>: The incident was widely reported, causing significant concern within the company.</li>
</ul></li>
<li><strong>Lesson Learned</strong>:
<ul>
<li><strong>Expectations vs.&nbsp;Reality</strong>: Even harmless errors can become major issues if they attract public attention.</li>
<li><strong>Guardrails</strong>: Conventional software has clear input validation; free-form text input in chatbots is harder to manage.</li>
</ul></li>
</ul>
</section>
<section id="guardrails-and-prompt-injections" class="level3">
<h3 class="anchored" data-anchor-id="guardrails-and-prompt-injections">Guardrails and Prompt Injections</h3>
<ul>
<li><strong>Challenges with Guardrails</strong>: Tools to check for prompt injections are imperfect.</li>
<li><strong>Importance of Reviewing Prompts</strong>: Critical to understand and review the prompts used by guardrails to ensure safety.</li>
</ul>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ol type="1">
<li><strong>Scoped Interfaces Over General Chatbots</strong>: Focus on integrating chatbot functionalities into specific parts of the application rather than creating a general-purpose chatbot.</li>
<li><strong>User Expectation Management</strong>: Clearly communicate what the chatbot can and cannot do to manage user expectations effectively.</li>
<li><strong>Modular Functionality</strong>: Break down the chatbot’s functionalities into specific modules that can be fine-tuned individually.</li>
<li><strong>Review Guardrails</strong>: Regularly review and understand the prompts and guardrails to ensure they are functioning correctly.</li>
<li><strong>Careful Rollout</strong>: Test chatbots extensively before public release to avoid unexpected behaviors that could lead to negative publicity.</li>
</ol>
</section>
</section>
<section id="preference-optimization" class="level2">
<h2 class="anchored" data-anchor-id="preference-optimization">Preference Optimization</h2>
<p>Discusses the effectiveness of Direct Preference Optimization (DPO) in fine-tuning LLMs to produce superior outputs. By leveraging human preferences in comparing two responses to the same prompt, DPO can significantly improve the quality of model outputs.</p>
<section id="preference-optimization-algorithms" class="level3">
<h3 class="anchored" data-anchor-id="preference-optimization-algorithms">Preference Optimization Algorithms</h3>
<ul>
<li><strong>Challenge:</strong> Human-generated data is often imperfect, and training models solely on this data can lead to suboptimal results.</li>
<li><strong>Human Preference Evaluation</strong>: Humans excel at choosing between two options based on preference.</li>
<li><strong>Preference Optimization Algorithms</strong>: These techniques leverage human preferences to fine-tune models.</li>
</ul>
</section>
<section id="direct-preference-optimization-dpo" class="level3">
<h3 class="anchored" data-anchor-id="direct-preference-optimization-dpo">Direct Preference Optimization (DPO)</h3>
<ul>
<li><strong>Definition</strong>: DPO involves using human preference data to guide model fine-tuning.</li>
<li>Comparison to Supervised Fine-Tuning:
<ul>
<li><strong>Supervised Fine-Tuning</strong>: Model learns to imitate responses based on a prompt-response pair.</li>
<li><strong>DPO</strong>: Model learns from human preference data by comparing two responses to the same prompt and determining which is better.</li>
</ul></li>
</ul>
</section>
<section id="process-of-direct-preference-optimization" class="level3">
<h3 class="anchored" data-anchor-id="process-of-direct-preference-optimization">Process of Direct Preference Optimization</h3>
<ul>
<li>Data Collection:
<ul>
<li><strong>Prompt</strong>: Initial input or question.</li>
<li><strong>Responses</strong>: Two different responses to the prompt.</li>
<li><strong>Human Evaluation</strong>: Determining which response is better.</li>
</ul></li>
<li><strong>Model Update</strong>: Model adjusts weights to favor better responses, potentially exceeding the quality of the best human-generated responses.</li>
</ul>
</section>
<section id="case-study-customer-service-email-project" class="level3">
<h3 class="anchored" data-anchor-id="case-study-customer-service-email-project">Case Study: Customer Service Email Project</h3>
<ul>
<li>Project Overview:
<ul>
<li><strong>Data</strong>: 200 customer service emails.</li>
<li><strong>Responses</strong>: Two responses per email from different agents.</li>
<li><strong>Manager Evaluation</strong>: Manager chose the preferred response from each pair.</li>
</ul></li>
<li><strong>Model Used</strong>: Fine-tuned on Zephyr (base model).</li>
</ul>
</section>
<section id="performance-comparison" class="level3">
<h3 class="anchored" data-anchor-id="performance-comparison">Performance Comparison</h3>
<ul>
<li>Methods Compared:
<ol type="1">
<li><strong>GPT-4 Response Generation</strong>: Direct use of GPT-4 for generating responses.</li>
<li><strong>Supervised Fine-Tuning</strong>: Model fine-tuned on pairs of input-output data.</li>
<li><strong>Human Agents</strong>: Responses generated by human customer service agents.</li>
<li><strong>DPO Model</strong>: Model fine-tuned using direct preference optimization.</li>
</ol></li>
<li>Results:
<ul>
<li><strong>GPT-4</strong>: Produced the lowest quality responses.</li>
<li><strong>Supervised Fine-Tuning</strong>: Better than GPT-4 but worse than human agents.</li>
<li><strong>Human Agents</strong>: Better than the supervised fine-tuned model.</li>
<li><strong>DPO Model</strong>: Outperformed human agents, producing responses preferred 2 to 1 over human responses in blind comparisons.</li>
</ul></li>
</ul>
</section>
<section id="advantages-of-direct-preference-optimization" class="level3">
<h3 class="anchored" data-anchor-id="advantages-of-direct-preference-optimization">Advantages of Direct Preference Optimization</h3>
<ul>
<li><strong>Superhuman Performance</strong>: DPO models can generate responses superior to those of human experts.</li>
<li><strong>Flexibility with Data Quality</strong>: Effective even with imperfect or messy data.</li>
</ul>
</section>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ol type="1">
<li><strong>Adopt DPO for Fine-Tuning</strong>: Implement DPO in model fine-tuning processes to achieve superior performance.</li>
<li><strong>Leverage Human Preferences</strong>: Collect and utilize human preference data to guide model improvements.</li>
<li><strong>Evaluate Model Performance</strong>: Regularly compare DPO model outputs with human-generated outputs to ensure quality.</li>
<li><strong>Explore Variations of DPO</strong>: Investigate slight tweaks and alternative algorithms related to DPO to further enhance model performance.</li>
</ol>
</section>
</section>
<section id="evaluating-use-cases-for-fine-tuning" class="level2">
<h2 class="anchored" data-anchor-id="evaluating-use-cases-for-fine-tuning">Evaluating Use Cases for Fine-Tuning</h2>
<p>This discussion focuses on evaluating different use cases for fine-tuning large language models (LLMs). The primary aim is to determine when fine-tuning is beneficial for the target use case compared to using a general model like ChatGPT.</p>
<section id="customer-service-automation-for-a-fast-food-chain" class="level3">
<h3 class="anchored" data-anchor-id="customer-service-automation-for-a-fast-food-chain">1. Customer Service Automation for a Fast Food Chain</h3>
<ul>
<li><strong>Use Case</strong>: Automating responses to most customer service emails, with unusual requests routed to a human.</li>
<li>Evaluation:
<ul>
<li><strong>Fit for Fine-Tuning</strong>: Strong fit.</li>
<li><strong>Reasoning</strong>: The company likely has a substantial dataset from past customer interactions. Fine-tuning can capture the specific nuances of the company’s customer service style and common issues.</li>
<li><strong>Example</strong>: Handling specific inquiries about menu items, store locations, or promotions that are frequently encountered.</li>
</ul></li>
</ul>
</section>
<section id="classification-of-research-articles-for-a-medical-publisher" class="level3">
<h3 class="anchored" data-anchor-id="classification-of-research-articles-for-a-medical-publisher">2. Classification of Research Articles for a Medical Publisher</h3>
<ul>
<li><strong>Use Case</strong>: Classifying new research articles into a complex ontology, facilitating trend analysis for various organizations.</li>
<li>Evaluation:
<ul>
<li><strong>Fit for Fine-Tuning</strong>: Excellent fit.</li>
<li><strong>Reasoning</strong>: The ontology is complex with many subtle distinctions that are hard to convey in a prompt. The publisher likely has extensive historical data for training.</li>
<li><strong>Example</strong>: Classifying articles into one of 10,000 categories, focusing on the most common 500 categories initially for efficiency.</li>
<li><strong>Implementation Detail</strong>: Used a JSON array output for multi-class classification.</li>
</ul></li>
</ul>
</section>
<section id="short-fiction-generation-for-a-startup" class="level3">
<h3 class="anchored" data-anchor-id="short-fiction-generation-for-a-startup">3. Short Fiction Generation for a Startup</h3>
<ul>
<li><strong>Use Case</strong>: Creating the world’s best short fiction writer.</li>
<li>Evaluation:
<ul>
<li><strong>Fit for Fine-Tuning</strong>: Potentially good fit.</li>
<li><strong>Reasoning</strong>:
<ul>
<li>General models like ChatGPT can write good short stories.</li>
<li>Fine-tuning can help the model learn specific preferences in storytelling that go beyond what a general LLM can offer. The startup can gather user preferences on generated stories to continually improve the model.</li>
</ul></li>
<li><strong>Example</strong>: Generating two different story versions on a given topic and having users rate them to inform future fine-tuning.</li>
<li><strong>Considerations</strong>: The feedback loop involving user ratings can help refine and optimize the storytelling quality.</li>
</ul></li>
</ul>
</section>
<section id="automated-news-summarization-for-employees" class="level3">
<h3 class="anchored" data-anchor-id="automated-news-summarization-for-employees">4. Automated News Summarization for Employees</h3>
<ul>
<li><strong>Use Case</strong>: Providing employees with summaries of new articles on specific topics daily.</li>
<li>Evaluation:
<ul>
<li><strong>Fit for Fine-Tuning</strong>: Potentially unnecessary.</li>
<li><strong>Reasoning</strong>: General LLMs like ChatGPT can already provide high-quality summaries. The benefit of fine-tuning depends on the availability of unique internal data to improve the summarization process.</li>
<li><strong>Example</strong>: Summarizing a wide range of news articles without a significant internal dataset may not justify the effort of fine-tuning.</li>
<li><strong>Alternative</strong>: Using preference-based optimization (DPO) to gather feedback on summary quality and improve the model if news summarization is a critical business function.</li>
</ul></li>
</ul>
</section>
<section id="important-considerations" class="level3">
<h3 class="anchored" data-anchor-id="important-considerations">Important Considerations</h3>
<ul>
<li><strong>Data Availability</strong>: Fine-tuning is more effective when there is a large, high-quality dataset available from past interactions or classifications.</li>
<li><strong>Complexity and Specificity</strong>: Use cases with complex, nuanced requirements are better candidates for fine-tuning compared to general tasks.</li>
<li><strong>Resource Commitment</strong>: The decision to fine-tune should consider the resources required for collecting and annotating additional data, as well as the importance of the task within the organization.</li>
</ul>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ol type="1">
<li><strong>Assess Data Quality and Quantity</strong>: Ensure sufficient and relevant data is available for fine-tuning.</li>
<li><strong>Evaluate Task Complexity</strong>: Use fine-tuning for tasks that require specific knowledge or subtle distinctions that a general model might not capture.</li>
<li><strong>Consider Cost-Benefit</strong>: Weigh the benefits of improved performance against the costs of data collection and model training.</li>
<li><strong>Iterate and Improve</strong>: Continuously gather feedback to refine and improve the fine-tuned model, especially for user-preference-driven tasks.</li>
</ol>
</section>
</section>
<section id="qa-session-2" class="level2">
<h2 class="anchored" data-anchor-id="qa-session-2">Q&amp;A Session #2</h2>
<p>This Q&amp;A session addressed various questions related to model quantization, handling hallucinations in language models, and the importance of data annotation.</p>
<section id="quantization" class="level3">
<h3 class="anchored" data-anchor-id="quantization">Quantization</h3>
<ul>
<li><strong>Definition</strong>: Quantization is a technique used to reduce the precision of models.</li>
<li><strong>Performance Impact</strong>: Over-quantization can lead to performance degradation.</li>
<li><strong>Testing</strong>: It is crucial to test the quantized models to ensure performance is not adversely affected.</li>
</ul>
</section>
<section id="hallucination-in-language-models" class="level3">
<h3 class="anchored" data-anchor-id="hallucination-in-language-models">Hallucination in Language Models</h3>
<ul>
<li><strong>Issue</strong>: When classifying academic or scientific articles, ensuring that the language model (LM) only outputs valid classes is critical.</li>
<li><strong>Solution</strong>: Providing enough examples with specific sets of classes to train the model effectively.</li>
<li><strong>Metrics</strong>: Continuous monitoring and treating misclassifications as part of the expected process.</li>
</ul>
</section>
<section id="fine-tuning-large-language-models-1" class="level3">
<h3 class="anchored" data-anchor-id="fine-tuning-large-language-models-1">Fine-Tuning Large Language Models</h3>
<ul>
<li><strong>Use Case Evaluation</strong>: The skill of evaluating use cases for fine-tuning is essential for data scientists.</li>
<li><strong>Example</strong>: Fine-tuning can outperform even human experts in specific, well-defined tasks, such as customer service for companies like McDonald’s.</li>
</ul>
</section>
<section id="optimizing-prompts" class="level3">
<h3 class="anchored" data-anchor-id="optimizing-prompts">Optimizing Prompts</h3>
<ul>
<li><strong>Efficiency</strong>: Static elements in prompts that don’t change should be removed in favor of more dynamic elements.</li>
<li><strong>Few-Shot Examples</strong>: These should be minimized or eliminated with extensive fine-tuning.</li>
<li><strong>Prompt Engineering</strong>: A critical technique in making language models more efficient and effective.</li>
</ul>
</section>
<section id="data-annotation-and-evaluation" class="level3">
<h3 class="anchored" data-anchor-id="data-annotation-and-evaluation">Data Annotation and Evaluation</h3>
<ul>
<li><strong>Human in the Loop</strong>: Essential for evaluating LLMs and curating data for training and fine-tuning.</li>
<li><strong>Tool Building</strong>: Custom tools are often more effective than generic ones for specific domains.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>llms</category>
  <guid>christianjmills.com/posts/mastering-llms-course-notes/workshop-001/</guid>
  <pubDate>Fri, 31 May 2024 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>CUDA MODE Lecture 1 : How to profile CUDA kernels in PyTorch</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/cuda-mode-notes/lecture-001/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/cuda-mode-notes.html"><strong>CUDA Mode Lecture Notes</strong></a>: My notes from the <strong>CUDA MODE</strong> reading group lectures run by <strong>Andreas Kopf</strong> and <strong>Mark Saroufim</strong>.<br>
</li>
</ul>
</div>
</div>
<ul>
<li>Lecture Information</li>
<li>Profiling PyTorch Square with Autograd Profiler</li>
<li>PyTorch Profiler</li>
<li>Integrating CUDA Kernels in PyTorch</li>
<li>Triton</li>
<li>Optimization &amp; Profiling with Nsight Compute</li>
<li>Q&amp;A</li>
</ul>
<section id="lecture-information" class="level2">
<h2 class="anchored" data-anchor-id="lecture-information">Lecture Information</h2>
<ul>
<li><strong>Speaker:</strong> Mark Saroufim</li>
<li><strong>Topic:</strong> Integrate and profile custom CUDA kernels in PyTorch programs.</li>
<li><strong>Resources:</strong>
<ul>
<li><strong>Lecture Slides:</strong> <a href="https://docs.google.com/presentation/d/110dnMW94LX1ySWxu9La17AVUxjgSaQDLOotFC3BZZD4/edit#slide=id.p">CUDA Mode: Lecture 1</a></li>
<li><strong>Textbook:</strong> <a href="https://www.amazon.com/Programming-Massively-Parallel-Processors-Hands/dp/0323912311/">Programming Massively Parallel Processors</a></li>
<li><strong>GitHub Repository:</strong> <a href="https://github.com/cuda-mode/lectures/tree/main/lecture_001">CUDA MODE Lecture 1</a></li>
<li><strong>Discord Channel:</strong> <a href="https://discord.gg/cudamode">CUDA MODE</a></li>
<li><strong>YouTube Channel:</strong> <a href="https://www.youtube.com/@CUDAMODE">CUDA MODE</a></li>
</ul></li>
</ul>
</section>
<section id="profiling-pytorch-square-with-autograd-profiler" class="level2">
<h2 class="anchored" data-anchor-id="profiling-pytorch-square-with-autograd-profiler">Profiling PyTorch Square with Autograd Profiler</h2>
<ul>
<li>Timestamp: <a href="https://youtu.be/LuhJEEJQgUM?si=YtsNCWs9HVY4oJoT&amp;t=597">9:57</a></li>
<li>Profiling provides a way to visually understand “in a blackbox kind of way”
<ul>
<li>Don’t need to know all the details of how a GPU or CUDA works to do something useful with it</li>
</ul></li>
</ul>
<section id="torch-autograd-profiler" class="level3">
<h3 class="anchored" data-anchor-id="torch-autograd-profiler">Torch Autograd Profiler</h3>
<ul>
<li>Provides insights into kernel execution time on CPU and GPU, number of calls, and dependencies.</li>
<li>CUDA is asynchronous, requiring specialized profiling tools
<ul>
<li>Can’t use the Python time module
<ul>
<li>Would only measure the overhead to launch the CUDA kernel, not the time it takes to run the kernel</li>
</ul></li>
<li>Need to use <code>torch.cuda.Event</code>
<ul>
<li>Start and end events</li>
</ul></li>
<li>Call <code>torch.cuda.synchronize()</code> to ensure all operations finish before measuring performance.</li>
</ul></li>
</ul>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Class</th>
<th>Description</th>
<th>Documentation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>Event</code></td>
<td>CUDA events are synchronization markers that can be used to monitor the device’s progress, to accurately measure timing, and to synchronize CUDA streams.</td>
<td><a href="https://pytorch.org/docs/stable/generated/torch.cuda.Event.html#torch.cuda.Event">link</a></td>
</tr>
<tr class="even">
<td><code>Profiler</code></td>
<td>A profiler that lets you inspect the cost of different operators inside your model - both on the CPU and GPU.</td>
<td><a href="https://pytorch.org/docs/stable/autograd.html#profiler">link</a></td>
</tr>
</tbody>
</table>
<div class="callout callout-style-default callout-note callout-titled" title="Warmups">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warmups
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><strong>Problem:</strong> The first time you call CUDA in a PyTorch function, it’s going to initialize the CUDA context, distorting performance measurements</li>
<li><strong>Solution:</strong> Run the target function a few times to initialize the CUDA context before taking performance measurements.</li>
</ul>
</div>
</div>
</section>
<section id="profile-squaring-a-pytorch-tensor" class="level3">
<h3 class="anchored" data-anchor-id="profile-squaring-a-pytorch-tensor">Profile Squaring a PyTorch Tensor</h3>
<ul>
<li>Profiling squaring a PyTorch tensor using the Python multiplication operation, the <code>torch.square</code> method, and the Python power operation.</li>
</ul>
<section id="analyzing-torch.square-vs.-manual-multiplication-and-pythons-power-function" class="level4">
<h4 class="anchored" data-anchor-id="analyzing-torch.square-vs.-manual-multiplication-and-pythons-power-function">Analyzing <code>torch.square()</code> vs.&nbsp;manual multiplication and Python’s power function</h4>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span></code></pre></div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> time_pytorch_function(func, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Measure the execution time of a PyTorch function.</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        func (callable): The PyTorch function to be timed.</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        input: The input to the function.</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        float: The execution time in milliseconds.</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Since CUDA is asynchronous, we can't use Python's time module to measure time.</span></span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instead, we use PyTorch's CUDA events to measure the time.</span></span>
<span id="cb2-14">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.Event(enable_timing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a start event</span></span>
<span id="cb2-15">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.Event(enable_timing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an end event</span></span>
<span id="cb2-16"></span>
<span id="cb2-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform a warmup to ensure the GPU is ready</span></span>
<span id="cb2-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb2-19">        func(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the function 5 times to warm up the GPU</span></span>
<span id="cb2-20"></span>
<span id="cb2-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start the timer</span></span>
<span id="cb2-22">    start.record()</span>
<span id="cb2-23">    func(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the function to be timed</span></span>
<span id="cb2-24">    end.record()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stop the timer</span></span>
<span id="cb2-25">    torch.cuda.synchronize()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Wait for the kernel to finish</span></span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> start.elapsed_time(end)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the elapsed time in milliseconds</span></span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a large sample tensor</span></span>
<span id="cb3-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>).cuda()</span></code></pre></div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define function to square tensor using manual multiplication operation</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> square_2(a):</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Square the input using multiplication.</span></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a: The input value to be squared.</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The squared value of the input.</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> a  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the square of the input using multiplication</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define function to square tensor using Python's power function</span></span>
<span id="cb4-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> square_3(a):</span>
<span id="cb4-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Square the input using exponentiation.</span></span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        a: The input value to be squared.</span></span>
<span id="cb4-21"></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The squared value of the input.</span></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the square of the input using exponentiation</span></span></code></pre></div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"============="</span>)</span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Profiling torch.square"</span>)</span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"============="</span>)</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Profile each function using the PyTorch profiler to measure performance</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and identify potential bottlenecks</span></span>
<span id="cb5-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.autograd.profiler.profile(use_cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> prof:</span>
<span id="cb5-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Create a PyTorch profiler context manager to profile the torch.square function.</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        use_cuda (bool): If True, uses CUDA for profiling (if available).</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Profile torch.square function</span></span>
<span id="cb5-15">    torch.square(b)</span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the profiling results, sorted by CUDA time and limited to the top 10 rows</span></span>
<span id="cb5-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(prof.key_averages().table(sort_by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda_time_total"</span>, row_limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<pre class="text"><code>=============
Profiling torch.square
=============

STAGE:2024-04-24 18:37:25 1254869:1254869 ActivityProfilerController.cpp:314] Completed Stage: Warm Up
STAGE:2024-04-24 18:37:25 1254869:1254869 ActivityProfilerController.cpp:320] Completed Stage: Collection
STAGE:2024-04-24 18:37:25 1254869:1254869 ActivityProfilerController.cpp:324] Completed Stage: Post Processing</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="caption-top table">
<colgroup>
<col style="width: 28%">
<col style="width: 13%">
<col style="width: 5%">
<col style="width: 6%">
<col style="width: 5%">
<col style="width: 7%">
<col style="width: 5%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Self CPU %</th>
<th>Self CPU</th>
<th>CPU total %</th>
<th>CPU total</th>
<th>CPU time avg</th>
<th>Self CUDA</th>
<th>Self CUDA %</th>
<th>CUDA total</th>
<th>CUDA time avg</th>
<th># of Calls</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>aten::square</td>
<td>1.63%</td>
<td>15.000us</td>
<td>9.22%</td>
<td>85.000us</td>
<td>85.000us</td>
<td>15.000us</td>
<td>1.56%</td>
<td>962.000us</td>
<td>962.000us</td>
<td>1</td>
</tr>
<tr class="even">
<td>aten::pow</td>
<td>5.53%</td>
<td>51.000us</td>
<td>7.38%</td>
<td>68.000us</td>
<td>68.000us</td>
<td>941.000us</td>
<td>97.82%</td>
<td>947.000us</td>
<td>947.000us</td>
<td>1</td>
</tr>
<tr class="odd">
<td>aten::result_type</td>
<td>0.11%</td>
<td>1.000us</td>
<td>0.11%</td>
<td>1.000us</td>
<td>1.000us</td>
<td>4.000us</td>
<td>0.42%</td>
<td>4.000us</td>
<td>4.000us</td>
<td>1</td>
</tr>
<tr class="even">
<td>aten::to</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>2.000us</td>
<td>0.21%</td>
<td>2.000us</td>
<td>2.000us</td>
<td>1</td>
</tr>
<tr class="odd">
<td>cudaEventRecord</td>
<td>1.30%</td>
<td>12.000us</td>
<td>1.30%</td>
<td>12.000us</td>
<td>1.500us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>8</td>
</tr>
<tr class="even">
<td>cudaLaunchKernel</td>
<td>1.41%</td>
<td>13.000us</td>
<td>1.41%</td>
<td>13.000us</td>
<td>13.000us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>1</td>
</tr>
<tr class="odd">
<td>cudaDeviceSynchronize</td>
<td>90.02%</td>
<td>830.000us</td>
<td>90.02%</td>
<td>830.000us</td>
<td>830.000us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>1</td>
</tr>
<tr class="even">
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr class="odd">
<td>Self CPU time total: <br>Self CUDA time total:</td>
<td>922.000us<br>962.000us</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Profiling Results">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Profiling Results
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>The table shows the underlying C++ functions executed when calling the <code>torch.square()</code> function in Python</li>
<li>The <code>torch.square()</code> function executes the <code>aten::square</code> C++ function
<ul>
<li>The <code>aten::square</code> calls the <code>aten::pow</code> function with a value of 2</li>
<li>Source Code: <a href="https://github.com/pytorch/pytorch/blob/b8b04b26fbf160874f7f1a9db61e49801fd4fcbe/aten/src/ATen/native/UnaryOps.cpp#L771">aten::square</a></li>
</ul></li>
</ul>
</div>
</div>
<hr>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"============="</span>)</span>
<span id="cb7-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Profiling a * a"</span>)</span>
<span id="cb7-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"============="</span>)</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use PyTorch's autograd profiler to profile the execution of the square_2 function</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with CUDA enabled</span></span>
<span id="cb7-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.autograd.profiler.profile(use_cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> prof:</span>
<span id="cb7-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute the square_2 function and profile its execution</span></span>
<span id="cb7-9">    square_2(b)</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the profiling results, sorted by CUDA time and limited to the top 10 rows</span></span>
<span id="cb7-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(prof.key_averages().table(sort_by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda_time_total"</span>, row_limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<pre class="text"><code>=============
Profiling a * a
=============


STAGE:2024-04-24 18:37:25 1254869:1254869 ActivityProfilerController.cpp:314] Completed Stage: Warm Up
STAGE:2024-04-24 18:37:25 1254869:1254869 ActivityProfilerController.cpp:320] Completed Stage: Collection
STAGE:2024-04-24 18:37:25 1254869:1254869 ActivityProfilerController.cpp:324] Completed Stage: Post Processing</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="caption-top table">
<colgroup>
<col style="width: 28%">
<col style="width: 13%">
<col style="width: 5%">
<col style="width: 6%">
<col style="width: 5%">
<col style="width: 7%">
<col style="width: 5%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Self CPU %</th>
<th>Self CPU</th>
<th>CPU total %</th>
<th>CPU total</th>
<th>CPU time avg</th>
<th>Self CUDA</th>
<th>Self CUDA %</th>
<th>CUDA total</th>
<th>CUDA time avg</th>
<th># of Calls</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>aten::mul</td>
<td>5.26%</td>
<td>40.000us</td>
<td>9.99%</td>
<td>76.000us</td>
<td>76.000us</td>
<td>851.000us</td>
<td>100.00%</td>
<td>851.000us</td>
<td>851.000us</td>
<td>1</td>
</tr>
<tr class="even">
<td>cudaEventRecord</td>
<td>1.71%</td>
<td>13.000us</td>
<td>1.71%</td>
<td>13.000us</td>
<td>6.500us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>2</td>
</tr>
<tr class="odd">
<td>cudaLaunchKernel</td>
<td>4.73%</td>
<td>36.000us</td>
<td>4.73%</td>
<td>36.000us</td>
<td>36.000us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>1</td>
</tr>
<tr class="even">
<td>cudaDeviceSynchronize</td>
<td>88.30%</td>
<td>672.000us</td>
<td>88.30%</td>
<td>672.000us</td>
<td>672.000us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>1</td>
</tr>
<tr class="odd">
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr class="even">
<td>Self CPU time total: <br>Self CUDA time total:</td>
<td>761.000us<br>851.000us</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Profiling Results">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Profiling Results
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>The manual multiplication operation executes the <code>aten::mul</code> C++ function</li>
</ul>
</div>
</div>
<hr>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"============="</span>)</span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Profiling a ** 2"</span>)</span>
<span id="cb9-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"============="</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use PyTorch's autograd profiler to profile the execution of the square_3 function</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># with CUDA enabled</span></span>
<span id="cb9-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.autograd.profiler.profile(use_cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> prof:</span>
<span id="cb9-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute the square_3 function and profile its execution</span></span>
<span id="cb9-9">    square_3(b)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the profiling results, sorted by CUDA time and limited to the top 10 rows</span></span>
<span id="cb9-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(prof.key_averages().table(sort_by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda_time_total"</span>, row_limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span></code></pre></div>
<pre class="text"><code>=============
Profiling a ** 2
=============


STAGE:2024-04-24 18:37:25 1254869:1254869 ActivityProfilerController.cpp:314] Completed Stage: Warm Up
STAGE:2024-04-24 18:37:25 1254869:1254869 ActivityProfilerController.cpp:320] Completed Stage: Collection
STAGE:2024-04-24 18:37:25 1254869:1254869 ActivityProfilerController.cpp:324] Completed Stage: Post Processing</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="caption-top table">
<colgroup>
<col style="width: 28%">
<col style="width: 13%">
<col style="width: 5%">
<col style="width: 6%">
<col style="width: 5%">
<col style="width: 7%">
<col style="width: 5%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 8%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Self CPU %</th>
<th>Self CPU</th>
<th>CPU total %</th>
<th>CPU total</th>
<th>CPU time avg</th>
<th>Self CUDA</th>
<th>Self CUDA %</th>
<th>CUDA total</th>
<th>CUDA time avg</th>
<th># of Calls</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>aten::pow</td>
<td>6.34%</td>
<td>47.000us</td>
<td>8.64%</td>
<td>64.000us</td>
<td>64.000us</td>
<td>855.000us</td>
<td>99.77%</td>
<td>857.000us</td>
<td>857.000us</td>
<td>1</td>
</tr>
<tr class="even">
<td>aten::result_type</td>
<td>0.13%</td>
<td>1.000us</td>
<td>0.13%</td>
<td>1.000us</td>
<td>1.000us</td>
<td>1.000us</td>
<td>0.12%</td>
<td>1.000us</td>
<td>1.000us</td>
<td>1</td>
</tr>
<tr class="odd">
<td>aten::to</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>1.000us</td>
<td>0.12%</td>
<td>1.000us</td>
<td>1.000us</td>
<td>1</td>
</tr>
<tr class="even">
<td>cudaEventRecord</td>
<td>1.89%</td>
<td>14.000us</td>
<td>1.89%</td>
<td>14.000us</td>
<td>2.333us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>6</td>
</tr>
<tr class="odd">
<td>cudaLaunchKernel</td>
<td>1.75%</td>
<td>13.000us</td>
<td>1.75%</td>
<td>13.000us</td>
<td>13.000us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>1</td>
</tr>
<tr class="even">
<td>cudaDeviceSynchronize</td>
<td>89.88%</td>
<td>666.000us</td>
<td>89.88%</td>
<td>666.000us</td>
<td>666.000us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>1</td>
</tr>
<tr class="odd">
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
<td>—</td>
</tr>
<tr class="even">
<td>Self CPU time total: <br>Self CUDA time total:</td>
<td>741.000us<br>857.000us</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Profiling Results">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Profiling Results
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>The the power function executes the same <code>aten::pow</code> C++ function called by <code>aten::square</code></li>
</ul>
</div>
</div>
<hr>
</section>
</section>
</section>
<section id="pytorch-profiler" class="level2">
<h2 class="anchored" data-anchor-id="pytorch-profiler">PyTorch Profiler</h2>
<ul>
<li>Timestamp: <a href="https://youtu.be/LuhJEEJQgUM?si=PBWrtlYHwvtdtVTZ&amp;t=842">14:02</a></li>
<li>PyTorch Profiler:
<ul>
<li>Documentation: (<a href="https://pytorch.org/docs/stable/profiler.html">link</a>)</li>
<li>Visual profiler generating Chrome traces for detailed analysis.
<ul>
<li>Creates a JSON file, which you drag and drop into the Chrome browser at the following link:
<ul>
<li><a href="chrome://tracing/">chrome://tracing/</a></li>
</ul></li>
</ul></li>
<li>Provides information on memory copies, kernel launches, and flow events.</li>
<li>Does not provide information on the kernel performance or how to improve it.</li>
</ul></li>
</ul>
<section id="profiling-the-torch.square-function" class="level3">
<h3 class="anchored" data-anchor-id="profiling-the-torch.square-function">Profiling the <code>torch.square()</code> function</h3>
<ul>
<li>Send tensor to GPU</li>
<li>Compute the square of the tensor</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.profiler <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> profile, ProfilerActivity</span></code></pre></div>
<section id="default-usage" class="level4">
<h4 class="anchored" data-anchor-id="default-usage">Default usage</h4>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Default way to use profiler</span></span>
<span id="cb12-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> profile(activities<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[ProfilerActivity.CPU, ProfilerActivity.CUDA]) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> prof:</span>
<span id="cb12-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb12-4">        a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.square(torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>).cuda())</span>
<span id="cb12-5"></span>
<span id="cb12-6">prof.export_chrome_trace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default_trace.json"</span>)</span></code></pre></div>
<pre><code>STAGE:2024-04-25 14:18:13 33490:33490 ActivityProfilerController.cpp:314] Completed Stage: Warm Up
STAGE:2024-04-25 14:18:18 33490:33490 ActivityProfilerController.cpp:320] Completed Stage: Collection
STAGE:2024-04-25 14:18:18 33490:33490 ActivityProfilerController.cpp:324] Completed Stage: Post Processing</code></pre>
</section>
<section id="non-default-profiler-schedule" class="level4">
<h4 class="anchored" data-anchor-id="non-default-profiler-schedule">Non-default profiler schedule</h4>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## With warmup and skip</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Non-default profiler schedule allows user to turn profiler on and off</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on different iterations of the training loop;</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># trace_handler is called every time a new trace becomes available</span></span>
<span id="cb14-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> trace_handler(prof):</span>
<span id="cb14-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(prof.key_averages().table(</span>
<span id="cb14-7">        sort_by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"self_cuda_time_total"</span>, row_limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb14-8">    prof.export_chrome_trace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"non_default_trace_"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(prof.step_num) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".json"</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.profiler.profile(</span>
<span id="cb14-11">    activities<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb14-12">        torch.profiler.ProfilerActivity.CPU,</span>
<span id="cb14-13">        torch.profiler.ProfilerActivity.CUDA,</span>
<span id="cb14-14">    ],</span>
<span id="cb14-15"></span>
<span id="cb14-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># In this example with wait=1, warmup=1, active=2, repeat=1,</span></span>
<span id="cb14-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># profiler will skip the first step/iteration,</span></span>
<span id="cb14-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start warming up on the second, record</span></span>
<span id="cb14-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the third and the forth iterations,</span></span>
<span id="cb14-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># after which the trace will become available</span></span>
<span id="cb14-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and on_trace_ready (when set) is called;</span></span>
<span id="cb14-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the cycle repeats starting with the next step</span></span>
<span id="cb14-23"></span>
<span id="cb14-24">    schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.profiler.schedule(</span>
<span id="cb14-25">        wait<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-26">        warmup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-27">        active<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb14-28">        repeat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb14-29">    on_trace_ready<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>trace_handler</span>
<span id="cb14-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># on_trace_ready=torch.profiler.tensorboard_trace_handler('./log')</span></span>
<span id="cb14-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># used when outputting for tensorboard</span></span>
<span id="cb14-32">    ) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> p:</span>
<span id="cb14-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb14-34">            torch.square(torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>).cuda())</span>
<span id="cb14-35">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># send a signal to the profiler that the next iteration has started</span></span>
<span id="cb14-36">            p.step()</span></code></pre></div>
<pre class="text"><code>STAGE:2024-04-25 14:18:19 33490:33490 ActivityProfilerController.cpp:314] Completed Stage: Warm Up
STAGE:2024-04-25 14:18:19 33490:33490 ActivityProfilerController.cpp:320] Completed Stage: Collection
STAGE:2024-04-25 14:18:19 33490:33490 ActivityProfilerController.cpp:324] Completed Stage: Post Processing</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 6%">
<col style="width: 7%">
<col style="width: 6%">
</colgroup>
<thead>
<tr class="header">
<th>Name</th>
<th>Self CPU %</th>
<th>Self CPU</th>
<th>CPU total %</th>
<th>CPU total</th>
<th>CPU time avg</th>
<th>Self CUDA</th>
<th>Self CUDA %</th>
<th>CUDA total</th>
<th>CUDA time avg</th>
<th># of Calls</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>aten::copy_</td>
<td>0.00%</td>
<td>40.000us</td>
<td>7.82%</td>
<td>66.271ms</td>
<td>33.136ms</td>
<td>66.023ms</td>
<td>97.48%</td>
<td>66.023ms</td>
<td>33.011ms</td>
<td>2</td>
</tr>
<tr class="even">
<td>Memcpy HtoD (Pageable -&gt; Device)</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>66.023ms</td>
<td>97.48%</td>
<td>66.023ms</td>
<td>33.011ms</td>
<td>2</td>
</tr>
<tr class="odd">
<td>aten::pow</td>
<td>0.01%</td>
<td>77.000us</td>
<td>0.01%</td>
<td>120.000us</td>
<td>60.000us</td>
<td>1.704ms</td>
<td>2.52%</td>
<td>1.704ms</td>
<td>852.000us</td>
<td>2</td>
</tr>
<tr class="even">
<td>void at::native::vectorized_elementwise_kernel&lt;4, at…</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>1.704ms</td>
<td>2.52%</td>
<td>1.704ms</td>
<td>852.000us</td>
<td>2</td>
</tr>
<tr class="odd">
<td>ProfilerStep*</td>
<td>2.12%</td>
<td>17.998ms</td>
<td>99.90%</td>
<td>846.892ms</td>
<td>423.446ms</td>
<td>0.000us</td>
<td>0.00%</td>
<td>67.727ms</td>
<td>33.864ms</td>
<td>2</td>
</tr>
<tr class="even">
<td>aten::randn</td>
<td>0.00%</td>
<td>25.000us</td>
<td>89.94%</td>
<td>762.421ms</td>
<td>381.211ms</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>2</td>
</tr>
<tr class="odd">
<td>aten::empty</td>
<td>0.00%</td>
<td>37.000us</td>
<td>0.00%</td>
<td>37.000us</td>
<td>18.500us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>2</td>
</tr>
<tr class="even">
<td>aten::normal_</td>
<td>89.93%</td>
<td>762.359ms</td>
<td>89.93%</td>
<td>762.359ms</td>
<td>381.180ms</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>2</td>
</tr>
<tr class="odd">
<td>aten::to</td>
<td>0.00%</td>
<td>25.000us</td>
<td>7.83%</td>
<td>66.347ms</td>
<td>16.587ms</td>
<td>0.000us</td>
<td>0.00%</td>
<td>66.023ms</td>
<td>16.506ms</td>
<td>4</td>
</tr>
<tr class="even">
<td>aten::_to_copy</td>
<td>0.00%</td>
<td>23.000us</td>
<td>7.82%</td>
<td>66.322ms</td>
<td>33.161ms</td>
<td>0.000us</td>
<td>0.00%</td>
<td>66.023ms</td>
<td>33.011ms</td>
<td>2</td>
</tr>
<tr class="odd">
<td>aten::empty_strided</td>
<td>0.00%</td>
<td>28.000us</td>
<td>0.00%</td>
<td>28.000us</td>
<td>14.000us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>2</td>
</tr>
<tr class="even">
<td>cudaMemcpyAsync</td>
<td>7.81%</td>
<td>66.193ms</td>
<td>7.81%</td>
<td>66.193ms</td>
<td>33.096ms</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>2</td>
</tr>
<tr class="odd">
<td>cudaStreamSynchronize</td>
<td>0.00%</td>
<td>38.000us</td>
<td>0.00%</td>
<td>38.000us</td>
<td>19.000us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>2</td>
</tr>
<tr class="even">
<td>aten::square</td>
<td>0.00%</td>
<td>6.000us</td>
<td>0.01%</td>
<td>126.000us</td>
<td>63.000us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>1.704ms</td>
<td>852.000us</td>
<td>2</td>
</tr>
<tr class="odd">
<td>aten::result_type</td>
<td>0.00%</td>
<td>2.000us</td>
<td>0.00%</td>
<td>2.000us</td>
<td>1.000us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>2</td>
</tr>
<tr class="even">
<td>cudaLaunchKernel</td>
<td>0.00%</td>
<td>41.000us</td>
<td>0.00%</td>
<td>41.000us</td>
<td>20.500us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>2</td>
</tr>
<tr class="odd">
<td>cudaDeviceSynchronize</td>
<td>0.10%</td>
<td>841.000us</td>
<td>0.10%</td>
<td>841.000us</td>
<td>841.000us</td>
<td>0.000us</td>
<td>0.00%</td>
<td>0.000us</td>
<td>0.000us</td>
<td>1</td>
</tr>
<tr class="even">
<td>——————————————-</td>
<td>————</td>
<td>————</td>
<td>————</td>
<td>————</td>
<td>————</td>
<td>————</td>
<td>————</td>
<td>————</td>
<td>————</td>
<td>————</td>
</tr>
<tr class="odd">
<td><strong>Self CPU time total:</strong> 847.733ms<br><strong>Self CUDA time total:</strong> 67.727ms</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<hr>
<div class="callout callout-style-default callout-note callout-titled" title="Profiling Results">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Profiling Results
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><p><code>Memcpy HtoD (Pageable -&gt; Device)</code></p>
<ul>
<li><p>Host to device copy</p></li>
<li><p>Pageable memory is on host but can be copied freely in and out of RAM</p></li>
<li><p>Equivalent to the <code>.cuda()</code> call for sending a tensor to the GPU</p></li>
</ul></li>
<li><p>aten::square is a call to aten::pow</p></li>
<li><p>A CUDA kernel gets launched called <code>native::vectorized_elementwise_kernel&lt;4,..&gt;</code></p>
<ul>
<li>4 is the number of blocks</li>
<li>Source Code: <a href="https://github.com/pytorch/pytorch/blob/main/caffe2/utils/math/elementwise.cu">elementwise CUDA kernel</a></li>
</ul></li>
<li><p>This approach does not necessarily give us an idea of kernel performance of how we could improve it.</p></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Chrome Trace">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Chrome Trace
</div>
</div>
<div class="callout-body-container callout-body">
<div style="overflow-x:auto; max-height:500px">
<p><img src="christianjmills.com/posts/cuda-mode-notes/lecture-001/images/torch-profiler-chrome-trace-screenshot.png"></p>
</div>
</div>
</div>
</section>
</section>
</section>
<section id="integrating-cuda-kernels-in-pytorch" class="level2">
<h2 class="anchored" data-anchor-id="integrating-cuda-kernels-in-pytorch">Integrating CUDA Kernels in PyTorch</h2>
<ul>
<li>Timestamp: <a href="https://youtu.be/LuhJEEJQgUM?si=z3eqrEXpK10a0ZAJ&amp;t=1068">17:48</a></li>
<li>CUDA is typically written using C/C++</li>
<li><strong>PyBind:</strong> Create Python bindings for C++ code.
<ul>
<li>Documentation: (<a href="https://pybind11.readthedocs.io/en/stable/">link</a>)</li>
</ul></li>
<li><strong>torch.utils.cpp_extension.load_inline :</strong>
<ul>
<li>Documentation: (<a href="https://pytorch.org/docs/stable/cpp_extension.html#torch.utils.cpp_extension.load_inline">link</a>)</li>
<li>Pass C++ source code, CUDA C/C++ code, and specify the functions to expose in Python</li>
<li>Automatically generates C++ source files with required pybind Python bindings</li>
<li>Automatically generates CUDA source files with required headers</li>
<li>Automatically generates <code>build.ninja</code> script for compiling the C++ code</li>
<li>Automatically builds the extension</li>
</ul></li>
</ul>
<section id="hello-world-example" class="level3">
<h3 class="anchored" data-anchor-id="hello-world-example">Hello World Example</h3>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb16-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb16-7">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb16-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.cpp_extension <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_inline</span></code></pre></div>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">cpp_source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb17-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">std::string hello_world() {</span></span>
<span id="cb17-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  return "Hello World!";</span></span>
<span id="cb17-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">build_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./load_inline_hello_world_cuda'</span>)</span>
<span id="cb18-2">build_dir.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load a custom C++ module directly from inline sources</span></span>
<span id="cb19-2">module <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_inline(</span>
<span id="cb19-3">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'module'</span>,                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Name of the module to be created</span></span>
<span id="cb19-4">    cpp_sources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[cpp_source],       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of C++ source code strings</span></span>
<span id="cb19-5">    functions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hello_world'</span>],      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of function names to be bound to Python</span></span>
<span id="cb19-6">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable verbose output to help with debugging</span></span>
<span id="cb19-7">    build_directory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(build_dir)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Directory to store the build artifacts</span></span>
<span id="cb19-8">)</span></code></pre></div>
<pre class="text"><code>Emitting ninja build file load_inline_hello_world_cuda/build.ninja...
Building extension module module...
Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)


[1/2] c++ -MMD -MF main.o.d -DTORCH_EXTENSION_NAME=module -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1011\" -isystem /home/innom-dt/mambaforge/envs/pytorch-env/lib/python3.11/site-packages/torch/include -isystem /home/innom-dt/mambaforge/envs/pytorch-env/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/innom-dt/mambaforge/envs/pytorch-env/lib/python3.11/site-packages/torch/include/TH -isystem /home/innom-dt/mambaforge/envs/pytorch-env/lib/python3.11/site-packages/torch/include/THC -isystem /home/innom-dt/mambaforge/envs/pytorch-env/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=0 -fPIC -std=c++17 -c /mnt/980_1TB_1/Notes/CUDA_MODE/Lecture_1/load_inline_hello_world_cuda/main.cpp -o main.o 
[2/2] c++ main.o -shared -L/home/innom-dt/mambaforge/envs/pytorch-env/lib/python3.11/site-packages/torch/lib -lc10 -ltorch_cpu -ltorch -ltorch_python -o module.so


Loading extension module module...</code></pre>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(module.hello_world())</span></code></pre></div>
<pre class="text"><code>Hello World!</code></pre>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the path to the extension module</span></span>
<span id="cb23-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Module Path: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>module<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre class="text"><code>Module Path: /mnt/980_1TB_1/Notes/CUDA_MODE/Lecture_1/load_inline_hello_world_cuda/module.so</code></pre>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the content of the module folder as a Pandas DataFrame</span></span>
<span id="cb25-2">pd.DataFrame([path.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Path(module.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>).parent.iterdir()])</span></code></pre></div>
<div>
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
.ninja_deps
</td>
</tr>
<tr>
<th>
1
</th>
<td>
.ninja_log
</td>
</tr>
<tr>
<th>
2
</th>
<td>
build.ninja
</td>
</tr>
<tr>
<th>
3
</th>
<td>
main.cpp
</td>
</tr>
<tr>
<th>
4
</th>
<td>
main.o
</td>
</tr>
<tr>
<th>
5
</th>
<td>
module.so
</td>
</tr>
</tbody>
</table>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Build File">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Build File
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<pre class="text"><code></code></pre>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode ini code-with-copy"><code class="sourceCode ini"><span id="cb27-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ninja_required_version </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span></span>
<span id="cb27-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cxx </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> c++</span></span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cflags </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> -DTORCH_EXTENSION_NAME=module -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1011\" -isystem /home/innom-dt/mambaforge/envs/pytorch-env/lib/python3.11/site-packages/torch/include -isystem /home/innom-dt/mambaforge/envs/pytorch-env/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/innom-dt/mambaforge/envs/pytorch-env/lib/python3.11/site-packages/torch/include/TH -isystem /home/innom-dt/mambaforge/envs/pytorch-env/lib/python3.11/site-packages/torch/include/THC -isystem /home/innom-dt/mambaforge/envs/pytorch-env/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=0 -fPIC -std=c++17</span></span>
<span id="cb27-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">post_cflags </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb27-6"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">cuda_dlink_post_cflags </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb27-7"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">ldflags </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> -shared -L/home/innom-dt/mambaforge/envs/pytorch-env/lib/python3.11/site-packages/torch/lib -lc10 -ltorch_cpu -ltorch -ltorch_python</span></span>
<span id="cb27-8"></span>
<span id="cb27-9"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">rule compile</span></span>
<span id="cb27-10"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  command </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> $cxx -MMD -MF $out.d $cflags -c $in -o $out $post_cflags</span></span>
<span id="cb27-11"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  depfile </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> $out.d</span></span>
<span id="cb27-12"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  deps </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> gcc</span></span>
<span id="cb27-13"></span>
<span id="cb27-14"></span>
<span id="cb27-15"></span>
<span id="cb27-16"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">rule link</span></span>
<span id="cb27-17"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">  command </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> $cxx $in $ldflags -o $out</span></span>
<span id="cb27-18"></span>
<span id="cb27-19"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">build main.o: compile /mnt/980_1TB_1/Notes/CUDA_MODE/Lecture_1/load_inline_hello_world_cuda/main.cpp</span></span>
<span id="cb27-20"></span>
<span id="cb27-21"></span>
<span id="cb27-22"></span>
<span id="cb27-23"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">build module.so: link main.o</span></span>
<span id="cb27-24"></span>
<span id="cb27-25"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">default module.so</span></span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="C++ Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
C++ Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<pre class="text"><code></code></pre>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb29-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;torch/extension.h&gt;</span></span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">std::</span>string hello_world<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb29-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello World!"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb29-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb29-6"></span>
<span id="cb29-7">PYBIND11_MODULE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TORCH_EXTENSION_NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb29-8">m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>def<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello_world"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>wrap_pybind_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>hello_world<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello_world"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb29-9"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="custom-cuda-kernel-for-square-operation" class="level3">
<h3 class="anchored" data-anchor-id="custom-cuda-kernel-for-square-operation">Custom CUDA kernel for Square Operation</h3>
<ul>
<li>CUDA Kernel</li>
<li>Wrapper function to prepare PyTorch tensor as input for CUDA kernel</li>
</ul>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb30-2"></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb30-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb30-5"></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb30-7">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb30-8"></span>
<span id="cb30-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb30-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.cpp_extension <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_inline</span></code></pre></div>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the CUDA kernel and C++ wrapper</span></span>
<span id="cb31-2">cuda_source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb31-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// Define a CUDA kernel function to square each element of a matrix.</span></span>
<span id="cb31-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// This kernel will be executed by multiple threads in a parallel manner on the GPU.</span></span>
<span id="cb31-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">//</span></span>
<span id="cb31-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// @param matrix The input matrix (flattened as a 1D array).</span></span>
<span id="cb31-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// @param result The output matrix (flattened as a 1D array) where the squared values will be stored.</span></span>
<span id="cb31-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// @param width The width of the matrix.</span></span>
<span id="cb31-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// @param height The height of the matrix.</span></span>
<span id="cb31-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">__global__ void square_matrix_kernel(const float* matrix, float* result, int width, int height) {</span></span>
<span id="cb31-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Calculate the row index of the matrix element to be processed by this thread</span></span>
<span id="cb31-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    int row = blockIdx.y * blockDim.y + threadIdx.y;</span></span>
<span id="cb31-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Calculate the column index of the matrix element to be processed by this thread</span></span>
<span id="cb31-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    int col = blockIdx.x * blockDim.x + threadIdx.x;</span></span>
<span id="cb31-15"></span>
<span id="cb31-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Ensure the thread corresponds to a valid matrix element</span></span>
<span id="cb31-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    if (row &lt; height &amp;&amp; col &lt; width) {</span></span>
<span id="cb31-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        // Linear index of the element in the flattened array</span></span>
<span id="cb31-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        int idx = row * width + col;</span></span>
<span id="cb31-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        // Square the matrix element and store the result</span></span>
<span id="cb31-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        result[idx] = matrix[idx] * matrix[idx];</span></span>
<span id="cb31-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    }</span></span>
<span id="cb31-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-24"></span>
<span id="cb31-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// Function to square each element of a matrix using GPU acceleration.</span></span>
<span id="cb31-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// It utilizes the PyTorch library for matrix operations and CUDA for parallel computation.</span></span>
<span id="cb31-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">//</span></span>
<span id="cb31-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// @param matrix A 2D tensor representing the matrix whose elements are to be squared.</span></span>
<span id="cb31-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">// @return A 2D tensor representing the matrix with each element squared.</span></span>
<span id="cb31-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">torch::Tensor square_matrix(torch::Tensor matrix) {</span></span>
<span id="cb31-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Extract the dimensions of the input matrix</span></span>
<span id="cb31-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    const auto height = matrix.size(0);</span></span>
<span id="cb31-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    const auto width = matrix.size(1);</span></span>
<span id="cb31-34"></span>
<span id="cb31-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Create an output tensor with the same dimensions and properties as the input matrix</span></span>
<span id="cb31-36"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    auto result = torch::empty_like(matrix);</span></span>
<span id="cb31-37"></span>
<span id="cb31-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Define the size of the CUDA blocks and grid</span></span>
<span id="cb31-39"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Each block contains 16x16 threads, a common choice for many kernels</span></span>
<span id="cb31-40"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    dim3 threads_per_block(16, 16);</span></span>
<span id="cb31-41"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Calculate the number of blocks in each dimension</span></span>
<span id="cb31-42"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    dim3 number_of_blocks((width + threads_per_block.x - 1) / threads_per_block.x,</span></span>
<span id="cb31-43"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                          (height + threads_per_block.y - 1) / threads_per_block.y);</span></span>
<span id="cb31-44"></span>
<span id="cb31-45"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Launch the CUDA kernel</span></span>
<span id="cb31-46"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Pass pointers to the device memory, dimensions, and configure the grid and blocks</span></span>
<span id="cb31-47"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    square_matrix_kernel&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;(</span></span>
<span id="cb31-48"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        matrix.data_ptr&lt;float&gt;(), result.data_ptr&lt;float&gt;(), width, height);</span></span>
<span id="cb31-49"></span>
<span id="cb31-50"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Return the result as a PyTorch tensor</span></span>
<span id="cb31-51"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    return result;</span></span>
<span id="cb31-52"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-53"></span>
<span id="cb31-54"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb31-55"></span>
<span id="cb31-56">cpp_source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torch::Tensor square_matrix(torch::Tensor matrix);"</span></span></code></pre></div>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">build_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./load_inline_cuda'</span>)</span>
<span id="cb32-2">build_dir.mkdir(exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the defined C++/CUDA extension as a PyTorch extension.</span></span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This enables using the `square_matrix` function as if it were a native PyTorch function.</span></span>
<span id="cb33-3">square_matrix_extension <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_inline(</span>
<span id="cb33-4">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'square_matrix_extension'</span>,   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unique name for the extension</span></span>
<span id="cb33-5">    cpp_sources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cpp_source,           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># C++ source code containing the CPU implementation</span></span>
<span id="cb33-6">    cuda_sources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cuda_source,         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CUDA source code for GPU implementation</span></span>
<span id="cb33-7">    functions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'square_matrix'</span>],      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of functions to expose to Python</span></span>
<span id="cb33-8">    with_cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable CUDA support</span></span>
<span id="cb33-9">    extra_cuda_cflags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-O2"</span>],        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compiler flags for optimizing the CUDA code</span></span>
<span id="cb33-10">    build_directory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(build_dir),   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Directory to store the compiled extension</span></span>
<span id="cb33-11">)</span>
<span id="cb33-12"></span>
<span id="cb33-13">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>], [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.</span>]], device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span>)</span>
<span id="cb33-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(square_matrix_extension.square_matrix(a))</span></code></pre></div>
<pre class="text"><code>tensor([[ 1.,  4.,  9.],
        [16., 25., 36.]], device='cuda:0')</code></pre>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the path to the extension module</span></span>
<span id="cb35-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Module Path: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>square_matrix_extension<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre class="text"><code>Module Path: /mnt/980_1TB_1/Notes/CUDA_MODE/Lecture_1/load_inline_cuda/square_matrix_extension.so</code></pre>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the content of the module folder as a Pandas DataFrame</span></span>
<span id="cb37-2">pd.DataFrame([path.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> Path(square_matrix_extension.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>).parent.iterdir()])</span></code></pre></div>
<div>
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
.ninja_deps
</td>
</tr>
<tr>
<th>
1
</th>
<td>
.ninja_log
</td>
</tr>
<tr>
<th>
2
</th>
<td>
build.ninja
</td>
</tr>
<tr>
<th>
3
</th>
<td>
cuda.cu
</td>
</tr>
<tr>
<th>
4
</th>
<td>
cuda.cuda.o
</td>
</tr>
<tr>
<th>
5
</th>
<td>
main.cpp
</td>
</tr>
<tr>
<th>
6
</th>
<td>
main.o
</td>
</tr>
<tr>
<th>
7
</th>
<td>
square_matrix_extension.so
</td>
</tr>
</tbody>
</table>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="CUDA Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
CUDA Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<pre class="text"><code></code></pre>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb39-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;torch/types.h&gt;</span></span>
<span id="cb39-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda.h&gt;</span></span>
<span id="cb39-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda_runtime.h&gt;</span></span>
<span id="cb39-4"></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define a CUDA kernel function to square each element of a matrix.</span></span>
<span id="cb39-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This kernel will be executed by multiple threads in a parallel manner on the GPU.</span></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span></span>
<span id="cb39-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// @param matrix The input matrix (flattened as a 1D array).</span></span>
<span id="cb39-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// @param result The output matrix (flattened as a 1D array) where the squared values will be stored.</span></span>
<span id="cb39-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// @param width The width of the matrix.</span></span>
<span id="cb39-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// @param height The height of the matrix.</span></span>
<span id="cb39-12">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> square_matrix_kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb39-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the row index of the matrix element to be processed by this thread</span></span>
<span id="cb39-14">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb39-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the column index of the matrix element to be processed by this thread</span></span>
<span id="cb39-16">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb39-17"></span>
<span id="cb39-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ensure the thread corresponds to a valid matrix element</span></span>
<span id="cb39-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb39-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Linear index of the element in the flattened array</span></span>
<span id="cb39-21">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb39-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Square the matrix element and store the result</span></span>
<span id="cb39-23">        result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb39-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb39-25"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb39-26"></span>
<span id="cb39-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to square each element of a matrix using GPU acceleration.</span></span>
<span id="cb39-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// It utilizes the PyTorch library for matrix operations and CUDA for parallel computation.</span></span>
<span id="cb39-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span></span>
<span id="cb39-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// @param matrix A 2D tensor representing the matrix whose elements are to be squared.</span></span>
<span id="cb39-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// @return A 2D tensor representing the matrix with each element squared.</span></span>
<span id="cb39-32">torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Tensor square_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Tensor matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb39-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Extract the dimensions of the input matrix</span></span>
<span id="cb39-34">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb39-35">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">const</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb39-36"></span>
<span id="cb39-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create an output tensor with the same dimensions and properties as the input matrix</span></span>
<span id="cb39-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>empty_like<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb39-39"></span>
<span id="cb39-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define the size of the CUDA blocks and grid</span></span>
<span id="cb39-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Each block contains 16x16 threads, a common choice for many kernels</span></span>
<span id="cb39-42">    dim3 threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb39-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the number of blocks in each dimension</span></span>
<span id="cb39-44">    dim3 number_of_blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">((</span>width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb39-45">                          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb39-46"></span>
<span id="cb39-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Launch the CUDA kernel</span></span>
<span id="cb39-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Pass pointers to the device memory, dimensions, and configure the grid and blocks</span></span>
<span id="cb39-49">    square_matrix_kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;&lt;</span>number_of_blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> threads_per_block<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;(</span></span>
<span id="cb39-50">        matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(),</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(),</span> width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb39-51"></span>
<span id="cb39-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the result as a PyTorch tensor</span></span>
<span id="cb39-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb39-54"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="C++ Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
C++ Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<pre class="text"><code></code></pre>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb41-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;torch/extension.h&gt;</span></span>
<span id="cb41-2">torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Tensor square_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Tensor matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb41-3">PYBIND11_MODULE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>TORCH_EXTENSION_NAME<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb41-4">m<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>def<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"square_matrix"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>wrap_pybind_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>square_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"square_matrix"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb41-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="alternatives" class="level3">
<h3 class="anchored" data-anchor-id="alternatives">Alternatives</h3>
<ul>
<li>Numba
<ul>
<li>Website: (<a href="https://numba.pydata.org/">link</a>)</li>
<li>Write CUDA kernels directly in Python.</li>
<li>Easier syntax compared to C++, but may have performance limitations.</li>
</ul></li>
</ul>
</section>
</section>
<section id="triton" class="level2">
<h2 class="anchored" data-anchor-id="triton">Triton</h2>
<ul>
<li>Timestamp: <a href="https://youtu.be/LuhJEEJQgUM?si=fPptD3s7ZD2Ppa35&amp;t=1574">26:14</a></li>
<li>Documentation: (<a href="https://triton-lang.org/main/index.html">link</a>)</li>
<li>Python-based domain-specific language (DSL) for GPU programming.
<ul>
<li>Accessed through Python functions</li>
</ul></li>
<li>Block-based programming language</li>
<li>Does not generate CUDA
<ul>
<li>Generates a PTX kernel (CUDA assembly)</li>
</ul></li>
<li>Has a cache called <code>.triton</code>
<ul>
<li>Stores all individual LLVM IRs (Intermediate Representations) including the PTX</li>
</ul></li>
<li>The most important optimization for machine learning code is often fusions
<ul>
<li>Include more operations in a single kernel</li>
</ul></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled" title="Additional Tips">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Additional Tips
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Start with simple kernels and gradually increase complexity.</li>
<li>Leverage existing PyTorch kernels and Triton tutorials as learning resources.</li>
<li>Focus on kernel fusion to improve performance by combining multiple operations.</li>
<li>Consider using torch.compile to automatically generate Triton kernels from PyTorch code.</li>
</ul>
</div>
</div>
<section id="code-example-square-operation-using-triton" class="level3">
<h3 class="anchored" data-anchor-id="code-example-square-operation-using-triton">Code Example: Square operation using Triton</h3>
<ul>
<li>Operates over rows instead of threads</li>
<li>The block size had a significant impact on performance</li>
</ul>
</section>
<section id="triton-debugger" class="level3">
<h3 class="anchored" data-anchor-id="triton-debugger">Triton debugger</h3>
<ul>
<li><div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">  triton.jit(interpret<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div></li>
<li>Allows you to inspect code using Python breakpoints</li>
<li>Almost everything is a <code>WrappedTensor</code>
<ul>
<li>Inspect variables with <code>var_name.tensor</code></li>
</ul></li>
<li>Environment variable:
<ul>
<li><div class="sourceCode" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb43-1">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TRITON_INTERPRET</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>1</span></code></pre></div></li>
</ul></li>
<li>Can’t use print statements
<ul>
<li>Store variables in global memory and read them</li>
</ul></li>
</ul>
</section>
<section id="code-example-exploration-of-generated-square-kernel-ptx" class="level3">
<h3 class="anchored" data-anchor-id="code-example-exploration-of-generated-square-kernel-ptx">Code Example: Exploration of generated Square Kernel PTX</h3>
<ul>
<li>Element-wise matrix square</li>
<li>Triton is leveraging 8 registers at a time</li>
<li>Store global: writing the variables back to global memory
<ul>
<li>Can see what are the actual registers being used directly</li>
</ul></li>
<li>Recommendation:
<ul>
<li>Use ChatGPT (or other) to annotate the generated PTX assembly code</li>
</ul></li>
</ul>
</section>
<section id="code-example-auto-generate-a-triton-kernel-using-torch.compile" class="level3">
<h3 class="anchored" data-anchor-id="code-example-auto-generate-a-triton-kernel-using-torch.compile">Code Example: Auto-generate a triton kernel using <code>torch.compile()</code></h3>
<ul>
<li><div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb44-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the code generated by torch.compile to the console</span></span>
<span id="cb44-2">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TORCH_LOGS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_code"</span></span>
<span id="cb44-3">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">TORCH_LOGS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OUTPUT_CODE"</span></span></code></pre></div></li>
<li><div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">  torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(torch.square)</span></code></pre></div></li>
<li>Generated triton kernel does not operate row-by-row</li>
<li>Includes data type heuristics</li>
<li>Includes compiler heuristics</li>
</ul>
</section>
</section>
<section id="optimization-profiling-with-nsight-compute" class="level2">
<h2 class="anchored" data-anchor-id="optimization-profiling-with-nsight-compute">Optimization &amp; Profiling with Nsight Compute</h2>
<ul>
<li>Timestamp: <a href="https://youtu.be/LuhJEEJQgUM?si=-JjWySLFpKxp9RST&amp;t=2356">39:16</a></li>
<li>NVIDIA NSight Compute Profiler</li>
<li><a href="https://developer.nvidia.com/tools-overview/nsight-compute/get-started">Download NVIDIA Nsight Compute</a>
<ul>
<li><a href="https://developer.nvidia.com/downloads/assets/tools/secure/nsight-compute/2024_1_1/nsight-compute-linux-2024.1.1.4-33998838.run">Linux</a></li>
<li><a href="https://developer.nvidia.com/downloads/assets/tools/secure/nsight-compute/2024_1_1/nsight-compute-win64-2024.1.1.4-33998838.msi">Windows</a></li>
</ul></li>
<li><a href="https://pypi.org/project/jupyterlab-nvidia-nsight/">NVIDIA Nsight Tools JupyterLab Extension</a></li>
<li>Default Usage
<ul>
<li><div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb46-1">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ncu</span> python train.py</span></code></pre></div></li>
</ul></li>
<li>Does not work on most cloud providers</li>
</ul>
<section id="logs-example" class="level3">
<h3 class="anchored" data-anchor-id="logs-example">Logs Example:</h3>
<ul>
<li>Shows L1 Cache throughput, L2 Cache throughput, among others</li>
<li>Contains actionable hints:
<ul>
<li><pre class="text"><code>  OPT This kernel grid is too small to fill the available resources on this device, resulting in only 0.4 full waves across all SMs. Look at Launch Statistics for more details.</code></pre></li>
<li>Gives percentages that provide a performance ceiling to target</li>
<li>Tail effect and achieved occupancy
<ul>
<li>often controlled by padding
<ul>
<li>We can control padding</li>
</ul></li>
</ul></li>
<li>Long scoreboard stalls:
<ul>
<li>coalesce reads and writes</li>
<li>use shared memory</li>
<li>controlled by triton</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="visual-profiler" class="level3">
<h3 class="anchored" data-anchor-id="visual-profiler">Visual Profiler</h3>
<ul>
<li><div class="sourceCode" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb48-1">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">ncu</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--set</span> full <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> output <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">which</span> python<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span> train.py</span></code></pre></div></li>
<li>Can see the memory throughput, compute throughput, block size, etc.</li>
<li>Can examine individual lines of code</li>
</ul>
</section>
<section id="moving-from-pytorch-to-triton-to-cuda" class="level3">
<h3 class="anchored" data-anchor-id="moving-from-pytorch-to-triton-to-cuda">Moving from PyTorch to Triton to CUDA</h3>
<ul>
<li>Try triton first if PyTorch is not enough</li>
<li>Use NCU profiler to see what performance improvements can be made over the triton attempt</li>
<li>Consider moving to CUDA if the hints suggest tweaking something (e.g., long scoreboard stalls) that triton controls</li>
</ul>
<table class="caption-top table">
<thead>
<tr class="header">
<th></th>
<th>CUDA</th>
<th>Triton</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Memory Coalescing</td>
<td>Manual</td>
<td>Automatic</td>
</tr>
<tr class="even">
<td>Shared Memory Management</td>
<td>Manual</td>
<td>Automatic</td>
</tr>
<tr class="odd">
<td>Scheduling (Withing SMs)</td>
<td>Manual</td>
<td>Automatic</td>
</tr>
<tr class="even">
<td>Scheduling (Across SMs)</td>
<td>Manual</td>
<td>Manual</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="qa" class="level2">
<h2 class="anchored" data-anchor-id="qa">Q&amp;A</h2>
<ul>
<li>Timestamp: <a href="https://youtu.be/LuhJEEJQgUM?si=bgCHDc8KtYaEqtb0&amp;t=2697">44:57</a></li>
<li>Relationship between triton and <code>torch.compile</code>
<ul>
<li>Compilers are quite dumb
<ul>
<li><code>torch.square</code>
<ul>
<li>torch compile does not know what this operation is since it is not a primitive operation
<ul>
<li>turns it into a <code>torch.mul</code> operation</li>
<li>reads the <code>torch.mul</code> operation and writes a string to disk for using <code>triton.mul</code> and you run that</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li>How often do you find the triton code generated with <code>torch.compile</code> readable enough to be a useful starting point?
<ul>
<li>Almost always</li>
<li>Compilers can’t do things that are too clever</li>
<li>The main thing to look for is fusing as many things as possible into as few kernels as possible</li>
<li>The variable names are things like <code>temp1</code> and <code>temp0</code>
<ul>
<li>Add you own comments using LLM like ChatGPT</li>
</ul></li>
</ul></li>
<li>Did you compare the performance of triton vs CUDA for square kernel?
<ul>
<li>Did not</li>
</ul></li>
<li>Does CUDA also generate PTX code?
<ul>
<li>Yes, but do not know how to look at it.</li>
</ul></li>
<li>When does <code>torch.compile</code> break?
<ul>
<li>The design philosophy of torch compile is that you should not need to change your code</li>
<li>Writing your code with torch compile in mind can result in SOTA performance
<ul>
<li>SAM, Stable Diffusion, etc.</li>
</ul></li>
</ul></li>
</ul>


</section>

 ]]></description>
  <category>notes</category>
  <category>cuda</category>
  <category>pytorch</category>
  <guid>christianjmills.com/posts/cuda-mode-notes/lecture-001/</guid>
  <pubDate>Fri, 26 Apr 2024 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Quantizing timm Image Classifiers with ONNX Runtime and TensorRT in Ubuntu</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/ort-tensorrt-ubuntu/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/pytorch-train-image-classifier-series.html"><strong>Fine-Tuning Image Classifiers with PyTorch and the timm library for Beginners</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Quantization Process</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading the Checkpoint Data</li>
<li>Loading the Dataset</li>
<li>Collecting Calibration Data</li>
<li>Performing Inference with TensorRT</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome back to this series on image classification with the timm library. Previously, we <a href="../">fine-tuned a ResNet 18-D</a> model in PyTorch to classify hand signs and <a href="../onnx-export">exported it to ONNX</a>. This tutorial covers quantizing our ONNX model and performing int8 inference using ONNX Runtime and TensorRT.</p>
<p>Quantization aims to make inference more computationally and memory efficient using a lower precision data type (e.g., 8-bit integer (int8)) for the model weights and activations. Modern devices increasingly have specialized hardware for running models at these lower precisions for improved performance.</p>
<p>ONNX Runtime includes tools to assist with quantizing our model from its original float32 precision to int8. ONNX Runtime’s execution providers also make it easier to leverage the hardware-specific inference libraries used to run models on the specialized hardware. In this tutorial, we will use the TensorRT Execution Provider to perform int8-precision inference.</p>
<p>TensorRT is a high-performance inference library for NVIDIA hardware. For our purposes it allows us to run our image classification model at 16-bit and 8-bit precision, while leveraging the specialized tensor cores in modern NVIDIA devices.</p>
<div class="callout callout-style-default callout-important callout-titled" title="This post assumes the reader has completed the previous tutorial linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post assumes the reader has completed the previous tutorial linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../onnx-export">Exporting timm Image Classifiers from PyTorch to ONNX</a></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-important callout-titled" title="TensorRT Hardware Requirements:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TensorRT Hardware Requirements:
</div>
</div>
<div class="callout-body-container callout-body">
<p>TensorRT requires NVIDIA hardware with CUDA <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capabilities">Compute Capability</a> 7.0 or higher (e.g., RTX 20-series or newer). Check the Compute Capability tables at the link below for your Nvidia hardware:</p>
<ul>
<li><a href="https://developer.nvidia.com/cuda-gpus#compute">GPU Computer Capability Tables</a></li>
</ul>
<p>You can follow along using the free GPU-tier of Google Colab if you do not have any supported hardware.</p>
</div>
</div>
</section>
<section id="quantization-process" class="level2">
<h2 class="anchored" data-anchor-id="quantization-process">Quantization Process</h2>
<p>Quantizing our model involves converting the original 32-bit floating point values to 8-bit integers. float32 precision allows for a significantly greater range of possible values versus int8. To find the best way to map the float32 values to int8, we must compute the range of float32 values in the model.</p>
<p>The float32 values for the model weights are static, while the activation values depend on the input fed to the model. We can calculate a suitable range of activation values by feeding sample inputs through the model and recording the activations. TensorRT can then use this information when quantizing the model. We will use a subset of images from the <a href="../#loading-and-exploring-the-dataset">original training dataset</a> to generate this calibration data.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>As with the previous tutorial, the code is available as a Jupyter Notebook.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Google Colab</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/timm-image-classifier-ort-tensorrt-int8-calibration-inference.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-timm-gesture-recognition-tutorial-code/blob/main/notebooks/timm-image-classifier-ort-tensorrt-int8-calibration-inference-colab.ipynb">Open In Colab</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>First, we must add a few new libraries to our <a href="../onnx-export/#setting-up-your-python-environment">Python environment</a>.</p>
<section id="install-cuda-package" class="level3">
<h3 class="anchored" data-anchor-id="install-cuda-package">Install CUDA Package</h3>
<p>Both ONNX Runtime and TensorRT require CUDA for use with NVIDIA GPUs. The most recent CUDA version supported by ONNX Runtime is <code>12.2</code>.</p>
<p>Run the following command to install CUDA in our Python environment with <a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#conda-installation">Conda/Mamba</a>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install cuda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia/label/cuda-12.2.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install cuda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia/label/cuda-12.2.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="install-onnx-runtime-and-tensorrt" class="level3">
<h3 class="anchored" data-anchor-id="install-onnx-runtime-and-tensorrt">Install ONNX Runtime and TensorRT</h3>
<p>The only additional libraries we need are ONNX Runtime with GPU support and TensorRT, assuming the packages used in the previous two tutorials are already in the Python environment.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>onnxruntime-gpu</code></td>
<td>ONNX Runtime is a runtime accelerator for machine learning models. (<a href="https://pypi.org/project/onnxruntime-gpu/">link</a>)</td>
</tr>
<tr class="even">
<td><code>tensorrt</code></td>
<td>A high performance deep learning inference library for Nvidia devices. (<a href="https://pypi.org/project/tensorrt/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the libraries:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install TensorRT packages</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tensorrt==10.0.1'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--extra-index-url</span> https://pypi.nvidia.com</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install ONNX Runtime for CUDA 12</span></span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'onnxruntime-gpu==1.18.0'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--extra-index-url</span> https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/onnxruntime-cuda-12/pypi/simple/</span></code></pre></div>
<p>With our environment updated, we can dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python dependencies into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb4-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb4-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img, get_img_files</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb4-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb4-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-16"></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb4-18">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb4-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import ONNX dependencies</span></span>
<span id="cb4-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnxruntime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ort <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the ONNX Runtime</span></span>
<span id="cb4-25"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> onnxruntime.tools.symbolic_shape_infer <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SymbolicShapeInference</span>
<span id="cb4-26"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> onnxruntime.quantization <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CalibrationDataReader, CalibrationMethod, create_calibrator, write_calibration_table</span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tensorrt_libs</span></span>
<span id="cb4-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorrt_libs</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make sure to import the <code>tensorrt_libs</code> module that is part of the <code>tensorrt</code> pip package. Otherwise, you will need to update the <code>LD_LIBRARY_PATH</code> environment variable with the path to the TensorRT library files.</p>
</div>
</div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>Next, we will set the folder locations for our project, the calibration dataset, and the directory with the ONNX model and JSON class labels file.</p>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>Readers following the tutorial on their local machine should select locations with read and write access to store the archived and extracted dataset. For a cloud service like Google Colab, you can set it to the current directory.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb5-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-timm-image-classifier"</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb5-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb5-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb5-11">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/mnt/980_1TB_2/Datasets/"</span>)</span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb5-13">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb5-16">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb5-18">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path to the checkpoint folder</span></span>
<span id="cb5-21">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"2024-02-02_15-41-23"</span>)</span>
<span id="cb5-22"></span>
<span id="cb5-23">pd.Series({</span>
<span id="cb5-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir, </span>
<span id="cb5-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb5-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir,</span>
<span id="cb5-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Checkpoint Directory:"</span>: checkpoint_dir,</span>
<span id="cb5-28">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_98a20">
<thead>
</thead>
<tbody>
<tr>
<th id="T_98a20_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_98a20_row0_col0" class="data row0 col0">
pytorch-timm-image-classifier
</td>
</tr>
<tr>
<th id="T_98a20_level0_row1" class="row_heading level0 row1">
Dataset Directory:
</th>
<td id="T_98a20_row1_col0" class="data row1 col0">
/mnt/980_1TB_2/Datasets
</td>
</tr>
<tr>
<th id="T_98a20_level0_row2" class="row_heading level0 row2">
Archive Directory:
</th>
<td id="T_98a20_row2_col0" class="data row2 col0">
/mnt/980_1TB_2/Datasets/../Archive
</td>
</tr>
<tr>
<th id="T_98a20_level0_row3" class="row_heading level0 row3">
Checkpoint Directory:
</th>
<td id="T_98a20_row3_col0" class="data row3 col0">
pytorch-timm-image-classifier/2024-02-02_15-41-23
</td>
</tr>
</tbody>
</table>

</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Those following along on Google Colab can drag the contents of their checkpoint folder into Colab's file browser. ">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Those following along on Google Colab can drag the contents of their checkpoint folder into Colab’s file browser.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
</section>
<section id="loading-the-checkpoint-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-checkpoint-data">Loading the Checkpoint Data</h2>
<p>Now, we can load the class labels, set the path for the ONNX model.</p>
<section id="load-the-class-labels" class="level3">
<h3 class="anchored" data-anchor-id="load-the-class-labels">Load the Class Labels</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The class labels path</span></span>
<span id="cb6-2">class_labels_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*classes.json'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the JSON class labels data</span></span>
<span id="cb6-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(class_labels_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb6-6">        class_labels_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the list of classes</span></span>
<span id="cb6-9">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_labels_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classes'</span>]</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the list of classes</span></span>
<span id="cb6-12">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
call
</td>
</tr>
<tr>
<th>
1
</th>
<td>
dislike
</td>
</tr>
<tr>
<th>
2
</th>
<td>
fist
</td>
</tr>
<tr>
<th>
3
</th>
<td>
four
</td>
</tr>
<tr>
<th>
4
</th>
<td>
like
</td>
</tr>
<tr>
<th>
5
</th>
<td>
mute
</td>
</tr>
<tr>
<th>
6
</th>
<td>
no_gesture
</td>
</tr>
<tr>
<th>
7
</th>
<td>
ok
</td>
</tr>
<tr>
<th>
8
</th>
<td>
one
</td>
</tr>
<tr>
<th>
9
</th>
<td>
palm
</td>
</tr>
<tr>
<th>
10
</th>
<td>
peace
</td>
</tr>
<tr>
<th>
11
</th>
<td>
peace_inverted
</td>
</tr>
<tr>
<th>
12
</th>
<td>
rock
</td>
</tr>
<tr>
<th>
13
</th>
<td>
stop
</td>
</tr>
<tr>
<th>
14
</th>
<td>
stop_inverted
</td>
</tr>
<tr>
<th>
15
</th>
<td>
three
</td>
</tr>
<tr>
<th>
16
</th>
<td>
three2
</td>
</tr>
<tr>
<th>
17
</th>
<td>
two_up
</td>
</tr>
<tr>
<th>
18
</th>
<td>
two_up_inverted
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="set-model-checkpoint-information" class="level3">
<h3 class="anchored" data-anchor-id="set-model-checkpoint-information">Set Model Checkpoint Information</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The onnx model path</span></span>
<span id="cb7-2">onnx_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.onnx'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</section>
</section>
<section id="loading-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-dataset">Loading the Dataset</h2>
<p>Now that we set up the project, we can download our dataset and select a subset to use for calibration.</p>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>We first need to construct the name for the Hugging Face Hub dataset and define where to download and extract the dataset.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb8-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hagrid-classification-512p-no-gesture-150k-zip'</span></span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb8-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb8-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>removesuffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-zip"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb8-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>removesuffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-zip"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb8-14">pd.Series({</span>
<span id="cb8-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb8-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb8-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb8-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_04900">
<thead>
</thead>
<tbody>
<tr>
<th id="T_04900_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_04900_row0_col0" class="data row0 col0">
cj-mills/hagrid-classification-512p-no-gesture-150k-zip
</td>
</tr>
<tr>
<th id="T_04900_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_04900_row1_col0" class="data row1 col0">
/mnt/980_1TB_2/Datasets/../Archive/hagrid-classification-512p-no-gesture-150k.zip
</td>
</tr>
<tr>
<th id="T_04900_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_04900_row2_col0" class="data row2 col0">
/mnt/980_1TB_2/Datasets/hagrid-classification-512p-no-gesture-150k
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the dataset archive file and extract the dataset. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb9-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>removesuffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-zip'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb9-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb9-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb9-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb9-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb9-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb9-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb9-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb9-14">    </span>
<span id="cb9-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb9-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb9-17">    </span>
<span id="cb9-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb9-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Once downloaded, we can get the paths to the images in the dataset.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of all JPG image files in the dataset</span></span>
<span id="cb10-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./**/*.jpeg"</span>))</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb10-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_file_paths)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb10-8">pd.DataFrame(img_file_paths).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 153735</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-classification-512p-no-gesture-150k/call/3ffbf0a0-1837-42cd-8f13-33977a2b47aa.jpeg
</td>
</tr>
<tr>
<th>
1
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-classification-512p-no-gesture-150k/call/7f4d415e-f570-42c3-aa5a-7c907d2d461e.jpeg
</td>
</tr>
<tr>
<th>
2
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-classification-512p-no-gesture-150k/call/0003d6d1-3489-4f57-ab7a-44744dba93fd.jpeg
</td>
</tr>
<tr>
<th>
3
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-classification-512p-no-gesture-150k/call/00084dfa-60a2-4c8e-9bd9-25658382b8b7.jpeg
</td>
</tr>
<tr>
<th>
4
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-classification-512p-no-gesture-150k/call/0010543c-be59-49e7-8f6d-fbea8f5fdc6b.jpeg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="select-sample-images" class="level3">
<h3 class="anchored" data-anchor-id="select-sample-images">Select Sample Images</h3>
<p>Using every image in the dataset for the calibration process would be unnecessary and time-consuming, so we’ll select a random subset.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set random seed for consistency </span></span>
<span id="cb12-2">sample_percentage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb12-3">random.shuffle(img_file_paths)</span>
<span id="cb12-4">sample_img_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.sample(img_file_paths, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_file_paths)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sample_percentage))</span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled" title="Other Datasets:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Other Datasets:
</div>
</div>
<div class="callout-body-container callout-body">
<p>Try to have at least <code>200</code> samples for the calibration set if adapting this tutorial to another dataset.</p>
</div>
</div>
</section>
</section>
<section id="collecting-calibration-data" class="level2">
<h2 class="anchored" data-anchor-id="collecting-calibration-data">Collecting Calibration Data</h2>
<p>With the dataset samples selected, we can feed them through the model and collect the calibration data.</p>
<section id="implement-a-calibrationdatareader" class="level3">
<h3 class="anchored" data-anchor-id="implement-a-calibrationdatareader">Implement a CalibrationDataReader</h3>
<p>First, we will implement a <a href="https://github.com/microsoft/onnxruntime/blob/07788e082ef2c78c3f4e72f49e7e7c3db6f09cb0/onnxruntime/python/tools/quantization/calibrate.py#L30"><code>CalibrationDataReader</code></a> class to load and prepare samples to feed through the model.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CalibrationDataReaderCV(CalibrationDataReader):</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A subclass of CalibrationDataReader specifically designed for handling</span></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    image data for calibration in computer vision tasks. This reader loads,</span></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    preprocesses, and provides images for model calibration.</span></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb13-7">    </span>
<span id="cb13-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_file_paths, target_sz, input_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>):</span>
<span id="cb13-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes a new instance of the CalibrationDataReaderCV class.</span></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_file_paths (list): A list of image file paths.</span></span>
<span id="cb13-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            target_sz (tuple): The target size (width, height) to resize images to.</span></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            input_name (str, optional): The name of the input node in the ONNX model. Default is 'input'.</span></span>
<span id="cb13-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb13-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the base class</span></span>
<span id="cb13-18">        </span>
<span id="cb13-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialization of instance variables</span></span>
<span id="cb13-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_file_paths</span>
<span id="cb13-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_name</span>
<span id="cb13-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.enum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(img_file_paths)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an iterator over the image paths</span></span>
<span id="cb13-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.target_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_sz</span>
<span id="cb13-24">        </span>
<span id="cb13-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_next(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb13-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves, processes, and returns the next image in the sequence as a NumPy array suitable for model input.</span></span>
<span id="cb13-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb13-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb13-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dict: A dictionary with a single key-value pair where the key is `input_name` and the value is the</span></span>
<span id="cb13-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  preprocessed image as a NumPy array, or None if there are no more images.</span></span>
<span id="cb13-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb13-33">        </span>
<span id="cb13-34">        img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.enum, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the next image path</span></span>
<span id="cb13-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> img_path:</span>
<span id="cb13-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If there are no more paths, return None</span></span>
<span id="cb13-37"></span>
<span id="cb13-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image from the filepath and convert to RGB</span></span>
<span id="cb13-39">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_path).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb13-40"></span>
<span id="cb13-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image to the target size</span></span>
<span id="cb13-42">        input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(image, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.target_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-43">        </span>
<span id="cb13-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a NumPy array, normalize, and add a batch dimension</span></span>
<span id="cb13-45">        input_tensor_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(input_img, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32).transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb13-46"></span>
<span id="cb13-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the image in a dictionary under the specified input name</span></span>
<span id="cb13-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_name: input_tensor_np}</span></code></pre></div>
<div class="callout callout-style-default callout-warning callout-titled" title="Preprocessing Steps:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Preprocessing Steps:
</div>
</div>
<div class="callout-body-container callout-body">
<p>This <code>CalibrationDataReader</code> class does not normalize the input as our ONNX model performs that step internally. Be sure to include any required input normalization if adapting this tutorial to another model that does not include it internally.</p>
</div>
</div>
</section>
<section id="specify-a-cache-folder" class="level3">
<h3 class="anchored" data-anchor-id="specify-a-cache-folder">Specify a Cache Folder</h3>
<p>Next, we will create a folder to store the collected calibration data and any cache files generated by TensorRT.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">trt_cache_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_engine_cache'</span></span>
<span id="cb14-2">trt_cache_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-3">trt_cache_dir</span></code></pre></div>
<pre class="text"><code>PosixPath('pytorch-timm-image-classifier/2024-02-02_15-41-23/trt_engine_cache')</code></pre>
</section>
<section id="collect-calibration-data" class="level3">
<h3 class="anchored" data-anchor-id="collect-calibration-data">Collect Calibration Data</h3>
<p>Now, we can create a calibrator object and an instance of our custom <code>CalibrationDataReader</code> object to collect the activation values and compute the range of values. The calibrator object creates a temporary ONNX model for the calibration process that we can delete afterward.</p>
<p>After feeding the data samples through the model, we will save the generated calibration file for TensorRT to use later.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb16-2"></span>
<span id="cb16-3">target_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">288</span></span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save path for temporary ONNX model used during calibration process</span></span>
<span id="cb16-6">augmented_model_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onnx_file_path.parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>onnx_file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-augmented.onnx"</span></span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a calibrator object for the ONNX model.</span></span>
<span id="cb16-10">    calibrator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_calibrator(</span>
<span id="cb16-11">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>onnx_file_path, </span>
<span id="cb16-12">        op_types_to_calibrate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, </span>
<span id="cb16-13">        augmented_model_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_model_path, </span>
<span id="cb16-14">        calibrate_method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CalibrationMethod.MinMax</span>
<span id="cb16-15">    )</span>
<span id="cb16-16"></span>
<span id="cb16-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the execution providers for the calibrator.</span></span>
<span id="cb16-18">    calibrator.set_execution_providers([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CUDAExecutionProvider"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CPUExecutionProvider"</span>])</span>
<span id="cb16-19"></span>
<span id="cb16-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the custom CalibrationDataReader object</span></span>
<span id="cb16-21">    calibration_data_reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CalibrationDataReaderCV(img_file_paths<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img_paths, </span>
<span id="cb16-22">                                                      target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target_sz, </span>
<span id="cb16-23">                                                      input_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>calibrator.model.graph.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].name)</span>
<span id="cb16-24"></span>
<span id="cb16-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collect calibration data using the specified data reader.</span></span>
<span id="cb16-26">    calibrator.collect_data(data_reader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>calibration_data_reader)</span>
<span id="cb16-27"></span>
<span id="cb16-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize an empty dictionary to hold the new compute range values.</span></span>
<span id="cb16-29">    new_compute_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb16-30"></span>
<span id="cb16-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute data and update the compute range for each key in the calibrator's data.</span></span>
<span id="cb16-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> calibrator.compute_data().data.items():</span>
<span id="cb16-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the min and max values from the range_value.</span></span>
<span id="cb16-34">        v1, v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.range_value</span>
<span id="cb16-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the min and max values to float and store them in the new_compute_range dictionary.</span></span>
<span id="cb16-36">        new_compute_range[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(v1.item()), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(v2.item()))</span>
<span id="cb16-37">        </span>
<span id="cb16-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write the computed calibration table to the specified directory.</span></span>
<span id="cb16-39">    write_calibration_table(new_compute_range, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(trt_cache_dir))</span>
<span id="cb16-40">    </span>
<span id="cb16-41"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb16-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Catch any exceptions that occur during the calibration process.</span></span>
<span id="cb16-43">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"An error occurred:"</span>, e)</span>
<span id="cb16-44"></span>
<span id="cb16-45"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">finally</span>:</span>
<span id="cb16-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove temporary ONNX file created during the calibration process</span></span>
<span id="cb16-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> augmented_model_path.exists():</span>
<span id="cb16-48">        augmented_model_path.unlink()</span></code></pre></div>
<pre class="text"><code>CPU times: user 48.1 s, sys: 5.88 s, total: 53.9 s
Wall time: 1min 4s</code></pre>
</section>
<section id="inspect-tensorrt-cache-folder" class="level3">
<h3 class="anchored" data-anchor-id="inspect-tensorrt-cache-folder">Inspect TensorRT Cache Folder</h3>
<p>Looking in the cache folder, we should see three new files.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the content of the module folder as a Pandas DataFrame</span></span>
<span id="cb18-2">pd.DataFrame([path.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> trt_cache_dir.iterdir()])</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
calibration.cache
</td>
</tr>
<tr>
<th>
1
</th>
<td>
calibration.flatbuffers
</td>
</tr>
<tr>
<th>
2
</th>
<td>
calibration.json
</td>
</tr>
</tbody>
</table>
</div>
<p>That takes care of the calibration process. In the next section, we will create an ONNX Runtime inference session and perform inference with TensorRT.</p>
</section>
</section>
<section id="performing-inference-with-tensorrt" class="level2">
<h2 class="anchored" data-anchor-id="performing-inference-with-tensorrt">Performing Inference with TensorRT</h2>
<p>To have TensorRT quantize the model for int8 inference, we need to specify the path to the cache folder and the calibration table file name and enable int8 precision when initializing the inference session.</p>
<section id="create-an-inference-session" class="level3">
<h3 class="anchored" data-anchor-id="create-an-inference-session">Create an Inference Session</h3>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">ort.get_available_providers()</span></code></pre></div>
<pre class="text"><code>['TensorrtExecutionProvider', 'CUDAExecutionProvider', 'CPUExecutionProvider']</code></pre>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">providers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb21-2">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TensorrtExecutionProvider'</span>, {</span>
<span id="cb21-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'device_id'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The device ID</span></span>
<span id="cb21-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_max_workspace_size'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4e9</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Maximum workspace size for TensorRT engine (1e9 ≈ 1GB)</span></span>
<span id="cb21-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_engine_cache_enable'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable TensorRT engine caching</span></span>
<span id="cb21-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_engine_cache_path'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(trt_cache_dir), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Path for TensorRT engine, profile files, and int8 calibration table</span></span>
<span id="cb21-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_int8_enable'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable int8 mode in TensorRT</span></span>
<span id="cb21-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_int8_calibration_table_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'calibration.flatbuffers'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># int8 calibration table file for non-QDQ models in int8 mode</span></span>
<span id="cb21-9">    })</span>
<span id="cb21-10">]</span>
<span id="cb21-11"></span>
<span id="cb21-12">sess_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort.SessionOptions()</span>
<span id="cb21-13"></span>
<span id="cb21-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model and create an InferenceSession</span></span>
<span id="cb21-15">session <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort.InferenceSession(onnx_file_path, sess_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sess_opt, providers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>providers)</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled" title="TensorRT Warning Messages:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TensorRT Warning Messages:
</div>
</div>
<div class="callout-body-container callout-body">
<p>You might see warning messages like the example below when creating the inference session with TensorRT. These are normal, and you can safely ignore them.</p>
<pre class="text"><code>2024-03-28 13:07:04.725964281 [W:onnxruntime:Default, tensorrt_execution_provider.h:83 log] [2024-03-28 20:07:04 WARNING] onnx2trt_utils.cpp:374: Your ONNX model has been generated with INT64 weights, while TensorRT does not natively support INT64. Attempting to cast down to INT32.
2024-03-28 13:07:04.725986806 [W:onnxruntime:Default, tensorrt_execution_provider.h:83 log] [2024-03-28 20:07:04 WARNING] onnx2trt_utils.cpp:400: One or more weights outside the range of INT32 was clamped
2024-03-28 13:07:04.738993049 [W:onnxruntime:Default, tensorrt_execution_provider.h:83 log] [2024-03-28 20:07:04 WARNING] onnx2trt_utils.cpp:374: Your ONNX model has been generated with INT64 weights, while TensorRT does not natively support INT64. Attempting to cast down to INT32.
2024-03-28 13:07:04.739015348 [W:onnxruntime:Default, tensorrt_execution_provider.h:83 log] [2024-03-28 20:07:04 WARNING] onnx2trt_utils.cpp:400: One or more weights outside the range of INT32 was clamped</code></pre>
</div>
</div>
</section>
<section id="select-a-test-image" class="level3">
<h3 class="anchored" data-anchor-id="select-a-test-image">Select a Test Image</h3>
<p>We can use the same test image and input size from the <a href="../onnx-export/#select-a-test-image">previous tutorial</a>.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">test_img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pexels-elina-volkova-16191659.jpg'</span></span>
<span id="cb23-2">test_img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/cj-mills/pexel-hand-gesture-test-images/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_img_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb23-3"></span>
<span id="cb23-4">download_file(test_img_url, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb23-5"></span>
<span id="cb23-6">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_img_name)</span>
<span id="cb23-7">display(test_img)</span>
<span id="cb23-8"></span>
<span id="cb23-9">pd.Series({</span>
<span id="cb23-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test Image Size:"</span>: test_img.size, </span>
<span id="cb23-11">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/ort-tensorrt-ubuntu/images/output_41_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_cba4b">
<thead>
</thead>
<tbody>
<tr>
<th id="T_cba4b_level0_row0" class="row_heading level0 row0">
Test Image Size:
</th>
<td id="T_cba4b_row0_col0" class="data row0 col0">
(637, 960)
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="prepare-the-test-image" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-test-image">Prepare the Test Image</h3>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the input image size</span></span>
<span id="cb24-2">test_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">288</span></span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize image without cropping</span></span>
<span id="cb24-5">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_sz)</span>
<span id="cb24-6"></span>
<span id="cb24-7">display(input_img)</span>
<span id="cb24-8"></span>
<span id="cb24-9">pd.Series({</span>
<span id="cb24-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size</span>
<span id="cb24-11">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/ort-tensorrt-ubuntu/images/output_43_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_796f0">
<thead>
</thead>
<tbody>
<tr>
<th id="T_796f0_level0_row0" class="row_heading level0 row0">
Input Image Size:
</th>
<td id="T_796f0_row0_col0" class="data row0 col0">
(288, 416)
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="prepare-the-input-tensor" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor">Prepare the Input Tensor</h3>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the existing input image to NumPy format</span></span>
<span id="cb25-2">input_tensor_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(input_img, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32).transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span></code></pre></div>
</section>
<section id="build-tensorrt-engine" class="level3">
<h3 class="anchored" data-anchor-id="build-tensorrt-engine">Build TensorRT Engine</h3>
<p>TensorRT will build an optimized and quantized representation of our model called an engine when we first pass input to the inference session. It will save a copy of this engine object to the cache folder we specified earlier. The build process can take a bit, so caching the engine will save time for future use.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform a single inference run to build the TensorRT engine for the current input dimensions</span></span>
<span id="cb26-3">session.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: input_tensor_np})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<pre><code>CPU times: user 25.4 s, sys: 1.88 s, total: 27.3 s
Wall time: 35 s</code></pre>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>TensorRT needs to build separate engine files for different input dimensions.</p>
</div>
</div>
</section>
<section id="inspect-tensorrt-cache-folder-1" class="level3">
<h3 class="anchored" data-anchor-id="inspect-tensorrt-cache-folder-1">Inspect TensorRT Cache Folder</h3>
<p>If we look in the cache folder again, we can see a new <code>.engine</code> file and a new <code>.profile</code> file.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the content of the module folder as a Pandas DataFrame</span></span>
<span id="cb28-2">pd.DataFrame([path.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> trt_cache_dir.iterdir()])</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
calibration.cache
</td>
</tr>
<tr>
<th>
1
</th>
<td>
calibration.flatbuffers
</td>
</tr>
<tr>
<th>
2
</th>
<td>
calibration.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
TensorrtExecutionProvider_TRTKernel_graph_main_graph_9370993215447387188_0_0_int8_sm89.engine
</td>
</tr>
<tr>
<th>
4
</th>
<td>
TensorrtExecutionProvider_TRTKernel_graph_main_graph_9370993215447387188_0_0_int8_sm89.profile
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="benchmark-quantized-model" class="level3">
<h3 class="anchored" data-anchor-id="benchmark-quantized-model">Benchmark Quantized Model</h3>
<p>With the TensorRT engine built, we can benchmark our quantized model to gauge the raw inference speeds.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb29-2">session.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: input_tensor_np})</span></code></pre></div>
<pre class="text"><code>376 µs ± 3.92 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
<p>In my testing for this model, TensoRT int8 inference tends to be about 3x faster than the CUDA execution provider with the original float32 model.</p>
<p>Of course, it does not matter how much faster the quantized model is if there is a significant drop in accuracy, so let’s verify the prediction results.</p>
</section>
<section id="compute-the-predictions" class="level3">
<h3 class="anchored" data-anchor-id="compute-the-predictions">Compute the Predictions</h3>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run inference</span></span>
<span id="cb31-2">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> session.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: input_tensor_np})[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the highest confidence score</span></span>
<span id="cb31-5">confidence_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb31-6"></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the class index with the highest confidence score and convert it to the class name</span></span>
<span id="cb31-8">pred_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_names[outputs.argmax()]</span>
<span id="cb31-9"></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the image</span></span>
<span id="cb31-11">display(test_img)</span>
<span id="cb31-12"></span>
<span id="cb31-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store the prediction data in a Pandas Series for easy formatting</span></span>
<span id="cb31-14">pd.Series({</span>
<span id="cb31-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Size:"</span>: input_img.size,</span>
<span id="cb31-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted Class:"</span>: pred_class,</span>
<span id="cb31-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confidence Score:"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>confidence_score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb31-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/ort-tensorrt-ubuntu/images/output_53_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_46d6d">
<thead>
</thead>
<tbody>
<tr>
<th id="T_46d6d_level0_row0" class="row_heading level0 row0">
Input Size:
</th>
<td id="T_46d6d_row0_col0" class="data row0 col0">
(288, 416)
</td>
</tr>
<tr>
<th id="T_46d6d_level0_row1" class="row_heading level0 row1">
Predicted Class:
</th>
<td id="T_46d6d_row1_col0" class="data row1 col0">
mute
</td>
</tr>
<tr>
<th id="T_46d6d_level0_row2" class="row_heading level0 row2">
Confidence Score:
</th>
<td id="T_46d6d_row2_col0" class="data row2 col0">
100.00%
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The probability scores will likely differ slightly from the full-precision ONNX model, but the predicted class should be the same.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<p>Don’t forget to download the content of the <code>trt_engine_cache</code> folder from the Colab Environment’s file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</p>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on reaching the end of this tutorial. We previously trained an image classification model in PyTorch for hand gesture recognition, and now we’ve quantized that model for optimized inference on NVIDIA hardware. Our model is now smaller, faster, and better suited for real-time applications and edge devices like the Jetson Orin Nano.</p>
<p><br></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Next Steps">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Next Steps
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Feel free to post questions or problems related to this tutorial in the comments below. I try to make time to address them on Thursdays and Fridays.</li>
<li>If you would like to explore my <a href="../../../about.html#services">services</a> for your project, you can reach out via email at <a href="mailto:christian@christianjmills.com">christian@christianjmills.com</a></li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>onnx</category>
  <category>cuda</category>
  <category>tensorrt</category>
  <category>image classification</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-image-classifier-timm-hf-tutorial/ort-tensorrt-ubuntu/</guid>
  <pubDate>Sun, 07 Apr 2024 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Quantizing YOLOX with ONNX Runtime and TensorRT in Ubuntu</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/ort-tensorrt-ubuntu/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/pytorch-train-object-detector-yolox-series.html"><strong>Training YOLOX Models for Real-Time Object Detection in PyTorch</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Quantization Process</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading the Checkpoint Data</li>
<li>Loading the Dataset</li>
<li>Collecting Calibration Data</li>
<li>Performing Inference with TensorRT</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome back to this series on real-time object detection with YOLOX. Previously, we <a href="../">fine-tuned a YOLOX</a> model in PyTorch to detect hand signs and <a href="../onnx-export">exported it to ONNX</a>. This tutorial covers quantizing our ONNX model and performing int8 inference using ONNX Runtime and TensorRT.</p>
<p>Quantization aims to make inference more computationally and memory efficient using a lower precision data type (e.g., 8-bit integer (int8)) for the model weights and activations. Modern devices increasingly have specialized hardware for running models at these lower precisions for improved performance.</p>
<p>ONNX Runtime includes tools to assist with quantizing our model from its original float32 precision to int8. ONNX Runtime’s execution providers also make it easier to leverage the hardware-specific inference libraries used to run models on the specialized hardware. In this tutorial, we will use the TensorRT Execution Provider to perform int8-precision inference.</p>
<p>TensorRT is a high-performance inference library for NVIDIA hardware. For our purposes it allows us to run our YOLOX model at 16-bit and 8-bit precision, while leveraging the specialized tensor cores in modern NVIDIA devices.</p>
<div class="callout callout-style-default callout-important callout-titled" title="This post assumes the reader has completed the previous tutorial linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post assumes the reader has completed the previous tutorial linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../onnx-export">Exporting YOLOX Models from PyTorch to ONNX</a></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-important callout-titled" title="TensorRT Hardware Requirements:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TensorRT Hardware Requirements:
</div>
</div>
<div class="callout-body-container callout-body">
<p>TensorRT requires NVIDIA hardware with CUDA <a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capabilities">Compute Capability</a> 7.0 or higher (e.g., RTX 20-series or newer). Check the Compute Capability tables at the link below for your Nvidia hardware:</p>
<ul>
<li><a href="https://developer.nvidia.com/cuda-gpus#compute">GPU Computer Capability Tables</a></li>
</ul>
<p>You can follow along using the free GPU-tier of Google Colab if you do not have any supported hardware.</p>
</div>
</div>
</section>
<section id="quantization-process" class="level2">
<h2 class="anchored" data-anchor-id="quantization-process">Quantization Process</h2>
<p>Quantizing our model involves converting the original 32-bit floating point values to 8-bit integers. float32 precision allows for a significantly greater range of possible values versus int8. To find the best way to map the float32 values to int8, we must compute the range of float32 values in the model.</p>
<p>The float32 values for the model weights are static, while the activation values depend on the input fed to the model. We can calculate a suitable range of activation values by feeding sample inputs through the model and recording the activations. TensorRT can then use this information when quantizing the model. We will use a subset of images from the <a href="../#loading-and-exploring-the-dataset">original training dataset</a> to generate this calibration data.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>As with the previous tutorial, the code is available as a Jupyter Notebook.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Google Colab</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/pytorch-yolox-object-detection-tutorial-code/blob/main/notebooks/yolox-object-detector-ort-tensorrt-int8-calibration-inference.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-yolox-object-detection-tutorial-code/blob/main/notebooks/yolox-object-detector-ort-tensorrt-int8-calibration-inference-colab.ipynb">Open In Colab</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>First, we must add a few new libraries to our <a href="../onnx-export/#setting-up-your-python-environment">Python environment</a>.</p>
<section id="install-cuda-package" class="level3">
<h3 class="anchored" data-anchor-id="install-cuda-package">Install CUDA Package</h3>
<p>Both ONNX Runtime and TensorRT require CUDA for use with NVIDIA GPUs. The most recent CUDA version supported by ONNX Runtime is 12.2.</p>
<p>Run the following command to install CUDA in our Python environment with <a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#conda-installation">Conda/Mamba</a>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install cuda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia/label/cuda-12.2.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install cuda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia/label/cuda-12.2.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="install-onnx-runtime-and-tensorrt" class="level3">
<h3 class="anchored" data-anchor-id="install-onnx-runtime-and-tensorrt">Install ONNX Runtime and TensorRT</h3>
<p>The only additional libraries we need are ONNX Runtime with GPU support and TensorRT, assuming the packages used in the previous two tutorials are already in the Python environment.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>onnxruntime-gpu</code></td>
<td>ONNX Runtime is a runtime accelerator for machine learning models. (<a href="https://pypi.org/project/onnxruntime-gpu/">link</a>)</td>
</tr>
<tr class="even">
<td><code>tensorrt</code></td>
<td>A high performance deep learning inference library for Nvidia devices. (<a href="https://pypi.org/project/tensorrt/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the libraries:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install TensorRT packages</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tensorrt==10.0.1'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--extra-index-url</span> https://pypi.nvidia.com</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install ONNX Runtime for CUDA 12</span></span>
<span id="cb3-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'onnxruntime-gpu==1.18.0'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--extra-index-url</span> https://aiinfra.pkgs.visualstudio.com/PublicPackages/_packaging/onnxruntime-cuda-12/pypi/simple/</span></code></pre></div>
<p>With our environment updated, we can dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python dependencies into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb4-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb4-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img, get_img_files</span>
<span id="cb4-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.annotation <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bboxes</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb4-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb4-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb4-19">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb4-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import ONNX dependencies</span></span>
<span id="cb4-25"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnxruntime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ort <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the ONNX Runtime</span></span>
<span id="cb4-26"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> onnxruntime.quantization <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CalibrationDataReader, CalibrationMethod, create_calibrator, write_calibration_table</span>
<span id="cb4-27"></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tensorrt_libs</span></span>
<span id="cb4-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorrt_libs</span>
<span id="cb4-30"></span>
<span id="cb4-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb4-32"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Make sure to import the <code>tensorrt_libs</code> module that is part of the <code>tensorrt</code> pip package. Otherwise, you will need to update the <code>LD_LIBRARY_PATH</code> environment variable with the path to the TensorRT library files.</p>
</div>
</div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>Next, we will set the folder locations for our project, the calibration dataset, and the directory with the ONNX model and JSON colormap file. We should also ensure we have a font file for annotating images.</p>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>Readers following the tutorial on their local machine should select locations with read and write access to store the archived and extracted dataset. For a cloud service like Google Colab, you can set it to the current directory.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb5-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-yolox-object-detector"</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb5-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb5-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb5-11">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/mnt/980_1TB_2/Datasets/"</span>)</span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb5-13">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb5-16">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb5-18">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path to the checkpoint folder</span></span>
<span id="cb5-21">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"2024-02-17_11-08-46"</span>)</span>
<span id="cb5-22"></span>
<span id="cb5-23">pd.Series({</span>
<span id="cb5-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir, </span>
<span id="cb5-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb5-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir,</span>
<span id="cb5-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Checkpoint Directory:"</span>: checkpoint_dir,</span>
<span id="cb5-28">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_32fa5">
<thead>
</thead>
<tbody>
<tr>
<th id="T_32fa5_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_32fa5_row0_col0" class="data row0 col0">
pytorch-yolox-object-detector
</td>
</tr>
<tr>
<th id="T_32fa5_level0_row1" class="row_heading level0 row1">
Dataset Directory:
</th>
<td id="T_32fa5_row1_col0" class="data row1 col0">
/mnt/980_1TB_2/Datasets
</td>
</tr>
<tr>
<th id="T_32fa5_level0_row2" class="row_heading level0 row2">
Archive Directory:
</th>
<td id="T_32fa5_row2_col0" class="data row2 col0">
/mnt/980_1TB_2/Datasets/../Archive
</td>
</tr>
<tr>
<th id="T_32fa5_level0_row3" class="row_heading level0 row3">
Checkpoint Directory:
</th>
<td id="T_32fa5_row3_col0" class="data row3 col0">
pytorch-yolox-object-detector/2024-02-17_11-08-46
</td>
</tr>
</tbody>
</table>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="I made an ONNX model  available on Hugging Face Hub with a colormap file in the repository linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
I made an ONNX model available on Hugging Face Hub with a colormap file in the repository linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://huggingface.co/cj-mills/yolox-hagrid-onnx/tree/main">cj-mills/yolox-hagrid-onnx</a></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Those following along on Google Colab can drag the contents of their checkpoint folder into Colab's file browser. ">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Those following along on Google Colab can drag the contents of their checkpoint folder into Colab’s file browser.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
<section id="download-a-font-file" class="level3">
<h3 class="anchored" data-anchor-id="download-a-font-file">Download a Font File</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb6-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb6-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
</section>
<section id="loading-the-checkpoint-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-checkpoint-data">Loading the Checkpoint Data</h2>
<p>Now, we can load the colormap, set the path for the ONNX model, and set the max stride value.</p>
<section id="load-the-colormap" class="level3">
<h3 class="anchored" data-anchor-id="load-the-colormap">Load the Colormap</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The colormap path</span></span>
<span id="cb7-2">colormap_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*colormap.json'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the JSON colormap data</span></span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(colormap_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb7-6">        colormap_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the JSON data to a dictionary        </span></span>
<span id="cb7-9">colormap_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]: item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'items'</span>]}</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the class names from the colormap</span></span>
<span id="cb7-12">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(colormap_dict.keys())</span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the colormap in integer format</span></span>
<span id="cb7-15">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_dict.values()]</span></code></pre></div>
</section>
<section id="set-model-checkpoint-information" class="level3">
<h3 class="anchored" data-anchor-id="set-model-checkpoint-information">Set Model Checkpoint Information</h3>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The onnx model path</span></span>
<span id="cb8-2">onnx_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.onnx'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set max stride value for processing output</span></span>
<span id="cb8-5">max_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span></code></pre></div>
</section>
</section>
<section id="loading-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-dataset">Loading the Dataset</h2>
<p>Now that we set up the project, we can download our dataset and select a subset to use for calibration.</p>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>We first need to construct the name for the Hugging Face Hub dataset and define where to download and extract the dataset.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb9-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hagrid-sample-30k-384p'</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb9-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb9-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb9-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-12"></span>
<span id="cb9-13">pd.Series({</span>
<span id="cb9-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb9-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb9-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb9-17">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_7fa45">
<thead>
</thead>
<tbody>
<tr>
<th id="T_7fa45_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_7fa45_row0_col0" class="data row0 col0">
cj-mills/hagrid-sample-30k-384p
</td>
</tr>
<tr>
<th id="T_7fa45_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_7fa45_row1_col0" class="data row1 col0">
/mnt/980_1TB_2/Datasets/../Archive/hagrid-sample-30k-384p.zip
</td>
</tr>
<tr>
<th id="T_7fa45_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_7fa45_row2_col0" class="data row2 col0">
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the dataset archive file and extract the dataset. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb10-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb10-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb10-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb10-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb10-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb10-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb10-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb10-14">    </span>
<span id="cb10-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb10-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb10-17">    </span>
<span id="cb10-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb10-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Once downloaded, we can get the paths to the images in the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of all JPG image files in the dataset</span></span>
<span id="cb11-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./**/*.jpg"</span>))</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_file_paths)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb11-8">pd.DataFrame(img_file_paths).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 31833</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_call/00005c9c-3548-4a8f-9d0b-2dd4aff37fc9.jpg
</td>
</tr>
<tr>
<th>
1
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_call/0020a3db-82d8-47aa-8642-2715d4744db5.jpg
</td>
</tr>
<tr>
<th>
2
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_call/004ac93f-0f7c-49a4-aadc-737e0ad4273c.jpg
</td>
</tr>
<tr>
<th>
3
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_call/006cac69-d3f0-47f9-aac9-38702d038ef1.jpg
</td>
</tr>
<tr>
<th>
4
</th>
<td>
/mnt/980_1TB_2/Datasets/hagrid-sample-30k-384p/hagrid_30k/train_val_call/00973fac-440e-4a56-b60c-2a06d5fb155d.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="select-sample-images" class="level3">
<h3 class="anchored" data-anchor-id="select-sample-images">Select Sample Images</h3>
<p>Using every image in the dataset for the calibration process would be unnecessary and time-consuming, so we’ll select a random subset.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set random seed for consistency </span></span>
<span id="cb13-2">sample_percentage <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb13-3">random.shuffle(img_file_paths)</span>
<span id="cb13-4">sample_img_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.sample(img_file_paths, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_file_paths)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sample_percentage))</span></code></pre></div>
<div class="callout callout-style-default callout-tip callout-titled" title="Other Datasets:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Other Datasets:
</div>
</div>
<div class="callout-body-container callout-body">
<p>Try to have at least <code>200</code> samples for the calibration set if adapting this tutorial to another dataset.</p>
</div>
</div>
</section>
</section>
<section id="collecting-calibration-data" class="level2">
<h2 class="anchored" data-anchor-id="collecting-calibration-data">Collecting Calibration Data</h2>
<p>With the dataset samples selected, we can feed them through the model and collect the calibration data.</p>
<section id="implement-a-calibrationdatareader" class="level3">
<h3 class="anchored" data-anchor-id="implement-a-calibrationdatareader">Implement a CalibrationDataReader</h3>
<p>First, we will implement a <a href="https://github.com/microsoft/onnxruntime/blob/07788e082ef2c78c3f4e72f49e7e7c3db6f09cb0/onnxruntime/python/tools/quantization/calibrate.py#L30"><code>CalibrationDataReader</code></a> class to load and prepare samples to feed through the model.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CalibrationDataReaderCV(CalibrationDataReader):</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A subclass of CalibrationDataReader specifically designed for handling</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    image data for calibration in computer vision tasks. This reader loads,</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    preprocesses, and provides images for model calibration.</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-7">    </span>
<span id="cb14-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_file_paths, target_sz, max_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, input_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>):</span>
<span id="cb14-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes a new instance of the CalibrationDataReaderCV class.</span></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_file_paths (list): A list of image file paths.</span></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            target_sz (tuple): The target size (width, height) to resize images to.</span></span>
<span id="cb14-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            max_stride (int, optional): Maximum stride for ensuring input dimension compatibility. Default is 32.</span></span>
<span id="cb14-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            input_name (str, optional): The name of the input node in the ONNX model. Default is 'input'.</span></span>
<span id="cb14-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb14-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the base class</span></span>
<span id="cb14-19">        </span>
<span id="cb14-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialization of instance variables</span></span>
<span id="cb14-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_file_paths</span>
<span id="cb14-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_name</span>
<span id="cb14-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_stride</span>
<span id="cb14-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.enum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(img_file_paths)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an iterator over the image paths</span></span>
<span id="cb14-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.target_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_sz</span>
<span id="cb14-26">        </span>
<span id="cb14-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_next(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb14-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves, processes, and returns the next image in the sequence as a NumPy array suitable for model input.</span></span>
<span id="cb14-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb14-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb14-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dict: A dictionary with a single key-value pair where the key is `input_name` and the value is the</span></span>
<span id="cb14-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  preprocessed image as a NumPy array, or None if there are no more images.</span></span>
<span id="cb14-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb14-35">        </span>
<span id="cb14-36">        img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.enum, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the next image path</span></span>
<span id="cb14-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> img_path:</span>
<span id="cb14-38">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If there are no more paths, return None</span></span>
<span id="cb14-39"></span>
<span id="cb14-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image from the filepath and convert to RGB</span></span>
<span id="cb14-41">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_path).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb14-42"></span>
<span id="cb14-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image to the target size</span></span>
<span id="cb14-44">        resized_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(image, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.target_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-45">        </span>
<span id="cb14-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust dimensions to be multiples of max_stride</span></span>
<span id="cb14-47">        input_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_stride <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dim <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> resized_img.size]</span>
<span id="cb14-48">        </span>
<span id="cb14-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate offsets for cropping to maintain aspect ratio</span></span>
<span id="cb14-50">        offsets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.array(resized_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> np.array(input_dims)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb14-51">        </span>
<span id="cb14-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the scale between original and resized images for potential use</span></span>
<span id="cb14-53">        min_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(image.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(resized_img.size)</span>
<span id="cb14-54">        max_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(image.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(resized_img.size)</span>
<span id="cb14-55">        </span>
<span id="cb14-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the resized image based on calculated offsets to fit model input requirements</span></span>
<span id="cb14-57">        input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resized_img.crop(box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>offsets, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(np.array(resized_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offsets)])</span>
<span id="cb14-58"></span>
<span id="cb14-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the image to a NumPy array, normalize, and add a batch dimension</span></span>
<span id="cb14-60">        input_tensor_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(input_img, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32).transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb14-61"></span>
<span id="cb14-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the image in a dictionary under the specified input name</span></span>
<span id="cb14-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_name: input_tensor_np}</span></code></pre></div>
<div class="callout callout-style-default callout-warning callout-titled" title="Preprocessing Steps:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Preprocessing Steps:
</div>
</div>
<div class="callout-body-container callout-body">
<p>This <code>CalibrationDataReader</code> class does not normalize the input as our ONNX model performs that step internally. Be sure to include any required input normalization if adapting this tutorial to another model that does not include it internally.</p>
</div>
</div>
</section>
<section id="specify-a-cache-folder" class="level3">
<h3 class="anchored" data-anchor-id="specify-a-cache-folder">Specify a Cache Folder</h3>
<p>Next, we will create a folder to store the collected calibration data and any cache files generated by TensorRT.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">trt_cache_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_engine_cache'</span></span>
<span id="cb15-2">trt_cache_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-3">trt_cache_dir</span></code></pre></div>
<pre class="text"><code>PosixPath('pytorch-yolox-object-detector/2024-02-17_11-08-46/trt_engine_cache')</code></pre>
</section>
<section id="collect-calibration-data" class="level3">
<h3 class="anchored" data-anchor-id="collect-calibration-data">Collect Calibration Data</h3>
<p>Now, we can create a calibrator object and an instance of our custom <code>CalibrationDataReader</code> object to collect the activation values and compute the range of values. The calibrator object creates a temporary ONNX model for the calibration process that we can delete afterward.</p>
<p>After feeding the data samples through the model, we will save the generated calibration file for TensorRT to use later.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb17-2"></span>
<span id="cb17-3">target_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save path for temporary ONNX model used during calibration process</span></span>
<span id="cb17-6">augmented_model_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onnx_file_path.parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>onnx_file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-augmented.onnx"</span></span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb17-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a calibrator object for the ONNX model.</span></span>
<span id="cb17-10">    calibrator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_calibrator(</span>
<span id="cb17-11">        model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>onnx_file_path, </span>
<span id="cb17-12">        op_types_to_calibrate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, </span>
<span id="cb17-13">        augmented_model_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_model_path, </span>
<span id="cb17-14">        calibrate_method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CalibrationMethod.MinMax</span>
<span id="cb17-15">    )</span>
<span id="cb17-16"></span>
<span id="cb17-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the execution providers for the calibrator.</span></span>
<span id="cb17-18">    calibrator.set_execution_providers([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CUDAExecutionProvider"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CPUExecutionProvider"</span>])</span>
<span id="cb17-19"></span>
<span id="cb17-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the custom CalibrationDataReader object</span></span>
<span id="cb17-21">    calibration_data_reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CalibrationDataReaderCV(img_file_paths<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img_paths, </span>
<span id="cb17-22">                                                      target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target_sz, </span>
<span id="cb17-23">                                                      max_stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_stride, </span>
<span id="cb17-24">                                                      input_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>calibrator.model.graph.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].name)</span>
<span id="cb17-25"></span>
<span id="cb17-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collect calibration data using the specified data reader.</span></span>
<span id="cb17-27">    calibrator.collect_data(data_reader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>calibration_data_reader)</span>
<span id="cb17-28"></span>
<span id="cb17-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize an empty dictionary to hold the new compute range values.</span></span>
<span id="cb17-30">    new_compute_range <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb17-31"></span>
<span id="cb17-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute data and update the compute range for each key in the calibrator's data.</span></span>
<span id="cb17-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> calibrator.compute_data().data.items():</span>
<span id="cb17-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the min and max values from the range_value.</span></span>
<span id="cb17-35">        v1, v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.range_value</span>
<span id="cb17-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the min and max values to float and store them in the new_compute_range dictionary.</span></span>
<span id="cb17-37">        new_compute_range[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(v1.item()), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(v2.item()))</span>
<span id="cb17-38">        </span>
<span id="cb17-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write the computed calibration table to the specified directory.</span></span>
<span id="cb17-40">    write_calibration_table(new_compute_range, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(trt_cache_dir))</span>
<span id="cb17-41">    </span>
<span id="cb17-42"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> e:</span>
<span id="cb17-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Catch any exceptions that occur during the calibration process.</span></span>
<span id="cb17-44">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"An error occurred:"</span>, e)</span>
<span id="cb17-45"></span>
<span id="cb17-46"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">finally</span>:</span>
<span id="cb17-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove temporary ONNX file created during the calibration process</span></span>
<span id="cb17-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> augmented_model_path.exists():</span>
<span id="cb17-49">        augmented_model_path.unlink()</span></code></pre></div>
<pre class="text"><code>CPU times: user 48 s, sys: 4.13 s, total: 52.1 s
Wall time: 56.7 s</code></pre>
</section>
<section id="inspect-tensorrt-cache-folder" class="level3">
<h3 class="anchored" data-anchor-id="inspect-tensorrt-cache-folder">Inspect TensorRT Cache Folder</h3>
<p>Looking in the cache folder, we should see three new files.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the content of the module folder as a Pandas DataFrame</span></span>
<span id="cb19-2">pd.DataFrame([path.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> trt_cache_dir.iterdir()])</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
calibration.cache
</td>
</tr>
<tr>
<th>
1
</th>
<td>
calibration.flatbuffers
</td>
</tr>
<tr>
<th>
2
</th>
<td>
calibration.json
</td>
</tr>
</tbody>
</table>
</div>
<p>That takes care of the calibration process. In the next section, we will create an ONNX Runtime inference session and perform inference with TensorRT.</p>
</section>
</section>
<section id="performing-inference-with-tensorrt" class="level2">
<h2 class="anchored" data-anchor-id="performing-inference-with-tensorrt">Performing Inference with TensorRT</h2>
<p>To have TensorRT quantize the model for int8 inference, we need to specify the path to the cache folder and the calibration table file name and enable int8 precision when initializing the inference session.</p>
<section id="create-an-inference-session" class="level3">
<h3 class="anchored" data-anchor-id="create-an-inference-session">Create an Inference Session</h3>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">ort.get_available_providers()</span></code></pre></div>
<pre class="text"><code>['TensorrtExecutionProvider', 'CUDAExecutionProvider', 'CPUExecutionProvider']</code></pre>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">providers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb22-2">    (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TensorrtExecutionProvider'</span>, {</span>
<span id="cb22-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'device_id'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The device ID</span></span>
<span id="cb22-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_max_workspace_size'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4e9</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Maximum workspace size for TensorRT engine (1e9 ≈ 1GB)</span></span>
<span id="cb22-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_engine_cache_enable'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable TensorRT engine caching</span></span>
<span id="cb22-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_engine_cache_path'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(trt_cache_dir), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Path for TensorRT engine, profile files, and int8 calibration table</span></span>
<span id="cb22-7">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_int8_enable'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable int8 mode in TensorRT</span></span>
<span id="cb22-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trt_int8_calibration_table_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'calibration.flatbuffers'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># int8 calibration table file for non-QDQ models in int8 mode</span></span>
<span id="cb22-9">    })</span>
<span id="cb22-10">]</span>
<span id="cb22-11"></span>
<span id="cb22-12">sess_opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort.SessionOptions()</span>
<span id="cb22-13"></span>
<span id="cb22-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model and create an InferenceSession</span></span>
<span id="cb22-15">session <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort.InferenceSession(onnx_file_path, sess_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sess_opt, providers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>providers)</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled" title="TensorRT Warning Messages:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TensorRT Warning Messages:
</div>
</div>
<div class="callout-body-container callout-body">
<p>You might see warning messages like the example below when creating the inference session with TensorRT. These are normal, and you can safely ignore them.</p>
<pre class="text"><code>2024-03-28 13:07:04.725964281 [W:onnxruntime:Default, tensorrt_execution_provider.h:83 log] [2024-03-28 20:07:04 WARNING] onnx2trt_utils.cpp:374: Your ONNX model has been generated with INT64 weights, while TensorRT does not natively support INT64. Attempting to cast down to INT32.
2024-03-28 13:07:04.725986806 [W:onnxruntime:Default, tensorrt_execution_provider.h:83 log] [2024-03-28 20:07:04 WARNING] onnx2trt_utils.cpp:400: One or more weights outside the range of INT32 was clamped
2024-03-28 13:07:04.738993049 [W:onnxruntime:Default, tensorrt_execution_provider.h:83 log] [2024-03-28 20:07:04 WARNING] onnx2trt_utils.cpp:374: Your ONNX model has been generated with INT64 weights, while TensorRT does not natively support INT64. Attempting to cast down to INT32.
2024-03-28 13:07:04.739015348 [W:onnxruntime:Default, tensorrt_execution_provider.h:83 log] [2024-03-28 20:07:04 WARNING] onnx2trt_utils.cpp:400: One or more weights outside the range of INT32 was clamped</code></pre>
</div>
</div>
</section>
<section id="define-utility-functions" class="level3">
<h3 class="anchored" data-anchor-id="define-utility-functions">Define Utility Functions</h3>
<p>Next, we will redefine the same utility functions from the <a href="../onnx-export/#define-utility-functions">previous tutorial</a>.</p>
<section id="define-a-function-to-generate-the-output-grids" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-generate-the-output-grids">Define a function to generate the output grids</h4>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_output_grids_np(height, width, strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>]):</span>
<span id="cb24-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generate a numpy array containing grid coordinates and strides for a given height and width.</span></span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb24-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        height (int): The height of the image.</span></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        width (int): The width of the image.</span></span>
<span id="cb24-8"></span>
<span id="cb24-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        np.ndarray: A numpy array containing grid coordinates and strides.</span></span>
<span id="cb24-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb24-12"></span>
<span id="cb24-13">    all_coordinates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb24-14"></span>
<span id="cb24-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> stride <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> strides:</span>
<span id="cb24-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the grid height and width</span></span>
<span id="cb24-17">        grid_height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> stride</span>
<span id="cb24-18">        grid_width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> stride</span>
<span id="cb24-19"></span>
<span id="cb24-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate grid coordinates</span></span>
<span id="cb24-21">        g1, g0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(np.arange(grid_height), np.arange(grid_width), indexing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ij'</span>)</span>
<span id="cb24-22"></span>
<span id="cb24-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an array of strides</span></span>
<span id="cb24-24">        s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.full((grid_height, grid_width), stride)</span>
<span id="cb24-25"></span>
<span id="cb24-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stack the coordinates along with the stride</span></span>
<span id="cb24-27">        coordinates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack((g0.flatten(), g1.flatten(), s.flatten()), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-28"></span>
<span id="cb24-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append to the list</span></span>
<span id="cb24-30">        all_coordinates.append(coordinates)</span>
<span id="cb24-31"></span>
<span id="cb24-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate all arrays in the list along the first dimension</span></span>
<span id="cb24-33">    output_grids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.concatenate(all_coordinates, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb24-34"></span>
<span id="cb24-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output_grids</span></code></pre></div>
</section>
<section id="define-a-function-to-calculate-bounding-boxes-and-probabilities" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-calculate-bounding-boxes-and-probabilities">Define a function to calculate bounding boxes and probabilities</h4>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calculate_boxes_and_probs(model_output:np.ndarray, output_grids:np.ndarray) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> np.ndarray:</span>
<span id="cb25-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculate the bounding boxes and their probabilities.</span></span>
<span id="cb25-4"></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb25-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    model_output (numpy.ndarray): The output of the model.</span></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    output_grids (numpy.ndarray): The output grids.</span></span>
<span id="cb25-8"></span>
<span id="cb25-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb25-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    numpy.ndarray: The array containing the bounding box coordinates, class labels, and maximum probabilities.</span></span>
<span id="cb25-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb25-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the bounding box coordinates</span></span>
<span id="cb25-13">    box_centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (model_output[..., :<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> output_grids[..., :<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> output_grids[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span>
<span id="cb25-14">    box_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(model_output[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> output_grids[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span>
<span id="cb25-15"></span>
<span id="cb25-16">    x0, y0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [t.squeeze(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.split(box_centroids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> box_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb25-17">    w, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [t.squeeze(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.split(box_sizes, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb25-18"></span>
<span id="cb25-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the probabilities for each class</span></span>
<span id="cb25-20">    box_objectness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb25-21">    box_cls_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:]</span>
<span id="cb25-22">    box_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.expand_dims(box_objectness, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> box_cls_scores</span>
<span id="cb25-23"></span>
<span id="cb25-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the maximum probability and corresponding class for each proposal</span></span>
<span id="cb25-25">    max_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(box_probs, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb25-26">    labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(box_probs, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb25-27"></span>
<span id="cb25-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.array([x0, y0, w, h, labels, max_probs]).transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span></code></pre></div>
</section>
<section id="define-a-function-to-calculate-the-intersection-over-union" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-calculate-the-intersection-over-union">Define a function to calculate the intersection-over-union</h4>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calc_iou(proposals:np.ndarray) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> np.ndarray:</span>
<span id="cb26-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Calculates the Intersection over Union (IoU) for all pairs of bounding boxes (x,y,w,h) in 'proposals'.</span></span>
<span id="cb26-4"></span>
<span id="cb26-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The IoU is a measure of overlap between two bounding boxes. It is calculated as the area of</span></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    intersection divided by the area of union of the two boxes.</span></span>
<span id="cb26-7"></span>
<span id="cb26-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    proposals (2D np.array): A NumPy array of bounding boxes, where each box is an array [x, y, width, height].</span></span>
<span id="cb26-10"></span>
<span id="cb26-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb26-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    iou (2D np.array): The IoU matrix where each element i,j represents the IoU of boxes i and j.</span></span>
<span id="cb26-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb26-14"></span>
<span id="cb26-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate coordinates for the intersection rectangles</span></span>
<span id="cb26-16">    x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb26-17">    y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb26-18">    x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], (proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb26-19">    y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], (proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>])</span>
<span id="cb26-20">    </span>
<span id="cb26-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate intersection areas</span></span>
<span id="cb26-22">    intersections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.maximum(y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb26-23"></span>
<span id="cb26-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate union areas</span></span>
<span id="cb26-25">    areas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> proposals[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb26-26">    unions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> areas[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> areas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> intersections</span>
<span id="cb26-27"></span>
<span id="cb26-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate IoUs</span></span>
<span id="cb26-29">    iou <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> intersections <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> unions</span>
<span id="cb26-30"></span>
<span id="cb26-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the iou matrix</span></span>
<span id="cb26-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iou</span></code></pre></div>
</section>
<section id="define-a-function-to-filter-bounding-box-proposals-using-non-maximum-suppression" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-filter-bounding-box-proposals-using-non-maximum-suppression">Define a function to filter bounding box proposals using Non-Maximum Suppression</h4>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> nms_sorted_boxes(iou:np.ndarray, iou_thresh:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> np.ndarray:</span>
<span id="cb27-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Applies non-maximum suppression (NMS) to sorted bounding boxes.</span></span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    It suppresses boxes that have high overlap (as defined by the IoU threshold) with a box that </span></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    has a higher score.</span></span>
<span id="cb27-7"></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb27-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    iou (np.ndarray): An IoU matrix where each element i,j represents the IoU of boxes i and j.</span></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    iou_thresh (float): The IoU threshold for suppression. Boxes with IoU &gt; iou_thresh are suppressed.</span></span>
<span id="cb27-11"></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb27-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    keep (np.ndarray): The indices of the boxes to keep after applying NMS.</span></span>
<span id="cb27-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb27-15"></span>
<span id="cb27-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a boolean mask to keep track of boxes</span></span>
<span id="cb27-17">    mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ones(iou.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>)</span>
<span id="cb27-18"></span>
<span id="cb27-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply non-max suppression</span></span>
<span id="cb27-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(iou.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb27-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mask[i]:</span>
<span id="cb27-22">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Suppress boxes with higher index and IoU &gt; threshold</span></span>
<span id="cb27-23">            mask[(iou[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> iou_thresh) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (np.arange(iou.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> i)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb27-24"></span>
<span id="cb27-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the indices of the boxes to keep</span></span>
<span id="cb27-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.arange(iou.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])[mask]</span></code></pre></div>
</section>
</section>
<section id="select-a-test-image" class="level3">
<h3 class="anchored" data-anchor-id="select-a-test-image">Select a Test Image</h3>
<p>We can use the same test image and input size from the <a href="../onnx-export/#select-a-test-image">previous tutorial</a>.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">test_img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pexels-2769554-man-doing-rock-and-roll-sign.jpg"</span></span>
<span id="cb28-2">test_img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/cj-mills/pexel-hand-gesture-test-images/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_img_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb28-3"></span>
<span id="cb28-4">download_file(test_img_url, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb28-5"></span>
<span id="cb28-6">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_img_name)</span>
<span id="cb28-7">display(test_img)</span>
<span id="cb28-8"></span>
<span id="cb28-9">pd.Series({</span>
<span id="cb28-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test Image Size:"</span>: test_img.size, </span>
<span id="cb28-11">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/ort-tensorrt-ubuntu/images/output_56_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_235a6">
<thead>
</thead>
<tbody>
<tr>
<th id="T_235a6_level0_row0" class="row_heading level0 row0">
Test Image Size:
</th>
<td id="T_235a6_row0_col0" class="data row0 col0">
(640, 960)
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="prepare-the-test-image" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-test-image">Prepare the Test Image</h3>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the input image size</span></span>
<span id="cb29-2">test_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize image without cropping to multiple of the max stride</span></span>
<span id="cb29-5">resized_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-6"></span>
<span id="cb29-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculating the input dimensions that multiples of the max stride</span></span>
<span id="cb29-8">input_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> max_stride <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dim <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> resized_img.size]</span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the offsets from the resized image dimensions to the input dimensions</span></span>
<span id="cb29-11">offsets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (np.array(resized_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> input_dims)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb29-12"></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the scale between the source image and the resized image</span></span>
<span id="cb29-14">min_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(test_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(resized_img.size)</span>
<span id="cb29-15"></span>
<span id="cb29-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the resized image to the input dimensions</span></span>
<span id="cb29-17">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resized_img.crop(box<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>offsets, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>resized_img.size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>offsets])</span>
<span id="cb29-18"></span>
<span id="cb29-19">display(input_img)</span>
<span id="cb29-20"></span>
<span id="cb29-21">pd.Series({</span>
<span id="cb29-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image Size:"</span>: resized_img.size,</span>
<span id="cb29-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Dims:"</span>: input_dims,</span>
<span id="cb29-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Offsets:"</span>: offsets,</span>
<span id="cb29-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min Image Scale:"</span>: min_img_scale,</span>
<span id="cb29-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size</span>
<span id="cb29-27">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/ort-tensorrt-ubuntu/images/output_58_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_46f67">
<thead>
</thead>
<tbody>
<tr>
<th id="T_46f67_level0_row0" class="row_heading level0 row0">
Resized Image Size:
</th>
<td id="T_46f67_row0_col0" class="data row0 col0">
(384, 576)
</td>
</tr>
<tr>
<th id="T_46f67_level0_row1" class="row_heading level0 row1">
Input Dims:
</th>
<td id="T_46f67_row1_col0" class="data row1 col0">
[384, 576]
</td>
</tr>
<tr>
<th id="T_46f67_level0_row2" class="row_heading level0 row2">
Offsets:
</th>
<td id="T_46f67_row2_col0" class="data row2 col0">
[0. 0.]
</td>
</tr>
<tr>
<th id="T_46f67_level0_row3" class="row_heading level0 row3">
Min Image Scale:
</th>
<td id="T_46f67_row3_col0" class="data row3 col0">
1.666667
</td>
</tr>
<tr>
<th id="T_46f67_level0_row4" class="row_heading level0 row4">
Input Image Size:
</th>
<td id="T_46f67_row4_col0" class="data row4 col0">
(384, 576)
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="prepare-the-input-tensor" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor">Prepare the Input Tensor</h3>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the existing input image to NumPy format</span></span>
<span id="cb30-2">input_tensor_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(input_img, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32).transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span></code></pre></div>
</section>
<section id="build-tensorrt-engine" class="level3">
<h3 class="anchored" data-anchor-id="build-tensorrt-engine">Build TensorRT Engine</h3>
<p>TensorRT will build an optimized and quantized representation of our model called an engine when we first pass input to the inference session. It will save a copy of this engine object to the cache folder we specified earlier. The build process can take a bit, so caching the engine will save time for future use.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb31-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform a single inference run to build the TensorRT engine for the current input dimensions</span></span>
<span id="cb31-3">session.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: input_tensor_np})<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<pre><code>CPU times: user 1min 22s, sys: 5.69 s, total: 1min 27s
Wall time: 1min 39s</code></pre>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>TensorRT needs to build separate engine files for different input dimensions.</p>
</div>
</div>
</section>
<section id="inspect-tensorrt-cache-folder-1" class="level3">
<h3 class="anchored" data-anchor-id="inspect-tensorrt-cache-folder-1">Inspect TensorRT Cache Folder</h3>
<p>If we look in the cache folder again, we can see a new <code>.engine</code> file and a new <code>.profile</code> file.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the content of the module folder as a Pandas DataFrame</span></span>
<span id="cb33-2">pd.DataFrame([path.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> path <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> trt_cache_dir.iterdir()])</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
calibration.cache
</td>
</tr>
<tr>
<th>
1
</th>
<td>
calibration.flatbuffers
</td>
</tr>
<tr>
<th>
2
</th>
<td>
calibration.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
TensorrtExecutionProvider_TRTKernel_graph_main_graph_12802227604276161730_0_0_int8_sm89.engine
</td>
</tr>
<tr>
<th>
4
</th>
<td>
TensorrtExecutionProvider_TRTKernel_graph_main_graph_12802227604276161730_0_0_int8_sm89.profile
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="benchmark-quantized-model" class="level3">
<h3 class="anchored" data-anchor-id="benchmark-quantized-model">Benchmark Quantized Model</h3>
<p>With the TensorRT engine built, we can benchmark our quantized model to gauge the raw inference speeds.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb34-2">session.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: input_tensor_np})</span></code></pre></div>
<pre class="text"><code>866 µs ± 7.83 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)</code></pre>
<p>In my testing for this model, TensoRT int8 inference tends to be about 2.8-3x faster than the CUDA execution provider with the original float32 model.</p>
<p>Of course, it does not matter how much faster the quantized model is if there is a significant drop in accuracy, so let’s verify the prediction results.</p>
</section>
<section id="compute-the-predictions" class="level3">
<h3 class="anchored" data-anchor-id="compute-the-predictions">Compute the Predictions</h3>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run inference</span></span>
<span id="cb36-2">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> session.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: input_tensor_np})[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process the model output</span></span>
<span id="cb36-5">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> calculate_boxes_and_probs(outputs, generate_output_grids_np(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>input_tensor_np.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]))</span>
<span id="cb36-6"></span>
<span id="cb36-7">bbox_conf_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span></span>
<span id="cb36-8">iou_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span></span>
<span id="cb36-9"></span>
<span id="cb36-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the proposals based on the confidence threshold</span></span>
<span id="cb36-11">max_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[:, : ,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb36-12">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> bbox_conf_thresh</span>
<span id="cb36-13">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[mask]</span>
<span id="cb36-14"></span>
<span id="cb36-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort the proposals by probability in descending order</span></span>
<span id="cb36-16">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[proposals[..., <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].argsort()][::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb36-17"></span>
<span id="cb36-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply non-max suppression to the proposals with the specified threshold</span></span>
<span id="cb36-19">proposal_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nms_sorted_boxes(calc_iou(proposals[:, :<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]), iou_thresh)</span>
<span id="cb36-20">proposals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[proposal_indices]</span>
<span id="cb36-21"></span>
<span id="cb36-22">bbox_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (proposals[:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>offsets, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>min_img_scale</span>
<span id="cb36-23">label_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(idx)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> proposals[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]]</span>
<span id="cb36-24">probs_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proposals[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb36-25"></span>
<span id="cb36-26">annotated_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb36-27">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_img, </span>
<span id="cb36-28">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bbox_list, </span>
<span id="cb36-29">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>label_list,</span>
<span id="cb36-30">    probs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>probs_list,</span>
<span id="cb36-31">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[class_names.index(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> label_list], </span>
<span id="cb36-32">    font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file,</span>
<span id="cb36-33">)</span>
<span id="cb36-34"></span>
<span id="cb36-35">display(annotated_img)</span>
<span id="cb36-36"></span>
<span id="cb36-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas Series for easy formatting</span></span>
<span id="cb36-38">pd.Series({</span>
<span id="cb36-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Predicted BBoxes:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bbox<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, bbox <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(label_list, bbox_list.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(decimals<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))],</span>
<span id="cb36-40">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confidence Scores:"</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>prob<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, prob <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(label_list, probs_list)]</span>
<span id="cb36-41">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/ort-tensorrt-ubuntu/images/output_68_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_b5125">
<thead>
</thead>
<tbody>
<tr>
<th id="T_b5125_level0_row0" class="row_heading level0 row0">
Predicted BBoxes:
</th>
<td id="T_b5125_row0_col0" class="data row0 col0">
[‘rock:[344.66 245.036 109.577 108.912]’, ‘no_gesture:[196.431 519.459 101.863 80.836]’]
</td>
</tr>
<tr>
<th id="T_b5125_level0_row1" class="row_heading level0 row1">
Confidence Scores:
</th>
<td id="T_b5125_row1_col0" class="data row1 col0">
[‘rock: 91.85%’, ‘no_gesture: 86.75%’]
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The probability scores will likely differ slightly from the full-precision ONNX model, but the predicted object classes should be the same.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<p>Don’t forget to download the content of the <code>trt_engine_cache</code> folder from the Colab Environment’s file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</p>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on reaching the end of this tutorial. We previously trained a YOLOX model in PyTorch for hand gesture detection, and now we’ve quantized that model for optimized inference on NVIDIA hardware. Our model is now smaller, faster, and better suited for real-time applications and edge devices like the Jetson Orin Nano.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../byte-track/"><strong>Real-Time Object Tracking with YOLOX and ByteTrack</strong></a>: Learn how to track objects across video frames with YOLOX and ByteTrack.</li>
</ul>
<p><br></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Next Steps">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Next Steps
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Feel free to post questions or problems related to this tutorial in the comments below. I try to make time to address them on Thursdays and Fridays.</li>
<li>If you would like to explore my <a href="../../../about.html#services">services</a> for your project, you can reach out via email at <a href="mailto:christian@christianjmills.com">christian@christianjmills.com</a></li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>onnx</category>
  <category>cuda</category>
  <category>tensorrt</category>
  <category>object-detection</category>
  <category>yolox</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-object-detector-yolox-tutorial/ort-tensorrt-ubuntu/</guid>
  <pubDate>Sat, 30 Mar 2024 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Notes on Weapons of Mass Instruction: A Schoolteacher’s Journey Through the Dark World of Compulsory Schooling</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/weapons-of-mass-instruction-book-notes/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
These notes are part of the following collection:
</div>
</div>
<div class="callout-body-container callout-body">
<p><a href="../../series/notes/education-notes.html"><strong>Education</strong></a></p>
</div>
</div>
<ul>
<li>Prologue: Against School</li>
<li>Ch.1: Everything You Know about Schools is Wrong</li>
<li>Ch.2: Walkabout: London</li>
<li>Ch.3: Fat Stanley and the Lancaster Amish</li>
<li>Ch.4: David Sarnoff’s Classroom</li>
<li>Ch.5: Hector Isn’t the Problem</li>
<li>Ch.6: The Camino de Santiago</li>
<li>Ch.7: Weapons of Mass Instruction</li>
<li>Ch.8: What is Education?</li>
<li>Ch.9: A Letter to my Granddaughter about Dartmouth</li>
<li>Ch.10: Incident at Highland High</li>
<li>Afterword: Invitation to an Open Conspiracy: The Bartleby Project</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Book LInks:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://newsociety.com/books/w/weapons-of-mass-instruction">Publisher Page</a></li>
<li><a href="https://johntaylorgatto.com/">Author’s Website</a></li>
</ul>
</div>
</div>
<section id="against-school" class="level2">
<h2 class="anchored" data-anchor-id="against-school">Against School</h2>
<ul>
<li>John Taylor Gatto argues that compulsory schooling is designed to make students bored, childish, and conformist, serving the interests of corporations and governments rather than the students themselves.</li>
<li>He traces the origins of this system to Prussia and influential figures like Horace Mann and James Bryant Conant.</li>
<li>The real purposes of mandatory schooling are to create obedient workers and consumers, prevent the lower classes from uniting, and maintain a manageable population.</li>
<li>Despite this, Gatto believes that children have immense potential and that the tricks of compulsory schooling can be avoided by encouraging critical thinking, independence, and a rich inner life.</li>
</ul>
<section id="the-problem-of-boredom-in-schools" class="level3">
<h3 class="anchored" data-anchor-id="the-problem-of-boredom-in-schools">The Problem of Boredom in Schools</h3>
<ul>
<li><p>Gatto, a former teacher, found that both students and teachers in compulsory schools are bored.</p></li>
<li><p>Students complain that the work is meaningless and that they want to do something real. Teachers blame the students for being rude and uninterested.</p></li>
<li><p>Gatto argues that we are all to blame for this boredom, and that it is a childish attitude that should be avoided. His grandfather taught him this lesson at a young age.</p>
<ul>
<li><blockquote class="blockquote">
<p>“He told me that I was never to use that term in his presence again, that if I was bored it was my fault and no one else’s. The obligation to amuse and instruct myself was entirely my own, and people who didn’t know that were childish people to be avoided if possible, certainly not to be trusted.”</p>
</blockquote></li>
</ul></li>
</ul>
</section>
<section id="the-true-purposes-of-compulsory-schooling" class="level3">
<h3 class="anchored" data-anchor-id="the-true-purposes-of-compulsory-schooling">The True Purposes of Compulsory Schooling</h3>
<ul>
<li>Gatto argues that the real purposes of compulsory schooling are different from the stated goals of creating good people, citizens, and helping each person reach their potential.</li>
<li>He cites influential figures like H.L. Mencken, William James, and Orestes Brownson, who argued that American schooling was based on the Prussian system, which was designed to create mediocre intellects and manageable citizens.</li>
<li>Harvard president James Bryant Conant and education theorist Alexander Inglis played key roles in shaping modern compulsory schooling to serve these ends.</li>
</ul>
</section>
<section id="the-six-basic-functions-of-schooling-according-to-inglis" class="level3">
<h3 class="anchored" data-anchor-id="the-six-basic-functions-of-schooling-according-to-inglis">The Six Basic Functions of Schooling (according to Inglis)</h3>
<ol type="1">
<li><strong>The Adjustive or Adaptive Function:</strong> To establish fixed habits of reaction to authority, precluding critical judgment.<br>
</li>
<li><strong>The Integrating Function:</strong> To make children as alike as possible, conforming to authority.</li>
<li><strong>The Diagnostic and Directive Function:</strong> To determine each student’s proper social role and train them accordingly.</li>
<li><strong>The Differentiating Function:</strong> To sort children by role and limit their development to what is deemed appropriate for their destination in the social machine.</li>
<li><strong>The Selective Function:</strong> To tag the unfit with poor grades and remedial placement, ensuring that they are accepted as inferior and prevented from reproducing.</li>
<li><strong>The Propaedeutic Function:</strong> To teach a small fraction of kids how to manage and control a deliberately dumbed-down population.</li>
</ol>
</section>
<section id="the-interests-served-by-compulsory-schooling" class="level3">
<h3 class="anchored" data-anchor-id="the-interests-served-by-compulsory-schooling">The Interests Served by Compulsory Schooling</h3>
<ul>
<li>Gatto argues that mandatory schooling serves the interests of corporations and governments by creating a servile labor force, a harmless electorate, and a population of mindless consumers.</li>
<li>Industrial titans like Andrew Carnegie and John D. Rockefeller recognized the potential of public education to serve these ends.</li>
<li>President Woodrow Wilson openly advocated for a two-tiered education system, with one class receiving a liberal education and a much larger class being fitted for specific, difficult manual tasks.</li>
</ul>
</section>
<section id="the-effects-of-compulsory-schooling" class="level3">
<h3 class="anchored" data-anchor-id="the-effects-of-compulsory-schooling">The Effects of Compulsory Schooling</h3>
<ul>
<li>By separating children from responsibility, independence, and meaningful work, schooling prevents them from truly growing up.</li>
<li>Easy divorce, credit, entertainment, and answers have further infantilized the population, creating a nation of children who are easily manipulated by political and commercial interests.</li>
</ul>
</section>
<section id="recommendations-for-resisting-compulsory-schooling" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-for-resisting-compulsory-schooling">Recommendations for Resisting Compulsory Schooling</h3>
<ul>
<li>Teach children to be leaders and adventurers instead of employees and consumers.</li>
<li>Encourage critical and independent thinking rather than reflexive obedience.</li>
<li>Help children develop a rich inner life through solitude and engagement with serious ideas in history, literature, philosophy, etc.</li>
<li>Provide plenty of opportunities for real-world challenges and responsibilities.</li>
<li>Recognize that genius is common, and that children are capable of extraordinary things when given the chance to develop their potential.</li>
</ul>
</section>
</section>
<section id="everything-you-know-about-schools-is-wrong" class="level2">
<h2 class="anchored" data-anchor-id="everything-you-know-about-schools-is-wrong">Everything You Know about Schools is Wrong</h2>
<ul>
<li>Compulsory schooling in the US was established in the late 19th/early 20th century, driven by industrialists and financiers rather than public demand. The goal was to produce obedient workers and curb independent thinking.</li>
<li>Over the 20th century, literacy rates declined dramatically despite increased schooling. Gatto argues this is the intentional result of new teaching methods focused on memorization rather than comprehension.</li>
<li>True education has been replaced by schooling aimed at creating “human resources” for big business and government. Independent learning has been stifled in favor of conformity and subordination.</li>
<li>Alternative models of open-source, self-directed learning have consistently produced remarkable individuals. Forced schooling prevents young people from reaching their full potential.</li>
</ul>
<section id="the-establishment-of-compulsory-schooling" class="level3">
<h3 class="anchored" data-anchor-id="the-establishment-of-compulsory-schooling">The Establishment of Compulsory Schooling</h3>
<ul>
<li>In the early 20th century, schooling became compulsory in the US, driven by:
<ul>
<li>Industrialists like Rockefeller and Carnegie</li>
<li>A goal of “scientific population control” and eliminating independent family/cultural influences</li>
</ul></li>
<li>Number of school boards consolidated from 135,000 to 15,000, reducing local control</li>
<li>Schools converted into “behavioral training laboratories” focused on psychology and socialization rather than academics</li>
</ul>
</section>
<section id="the-decline-of-literacy" class="level3">
<h3 class="anchored" data-anchor-id="the-decline-of-literacy">The Decline of Literacy</h3>
<ul>
<li>Literacy rates dropped sharply from 96% in 1940 to under 73% for Vietnam draftees, despite more years of schooling</li>
<li>Attributed to a shift from phonics to “whole word” instruction and memorization</li>
<li>Motivated by a desire for behavioral conditioning rather than comprehension
<ul>
<li>“Bloom’s Taxonomy” used to classify thoughts, feelings and actions resulting from instruction</li>
<li>Shift from academic goals to “good citizenship” and subordination</li>
</ul></li>
</ul>
</section>
<section id="producing-human-resources" class="level3">
<h3 class="anchored" data-anchor-id="producing-human-resources">Producing “Human Resources”</h3>
<ul>
<li>Primary goal became creating a docile, malleable workforce for mass-production economy</li>
<li>Fear of “overproduction” - too many independent producers, not enough dependent consumers</li>
<li>Schools designed to create shallow thinkers focused on consumption and “getting a job”</li>
<li>Classical education replaced by habit training and know-how without real understanding</li>
</ul>
</section>
<section id="the-suppression-of-open-source-learning" class="level3">
<h3 class="anchored" data-anchor-id="the-suppression-of-open-source-learning">The Suppression of Open-Source Learning</h3>
<ul>
<li>Many highly successful people educated through experience, not schooling
<ul>
<li>Examples: Ben Franklin, George Washington, Thomas Edison, Danica Patrick</li>
</ul></li>
<li>Characteristics of open-source learning:
<ul>
<li>Self-directed exploration based on interest</li>
<li>Learning from real-world mentors and experiences</li>
<li>Active rather than passive</li>
</ul></li>
<li>Forced schooling stifles creativity, inventiveness, and entrepreneurial spirit that open-source learning cultivates</li>
</ul>
</section>
<section id="conclusions" class="level3">
<h3 class="anchored" data-anchor-id="conclusions">Conclusions</h3>
<ul>
<li>Compulsory government schooling is a relatively recent social experiment, not a timeless necessity</li>
<li>It was designed to create conformity and subordination, not to educate</li>
<li>The extreme decline in literacy and other skills is the inevitable result of its methods</li>
<li>Alternative models of open-source, self-directed, experiential learning have a far better track record of producing independent thinkers and achievers</li>
</ul>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ul>
<li>Shift emphasis from schooling back to genuine education</li>
<li>Allow students more autonomy in designing their own learning paths</li>
<li>Utilize apprenticeships, mentorships, and real-world experiences as supplements or alternatives to classroom instruction</li>
<li>Judge educational methods by real-world results, not arbitrary benchmarks</li>
</ul>
</section>
</section>
<section id="walkabout-london" class="level2">
<h2 class="anchored" data-anchor-id="walkabout-london">Walkabout: London</h2>
<ul>
<li>The chapter argues that compulsory schooling and the modern education system stifles creativity, independent thinking, and personal growth.</li>
<li>It advocates for “open source learning” through real-world experiences and self-directed education.</li>
<li>Gatto provides numerous examples of successful individuals who dropped out of school or had little formal education to illustrate the failures of institutional schooling.</li>
</ul>
<section id="the-limitations-of-compulsory-schooling" class="level3">
<h3 class="anchored" data-anchor-id="the-limitations-of-compulsory-schooling">The Limitations of Compulsory Schooling</h3>
<ul>
<li>Compulsory schooling emerged after the Civil War to create a controllable proletariat class and limit independent thinking.</li>
<li>It extends childhood artificially and fails to prepare young people for the real world.</li>
<li>Schooling focuses on obedience, conformity, and consumption rather than creativity and self-sufficiency.</li>
<li>Even higher education often fails to provide meaningful learning experiences, as evidenced by studies showing little growth in knowledge between freshman and senior year.</li>
</ul>
</section>
<section id="the-power-of-open-source-learning" class="level3">
<h3 class="anchored" data-anchor-id="the-power-of-open-source-learning">The Power of Open Source Learning</h3>
<ul>
<li>Open source learning allows individuals to gain knowledge and skills through real-world experiences, risk-taking, and learning from mistakes.</li>
<li>Historical examples like Ben Franklin’s Philadelphia show the dynamism unleashed when young people can actively participate in work and community life.</li>
<li>Numerous highly successful individuals, from Thomas Edison to Richard Branson to Warren Buffett, achieved greatness without the supposed necessity of extensive formal schooling.</li>
<li>Intensive schooling cannot replicate the powerful learning that comes from taking on real challenges and responsibilities at a young age.</li>
</ul>
</section>
<section id="the-entrepreneurial-spirit" class="level3">
<h3 class="anchored" data-anchor-id="the-entrepreneurial-spirit">The Entrepreneurial Spirit</h3>
<ul>
<li>True education fosters an entrepreneurial spirit of imagination, independence, and production rather than passive consumption.</li>
<li>corporatist compulsory schooling aims to create manageable consumer classes rather than self-reliant citizens.</li>
<li>Successful entrepreneurs like Ingvar Kamprad, Robert Kiyosaki, and Bill Gates demonstrate the power of real-world trial and error and learning from failure.</li>
<li>Valuing regimentation over open-ended exploration creates a less resilient, innovative society.</li>
</ul>
</section>
<section id="conclusions-1" class="level3">
<h3 class="anchored" data-anchor-id="conclusions-1">Conclusions</h3>
<ul>
<li>We need to re-evaluate the dominance of industrial mass schooling and allow space for open-source education.</li>
<li>Tying young people’s worth and potential to degrees and credentials crushes the human spirit and potential for greatness.</li>
<li>Gatto’s own profound learning experiences came from unstructured exploration with family, not years spent in elite universities.</li>
<li>Real education comes from “a foundation of self-awareness,” not the “rigid stupidities of forced schooling.”</li>
</ul>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ul>
<li>Encourage and enable more open-ended, exploratory learning experiences for children and teens.</li>
<li>Judge individuals by their demonstrable skills and values rather than credentials alone.</li>
<li>Provide alternative paths to career success besides just higher education.</li>
<li>Create space for the entrepreneurial spirit to flourish through deregulation and decentralizing control.</li>
</ul>
</section>
</section>
<section id="fat-stanley-and-the-lancaster-amish" class="level2">
<h2 class="anchored" data-anchor-id="fat-stanley-and-the-lancaster-amish">Fat Stanley and the Lancaster Amish</h2>
<ul>
<li>Schooling and education are different - schooling is about habit/attitude training from the outside in, while education is about self-mastery and self-enlargement</li>
<li>Many accomplished people throughout history had little formal schooling</li>
<li>School prevents the self-directed learning needed for real education and growth</li>
<li>Modern schooling is designed to produce a leveled, spiritless workforce for the economy</li>
<li>The Amish provide an alternative model focused on self-reliance, craftsmanship, entrepreneurship without extensive formal schooling</li>
</ul>
<section id="schooling-vs-education" class="level3">
<h3 class="anchored" data-anchor-id="schooling-vs-education">Schooling vs Education</h3>
<ul>
<li>Schooling: matter of habit and attitude training from the outside in</li>
<li>Education: self-mastery, self-enlargement, exploring human potential</li>
<li>One can compensate for lack of schooling, but education is essential to avoid “stumbling through life”</li>
<li>Many highly accomplished figures in history had minimal formal schooling</li>
<li>Real education requires self-initiation, broad experience, introspection, concentration, curiosity, risk-taking, learning from mistakes</li>
</ul>
</section>
<section id="fat-stanley" class="level3">
<h3 class="anchored" data-anchor-id="fat-stanley">Fat Stanley</h3>
<ul>
<li>Student who rarely attended class, instead apprenticed with entrepreneurial family members to learn their businesses</li>
<li>Saw sitting in school as “wasting time” if he wanted to be self-employed</li>
<li>His approach illustrated how school doesn’t align with how children actually learn and grow</li>
</ul>
</section>
<section id="school-as-conditioning" class="level3">
<h3 class="anchored" data-anchor-id="school-as-conditioning">School as Conditioning</h3>
<ul>
<li>School prevents self-directed learning in favor of drilling mass obedience and conformity</li>
<li>Renders students listless by making work abstract, externally imposed, irrelevant to real questions and needs</li>
<li>Teaches acceptance of ennui, envy, limited competence as normal</li>
<li>Produces people who can be “scrapped and replaced,” perform efficiently then discarded</li>
<li>Encouraged by consumer culture (e.g.&nbsp;worrying if your phone is in fashion)</li>
</ul>
</section>
<section id="the-amish-alternative" class="level3">
<h3 class="anchored" data-anchor-id="the-amish-alternative">The Amish Alternative</h3>
<ul>
<li>Focus on broad competence, self-reliance, honesty, community, commitment to common good</li>
<li>Reject consumer culture, maintain prosperous small business and farm economy with little formal schooling</li>
<li>Legendary good neighbors, take in special needs children, pioneered organic farming</li>
<li>Resisted compulsory schooling in court, seeing it as fragmenting family/community life and relationships</li>
</ul>
</section>
<section id="conclusions-2" class="level3">
<h3 class="anchored" data-anchor-id="conclusions-2">Conclusions</h3>
<ul>
<li>Need to reject concept of “mass man” - everyone is unique, averages are lies</li>
<li>Abandon notion that ordinary people are too incompetent to look after themselves</li>
<li>Honor founding ideals that each person has right to live as they see fit, even if challenging to big business/government</li>
<li>The Amish and students like Stanley illustrate alternative paths of community-embedded, entrepreneurial learning outside forced schooling system</li>
</ul>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ul>
<li>Re-evaluate assumptions about what type of education is needed for a good life and economy</li>
<li>Look to models like the Amish that cultivate self-reliance, craftsmanship, community without extensive forced schooling</li>
<li>Reform schools to be smaller scale, parent-driven, allowing apprenticeships/practical learning</li>
<li>Resist consumer culture that demands conformity and makes people feel inadequate over superficial things</li>
<li>Defend each person’s right to live and learn as they see fit, even if it challenges entrenched institutions</li>
</ul>
</section>
</section>
<section id="david-sarnoffs-classroom" class="level2">
<h2 class="anchored" data-anchor-id="david-sarnoffs-classroom">David Sarnoff’s Classroom</h2>
<p>In chapter 4, Gatto writes a candid letter to his assistant principal, Murray in Manhattan’s School District 3, exposing the flaws and failings of the compulsory schooling system. He argues that schools are designed to weaken children’s minds, suppress their imagination, and give them bad characters, while maintaining a facade of high expectations and sanctimony. Gatto contrasts the shortcomings of even the best schools with the remarkable self-education and early success of individuals like David Sarnoff.</p>
<section id="the-qualities-of-successful-adaptation" class="level3">
<h3 class="anchored" data-anchor-id="the-qualities-of-successful-adaptation">The Qualities of Successful Adaptation</h3>
<ul>
<li>A Harvard brochure identified nine qualities essential for successful adaptation to the evolving world of work, including:
<ol type="1">
<li>Asking hard questions of data</li>
<li>Defining problems independently</li>
<li>Extracting useful information from masses of irrelevant data</li>
<li>Conceptualizing</li>
<li>Reorganizing information into new patterns</li>
<li>Fluency in moving among different modes of thought</li>
<li>Collaboration skills</li>
<li>Discussion skills</li>
<li>Rhetorical skills</li>
</ol></li>
<li>Gatto argues that schools in District 3 do not teach any of these qualities as a matter of policy, as they would threaten the existing power structures and hierarchies.</li>
</ul>
</section>
<section id="the-example-of-david-sarnoff" class="level3">
<h3 class="anchored" data-anchor-id="the-example-of-david-sarnoff">The Example of David Sarnoff</h3>
<ul>
<li>David Sarnoff, who became the head of RCA, exemplifies the power of self-education and real-world experience.</li>
<li>Despite lacking formal schooling, Sarnoff learned English in just five months as a child, became a newsboy to support his family, and taught himself telegraphy.</li>
<li>His initiative, self-teaching, and willingness to seize opportunities led him to become the president of RCA at age 39, without the need for a high school diploma or college degree.</li>
<li>Gatto argues that modern schools would not allow for such rapid advancement and self-directed learning.</li>
</ul>
</section>
<section id="the-failings-of-even-the-best-schools" class="level3">
<h3 class="anchored" data-anchor-id="the-failings-of-even-the-best-schools">The Failings of Even the Best Schools</h3>
<ul>
<li>Gatto visited a famous alternative public school in East Harlem, founded by Debbie Meyer, but found it still hobbled by bureaucratic constraints and a lack of imagination.</li>
<li>The school’s community service program, requiring just two hours per week, trivialized the service ideal and turned it into superficial drudgery.</li>
<li>Gatto argues that even well-intentioned educators are limited by the broader system and collective habit of suppressing deviation and imagination.</li>
</ul>
</section>
<section id="the-shadow-economy-of-schools" class="level3">
<h3 class="anchored" data-anchor-id="the-shadow-economy-of-schools">The Shadow Economy of Schools</h3>
<ul>
<li>Gatto exposes the “shadow economy” of schools, where certain teachers are rewarded with better programs, rooms, and students in exchange for their loyalty and cooperation.</li>
<li>This caste system, enforced by administrators and the teachers’ union, exploits newer teachers and contributes to high turnover rates.</li>
<li>Merit pay would only exacerbate this problem, as administrators would decide what constitutes “merit.”</li>
<li>The student-teacher ratio is artificially inflated, with half of all teaching energy siphoned away into administrative tasks.</li>
</ul>
</section>
<section id="destructive-district-policies" class="level3">
<h3 class="anchored" data-anchor-id="destructive-district-policies">Destructive District Policies</h3>
<ul>
<li>Two district policies have destroyed students’ capacity for sustained thought:
<ol type="1">
<li>Not controlling outrageous classroom behavior, with the burden of discipline shifted onto teachers.</li>
<li>Recruiting disruptive children from other districts to conceal declining enrollment, leading to chaos in previously calm classes.</li>
</ol></li>
<li>Gatto argues that these policies were implemented without consultation with parents or teachers, and serve the interests of administrators and influential stakeholders rather than the well-being of students.</li>
</ul>
</section>
<section id="the-narcotic-effect-of-schooling" class="level3">
<h3 class="anchored" data-anchor-id="the-narcotic-effect-of-schooling">The Narcotic Effect of Schooling</h3>
<ul>
<li>Gatto argues that schools have become a narcotic, addicting children to passivity, fantasy, and thin abstractions.</li>
<li>Students emerge with a shaky grasp of the past, no capacity to visualize the future, and false maps of the road ahead.</li>
<li>The thousands of hours spent on passive spectatorship through television, music videos, and computer games are a testament to the diseased state of modern childhood.</li>
</ul>
</section>
</section>
<section id="hector-isnt-the-problem" class="level2">
<h2 class="anchored" data-anchor-id="hector-isnt-the-problem">Hector Isn’t the Problem</h2>
<ul>
<li>Gatto quit teaching after 30 years out of disgust and frustration with the compulsory schooling system</li>
<li>He argues that government schooling is a radical and damaging experiment that kills the family, teaches disrespect for parents, and subordinates students to a “priesthood” of educators</li>
<li>Gatto believes that the categories and labels used in schools, such as “gifted and talented” or “learning disabled”, are myths created to preserve the system</li>
<li>He proposes that mass dumbness is not real, but rather imagined and perpetuated by the schooling system to justify its existence</li>
</ul>
<section id="gattos-experience-and-disillusionment" class="level3">
<h3 class="anchored" data-anchor-id="gattos-experience-and-disillusionment">Gatto’s Experience and Disillusionment</h3>
<ul>
<li>Taught for 30 years in NYC, crossing swords with administrations who tried to get rid of him</li>
<li>License suspended twice for insubordination, covertly terminated once while on medical leave</li>
<li>Ranked first among education faculty at CUNY in student ratings</li>
<li>Organized many successful initiatives to engage students in learning and community</li>
<li>Finally quit out of disgust, despite accolades, feeling the system was too entrenched to change</li>
<li>Wrote “I Quit, I Think” essay explaining reasons, later published in Wall Street Journal</li>
</ul>
</section>
<section id="the-problem-with-government-schooling" class="level3">
<h3 class="anchored" data-anchor-id="the-problem-with-government-schooling">The Problem with Government Schooling</h3>
<ul>
<li>Radical experiment that monopolizes childhood and teaches disrespect for family</li>
<li>Follows an “Egyptian” model of scarce human value, symbolized by a pyramid</li>
<li>Becomes a self-preserving jobs project and contract giver, resistant to real reform</li>
<li>Creates artificial categories and labels that permanently limit and stigmatize students</li>
<li>Produces shallow and dependent thinkers who can’t fend for themselves</li>
<li>Convinces the “dumb” that their status is due to biology, oppression, moral defect, etc.</li>
</ul>
</section>
<section id="the-illusion-of-mass-dumbness" class="level3">
<h3 class="anchored" data-anchor-id="the-illusion-of-mass-dumbness">The Illusion of Mass Dumbness</h3>
<ul>
<li>In 30 years, Gatto rarely met a truly “learning disabled” or “gifted and talented” child</li>
<li>These categories are myths created by the system to preserve itself</li>
<li>Many explanations given for the “dumb” - biology, oppression, depravity, Darwinism, etc.</li>
<li>But mass dumbness had to first be imagined; it does not exist in reality</li>
<li>The “dumb” are used to justify a vast bureaucracy of schooling and social services</li>
</ul>
</section>
<section id="the-story-of-hector" class="level3">
<h3 class="anchored" data-anchor-id="the-story-of-hector">The Story of Hector</h3>
<ul>
<li>13 year old student, frequently in trouble, scored poorly, in the “mainstream” bottom class</li>
<li>Caught trying to sneak into skating rink despite having ticket - testing the system</li>
<li>Later brought fake gun to elementary school to “free the slaves” by letting out students</li>
<li>Failing every subject in high school, truant, classified as a problem by the system</li>
<li>Gatto asks if the only alternative to the system that produces Hectors is really chaos</li>
<li>Suggests that forced schooling is intended to beat back human nature seen as chaotic</li>
</ul>
</section>
<section id="key-takeaways" class="level3">
<h3 class="anchored" data-anchor-id="key-takeaways">Key Takeaways</h3>
<ul>
<li>Compulsory government schooling is a damaging system that artificially categorizes students</li>
<li>It perpetuates myths of mass dumbness and defect while really producing dysfunction</li>
<li>Students like Hector are not the problem, but creations of a system that wants to limit human potential</li>
<li>The system resists reform because it serves entrenched interests, not students and families</li>
<li>A return to true education, not schooling, is needed to liberate human nature and potential</li>
</ul>
</section>
</section>
<section id="the-camino-de-santiago" class="level2">
<h2 class="anchored" data-anchor-id="the-camino-de-santiago">The Camino de Santiago</h2>
<p>In chapter 6, Gatto discusses the negative effects of television and computers on children’s behavior and development. He argues that these media steal time from children to write their own stories and engage in real-life experiences, leading to a loss of integrity and purpose. Gatto proposes a solution based on the medieval pilgrimage road, the Camino de Santiago, which involves sending students on expeditions to explore the world around them and engage in meaningful intellectual work.</p>
<section id="the-impact-of-television-and-computers-on-children" class="level3">
<h3 class="anchored" data-anchor-id="the-impact-of-television-and-computers-on-children">The Impact of Television and Computers on Children</h3>
<ul>
<li>TV-addicted kids exhibit negative behavioral traits:
<ul>
<li>Irresponsibility</li>
<li>Childishness</li>
<li>Dishonesty</li>
<li>Maliciousness</li>
<li>Lack of sustaining purpose</li>
</ul></li>
<li>Consuming too many made-up stories and pretending to be someone else leads to a loss of integrity and the ability to grow up</li>
<li>Computers can exacerbate the problem due to passive consumption and lack of interactivity</li>
</ul>
</section>
<section id="the-importance-of-feedback-circuits" class="level3">
<h3 class="anchored" data-anchor-id="the-importance-of-feedback-circuits">The Importance of Feedback Circuits</h3>
<ul>
<li>Suppression of natural feedback circuits prevents learning from mistakes</li>
<li>Bureaucracies, such as school management, are inefficient due to their inability to respond to feedback</li>
<li>Restoring natural biological feedback circuitry can help reduce media-sickened behavior among students</li>
</ul>
</section>
<section id="the-camino-de-santiago-as-inspiration" class="level3">
<h3 class="anchored" data-anchor-id="the-camino-de-santiago-as-inspiration">The Camino de Santiago as Inspiration</h3>
<ul>
<li>The Camino de Santiago is a medieval pilgrimage road in Spain that attracts people seeking to build a new relationship with themselves and nature</li>
<li>Gatto sent his students on expeditions to explore New York City, mimicking the Camino de Santiago experience</li>
<li>Students walked alone, studied various aspects of the city, and created guides and analyses based on their observations and research</li>
</ul>
</section>
<section id="the-visitors-key-to-iceland" class="level3">
<h3 class="anchored" data-anchor-id="the-visitors-key-to-iceland">The Visitor’s Key to Iceland</h3>
<ul>
<li>Gatto drew inspiration from a unique Icelandic guidebook that brings the land and its history to life</li>
<li>Students created their own “Visitor’s Keys” to various aspects of New York City, such as safe spots to hide while playing hooky, pizza parlors, and neighborhood swimming pools</li>
</ul>
</section>
<section id="the-benefits-of-engaging-in-real-life-challenges" class="level3">
<h3 class="anchored" data-anchor-id="the-benefits-of-engaging-in-real-life-challenges">The Benefits of Engaging in Real-Life Challenges</h3>
<ul>
<li>Accepting hard challenges is crucial for self-mastery and competence</li>
<li>Engaging in real-life experiences and intellectual work causes feedback circuits in the young to produce substantial growth</li>
<li>The thrill of doing meaningful work outweighs the effort required</li>
</ul>
</section>
<section id="the-need-to-reconnect-with-reality" class="level3">
<h3 class="anchored" data-anchor-id="the-need-to-reconnect-with-reality">The Need to Reconnect with Reality</h3>
<ul>
<li>Modern influences, such as television, computers, and government schooling, have weaned children away from their need to engage with the real world</li>
<li>Restoring what has been stolen and reconnecting kids to primary experience can help address child development problems</li>
<li>Being a mature being means living with purpose, welcoming responsibility, and contributing to the community</li>
</ul>
</section>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ul>
<li>Reduce the time spent in front of electronic screens and encourage children to engage in real-life experiences</li>
<li>Incorporate expeditions and intellectual challenges into the education system to promote growth and development</li>
<li>Consider using the money saved from reducing high school years to fund personal “Camino” experiences for every student</li>
<li>If the government does not provide such opportunities, individuals must take the initiative to create their own meaningful challenges and experiences</li>
</ul>
</section>
</section>
<section id="weapons-of-mass-instruction" class="level2">
<h2 class="anchored" data-anchor-id="weapons-of-mass-instruction">Weapons of Mass Instruction</h2>
<ul>
<li>Compulsory schooling is doing more harm than good and disconnecting children from themselves, their families, communities and the Western intellectual tradition</li>
<li>Schools are designed to produce obedient, dependent consumers rather than educated, self-reliant individuals</li>
<li>The irrelevance of most school curriculum and the imposition of artificial childhood leads to boredom, ugliness and an inability to function independently</li>
<li>Alternative education focused on the individual needs and interests of each student is necessary</li>
</ul>
<section id="the-irrelevance-and-harmfulness-of-school-curriculum" class="level3">
<h3 class="anchored" data-anchor-id="the-irrelevance-and-harmfulness-of-school-curriculum">The Irrelevance and Harmfulness of School Curriculum</h3>
<ul>
<li>Only 31% of college-educated Americans can fully comprehend a newspaper story</li>
<li>35% of university graduates regret their experience and feel they learned nothing of use</li>
<li>School curriculum is largely irrelevant to real life and avoids discussion of controversial but important topics</li>
<li>Schools disconnect children from:
<ul>
<li>Themselves and their own unique constellation of needs/interests</li>
<li>Their families, communities, religions and natural allies<br>
</li>
<li>The Western intellectual tradition of personal liberties</li>
<li>Experiences of risk-taking, adventure and discovery</li>
</ul></li>
<li>Results in cowardice, stupidity, sluggishness and indifference to everything but animal needs (per Adam Smith)</li>
</ul>
</section>
<section id="the-imposition-of-artificial-childhood" class="level3">
<h3 class="anchored" data-anchor-id="the-imposition-of-artificial-childhood">The Imposition of Artificial Childhood</h3>
<ul>
<li>Schools work to unnaturally extend childhood and restrict intellectual/behavioral development</li>
<li>Imposes immobility, stress, unhealthy diet leading to physical ugliness</li>
<li>Emphasizes winning/competition over learning and character</li>
<li>Fills time with simplistic distractions and busywork</li>
<li>Interdicts normal development and leaves graduates unable to do much</li>
</ul>
</section>
<section id="alternative-education-focused-on-the-individual" class="level3">
<h3 class="anchored" data-anchor-id="alternative-education-focused-on-the-individual">Alternative Education Focused on the Individual</h3>
<ul>
<li>Author developed personalized curriculum in partnership with each student based on their unique biography, wishes and weaknesses</li>
<li>Allows students to direct their own education and recruit outside resources/assistants</li>
<li>Enables students to develop independence, self-reliance, literacies of speaking/writing, courage, curiosity, ability to write own life script</li>
<li>Historically figures like Ben Franklin achieved success without formal schooling</li>
</ul>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ul>
<li>Abolish compulsory school attendance to enable education to spread</li>
<li>Treat children as individuals, not categories, and partner with them in their education</li>
<li>Focus on developing self-knowledge and connecting students to themselves, human experience and intellectual tradition</li>
<li>Allow uninterrupted personal time for students to develop their own ideas and theories</li>
<li>Emphasize real-world skills, risk-taking and self-sufficiency over artificial extension of childhood</li>
</ul>
</section>
</section>
<section id="what-is-education" class="level2">
<h2 class="anchored" data-anchor-id="what-is-education">What is Education?</h2>
<p>In chapter 8, Gatto discusses the true meaning of education and how the current compulsory schooling system fails to provide it. He argues that schools have remained largely unchanged since the 19th century and are designed to produce obedient workers rather than truly educated individuals. Gatto proposes a radical restructuring of the education system to foster genuine learning and personal growth.</p>
<section id="the-meaning-of-education" class="level3">
<h3 class="anchored" data-anchor-id="the-meaning-of-education">The Meaning of Education</h3>
<ul>
<li>Education should help individuals grapple with fundamental questions posed by Immanuel Kant:
<ul>
<li>What can I know?</li>
<li>What may I hope?</li>
<li>What ought I to do?</li>
<li>What is man?</li>
</ul></li>
<li>True education goes beyond the lessons of school and teaches how to live a meaningful life</li>
<li>It involves confronting the epic of history and one’s place in it</li>
</ul>
</section>
<section id="the-failure-of-compulsory-schooling" class="level3">
<h3 class="anchored" data-anchor-id="the-failure-of-compulsory-schooling">The Failure of Compulsory Schooling</h3>
<ul>
<li>Despite claims of reform, schools in 1990 were almost identical to those in 1890</li>
<li>In contrast, the voluntary schooling system of 1790 allowed for greater literacy and genuine education</li>
<li>The current system is designed to serve the interests of politicians, bureaucrats, and financial backers rather than students</li>
<li>Standardized testing is a poor measure of real education and human potential</li>
</ul>
</section>
<section id="gattos-vision-for-a-new-education-system" class="level3">
<h3 class="anchored" data-anchor-id="gattos-vision-for-a-new-education-system">Gatto’s Vision for a New Education System</h3>
<ul>
<li>Establish clear definitions and goals for what it means to be an educated person</li>
<li>Educated individuals should:
<ul>
<li>Use time meaningfully and enjoy solitude</li>
<li>Form healthy relationships and understand their own mortality</li>
<li>Develop a personal value system while respecting the values of others</li>
<li>Possess the power to create and adapt to new experiences</li>
<li>Seek truth through evidence rather than memorization</li>
<li>Find purpose and happiness beyond material wealth</li>
</ul></li>
<li>Eliminate centralized testing, compulsory attendance, and restrictive curriculums</li>
<li>Embrace flexible learning environments, schedules, and teaching methods tailored to individual needs and interests</li>
<li>Integrate education with real-world experiences and community life</li>
<li>Encourage a culture of lifelong learning and personal responsibility</li>
</ul>
</section>
<section id="recommendations-5" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-5">Recommendations</h3>
<ul>
<li>Engage in a national debate to define the meaning and goals of education</li>
<li>Dismantle the compulsory schooling system and replace it with a voluntary, decentralized model</li>
<li>Empower individuals and communities to take control of their own learning and development</li>
<li>Promote alternative educational approaches such as homeschooling, apprenticeships, and self-directed learning</li>
<li>Shift the focus from standardized testing and credentials to genuine knowledge, skills, and character development</li>
</ul>
</section>
</section>
<section id="a-letter-to-my-granddaughter-about-dartmouth" class="level2">
<h2 class="anchored" data-anchor-id="a-letter-to-my-granddaughter-about-dartmouth">A Letter to my Granddaughter about Dartmouth</h2>
<ul>
<li>Gatto writes a letter to his granddaughter Christina as she considers attending Dartmouth College</li>
<li>He advises her to think critically about attending an elite school like Dartmouth, arguing it confers an illusion of social privilege that can limit one’s life</li>
<li>Gatto believes true education comes from self-knowledge, keen observation, feedback, analysis, mirroring others, self-expression, good judgment, and adding value</li>
<li>He argues elite colleges like Dartmouth don’t provide a real education, but rather train students to conform to the system and fit into a command economy</li>
<li>Gatto traces the transformation of colleges into utilitarian training grounds for corporations after WWII, as part of a broader agenda of social control and curtailing of liberty</li>
</ul>
<section id="family-background" class="level3">
<h3 class="anchored" data-anchor-id="family-background">Family Background</h3>
<ul>
<li>Christina comes from a long line of contrarian ancestors who challenged authority and convention</li>
<li>Her maternal great-great-grandparents were outlawed by the British Crown; her paternal great-great-grandparents were exiled from Italy for their religious and political views</li>
<li>Gatto and Christina’s grandmother Janet also bucked convention, getting married young in a Buddhist temple because they couldn’t afford other options</li>
</ul>
</section>
<section id="advice-on-attending-dartmouth" class="level3">
<h3 class="anchored" data-anchor-id="advice-on-attending-dartmouth">Advice on Attending Dartmouth</h3>
<ul>
<li>Gatto urges Christina to question the conventional wisdom that attending an elite college is the foundation of a successful life</li>
<li>He argues the social privilege and connections elite schools promise are an illusion that can limit one’s life and turn it into a “prison” of predetermined associations and choices</li>
<li>True education and success come from within, not from the name brand of one’s college</li>
<li>Elite schools like Dartmouth teach students to “game the system”, conform to expectations, and delude themselves into accepting contrived problems and simulated learning</li>
</ul>
</section>
<section id="metrics-of-real-education" class="level3">
<h3 class="anchored" data-anchor-id="metrics-of-real-education">Metrics of Real Education</h3>
<p>Gatto provides 8 “yardsticks” to measure one’s real education:</p>
<ol type="1">
<li>Self-knowledge - deep understanding of one’s own character, strengths, and weaknesses</li>
<li>Observation - ability to accurately perceive and record data</li>
<li>Feedback - skill in gauging reactions from others and one’s environment</li>
<li>Analysis - capacity to break down problems and evaluate them independently</li>
<li>Mirroring - adaptability to fit into any group while remaining oneself</li>
<li>Expression - having a clear, strong voice in writing and speech</li>
<li>Judgment - keen discernment to see through falsehoods</li>
<li>Adding value - contributing something of worth to every encounter and group</li>
</ol>
</section>
<section id="transformation-of-college-after-wwii" class="level3">
<h3 class="anchored" data-anchor-id="transformation-of-college-after-wwii">Transformation of College After WWII</h3>
<ul>
<li>After WWII, colleges were transformed into utilitarian training grounds for corporations and government, based on a vision from Francis Bacon’s utopian work “The New Atlantis”</li>
<li>This replaced the earlier view of college as a place for pure intellectual development and reflection</li>
<li>It fit into a broader agenda of comprehensive social control, using surveillance and the co-opting of talented youth from the underclasses into leadership to prevent uprisings</li>
<li>Liberty was curtailed while license was encouraged in zones of traditional morality, undercutting the family as a source of opposition</li>
</ul>
</section>
<section id="recommendations-6" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-6">Recommendations</h3>
<ul>
<li>Question the conventional wisdom about elite colleges being essential to success</li>
<li>Cultivate true education through developing self-knowledge, observational skills, openness to feedback, analytical capabilities, adaptability, self-expression, discerning judgment, and the ability to add value</li>
<li>Be aware of the social control agenda and don’t let yourself become a conformist cog in the system</li>
<li>Think critically about the role of higher education in society and whether it truly serves the development of free, independent thinkers</li>
</ul>
</section>
</section>
<section id="incident-at-highland-high" class="level2">
<h2 class="anchored" data-anchor-id="incident-at-highland-high">Incident at Highland High</h2>
<ul>
<li>Gatto, argues that compulsory schooling disconnects people from true education and operates as a form of social control.</li>
<li>Gatto shares stories of incidents in Germany, New York, and Vermont to illustrate how the school system represses dissent and unconventional thinking in order to impose conformity.</li>
<li>Gatto contends there is a “dark world” and “invisible force” behind schooling that aims to produce manageable masses rather than educated, sovereign individuals.</li>
</ul>
<section id="the-difference-between-schooling-and-education" class="level3">
<h3 class="anchored" data-anchor-id="the-difference-between-schooling-and-education">The Difference Between Schooling and Education</h3>
<ul>
<li>Schooling organizes learning through external command and control, while education is self-organized from within</li>
<li>Education provides rich connections and feedback loops that foster independence; schooling circumscribes learning with rules</li>
<li>Schooling emphasizes specialization and memorization; education values synthesis, dialectic, and creative destruction</li>
<li>The conditions for happiness (good relationships, health, satisfying work) are undermined by the segregation and aimlessness bred in schools</li>
</ul>
</section>
<section id="the-dark-world-of-compulsory-schooling" class="level3">
<h3 class="anchored" data-anchor-id="the-dark-world-of-compulsory-schooling">The “Dark World” of Compulsory Schooling</h3>
<ul>
<li>Some argue the failings of school are amenable to reform, but Gatto believes a “deliberate intent” and “powerful but invisible force” direct schooling to produce incomplete people</li>
<li>He illustrates this through three stories:
<ol type="1">
<li>In Nuremberg, Germany (2008), a girl is forcibly removed from her home and psychiatrically evaluated for the crime of homeschooling</li>
<li>In Highland, NY (2004), Gatto’s talk to high school students providing data on colleges and successful non-graduates is shut down by police called by the superintendent</li>
<li>In Walden, VT (1991), the state strong-arms the town into replacing its high-performing one-room schoolhouses with a factory-style consolidated school</li>
</ol></li>
</ul>
</section>
<section id="school-as-a-tool-of-social-management" class="level3">
<h3 class="anchored" data-anchor-id="school-as-a-tool-of-social-management">School as a Tool of Social Management</h3>
<ul>
<li>Philosophers like Fichte saw self-conceived individuals as a threat to efficient social management and demanded compulsory schooling to remove sovereignty</li>
<li>Schooling breeds dependence and a “slavish need” to follow rules, making the population manageable (but economically handicapped)</li>
<li>It represses imagination, free will, and the ability to independently raise the next generation</li>
<li>Colleges are businesses that will accept nearly anyone (need students to meet payrolls), but schools maintain discipline through fear of missing elite admission</li>
</ul>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<ul>
<li>Gatto argues the “growing incoherence of American society” is built upon the “forced schooling” imposed in places like Highland - schools find truth “unbearable because it gets in the way of their real mission”</li>
<li>He exhorts the reader to recognize the “dark world school represents” as it “gets worse all the time” and to help “sabotage this thing” as schooling is “too important to allow education to get in its way”</li>
</ul>
</section>
</section>
<section id="invitation-to-an-open-conspiracy-the-bartleby-project" class="level2">
<h2 class="anchored" data-anchor-id="invitation-to-an-open-conspiracy-the-bartleby-project">Invitation to an Open Conspiracy: The Bartleby Project</h2>
<p>Gatto argues for the destruction of the standardized testing industry, which he believes is causing significant harm to education and society. He proposes a grassroots movement where students peacefully refuse to take standardized tests en masse.</p>
<section id="the-harms-of-standardized-testing" class="level3">
<h3 class="anchored" data-anchor-id="the-harms-of-standardized-testing">The Harms of Standardized Testing</h3>
<ul>
<li>Standardized testing reduces national wealth by suffocating imagination and intellect while enriching a select few</li>
<li>Tests are unreliable, misleading, and correlate with nothing of real value, yet cause real harm to students</li>
<li>Schools have become focused on test scores rather than real learning and accomplishment</li>
<li>Testing has enabled the Classification and ranking of students, with damaging effects</li>
<li>The testing regime persists because it serves entrenched interests, not because it benefits students</li>
</ul>
</section>
<section id="the-decline-of-american-schooling" class="level3">
<h3 class="anchored" data-anchor-id="the-decline-of-american-schooling">The Decline of American Schooling</h3>
<ul>
<li>In the past, American schools, while imperfect, had more visible morality, egalitarianism and intellectualism<br>
</li>
<li>Since the 1950s, schools have become increasingly standardized, impersonal, and dumbed-down</li>
<li>This decline is rooted in a belief among elites that most of the population is incurably feeble-minded</li>
<li>As a result, Americans have lost the self-educating spirit that once made the country a “place of miracles for ordinary people”</li>
</ul>
</section>
<section id="citizen-action-as-a-force-for-change" class="level3">
<h3 class="anchored" data-anchor-id="citizen-action-as-a-force-for-change">Citizen Action as a Force for Change</h3>
<ul>
<li>Citizen action has achieved significant victories in the past (e.g.&nbsp;ending Vietnam War, fall of Berlin Wall, etc.)</li>
<li>Change will not come from above because entrenched interests are too powerful</li>
<li>But history shows the “impregnable social fortresses” can be brought down by ordinary people</li>
</ul>
</section>
<section id="the-bartleby-project" class="level3">
<h3 class="anchored" data-anchor-id="the-bartleby-project"><a href="http://openconspiracy.org/">The Bartleby Project</a></h3>
<ul>
<li>Students should be recruited online to peacefully refuse to take standardized tests</li>
<li>Following the example of Bartleby the Scrivener, they should simply say “I would prefer not to”</li>
<li>The movement should be decentralized, unorganized, and leaderless to prevent co-option</li>
<li>Colleges and universities, as businesses hungry for students, will be forced to go along</li>
</ul>
</section>
<section id="recommendations-7" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-7">Recommendations</h3>
<ul>
<li>Spread the word about the <a href="http://openconspiracy.org/">Bartleby Project</a> online to students across the nation</li>
<li>Encourage a decentralized, “open source” approach - provide resources and support but do not attempt to lead or control</li>
<li>Stand firm against compromise or cooptation - complete refusal is essential</li>
<li>Have faith that peaceful, large-scale refusal will be an unstoppable force for change</li>
</ul>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>education</category>
  <category>history</category>
  <guid>christianjmills.com/posts/weapons-of-mass-instruction-book-notes/</guid>
  <pubDate>Thu, 21 Mar 2024 07:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Notes on Dumbing Us Down: The Hidden Curriculum of Compulsory Schooling</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/dumbing-us-down-book-notes/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
These notes are part of the following collection:
</div>
</div>
<div class="callout-body-container callout-body">
<p><a href="../../series/notes/education-notes.html"><strong>Education</strong></a></p>
</div>
</div>
<ul>
<li>Preface</li>
<li>Ch.1: The Seven-Lesson School Teacher</li>
<li>Ch.2: The Psychopathic School</li>
<li>Ch.3: The Green Monongahela</li>
<li>Ch.4: We Need Less School, Not More</li>
<li>Ch.5: The Congregational Principle</li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Book LInks:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://newsociety.com/books/d/dumbing-us-down-25th-anniversary-edition">Publisher Page</a></li>
<li><a href="https://johntaylorgatto.com/">Author’s Website</a></li>
</ul>
</div>
</div>
<section id="preface" class="level2">
<h2 class="anchored" data-anchor-id="preface">Preface</h2>
<p>John Taylor Gatto, a New York City school teacher with thirty years of experience, shares insights from his career, especially focusing on the hidden curriculum of compulsory schooling. His background in both elite environments and underprivileged areas provides a broad perspective on the educational system. Gatto questions the conventional wisdom about education, intelligence, and the role of schools in society, suggesting that the current system may inhibit natural genius and promote dependency.</p>
<section id="key-concepts" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts">Key Concepts</h3>
<ul>
<li><strong>Hidden Curriculum</strong>: The unintended lessons taught in schools that reinforce societal norms and expectations, often at the expense of individuality and critical thinking.</li>
<li><strong>Compulsory Schooling Critique</strong>: Gatto challenges the effectiveness and intentions behind compulsory schooling, suggesting it might dull creativity and intelligence.</li>
<li><strong>Personal Autonomy in Learning</strong>: Advocates for education that respects privacy, choice, and freedom from constant surveillance, allowing children to explore their innate talents and interests.</li>
</ul>
</section>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ul>
<li>Schools often function more to control than to educate, fostering dependency rather than critical thinking or self-reliance.</li>
<li>Genius is common, and the educational system’s structure may prevent it from emerging.</li>
<li>The real job of a teacher might be less about imparting knowledge and more about removing obstacles to learning.</li>
<li>The economy and societal structure heavily influence the education system, potentially to the detriment of fostering truly educated individuals.</li>
<li>Gatto employs unconventional teaching methods aimed at empowering students rather than confining them to standard educational trajectories.</li>
</ul>
</section>
<section id="noteworthy-facts" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts">Noteworthy Facts</h3>
<ul>
<li>Gatto has taught in a diverse range of environments, from affluent areas to impoverished neighborhoods, providing him with a unique perspective on the educational system.</li>
<li>Despite initial resistance, Gatto’s approach focuses on individual learning paths, challenging traditional schooling methods.</li>
<li>His philosophy is influenced by his upbringing in Monongahela, Pennsylvania, where community and self-reliance were valued.</li>
</ul>
</section>
<section id="practical-implications" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications">Practical Implications</h3>
<ul>
<li>Gatto’s insights suggest a need for educational reform that values individual student growth, autonomy, and critical thinking over conformity and memorization.</li>
<li>There could be significant societal and economic impacts if schools shift focus from enforcing a hidden curriculum to nurturing independent, critical thinkers.</li>
<li>Educators and policymakers might need to reconsider the structure and goals of compulsory schooling to better serve diverse student needs and potentials.</li>
</ul>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ul>
<li>Schools should minimize surveillance and strict control, instead offering environments that encourage exploration and self-directed learning.</li>
<li>Educators should focus on removing barriers to learning, rather than solely on delivering content, to help reveal students’ inherent capabilities.</li>
<li>The educational system must critically evaluate the impact of its hidden curriculum and work towards an approach that genuinely supports student empowerment and autonomy.</li>
</ul>
</section>
</section>
<section id="the-seven-lesson-school-teacher" class="level2">
<h2 class="anchored" data-anchor-id="the-seven-lesson-school-teacher">The Seven-Lesson School Teacher</h2>
<p>John Taylor Gatto, upon being named “New York State Teacher of the Year” in 1991, delivers a speech that critiques the fundamental nature of compulsory schooling. He argues that the system teaches seven harmful lessons which are not explicitly stated in the curriculum but are deeply ingrained in the schooling process. These lessons include confusion, class position, indifference, emotional and intellectual dependency, provisional self-esteem, and the impossibility of hiding.</p>
<p>Gatto asserts that these lessons contribute to a lack of coherent understanding, perpetuate class divisions, foster dependency and compliance, undermine self-esteem, and invade privacy, ultimately preparing students to fit into a societal pyramid without questioning their place or the system.</p>
<section id="key-concepts-1" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-1">Key Concepts</h3>
<ul>
<li><strong>The Seven Lessons of Schooling</strong>: Confusion, class position, indifference, emotional dependency, intellectual dependency, provisional self-esteem, and the impossibility of hiding.</li>
<li><strong>Critical View of Schooling</strong>: Gatto criticizes compulsory schooling for teaching compliance and conformity rather than critical thinking and independence.</li>
<li><strong>Historical Context</strong>: References to the history of schooling in the United States, suggesting that the current system is a departure from a more individualized, less compulsory past.</li>
<li><strong>Alternative Education Models</strong>: Mention of self-teaching and less formalized education systems as viable alternatives to compulsory schooling.</li>
</ul>
</section>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ul>
<li>The primary function of schooling is to indoctrinate rather than educate, preparing students to accept their place in the social hierarchy.</li>
<li>Compulsory schooling disrupts natural learning processes, promoting fragmentation and disconnection rather than understanding and coherence.</li>
<li>The structure of schooling promotes dependency on authority and discourages independent thought and self-determination.</li>
<li>The educational system’s focus on superficial metrics (grades, test scores) undermines genuine learning and self-esteem.</li>
<li>The pervasive surveillance and lack of privacy in schools reflect broader societal controls and diminish individual autonomy.</li>
</ul>
</section>
<section id="noteworthy-facts-1" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-1">Noteworthy Facts</h3>
<ul>
<li>John Taylor Gatto was named “New York State Teacher of the Year” in 1991.</li>
<li>The concept of compulsory schooling as it exists today is relatively recent in human history, becoming widespread in the United States after the Civil War.</li>
<li>Historical literacy rates suggest that formal schooling is not necessary for basic education, as literacy was widespread even when schooling was not compulsory or widely available.</li>
<li>The traditional curriculum and teaching methods have remained largely unchanged despite significant societal and technological advances.</li>
</ul>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ul>
<li>Encourage educational models that prioritize critical thinking, creativity, and independence over rote memorization and compliance.</li>
<li>Support alternative education systems that offer a more personalized and less compulsory approach to learning.</li>
<li>Advocate for the integration of real-world skills and knowledge into the curriculum, rather than abstract and disconnected facts.</li>
<li>Promote family and community involvement in education, reducing reliance on formal schooling as the sole source of learning.</li>
<li>Foster environments that respect students’ privacy and autonomy, encouraging self-discovery and personal growth.</li>
</ul>
</section>
</section>
<section id="the-psychopathic-school" class="level2">
<h2 class="anchored" data-anchor-id="the-psychopathic-school">The Psychopathic School</h2>
<p>John Taylor Gatto highlights the issues with the current education system, presented during his acceptance speech for the New York City Teacher of the Year award by the New York State Senate on January 31, 1990. Gatto critiques the schooling system for its failure to truly educate, attributing societal and individual issues to the compulsory schooling system’s focus on obedience and conformity rather than fostering independence and critical thinking.</p>
<section id="key-concepts-2" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-2">Key Concepts</h3>
<ul>
<li><strong>Crisis in Education and Society</strong>: The linkage between the failing educational system and broader social crises, including high rates of narcotic consumption, teenage suicide, and divorce.</li>
<li><strong>Irrelevance of Formal Education</strong>: The notion that formal education does not genuinely prepare individuals for real-world success or foster genuine knowledge and creativity.</li>
<li><strong>Compulsory Schooling as a Mechanism for Control</strong>: The historical development of compulsory schooling as a means to manage and predict human behavior rather than educate.</li>
<li><strong>Home Schooling as an Alternative</strong>: Evidence suggesting that home-schooled children may be significantly ahead of their peers in formal schooling in critical thinking abilities.</li>
<li><strong>The Failure of Current Educational Reforms</strong>: The argument that more money and resources funneled into the existing educational system only perpetuate its fundamental flaws.</li>
</ul>
</section>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ul>
<li><strong>The Need for a National Debate on Education</strong>: Gatto calls for a relentless, ongoing public debate to either fix or dismantle the current education system.</li>
<li><strong>Redefining Educational Goals</strong>: Emphasizing the importance of defining clear, meaningful goals for education that go beyond mere schooling.</li>
<li><strong>Family as the Core of Education</strong>: Proposing that true education should involve the family as a central element, encouraging learning through life experiences, community service, and independent study.</li>
</ul>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ul>
<li><strong>Promote Independent and Experiential Learning</strong>: Schools should encourage students to engage in independent study and real-world learning experiences.</li>
<li><strong>Community Service as an Educational Tool</strong>: Integrating community service into the curriculum to teach responsibility, empathy, and social engagement.</li>
<li><strong>Revitalize Family Involvement in Education</strong>: Advocating for educational models that strengthen family bonds and regard parents as primary educators.</li>
<li><strong>National Dialogue on Education Reform</strong>: Urging for a grassroots movement to challenge and debate the current educational paradigms and explore innovative solutions.</li>
<li><strong>Shift from Institutional to Individualized Education</strong>: Moving towards an education system that values individuality, self-reliance, and critical thinking over conformity and obedience.</li>
</ul>
</section>
<section id="critical-analysis" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis">Critical Analysis</h3>
<ul>
<li>Gatto’s critique underscores a profound disconnection between the aims of compulsory schooling and the genuine educational needs of individuals and society. His observations about the psychological and social effects of the current educational model highlight the urgency for reform.</li>
</ul>
</section>
</section>
<section id="the-green-monongahela" class="level2">
<h2 class="anchored" data-anchor-id="the-green-monongahela">The Green Monongahela</h2>
<p>Chapter 3 reflects on Gatto’s journey from growing up in Monongahela to becoming a teacher in New York City. Gatto shares personal anecdotes from his childhood, emphasizing the informal education he received from the community and environment around the Monongahela River. He discusses his disillusionment with his advertising career and his decision to pursue teaching, seeking meaningful work over financial gain.</p>
<p>The chapter includes Gatto’s initial struggles and frustrations with the education system as a substitute teacher, highlighting issues such as lack of support and administrative rigidity. A significant turning point in Gatto’s teaching career is detailed through his interaction with a student, Milagros, who was unjustly placed in a lower reading group. Gatto’s advocacy for Milagros leads to her reassignment to a more appropriate class, reinforcing his commitment to teaching.</p>
<section id="key-concepts-3" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-3">Key Concepts</h3>
<ul>
<li><strong>Informal Education</strong>: Gatto’s childhood experiences along the Monongahela River, where he learned from nature, community members, and personal adventures, highlighting the value of informal education.</li>
<li><strong>Career Transition</strong>: Gatto’s move from a lucrative advertising career to teaching, motivated by a search for meaningful work.</li>
<li><strong>Education System Critique</strong>: Criticism of the rigidity and inefficiency within the school system, particularly in how it deals with substitute teachers and student placement.</li>
<li><strong>Impact of Teaching</strong>: The story of Milagros demonstrates the profound impact a teacher can have on a student’s life and educational trajectory.</li>
</ul>
</section>
<section id="noteworthy-facts-2" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-2">Noteworthy Facts</h3>
<ul>
<li>Gatto won the First Prize in the Geraldine Dodge Foundation, Columbia University National Essay Contest.</li>
<li>Before becoming a teacher, Gatto had a successful career in advertising, where he felt his work lacked importance and challenge.</li>
<li>His decision to teach was largely scorned by his colleagues in advertising, who viewed teaching in New York City as a lower-status job.</li>
<li>Gatto’s early experiences as a teacher were challenging, facing hostile school environments and administrative hurdles.</li>
<li>The positive outcome of advocating for Milagros’s educational needs reaffirmed Gatto’s commitment to teaching and highlighted the potential for teachers to make a significant difference in their students’ lives.</li>
</ul>
</section>
<section id="practical-implications-1" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-1">Practical Implications</h3>
<ul>
<li><strong>Advocacy for Students</strong>: Teachers can play a crucial role in advocating for their students’ needs, challenging administrative decisions when necessary to ensure students receive appropriate education.</li>
<li><strong>Informal Learning Importance</strong>: Recognizing and valuing informal learning experiences outside the classroom can enrich students’ education and personal growth.</li>
<li><strong>Career Fulfillment</strong>: Finding meaningful work can lead to greater job satisfaction and personal fulfillment, as demonstrated by Gatto’s transition from advertising to teaching.</li>
<li><strong>Systemic Flexibility</strong>: The education system needs to be more flexible and responsive to individual students’ abilities and needs to maximize their learning potential.</li>
</ul>
</section>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ul>
<li><strong>For Teachers</strong>: Be vigilant and proactive in recognizing and advocating for students’ needs, ensuring they are placed in educational settings that match their abilities and foster their growth.</li>
<li><strong>For Administrators</strong>: Implement more flexible policies and practices that accommodate individual differences among students and allow for adjustments based on their actual performance and needs.</li>
<li><strong>For Education Policy Makers</strong>: Encourage and facilitate more interaction between the school and the local community to enhance informal learning opportunities for students.</li>
<li><strong>For Parents and Community Members</strong>: Engage actively with local schools, offering diverse learning experiences and support to enrich students’ education beyond the formal curriculum.</li>
</ul>
</section>
</section>
<section id="we-need-less-school-not-more" class="level2">
<h2 class="anchored" data-anchor-id="we-need-less-school-not-more">We Need Less School, Not More</h2>
<p>Chapter 4 discusses the impact of the current education system on society, emphasizing the need for less schooling rather than more. Gatto critiques the system’s focus on conformity, the undermining of community and family, and the preference for institutional solutions over individual and community growth. He advocates for a return to more personalized, community-based education models that foster individuality and genuine learning.</p>
<section id="key-concepts-4" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-4">Key Concepts</h3>
<ul>
<li><strong>Community vs.&nbsp;Network</strong>: Gatto highlights the difference between communities, which involve rich, multi-dimensional interactions, and networks, which are limited and focus on specific outcomes.</li>
<li><strong>The Negative Impact of Schooling</strong>: The current education system is critiqued for fragmenting individuals, undermining family and community bonds, and promoting conformity over individual growth.</li>
<li><strong>The Importance of Individuality in Education</strong>: Gatto argues for an education system that fosters individuality, critical thinking, and genuine learning, as opposed to rote learning and conformity.</li>
</ul>
</section>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ul>
<li><strong>Education vs.&nbsp;Schooling</strong>: Gatto makes a distinction between true education, which is self-driven and fosters individual growth, and schooling, which is compulsory and often stifles creativity and individuality.</li>
<li><strong>The Role of Family and Community</strong>: The importance of family and community in the educational process is emphasized, with the argument that these elements are crucial for developing well-rounded, engaged individuals.</li>
</ul>
</section>
<section id="noteworthy-facts-3" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-3">Noteworthy Facts</h3>
<ul>
<li><strong>The Efficiency of Self-Directed Learning</strong>: Gatto suggests that basic skills like reading, writing, and arithmetic can be learned quickly in the right setting, often through self-teaching, questioning the necessity of prolonged schooling.</li>
<li><strong>Historical Perspective on Schooling</strong>: The concept of compulsory schooling is relatively recent, with the system becoming significantly more entrenched and expansive in the past century.</li>
</ul>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ul>
<li><strong>De-emphasize Institutional Schooling</strong>: Gatto recommends reducing the emphasis on formal, compulsory education and exploring alternative models that prioritize individual growth and community involvement.</li>
<li><strong>Encourage Community and Family Engagement</strong>: Strengthening the role of families and communities in the educational process could foster more meaningful learning experiences.</li>
<li><strong>Foster Self-Directed Learning</strong>: Encouraging self-directed learning and critical thinking could lead to more engaged and capable individuals.</li>
</ul>
</section>
<section id="critical-analysis-1" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-1">Critical Analysis</h3>
<ul>
<li>Gatto’s insights into the educational system provoke a reevaluation of the purpose and methods of education, emphasizing the need for systems that support individual growth and community engagement rather than conformity and institutional dependency.</li>
</ul>
</section>
<section id="additional-insights" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights">Additional Insights</h3>
<ul>
<li><strong>The Psychological Impact of Schooling</strong>: The text delves into the psychological effects of the current schooling system, including feelings of isolation, competition, and inadequacy.</li>
<li><strong>The Economic Dimensions of Education</strong>: Gatto critiques the commercialization of education and its focus on economic outcomes rather than personal growth or societal well-being.</li>
</ul>
</section>
</section>
<section id="the-congregational-principle" class="level2">
<h2 class="anchored" data-anchor-id="the-congregational-principle">The Congregational Principle</h2>
<p>In chapter 5, Gatto argues that the current system of schooling prioritizes conformity and obedience over genuine learning and personal development. Gatto calls for a radical rethinking of education, drawing inspiration from the decentralized, community-focused educational models of early American history, particularly the Congregational Principle practiced in colonial New England.</p>
<section id="key-concepts-5" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-5">Key Concepts</h3>
<ul>
<li><strong>Compulsory Schooling’s Hidden Curriculum:</strong> Gatto argues that the true curriculum of schools is to teach compliance and conformity, rather than fostering critical thinking and individuality.</li>
<li><strong>The Congregational Principle:</strong> A model from colonial New England where education and religious practice were decentralized and community-based, allowing for greater individual and local control over learning.</li>
<li><strong>Critique of Centralization in Education:</strong> Gatto criticizes the push towards national standards, curricula, and testing, arguing they further remove educational decisions from communities and individuals.</li>
<li><strong>Importance of Localism and Community in Education:</strong> Advocates for education systems that are rooted in local communities, allowing for more relevant, flexible, and responsive educational experiences.</li>
<li><strong>Call for Educational Reform:</strong> Urges a move away from standardized, compulsory schooling towards more diverse, community-driven education models.</li>
</ul>
</section>
<section id="recommendations-5" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-5">Recommendations</h3>
<ul>
<li><strong>Decentralize Education:</strong> Shift control of education from national or state levels to local communities to better meet the needs and values of those communities.</li>
<li><strong>Promote Community-Based Learning:</strong> Encourage educational models that involve the community, such as apprenticeships, internships, and project-based learning that engage local businesses, artisans, and elders.</li>
<li><strong>Support Homeschooling and Alternative Education:</strong> Recognize and support the legitimacy and value of homeschooling and other alternative educational paths as viable options for students.</li>
<li><strong>Reevaluate Teacher Certification:</strong> Question the necessity of traditional teacher certification processes and open up teaching to those with practical experience and knowledge relevant to students’ interests and local community needs.</li>
<li><strong>Foster a Culture of Critical Thinking:</strong> Encourage educational approaches that prioritize critical thinking, problem-solving, and the development of individual interests and talents over rote memorization and standardized testing.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>education</category>
  <category>history</category>
  <guid>christianjmills.com/posts/dumbing-us-down-book-notes/</guid>
  <pubDate>Sun, 10 Mar 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Setting Up CUDA for Python on Ubuntu</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/cuda-python-setup-tutorial/ubuntu/</link>
  <description><![CDATA[ 




<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Installing NVIDIA Drivers</li>
<li>Setting Up a Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Converting RGB Images to Grayscale in Python</li>
<li>Converting RGB Images to Grayscale in CUDA</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>This tutorial covers a convenient method for installing CUDA within a Python environment. CUDA (Compute Unified Device Architecture) is a parallel computing platform and programming model developed by NVIDIA for general computing on Graphics Processing Units (GPUs).</p>
<p>Installing CUDA directly within Python environments helps streamline working with projects that use custom CUDA kernels like <a href="https://github.com/IDEA-Research/GroundingDINO">GroundingDINO</a> and creating custom kernels ourselves. Writing custom CUDA kernels can be beneficial when optimizing computational tasks for speed and efficiency, such as fusing operations in a PyTorch project.</p>
<p>The core steps and examples in this tutorial are from the following lecture by <a href="https://jeremy.fast.ai/">Jeremy Howard</a>:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=nOxKexn3iBo"><strong>Getting Started With CUDA for Python Programmers</strong></a></li>
</ul>
<p>The tutorial covers each step, from installing NVIDIA graphics drivers in Ubuntu to verifying our CUDA installation by creating a custom kernel with PyTorch. While the provided steps for installing NVIDIA graphics drivers are specific to Ubuntu, the steps to install CUDA within Python environments should work for other Linux distros and WSL.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Installing Ubuntu">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Installing Ubuntu
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>The Ubuntu website provides <a href="https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview">a step-by-step guide</a> to installing Ubuntu on your PC, and you can install it alongside an existing operating system.</p>
<ul>
<li><strong>Tutorial:</strong> <a href="https://ubuntu.com/tutorials/install-ubuntu-desktop#1-overview">Install Ubuntu with a Bootable USB Stick</a></li>
</ul>
</div>
</div>
</div>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>, which <a href="../../../posts/google-colab-getting-started-tutorial/#using-hardware-acceleration">provides free access</a> to a CUDA-enabled GPU. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></li>
<li><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Platform</th>
<th>Jupyter Notebook</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Google Colab</td>
<td><a href="https://colab.research.google.com/github/cj-mills/cuda-pytorch-tutorials/blob/main/notebooks/pytorch-verify-cuda-install.ipynb">Open In Colab</a></td>
</tr>
<tr class="even">
<td>Linux</td>
<td><a href="https://github.com/cj-mills/cuda-pytorch-tutorials/blob/main/notebooks/pytorch-verify-cuda-install.ipynb">GitHub Repository</a></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="installing-nvidia-drivers" class="level2">
<h2 class="anchored" data-anchor-id="installing-nvidia-drivers">Installing NVIDIA Drivers</h2>
<p>We need to ensure we have NVIDIA GPU drivers installed before installing CUDA, so let’s first check if we already have them.</p>
<section id="check-for-existing-drivers" class="level4">
<h4 class="anchored" data-anchor-id="check-for-existing-drivers">Check for Existing Drivers</h4>
<p>Open a terminal window (<code>Ctrl</code>+<code>Alt</code>+<code>T</code>) and run the following command to see if you already have NVIDIA drivers installed:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span> /proc/driver/nvidia/version</span></code></pre></div>
<p>Sample output with NVIDIA drivers:</p>
<pre class="text"><code>NVRM version: NVIDIA UNIX x86_64 Kernel Module  535.154.05  Thu Dec 28 15:37:48 UTC 2023
GCC version:  gcc version 12.3.0 (Ubuntu 12.3.0-1ubuntu1~22.04) </code></pre>
<hr>
<p>You can skip to the next section if you already have NVIDIA drivers.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Uninstall Existing NVIDIA Drivers &amp; CUDA">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Uninstall Existing NVIDIA Drivers &amp; CUDA
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>You can run the following terminal commands to uninstall any existing NVIDIA and CUDA packages, if you want to start fresh:</p>
<ul>
<li>Press <code>Ctrl</code>+<code>Alt</code>+<code>T</code> to open a terminal window.</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove all installed NVIDIA packages</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get remove <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--purge</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nvidia-.*'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove all installed CUDA packages</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get remove <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--purge</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda-.*'</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Clean up any remaining dependencies</span></span>
<span id="cb3-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get autoremove <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get autoclean</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the initial RAM filesystem to ensure it doesn't include any NVIDIA drivers</span></span>
<span id="cb3-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> update-initramfs <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span></span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reboot the system</span></span>
<span id="cb3-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> reboot</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="view-available-drivers" class="level3">
<h3 class="anchored" data-anchor-id="view-available-drivers">View available drivers</h3>
<p>Ubuntu includes a convenient <a href="https://ubuntu.com/server/docs/nvidia-drivers-installation">command-line tool</a> for installing drivers. Open a terminal (<code>Ctrl</code>+<code>Alt</code>+<code>T</code>) and run the following command to see the available GPU drivers.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check the available drivers for your hardware</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> ubuntu-drivers list</span></code></pre></div>
<p>Here is the output on Ubuntu 22.04 with an RTX 40-series GPU:</p>
<pre class="text"><code>$ sudo ubuntu-drivers list
nvidia-driver-545, (kernel modules provided by linux-modules-nvidia-545-generic-hwe-22.04)
nvidia-driver-535-open, (kernel modules provided by linux-modules-nvidia-535-open-generic-hwe-22.04)
nvidia-driver-545-open, (kernel modules provided by linux-modules-nvidia-545-open-generic-hwe-22.04)
nvidia-driver-525, (kernel modules provided by linux-modules-nvidia-525-generic-hwe-22.04)
nvidia-driver-535-server-open, (kernel modules provided by linux-modules-nvidia-535-server-open-generic-hwe-22.04)
nvidia-driver-535-server, (kernel modules provided by linux-modules-nvidia-535-server-generic-hwe-22.04)
nvidia-driver-525-open, (kernel modules provided by linux-modules-nvidia-525-open-generic-hwe-22.04)
nvidia-driver-535, (kernel modules provided by linux-modules-nvidia-535-generic-hwe-22.04)
nvidia-driver-525-server, (kernel modules provided by linux-modules-nvidia-525-server-generic-hwe-22.04)</code></pre>
<hr>
</section>
<section id="install-the-drivers" class="level3">
<h3 class="anchored" data-anchor-id="install-the-drivers">Install the Drivers</h3>
<p>Next, we run the <code>install</code> command where we can stick with the default driver version or manually specify one.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Default</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Manual</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install the driver that is considered the best match for your hardware</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> ubuntu-drivers install</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install driver version 535</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> ubuntu-drivers install nvidia:535</span></code></pre></div>
</div>
</div>
</div>
<p>After that, we need to reboot the computer.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reboot the system</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> reboot</span></code></pre></div>
<p>Once back in Ubuntu, we can create a Python environment and install CUDA.</p>
</section>
</section>
<section id="setting-up-a-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-a-python-environment">Setting Up a Python Environment</h2>
<p>We will use the <a href="https://mamba.readthedocs.io/en/latest/">Mamba</a> package manager to create the Python environment. You can learn more about it in my <a href="../../../posts/mamba-getting-started-tutorial-windows/#introduction">getting started</a> tutorial. Feel free to use <a href="https://docs.anaconda.com/free/miniconda/">Conda</a> instead of Mamba if you already have that installed.</p>
<section id="install-mamba-package-manager" class="level3">
<h3 class="anchored" data-anchor-id="install-mamba-package-manager">Install Mamba Package Manager</h3>
<p>The following bash commands will download the latest release, install it, and relaunch the current bash shell to apply the relevant changes:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.sh"</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> Mambaforge-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span>-<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">uname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-m</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">)</span>.sh <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-b</span></span>
<span id="cb9-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">~/mambaforge/bin/mamba</span> init</span>
<span id="cb9-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span></span></code></pre></div>
</section>
<section id="create-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="create-a-python-environment">Create a Python Environment</h3>
<p>Next, we’ll create a Python environment and activate it.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Mamba</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Conda</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> cuda-env python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb10-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate cuda-env</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> cuda-env python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb11-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate cuda-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="install-cuda-package" class="level3">
<h3 class="anchored" data-anchor-id="install-cuda-package">Install CUDA Package</h3>
<p>We will later use PyTorch to verify our CUDA installation, so let’s ensure we install the appropriate CUDA version. You can use the link below to check the latest CUDA version supported by PyTorch. At the time of writing, that was CUDA version <code>12.1</code>.</p>
<ul>
<li><a href="https://pytorch.org/get-started/locally/">PyTorch: Get Started</a></li>
</ul>
<p>Run the following command to install CUDA in our Python environment with <a href="https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#conda-installation">Conda/Mamba</a>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">Mamba</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">Conda</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install cuda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia/label/cuda-12.1.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install cuda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia/label/cuda-12.1.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
</div>
</div>
</div>
<p>The command installs CUDA into our <code>cuda-env</code> environment’s root directory.</p>
<pre class="text"><code>$ find $CONDA_PREFIX/include -name cuda
/home/innom-dt/mambaforge/envs/cuda-env/include/thrust/system/cuda
/home/innom-dt/mambaforge/envs/cuda-env/include/cuda</code></pre>
<hr>
</section>
<section id="install-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="install-pytorch">Install PyTorch</h3>
<p>Run the following command to install PyTorch with CUDA version <code>12.1</code>.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">Mamba</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">Conda</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb15-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> install pytorch torchvision torchaudio pytorch-cuda=12.1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia/label/cuda-12.1.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb16-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install pytorch torchvision torchaudio pytorch-cuda=12.1 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> pytorch <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> nvidia/label/cuda-12.1.0 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="install-additional-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="install-additional-dependencies">Install additional dependencies</h3>
<p>We also need to install some additional libraries for our test code.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>ninja</code></td>
<td>Ninja is a small build system with a focus on speed. (<a href="https://pypi.org/project/ninja/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>wurlitzer</code></td>
<td>Capture C-level output in context managers. (<a href="https://pypi.org/project/wurlitzer/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb17-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install jupyter ninja pandas pillow wurlitzer</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python modules into our Jupyter Notebook and verify that PyTorch can find our CUDA installation.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os, math, gzip, pickle</span>
<span id="cb18-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> urllib.request <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> urlretrieve</span>
<span id="cb18-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb18-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb18-10">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb18-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb18-14"></span>
<span id="cb18-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb18-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb18-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor</span>
<span id="cb18-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tv</span>
<span id="cb18-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tvf</span>
<span id="cb18-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb18-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.cpp_extension <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_inline, CUDA_HOME</span>
<span id="cb18-22"></span>
<span id="cb18-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify the CUDA install path </span></span>
<span id="cb18-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(CUDA_HOME)</span></code></pre></div>
<pre class="text"><code>/home/innom-dt/mambaforge/envs/cuda-env</code></pre>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>We can tell from the above print statement that PyTorch correctly detected the path for our Python environment’s CUDA install.</p>
</div>
</div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we set up some basics for our project, such as enabling the capture of C/C++ output in the notebook and making CUDA operations synchronous for easier debugging.</p>
<section id="capture-c-output" class="level3">
<h3 class="anchored" data-anchor-id="capture-c-output">Capture C++ Output</h3>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable capture of C/C++ output in the notebook cells.</span></span>
<span id="cb20-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext wurlitzer</span></code></pre></div>
</section>
<section id="make-cuda-operations-synchronous" class="level3">
<h3 class="anchored" data-anchor-id="make-cuda-operations-synchronous">Make CUDA Operations Synchronous</h3>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set environment variable to make CUDA operations synchronous for easier debugging</span></span>
<span id="cb21-2">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CUDA_LAUNCH_BLOCKING'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span></span></code></pre></div>
</section>
</section>
<section id="converting-rgb-images-to-grayscale-in-python" class="level2">
<h2 class="anchored" data-anchor-id="converting-rgb-images-to-grayscale-in-python">Converting RGB Images to Grayscale in Python</h2>
<p>To gauge the performance of CUDA over standard Python, we will convert an RGB image to grayscale.</p>
<section id="download-a-test-image" class="level3">
<h3 class="anchored" data-anchor-id="download-a-test-image">Download a Test Image</h3>
<p>We can download a copy of Vincent van Gogh’s <em>The Starry Night</em> painting from <a href="https://commons.wikimedia.org/wiki/Main_Page">Wikimedia Commons</a> for our test image.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the URL of the test image</span></span>
<span id="cb22-2">test_img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg/1280px-Van_Gogh_-_Starry_Night_-_Google_Art_Project.jpg'</span></span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the file name from the URL</span></span>
<span id="cb22-5">test_img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(test_img_url).name</span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a Path object for the image file</span></span>
<span id="cb22-8">img_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(test_img_name)</span>
<span id="cb22-9"></span>
<span id="cb22-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the image file does not exist in the local directory</span></span>
<span id="cb22-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> img_path.exists():</span>
<span id="cb22-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the file does not exist, download it from the URL to the local directory</span></span>
<span id="cb22-13">    urlretrieve(test_img_url, img_path)</span></code></pre></div>
</section>
<section id="load-the-test-image" class="level3">
<h3 class="anchored" data-anchor-id="load-the-test-image">Load the Test Image</h3>
<p>Once downloaded, we will load the image as an RGB tensor.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the test image as an RGB tensor</span></span>
<span id="cb23-2">img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> io.read_image(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(img_path))</span>
<span id="cb23-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img_tensor.shape)</span>
<span id="cb23-4"></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image tensor</span></span>
<span id="cb23-6">resized_img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tvf.resize(img_tensor, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb23-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(resized_img_tensor.shape)</span>
<span id="cb23-8"></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the tensor as a PIL image</span></span>
<span id="cb23-10">Image.fromarray(resized_img_tensor.permute(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).numpy())</span></code></pre></div>
<pre class="text"><code>torch.Size([3, 1014, 1280])
torch.Size([3, 512, 646])</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-python-setup-tutorial/ubuntu/images/output_16_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="baseline-python-implementation" class="level3">
<h3 class="anchored" data-anchor-id="baseline-python-implementation">Baseline Python Implementation</h3>
<p>Next, we will define a function that uses a standard for-loop to iterate through the RGB pixel values to create a new grayscale tensor.</p>
<section id="define-a-function-to-convert-an-rgb-tensor-to-grayscale" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-convert-an-rgb-tensor-to-grayscale">Define a function to convert an RGB Tensor to Grayscale</h4>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rgb2gray_py(rgb_tensor, gray_coeffs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2989</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5870</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1140</span>]):</span>
<span id="cb25-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the channel (c), height (h), and width (w) dimensions of the input image tensor</span></span>
<span id="cb25-3">    c, h, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rgb_tensor.shape</span>
<span id="cb25-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the total number of pixels in the image (height * width)</span></span>
<span id="cb25-5">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w</span>
<span id="cb25-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the input image tensor from CxHxW format to a long array to simplify processing</span></span>
<span id="cb25-7">    rgb_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rgb_tensor.flatten()</span>
<span id="cb25-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an empty tensor 'res' to hold the grayscale values, with the same datatype and device as the input</span></span>
<span id="cb25-9">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty(n, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rgb_tensor.dtype, device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rgb_tensor.device)</span>
<span id="cb25-10">    </span>
<span id="cb25-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop through each pixel to compute the grayscale value</span></span>
<span id="cb25-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n):</span>
<span id="cb25-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the grayscale conversion formula: 0.2989 * Red + 0.5870 * Green + 0.1140 * Blue</span></span>
<span id="cb25-14">        res[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gray_coeffs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rgb_tensor[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gray_coeffs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rgb_tensor[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>n] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> gray_coeffs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> rgb_tensor[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n]</span>
<span id="cb25-15">    </span>
<span id="cb25-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape the resulting flat grayscale values back into a 2D image (height x width)</span></span>
<span id="cb25-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> res.view(h, w)</span></code></pre></div>
</section>
<section id="time-the-python-implementation" class="level4">
<h4 class="anchored" data-anchor-id="time-the-python-implementation">Time the Python implementation</h4>
<p>We can use the IPython magic command <code>%%time</code> to gauge the performance of our Python implementation.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb26-2">img_gray_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rgb2gray_py(resized_img_tensor)</span>
<span id="cb26-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(img_gray_tensor.shape)</span></code></pre></div>
<pre class="text"><code>torch.Size([512, 646])
CPU times: user 6.53 s, sys: 0 ns, total: 6.53 s
Wall time: 6.53 s</code></pre>
<p>On my system’s i7-11700K CPU, it takes nearly seven seconds to iterate through all the pixels in the <code>512x646</code> image.</p>
</section>
<section id="verify-the-result" class="level4">
<h4 class="anchored" data-anchor-id="verify-the-result">Verify the Result</h4>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the result as a PIL grayscale image</span></span>
<span id="cb28-2">Image.fromarray(img_gray_tensor.numpy(), mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-python-setup-tutorial/ubuntu/images/output_23_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>With our baseline established, let’s make an equivalent CUDA implementation to leverage the parallel processing capabilities of a GPU.</p>
</section>
</section>
</section>
<section id="converting-rgb-images-to-grayscale-in-cuda" class="level2">
<h2 class="anchored" data-anchor-id="converting-rgb-images-to-grayscale-in-cuda">Converting RGB Images to Grayscale in CUDA</h2>
<p>We can use PyTorch’s <a href="https://pytorch.org/docs/stable/cpp_extension.html#torch.utils.cpp_extension.load_inline"><code>load_inline</code></a> function to build a custom CUDA kernel and load it as a PyTorch extension. The function takes the CUDA code as a Python string and automatically compiles it.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Processing on NVIDA GPUs">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Processing on NVIDA GPUs
</div>
</div>
<div class="callout-body-container callout-body">
<section id="streaming-multiprocessors-sms" class="level5">
<h5 class="anchored" data-anchor-id="streaming-multiprocessors-sms">Streaming Multiprocessors (SMs):</h5>
<ul>
<li>SMs are the fundamental execution units in NVIDIA GPUs.</li>
<li>Each one can execute multiple threads concurrently.</li>
</ul>
</section>
<section id="thread-blocks" class="level5">
<h5 class="anchored" data-anchor-id="thread-blocks">Thread Blocks:</h5>
<ul>
<li>A thread block is a group of threads that can cooperate through shared memory and synchronization.</li>
<li>All threads in a block run on the same SM, meaning they can share resources such as shared memory and can synchronize their execution with each other.</li>
<li><code>2^31</code> max blocks for dim <code>0</code>, <code>2^16</code> max for dims <code>1</code> &amp; <code>2</code></li>
<li><code>1024</code> max threads per block (use a multiple of <code>32</code>)</li>
</ul>
</section>
<section id="shared-memory" class="level5">
<h5 class="anchored" data-anchor-id="shared-memory">Shared Memory:</h5>
<ul>
<li>Shared memory is a small space in GPU memory shared among the threads in a block.</li>
<li>It is much faster than global memory (the main GPU memory) but also limited in size.</li>
<li>Threads in the same block can use shared memory to share data efficiently.</li>
</ul>
</section>
<section id="concurrency" class="level5">
<h5 class="anchored" data-anchor-id="concurrency">Concurrency:</h5>
<ul>
<li>In CUDA, all threads in a block have the potential to run concurrently.</li>
<li>The actual concurrency depends on the number of CUDA cores per SM and the resources required by the threads.</li>
</ul>
</section>
</div>
</div>
<section id="define-the-cuda-code" class="level3">
<h3 class="anchored" data-anchor-id="define-the-cuda-code">Define the CUDA Code</h3>
<p>We will define the CUDA code in sections.</p>
<section id="define-the-utility-includes-and-definitions-for-pytorch-and-cuda" class="level4">
<h4 class="anchored" data-anchor-id="define-the-utility-includes-and-definitions-for-pytorch-and-cuda">Define the utility includes and definitions for PyTorch and CUDA</h4>
<p>Let’s start by adding the required header files and macros. The following code adds the headers for the PyTorch extension library and CUDA-specific exceptions for error handling.</p>
<p>It also defines a few macros to check if a tensor is on a CUDA device and if the tensor is contiguous in memory.</p>
<p>Lastly, it defines a function to calculate the ceiling of an integer division. We use this later for calculating how to split work on the GPU.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="C++ Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
C++ Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre class="text"><code></code></pre>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Include the necessary headers for PyTorch and CUDA functionality.</span></span>
<span id="cb30-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;torch/extension.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// PyTorch extension library for custom C++ and CUDA extensions.</span></span>
<span id="cb30-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Standard I/O for debugging (e.g., printf).</span></span>
<span id="cb30-4"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;c10/cuda/CUDAException.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// CUDA-specific exceptions for error handling.</span></span>
<span id="cb30-5"></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Macro to check if a tensor is allocated on a CUDA device.</span></span>
<span id="cb30-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If not, it throws an error.</span></span>
<span id="cb30-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// x: The tensor to check.</span></span>
<span id="cb30-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CHECK_CUDA</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>TORCH_CHECK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span>is_cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span>x<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" must be a CUDA tensor"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb30-10"></span>
<span id="cb30-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Macro to check if a tensor is contiguous in memory.</span></span>
<span id="cb30-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If not, it throws an error.</span></span>
<span id="cb30-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Contiguous tensors are often required for efficient CUDA operations.</span></span>
<span id="cb30-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// x: The tensor to check.</span></span>
<span id="cb30-15"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CHECK_CONTIGUOUS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>TORCH_CHECK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>is_contiguous<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span>x<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" must be contiguous"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb30-16"></span>
<span id="cb30-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Macro to perform both CUDA and contiguity checks on a tensor.</span></span>
<span id="cb30-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is a convenience macro to ensure a tensor is suitable for CUDA operations.</span></span>
<span id="cb30-19"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CHECK_INPUT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>CHECK_CUDA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>CHECK_CONTIGUOUS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb30-20"></span>
<span id="cb30-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to calculate the ceiling of an integer division.</span></span>
<span id="cb30-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is often used to determine the number of blocks needed in a CUDA kernel launch</span></span>
<span id="cb30-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// when the total number of threads does not evenly divide by the number of threads per block.</span></span>
<span id="cb30-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// a: The numerator in the division.</span></span>
<span id="cb30-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// b: The denominator in the division.</span></span>
<span id="cb30-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Returns: The smallest integer greater than or equal to a/b.</span></span>
<span id="cb30-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inline</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> cdiv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb30-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb30-29"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">cuda_utils_macros <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'''</span></span>
<span id="cb31-2"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// Include the necessary headers for PyTorch and CUDA functionality.</span></span>
<span id="cb31-3"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">#include &lt;torch/extension.h&gt; // PyTorch extension library for custom C++ and CUDA extensions.</span></span>
<span id="cb31-4"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">#include &lt;stdio.h&gt; // Standard I/O for debugging (e.g., printf).</span></span>
<span id="cb31-5"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">#include &lt;c10/cuda/CUDAException.h&gt; // CUDA-specific exceptions for error handling.</span></span>
<span id="cb31-6"></span>
<span id="cb31-7"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// Macro to check if a tensor is allocated on a CUDA device.</span></span>
<span id="cb31-8"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// If not, it throws an error.</span></span>
<span id="cb31-9"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// x: The tensor to check.</span></span>
<span id="cb31-10"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">#define CHECK_CUDA(x) TORCH_CHECK(x.device().is_cuda(), #x " must be a CUDA tensor")</span></span>
<span id="cb31-11"></span>
<span id="cb31-12"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// Macro to check if a tensor is contiguous in memory.</span></span>
<span id="cb31-13"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// If not, it throws an error.</span></span>
<span id="cb31-14"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// Contiguous tensors are often required for efficient CUDA operations.</span></span>
<span id="cb31-15"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// x: The tensor to check.</span></span>
<span id="cb31-16"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">#define CHECK_CONTIGUOUS(x) TORCH_CHECK(x.is_contiguous(), #x " must be contiguous")</span></span>
<span id="cb31-17"></span>
<span id="cb31-18"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// Macro to perform both CUDA and contiguity checks on a tensor.</span></span>
<span id="cb31-19"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// This is a convenience macro to ensure a tensor is suitable for CUDA operations.</span></span>
<span id="cb31-20"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">#define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)</span></span>
<span id="cb31-21"></span>
<span id="cb31-22"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// Function to calculate the ceiling of an integer division.</span></span>
<span id="cb31-23"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// This is often used to determine the number of blocks needed in a CUDA kernel launch</span></span>
<span id="cb31-24"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// when the total number of threads does not evenly divide by the number of threads per block.</span></span>
<span id="cb31-25"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// a: The numerator in the division.</span></span>
<span id="cb31-26"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// b: The denominator in the division.</span></span>
<span id="cb31-27"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// Returns: The smallest integer greater than or equal to a/b.</span></span>
<span id="cb31-28"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">inline unsigned int cdiv(unsigned int a, unsigned int b) { </span></span>
<span id="cb31-29"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    return (a + b - 1) / b;</span></span>
<span id="cb31-30"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb31-31"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span></code></pre></div>
</section>
<section id="define-the-cuda-kernel-for-rgb-to-grayscale-conversion" class="level4">
<h4 class="anchored" data-anchor-id="define-the-cuda-kernel-for-rgb-to-grayscale-conversion">Define the CUDA kernel for RGB to Grayscale conversion</h4>
<p>Next, we define the CUDA kernel for converting RGB tensors to grayscale. The kernel takes pointers to the memory locations for the input RGB and output grayscale tensors, along with the total number of pixels.</p>
<p>Instead of iterating through each pixel, the kernel applies the grayscale conversion formula to each pixel in parallel.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="C++ Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
C++ Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre class="text"><code></code></pre>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// CUDA kernel to convert an RGB image to grayscale.</span></span>
<span id="cb33-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Inputs:</span></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// - x: Pointer to the input image data in RGB format.</span></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// - out: Pointer to the output image data in grayscale.</span></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// - n: The total number of pixels in the image.</span></span>
<span id="cb33-6">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> rgb_to_grayscale_kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the global thread index.</span></span>
<span id="cb33-8">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb33-9"></span>
<span id="cb33-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ensure the thread index is within the bounds of the image data.</span></span>
<span id="cb33-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb33-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the RGB values to grayscale using the luminosity method.</span></span>
<span id="cb33-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The luminosity method is a weighted sum of the R, G, and B values.</span></span>
<span id="cb33-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Weights: 0.2989 for Red, 0.5870 for Green, and 0.1140 for Blue.</span></span>
<span id="cb33-15">        out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2989</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5870</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1140</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb33-16">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb33-17"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">cuda_kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'''</span></span>
<span id="cb34-2"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// CUDA kernel to convert an RGB image to grayscale.</span></span>
<span id="cb34-3"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// Inputs:</span></span>
<span id="cb34-4"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// - x: Pointer to the input image data in RGB format.</span></span>
<span id="cb34-5"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// - out: Pointer to the output image data in grayscale.</span></span>
<span id="cb34-6"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// - n: The total number of pixels in the image.</span></span>
<span id="cb34-7"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">__global__ void rgb_to_grayscale_kernel(unsigned char* x, unsigned char* out, int n) {</span></span>
<span id="cb34-8"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Calculate the global thread index.</span></span>
<span id="cb34-9"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    int i = blockIdx.x * blockDim.x + threadIdx.x;</span></span>
<span id="cb34-10"></span>
<span id="cb34-11"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Ensure the thread index is within the bounds of the image data.</span></span>
<span id="cb34-12"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    if (i &lt; n) {</span></span>
<span id="cb34-13"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">        // Convert the RGB values to grayscale using the luminosity method.</span></span>
<span id="cb34-14"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">        // The luminosity method is a weighted sum of the R, G, and B values.</span></span>
<span id="cb34-15"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">        // Weights: 0.2989 for Red, 0.5870 for Green, and 0.1140 for Blue.</span></span>
<span id="cb34-16"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">        out[i] = 0.2989 * x[i] + 0.5870 * x[i + n] + 0.1140 * x[i + 2 * n];</span></span>
<span id="cb34-17"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    }</span></span>
<span id="cb34-18"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb34-19"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <code>__global__</code> qualifier keyword indicates the kernel will be callable from the CPU or GPU and run on the GPU.</p>
</div>
</div>
</section>
<section id="define-the-pytorch-function-to-convert-rgb-to-grayscale" class="level4">
<h4 class="anchored" data-anchor-id="define-the-pytorch-function-to-convert-rgb-to-grayscale">Define the PyTorch function to convert RGB to Grayscale</h4>
<p>Last, we must define a PyTorch function to use the custom CUDA kernel within Python.</p>
<p>The function will take an RGB tensor as input, initialize the output grayscale tensor, launch the CUDA kernel, and return the updated grayscale tensor.</p>
<p>We need to specify how to divide the work for the list or pixel values among thread blocks on the GPU. For our function, we will set each block to have <code>256</code> threads and then use the number of pixels to determine how many blocks we need.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="C++ Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
C++ Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre class="text"><code></code></pre>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to convert a PyTorch tensor representing an RGB image to grayscale.</span></span>
<span id="cb36-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Input:</span></span>
<span id="cb36-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// - input: A PyTorch tensor of the input RGB image.</span></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Output:</span></span>
<span id="cb36-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// - A PyTorch tensor of the output grayscale image.</span></span>
<span id="cb36-6">torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Tensor rgb_to_grayscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Tensor input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb36-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Perform CUDA and contiguity checks</span></span>
<span id="cb36-8">    CHECK_INPUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb36-9">    </span>
<span id="cb36-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Extract the height and width from the input tensor's dimensions.</span></span>
<span id="cb36-11">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb36-12">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb36-13">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">h*w: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Debug print statement for dimensions.</span></span>
<span id="cb36-14"></span>
<span id="cb36-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create an empty output tensor with the same dimensions as the input.</span></span>
<span id="cb36-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">({</span>h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb36-17"></span>
<span id="cb36-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define the number of threads per block.</span></span>
<span id="cb36-19">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> threads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-20">    </span>
<span id="cb36-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the number of blocks needed for the conversion, ensuring</span></span>
<span id="cb36-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// we have enough blocks to cover all pixels.</span></span>
<span id="cb36-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Launch the CUDA kernel with calculated dimensions.</span></span>
<span id="cb36-24">    rgb_to_grayscale_kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;&lt;</span>cdiv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;(</span></span>
<span id="cb36-25">        input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(),</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(),</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb36-26"></span>
<span id="cb36-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check for any errors during kernel launch or execution.</span></span>
<span id="cb36-28">    C10_CUDA_KERNEL_LAUNCH_CHECK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb36-29"></span>
<span id="cb36-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the output tensor.</span></span>
<span id="cb36-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb36-32"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">pytorch_function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r'''</span></span>
<span id="cb37-2"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// Function to convert a PyTorch tensor representing an RGB image to grayscale.</span></span>
<span id="cb37-3"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// Input:</span></span>
<span id="cb37-4"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// - input: A PyTorch tensor of the input RGB image.</span></span>
<span id="cb37-5"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// Output:</span></span>
<span id="cb37-6"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">// - A PyTorch tensor of the output grayscale image.</span></span>
<span id="cb37-7"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">torch::Tensor rgb_to_grayscale(torch::Tensor input) {</span></span>
<span id="cb37-8"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Perform CUDA and contiguity checks</span></span>
<span id="cb37-9"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    CHECK_INPUT(input);</span></span>
<span id="cb37-10"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb37-11"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Extract the height and width from the input tensor's dimensions.</span></span>
<span id="cb37-12"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    int h = input.size(1);</span></span>
<span id="cb37-13"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    int w = input.size(2);</span></span>
<span id="cb37-14"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    printf("\nh*w: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">\n", h, w); // Debug print statement for dimensions.</span></span>
<span id="cb37-15"></span>
<span id="cb37-16"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Create an empty output tensor with the same dimensions as the input.</span></span>
<span id="cb37-17"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    auto output = torch::empty({h, w}, input.options());</span></span>
<span id="cb37-18"></span>
<span id="cb37-19"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Define the number of threads per block.</span></span>
<span id="cb37-20"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    int threads = 256;</span></span>
<span id="cb37-21"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb37-22"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Calculate the number of blocks needed for the conversion, ensuring</span></span>
<span id="cb37-23"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    // we have enough blocks to cover all pixels.</span></span>
<span id="cb37-24"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Launch the CUDA kernel with calculated dimensions.</span></span>
<span id="cb37-25"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    rgb_to_grayscale_kernel&lt;&lt;&lt;cdiv(w*h, threads), threads&gt;&gt;&gt;(</span></span>
<span id="cb37-26"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">        input.data_ptr&lt;unsigned char&gt;(), output.data_ptr&lt;unsigned char&gt;(), w*h);</span></span>
<span id="cb37-27"></span>
<span id="cb37-28"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Check for any errors during kernel launch or execution.</span></span>
<span id="cb37-29"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    C10_CUDA_KERNEL_LAUNCH_CHECK();</span></span>
<span id="cb37-30"></span>
<span id="cb37-31"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    // Return the output tensor.</span></span>
<span id="cb37-32"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">    return output;</span></span>
<span id="cb37-33"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb37-34"><span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span></code></pre></div>
</section>
</section>
<section id="build-the-pytorch-extension" class="level3">
<h3 class="anchored" data-anchor-id="build-the-pytorch-extension">Build the PyTorch Extension</h3>
<p>With the code for our CUDA file defined, we can pass it to the <code>load_inline</code> function to compile it.</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Combine the CUDA source code</span></span>
<span id="cb38-2">cuda_src <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cuda_utils_macros <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cuda_kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pytorch_function</span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the C++ source code</span></span>
<span id="cb38-4">cpp_src <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torch::Tensor rgb_to_grayscale(torch::Tensor input);"</span></span>
<span id="cb38-5"></span>
<span id="cb38-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A flag indicating whether to use optimization flags for CUDA compilation.</span></span>
<span id="cb38-7">opt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb38-8"></span>
<span id="cb38-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compile and load the CUDA and C++ sources as an inline PyTorch extension</span></span>
<span id="cb38-10">module <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_inline(</span>
<span id="cb38-11">    cuda_sources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[cuda_src],                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of CUDA source code strings.</span></span>
<span id="cb38-12">    cpp_sources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[cpp_src],                    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of C++ source code strings.</span></span>
<span id="cb38-13">    functions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rgb_to_grayscale'</span>],           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of function names to be included in the extension.</span></span>
<span id="cb38-14">    extra_cuda_cflags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-O2"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> opt <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> [], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable optimization flags if `opt` is True.</span></span>
<span id="cb38-15">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Enable verbose output if `verbose` is True.</span></span>
<span id="cb38-16">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inline_ext"</span>                         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Name of the generated extension module.</span></span>
<span id="cb38-17">)</span></code></pre></div>
<pre class="text"><code>    Using /home/innom-dt/.cache/torch_extensions/py311_cu121 as PyTorch extensions root...
    Detected CUDA files, patching ldflags
    Emitting ninja build file /home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/build.ninja...
    Building extension module inline_ext...
    Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)


    [1/3] c++ -MMD -MF main.o.d -DTORCH_EXTENSION_NAME=inline_ext -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1011\" -isystem /home/innom-dt/mambaforge/envs/cuda-env/lib/python3.11/site-packages/torch/include -isystem /home/innom-dt/mambaforge/envs/cuda-env/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/innom-dt/mambaforge/envs/cuda-env/lib/python3.11/site-packages/torch/include/TH -isystem /home/innom-dt/mambaforge/envs/cuda-env/lib/python3.11/site-packages/torch/include/THC -isystem /home/innom-dt/mambaforge/envs/cuda-env/include -isystem /home/innom-dt/mambaforge/envs/cuda-env/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=0 -fPIC -std=c++17 -c /home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/main.cpp -o main.o 
    [2/3] /home/innom-dt/mambaforge/envs/cuda-env/bin/nvcc --generate-dependencies-with-compile --dependency-output cuda.cuda.o.d -DTORCH_EXTENSION_NAME=inline_ext -DTORCH_API_INCLUDE_EXTENSION_H -DPYBIND11_COMPILER_TYPE=\"_gcc\" -DPYBIND11_STDLIB=\"_libstdcpp\" -DPYBIND11_BUILD_ABI=\"_cxxabi1011\" -isystem /home/innom-dt/mambaforge/envs/cuda-env/lib/python3.11/site-packages/torch/include -isystem /home/innom-dt/mambaforge/envs/cuda-env/lib/python3.11/site-packages/torch/include/torch/csrc/api/include -isystem /home/innom-dt/mambaforge/envs/cuda-env/lib/python3.11/site-packages/torch/include/TH -isystem /home/innom-dt/mambaforge/envs/cuda-env/lib/python3.11/site-packages/torch/include/THC -isystem /home/innom-dt/mambaforge/envs/cuda-env/include -isystem /home/innom-dt/mambaforge/envs/cuda-env/include/python3.11 -D_GLIBCXX_USE_CXX11_ABI=0 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_BFLOAT16_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_89,code=compute_89 -gencode=arch=compute_89,code=sm_89 --compiler-options '-fPIC' -std=c++17 -c /home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/cuda.cu -o cuda.cuda.o 
    [3/3] c++ main.o cuda.cuda.o -shared -L/home/innom-dt/mambaforge/envs/cuda-env/lib/python3.11/site-packages/torch/lib -lc10 -lc10_cuda -ltorch_cpu -ltorch_cuda -ltorch -ltorch_python -L/home/innom-dt/mambaforge/envs/cuda-env/lib -lcudart -o inline_ext.so


    Loading extension module inline_ext...</code></pre>
</section>
<section id="getting-information-about-the-module" class="level3">
<h3 class="anchored" data-anchor-id="getting-information-about-the-module">Getting Information About the Module</h3>
<p>With our PyTorch extension loaded as a Python module, we can get the path to the module and explore the files created during the build process.</p>
<section id="get-the-module-path" class="level4">
<h4 class="anchored" data-anchor-id="get-the-module-path">Get the module path</h4>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the path to the extension module</span></span>
<span id="cb40-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Module Path: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>module<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre class="text"><code>Module Path: /home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/inline_ext.so</code></pre>
</section>
<section id="get-the-module-content" class="level4">
<h4 class="anchored" data-anchor-id="get-the-module-content">Get the module content</h4>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the content of the module folder as a Pandas DataFrame</span></span>
<span id="cb42-2">pd.DataFrame(Path(module.<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__file__</span>).parent.iterdir())</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
/home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/inline_ext.so
</td>
</tr>
<tr>
<th>
1
</th>
<td>
/home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/cuda.cu
</td>
</tr>
<tr>
<th>
2
</th>
<td>
/home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/.ninja_deps
</td>
</tr>
<tr>
<th>
3
</th>
<td>
/home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/main.cpp
</td>
</tr>
<tr>
<th>
4
</th>
<td>
/home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/build.ninja
</td>
</tr>
<tr>
<th>
5
</th>
<td>
/home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/.ninja_log
</td>
</tr>
<tr>
<th>
6
</th>
<td>
/home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/main.o
</td>
</tr>
<tr>
<th>
7
</th>
<td>
/home/innom-dt/.cache/torch_extensions/py311_cu121/inline_ext/cuda.cuda.o
</td>
</tr>
</tbody>
</table>
</div>
<p>If we open the <code>cuda.cu</code> file, we can see the code we fed the <code>load_inline</code> function:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="C++ Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
C++ Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre class="text"><code></code></pre>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode cpp code-with-copy"><code class="sourceCode cpp"><span id="cb44-1"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;torch/types.h&gt;</span></span>
<span id="cb44-2"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda.h&gt;</span></span>
<span id="cb44-3"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;cuda_runtime.h&gt;</span></span>
<span id="cb44-4"></span>
<span id="cb44-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Include the necessary headers for PyTorch and CUDA functionality.</span></span>
<span id="cb44-6"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;torch/extension.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// PyTorch extension library for custom C++ and CUDA extensions.</span></span>
<span id="cb44-7"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;stdio.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Standard I/O for debugging (e.g., printf).</span></span>
<span id="cb44-8"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#include </span><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">&lt;c10/cuda/CUDAException.h&gt;</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// CUDA-specific exceptions for error handling.</span></span>
<span id="cb44-9"></span>
<span id="cb44-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Macro to check if a tensor is allocated on a CUDA device.</span></span>
<span id="cb44-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If not, it throws an error.</span></span>
<span id="cb44-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// x: The tensor to check.</span></span>
<span id="cb44-13"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CHECK_CUDA</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>TORCH_CHECK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">().</span>is_cuda<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span>x<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" must be a CUDA tensor"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb44-14"></span>
<span id="cb44-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Macro to check if a tensor is contiguous in memory.</span></span>
<span id="cb44-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// If not, it throws an error.</span></span>
<span id="cb44-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Contiguous tensors are often required for efficient CUDA operations.</span></span>
<span id="cb44-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// x: The tensor to check.</span></span>
<span id="cb44-19"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CHECK_CONTIGUOUS</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>TORCH_CHECK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>is_contiguous<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(),</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span>x<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" must be contiguous"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb44-20"></span>
<span id="cb44-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Macro to perform both CUDA and contiguity checks on a tensor.</span></span>
<span id="cb44-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is a convenience macro to ensure a tensor is suitable for CUDA operations.</span></span>
<span id="cb44-23"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">#define CHECK_INPUT</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>CHECK_CUDA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;"> </span>CHECK_CONTIGUOUS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb44-24"></span>
<span id="cb44-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to calculate the ceiling of an integer division.</span></span>
<span id="cb44-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// This is often used to determine the number of blocks needed in a CUDA kernel launch</span></span>
<span id="cb44-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// when the total number of threads does not evenly divide by the number of threads per block.</span></span>
<span id="cb44-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// a: The numerator in the division.</span></span>
<span id="cb44-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// b: The denominator in the division.</span></span>
<span id="cb44-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Returns: The smallest integer greater than or equal to a/b.</span></span>
<span id="cb44-31"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">inline</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> cdiv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> </span>
<span id="cb44-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb44-33"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb44-34"></span>
<span id="cb44-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// CUDA kernel to convert an RGB image to grayscale.</span></span>
<span id="cb44-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Inputs:</span></span>
<span id="cb44-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// - x: Pointer to the input image data in RGB format.</span></span>
<span id="cb44-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// - out: Pointer to the output image data in grayscale.</span></span>
<span id="cb44-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// - n: The total number of pixels in the image.</span></span>
<span id="cb44-40">__global__ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">void</span> rgb_to_grayscale_kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb44-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the global thread index.</span></span>
<span id="cb44-42">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> blockIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> blockDim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> threadIdx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb44-43"></span>
<span id="cb44-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Ensure the thread index is within the bounds of the image data.</span></span>
<span id="cb44-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb44-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Convert the RGB values to grayscale using the luminosity method.</span></span>
<span id="cb44-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// The luminosity method is a weighted sum of the R, G, and B values.</span></span>
<span id="cb44-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Weights: 0.2989 for Red, 0.5870 for Green, and 0.1140 for Blue.</span></span>
<span id="cb44-49">        out<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2989</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5870</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1140</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">];</span></span>
<span id="cb44-50">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb44-51"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb44-52"></span>
<span id="cb44-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Function to convert a PyTorch tensor representing an RGB image to grayscale.</span></span>
<span id="cb44-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Input:</span></span>
<span id="cb44-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// - input: A PyTorch tensor of the input RGB image.</span></span>
<span id="cb44-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Output:</span></span>
<span id="cb44-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// - A PyTorch tensor of the output grayscale image.</span></span>
<span id="cb44-58">torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Tensor rgb_to_grayscale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>Tensor input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb44-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Perform CUDA and contiguity checks</span></span>
<span id="cb44-60">    CHECK_INPUT<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb44-61">    </span>
<span id="cb44-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Extract the height and width from the input tensor's dimensions.</span></span>
<span id="cb44-63">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb44-64">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb44-65">    printf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">h*w: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Debug print statement for dimensions.</span></span>
<span id="cb44-66"></span>
<span id="cb44-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Create an empty output tensor with the same dimensions as the input.</span></span>
<span id="cb44-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">auto</span> output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>empty<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">({</span>h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span> input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">());</span></span>
<span id="cb44-69"></span>
<span id="cb44-70">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Define the number of threads per block.</span></span>
<span id="cb44-71">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> threads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb44-72">    </span>
<span id="cb44-73">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Calculate the number of blocks needed for the conversion, ensuring</span></span>
<span id="cb44-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// we have enough blocks to cover all pixels.</span></span>
<span id="cb44-75">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Launch the CUDA kernel with calculated dimensions.</span></span>
<span id="cb44-76">    rgb_to_grayscale_kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;&lt;</span>cdiv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">),</span> threads<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;(</span></span>
<span id="cb44-77">        input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(),</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>data_ptr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">unsigned</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">char</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;(),</span> w<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb44-78"></span>
<span id="cb44-79">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Check for any errors during kernel launch or execution.</span></span>
<span id="cb44-80">    C10_CUDA_KERNEL_LAUNCH_CHECK<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">();</span></span>
<span id="cb44-81"></span>
<span id="cb44-82">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">// Return the output tensor.</span></span>
<span id="cb44-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb44-84"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="get-the-module-attributes" class="level4">
<h4 class="anchored" data-anchor-id="get-the-module-attributes">Get the module attributes</h4>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the attribute names of the module as a Pandas DataFrame</span></span>
<span id="cb45-2">pd.DataFrame(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(module))</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
<strong>doc</strong>
</td>
</tr>
<tr>
<th>
1
</th>
<td>
<strong>file</strong>
</td>
</tr>
<tr>
<th>
2
</th>
<td>
<strong>loader</strong>
</td>
</tr>
<tr>
<th>
3
</th>
<td>
<strong>name</strong>
</td>
</tr>
<tr>
<th>
4
</th>
<td>
<strong>package</strong>
</td>
</tr>
<tr>
<th>
5
</th>
<td>
<strong>spec</strong>
</td>
</tr>
<tr>
<th>
6
</th>
<td>
rgb_to_grayscale
</td>
</tr>
</tbody>
</table>
</div>
<p>We can see from the list of module attributes that the <code>rgb_to_grayscale</code> PyTorch function we defined is available.</p>
</section>
</section>
<section id="test-the-pytorch-extension" class="level3">
<h3 class="anchored" data-anchor-id="test-the-pytorch-extension">Test the PyTorch Extension</h3>
<p>Now, all that’s left is to test the custom CUDA kernel to see how it compares to the baseline Python implementation.</p>
<section id="prepare-the-image-tensor" class="level4">
<h4 class="anchored" data-anchor-id="prepare-the-image-tensor">Prepare the image tensor</h4>
<p>First, we must move the RGB tensor to the GPU and ensure it’s contiguous in memory.</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the tensor to a contiguous format and move it to the default CUDA device</span></span>
<span id="cb46-2">img_tensor_cuda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resized_img_tensor.contiguous().cuda()</span></code></pre></div>
</section>
<section id="time-the-cuda-implementation" class="level4">
<h4 class="anchored" data-anchor-id="time-the-cuda-implementation">Time the CUDA implementation</h4>
<p>We will use the same <code>%%time</code> magic command to gauge the performance.</p>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb47-2">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> module.rgb_to_grayscale(img_tensor_cuda).cpu()</span>
<span id="cb47-3">h,w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res.shape</span>
<span id="cb47-4">h,w,h<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>w</span></code></pre></div>
<pre class="text"><code>CPU times: user 725 µs, sys: 26 µs, total: 751 µs
Wall time: 559 µs

h*w: 512*646

(512, 646, 330752)</code></pre>
<p>As a reminder, the baseline Python implementation took <code>6.53</code> seconds (<code>6,530,000</code> microseconds (<code>µs</code>) for the same input on the CPU.</p>
</section>
<section id="verify-the-result-1" class="level4">
<h4 class="anchored" data-anchor-id="verify-the-result-1">Verify the Result</h4>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">Image.fromarray(res.numpy(), mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/cuda-python-setup-tutorial/ubuntu/images/output_48_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>This tutorial covered the steps for setting up CUDA within a Python environment and using PyTorch to build a custom CUDA kernel.</p>
<p>If you found this topic interesting, I recommend checking out the lectures from the CUDA MODE reading group and joining its discord:</p>
<ul>
<li><a href="https://github.com/cuda-mode/lectures">CUDA Mode Lectures</a></li>
<li><a href="https://discord.gg/cuda-mode-1189498204333543425">CUDA Mode Discord</a></li>
</ul>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The <strong>Getting Started With CUDA</strong> lecture by Jeremy Howard is <a href="https://github.com/cuda-mode/lectures?tab=readme-ov-file#lecture-3-getting-started-with-cuda">lecture 3</a>, and the follow-up is <a href="https://github.com/cuda-mode/lectures?tab=readme-ov-file#lecture-5-going-further-with-cuda-for-python-programmers">lecture 5</a>.</p>
</div>
</div>
<p><br></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Next Steps">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Next Steps
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Feel free to post questions or problems related to this tutorial in the comments below. I try to make time to address them on Thursdays and Fridays.</li>
<li>If you would like to explore my <a href="../../../about.html#services">services</a> for your project, you can reach out via email at <a href="mailto:christian@christianjmills.com">christian@christianjmills.com</a></li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>mamba</category>
  <category>conda</category>
  <category>cuda</category>
  <category>getting-started</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/cuda-python-setup-tutorial/ubuntu/</guid>
  <pubDate>Fri, 08 Mar 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Notes on Why Greatness Cannot Be Planned</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/why-greatness-cannot-be-planned-book-notes/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Book LInks:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://link.springer.com/book/10.1007/978-3-319-15524-1">Publisher Page</a></li>
<li><a href="https://www.kenstanley.net/home">Author’s Website: Kenneth O. Stanley</a></li>
<li><a href="http://joellehman.com/">Author’s Website: Joel Lehman</a></li>
</ul>
</div>
</div>
<ul>
<li>Ch. 1: Questioning Objectives</li>
<li>Ch. 2: Victory For The Aimless</li>
<li>Ch. 3: The Art Of Breeding Art</li>
<li>Ch. 4: The False Compass</li>
<li>Ch. 5: The Interesting And The Novel</li>
<li>Ch. 6: Long Live The Treasure Hunter</li>
<li>Ch. 7: Unshackling Education</li>
<li>Ch. 8: Unchaining Innovation</li>
<li>Ch. 9: Farewell To The Mirage</li>
<li>Ch. 10: Reinterpreting Natural Evolution</li>
<li>Ch. 11: Objectives And The Quest For AI</li>
</ul>
<section id="questioning-objectives" class="level2">
<h2 class="anchored" data-anchor-id="questioning-objectives">Questioning Objectives</h2>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<p>The book challenges the traditional focus on objectives in society, proposing that true greatness and discovery often come from less structured and objective-driven approaches. Through various examples, including historical innovations and cultural developments like rock and roll, the authors argue that a preoccupation with objectives may limit potential achievements. They suggest that exploration without specific goals can lead to significant discoveries and advancements, advocating a shift from objective-driven action to open-ended exploration.</p>
</section>
<section id="key-concepts" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts">Key Concepts</h3>
<ul>
<li><strong>Dominance of Objectives:</strong> Objectives are deeply ingrained in our culture, guiding personal and societal actions, from early education to professional and personal life.</li>
<li><strong>Limitations of Objectives:</strong> While objectives can provide direction and a sense of security, they often constrain creativity, exploration, and the potential for major breakthroughs or serendipitous discoveries.</li>
<li><strong>The Paradox of Achievement:</strong> Ambitious achievements become less likely when they are made objectives. The path to significant discoveries or innovations often involves navigating through unexpected “stepping stones” that may not be directly related to the ultimate goal.</li>
<li><strong>Stepping Stones:</strong> Achievements are seen as a process of discovery, involving navigating through a vast space of possibilities to find valuable outcomes. The journey to finding these outcomes often requires exploring unexpected paths that are not directly aligned with initial objectives.</li>
<li><strong>Open-Ended Exploration:</strong> The authors advocate for pursuing exploration and creativity without predefined objectives, highlighting that some of the greatest achievements and discoveries come from such an approach.</li>
<li><strong>Critique of Objective Culture:</strong> The book critiques the prevalent culture of setting and pursuing objectives, arguing that it limits human potential and creativity. The authors call for a reassessment of how society and individuals approach achievement and success.</li>
</ul>
</section>
<section id="theoretical-insights" class="level3">
<h3 class="anchored" data-anchor-id="theoretical-insights">Theoretical Insights</h3>
<ul>
<li><strong>Search Space Concept:</strong> The notion that creativity and achievement are akin to searching through a vast room of possibilities, where understanding and exploring this space can lead to novel discoveries.</li>
<li><strong>Creativity as a Search:</strong> Creativity is framed as searching for valuable outcomes within a vast set of possibilities, with the process being more about exploration than following a linear path toward a specific objective.</li>
<li><strong>Unpredictability of Stepping Stones:</strong> The paths to significant achievements often involve stepping stones that are unpredictable and may seem unrelated to the ultimate goal, challenging the effectiveness of setting specific objectives.</li>
<li><strong>Objective Paradox:</strong> Ambitious objectives can actually become obstacles to the achievements they seek to attain, suggesting that an open-ended exploration without specific goals may be more effective in reaching genuine innovation.</li>
</ul>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ul>
<li><strong>Embrace Exploration:</strong> Encourage a shift from objective-driven pursuits to open-ended exploration, allowing for greater creativity and the potential for serendipitous discoveries.</li>
<li><strong>Redefine Achievement:</strong> Challenge the traditional notion that achievements must be goal-oriented, and recognize the value of the journey and exploration in itself.</li>
<li><strong>Cultivate Serendipity:</strong> Recognize and embrace the role of serendipity in discovery and innovation, rather than relying solely on predefined objectives.</li>
<li><strong>Foster Interdisciplinary Connections:</strong> Encourage cross-disciplinary pursuits and the exploration of seemingly unrelated fields, as they can lead to unexpected and valuable discoveries.</li>
<li><strong>Reassess Personal Goals:</strong> Individuals are encouraged to reassess their personal and professional objectives, considering the potential benefits of a more open-ended approach to pursuing their interests and passions.</li>
</ul>
</section>
<section id="additional-insights" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights">Additional Insights</h3>
<ul>
<li><strong>Historical Perspectives:</strong> The book provides historical examples where significant achievements or discoveries were the result of exploration without clear objectives, such as the development of computers and the genre of rock and roll.</li>
<li><strong>AI and Objectives:</strong> The authors discuss the role of objectives in the field of artificial intelligence, suggesting that even in highly technical fields, an open-ended exploration could be more beneficial than rigid objective-driven approaches.</li>
<li><strong>Personal Liberation:</strong> Beyond societal and professional implications, the book advocates for a personal liberation from the constraints of objectives, suggesting that this can lead to a more fulfilling and creative life.</li>
</ul>
</section>
</section>
<section id="victory-for-the-aimless" class="level2">
<h2 class="anchored" data-anchor-id="victory-for-the-aimless">Victory For The Aimless</h2>
<section id="summary-1" class="level3">
<h3 class="anchored" data-anchor-id="summary-1">Summary</h3>
<p>Chapter 2 argues that many of life’s greatest successes do not follow a pre-planned path but are the result of serendipity and openness to unexpected opportunities. It presents numerous examples of individuals who found success in fields unrelated to their original plans or objectives, including Johnny Depp, John Grisham, J.K. Rowling, and Colonel Sanders among others. The text emphasizes the importance of flexibility and being receptive to unforeseen possibilities, highlighting that a willingness to deviate from one’s initial objectives can lead to remarkable outcomes.</p>
</section>
<section id="key-concepts-1" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-1">Key Concepts</h3>
<ul>
<li><strong>Serendipity in Success:</strong> Many successful careers and achievements arise from unplanned, unexpected opportunities rather than strict adherence to an initial plan.</li>
<li><strong>Openness to Opportunity:</strong> Being open and flexible to change can be more crucial to finding happiness and success than rigorous planning.</li>
<li><strong>Stepping Stones to Success:</strong> Initial goals or careers often end up serving as stepping stones to different, sometimes unrelated, successes.</li>
<li><strong>The Limitations of Objective Thinking:</strong> The narrative challenges the conventional wisdom of setting realistic, objective goals, suggesting instead that aimlessness can lead to greatness.</li>
</ul>
</section>
<section id="noteworthy-facts" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts">Noteworthy Facts</h3>
<ul>
<li><strong>Impact of Serendipity:</strong> Nearly two thirds of adults attribute part of their career choice to serendipity.</li>
<li><strong>Academic Backing:</strong> The chapter references studies and surveys that support the notion that unplanned experiences significantly influence career paths and personal growth.</li>
<li><strong>Historical Examples:</strong> It provides historical accounts of figures like Raymond Chandler and Colonel Sanders, who only found their iconic careers at a later stage in life through incidental circumstances.</li>
</ul>
</section>
<section id="practical-implications" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications">Practical Implications</h3>
<ul>
<li><strong>Career Guidance:</strong> Suggests that career counseling and guidance might benefit from incorporating an understanding of serendipity and the value of openness to various experiences.</li>
<li><strong>Education Systems:</strong> Educational systems and methods could be reevaluated to foster a greater sense of exploration and discovery, rather than overly focusing on specific objectives.</li>
<li><strong>Personal Development:</strong> Individuals seeking fulfillment and success may consider valuing flexibility and openness over stringent adherence to predefined goals.</li>
</ul>
</section>
<section id="additional-insights-1" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-1">Additional Insights</h3>
<ul>
<li><strong>Paradox of Objectives:</strong> The chapter delves into the paradox that sometimes, not directly pursuing an ambitious objective (like love or happiness) can paradoxically lead to attaining it.</li>
<li><strong>Cultural Instances of Serendipity:</strong> It also touches on the broader cultural recognition of the power of serendipity, even if it’s not always termed as such, in stories of love and in various hobbies that evolve into careers.</li>
</ul>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ul>
<li><strong>Embrace Openness:</strong> Encourage individuals to remain open to new experiences and be willing to diverge from their original paths in pursuit of happiness and success.</li>
<li><strong>Valuing Serendipity:</strong> Suggest societal and cultural shifts towards valuing serendipity and the unexpected in personal development and career planning.</li>
<li><strong>Non-Objective Exploration:</strong> Advocate for exploration without a fixed objective in various areas of life, from education to career, to foster greater potential for discovery and fulfillment.</li>
</ul>
</section>
</section>
<section id="the-art-of-breeding-art" class="level2">
<h2 class="anchored" data-anchor-id="the-art-of-breeding-art">The Art Of Breeding Art</h2>
<section id="summary-2" class="level3">
<h3 class="anchored" data-anchor-id="summary-2">Summary</h3>
<p>Chapter 3 discusses the concept that setting specific objectives might hinder rather than help achieve groundbreaking outcomes, as evidenced by the development and results of <a href="https://nbenko1.github.io/#/">Picbreeder</a>, a platform that allows users to “breed” pictures, leading to unexpected artistic creations. The principle learned from Picbreeder’s success is that open-minded exploration, rather than a strict focus on objectives, often leads to the most significant discoveries. This insight is suggested to be applicable beyond Picbreeder, impacting various aspects of life and efforts to achieve goals.</p>
</section>
<section id="key-concepts-2" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-2">Key Concepts</h3>
<ul>
<li><strong>Questioning Objectives</strong>: The authors challenge the common practice of setting objectives, suggesting that it may be counterproductive.</li>
<li><a href="https://nbenko1.github.io/#/"><strong>Picbreeder Platform</strong></a>: An experiment in artificial intelligence allowing users to breed artistic images through a process similar to animal breeding, but with pictures.</li>
<li><strong>Genetic Art</strong>: A concept based on artificial “DNA” for pictures, inspired by Richard Dawkins’ work, that enables the breeding of images to produce unique artworks.</li>
<li><strong>Serendipity in Discovery</strong>: The most successful outcomes on Picbreeder come from unexpected, serendipitous discoveries rather than from pursuing specific objectives.</li>
</ul>
</section>
<section id="noteworthy-facts-1" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-1">Noteworthy Facts</h3>
<ul>
<li><strong>Origin of Genetic Art</strong>: Inspired by Richard Dawkins’ <em>The Blind Watchmaker</em>, genetic art involves creating images based on artificial DNA.</li>
<li><strong>Impact of Objectives</strong>: Evidence from Picbreeder suggests that setting objectives can be an obstacle to creativity and discovery.</li>
<li><strong>Role of Serendipity</strong>: Key discoveries on Picbreeder, such as the creation of a car image from an alien face, resulted from unplanned, serendipitous mutations rather than targeted objectives.</li>
</ul>
</section>
<section id="practical-implications-1" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-1">Practical Implications</h3>
<ul>
<li><strong>Designing AI Systems</strong>: The insights from Picbreeder can influence how artificial intelligence systems are designed, emphasizing exploration over objective-driven approaches.</li>
<li><strong>Creativity Process</strong>: The principle that objectives might hinder discovery can apply to artistic creation, research, and development, suggesting a more exploratory and open-minded approach instead.</li>
</ul>
</section>
<section id="supporting-evidence" class="level3">
<h3 class="anchored" data-anchor-id="supporting-evidence">Supporting Evidence</h3>
<ul>
<li><strong>Picbreeder Success Stories</strong>: Several instances on Picbreeder, such as the unplanned evolution of a car image from an alien face, illustrate the power of serendipity over objectives.</li>
<li><strong>Research Validation</strong>: Studies cited by the authors, including their own work published in academic conferences, validate the deleterious effects of a priori objectives on evolution and representation.</li>
</ul>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ul>
<li><strong>Encouraging Exploration</strong>: In fields ranging from AI development to creative arts, fostering an environment that prioritizes exploration and open-mindedness over strict objectives could lead to more significant breakthroughs.</li>
<li><strong>Reevaluating Objectives</strong>: Individuals and organizations could benefit from reevaluating how objectives are set and pursued, considering the potential limitations they impose on discovery and innovation.</li>
</ul>
</section>
</section>
<section id="the-false-compass" class="level2">
<h2 class="anchored" data-anchor-id="the-false-compass">The False Compass</h2>
<section id="summary-3" class="level3">
<h3 class="anchored" data-anchor-id="summary-3">Summary</h3>
<ul>
<li>Chapter 4 discusses the limitations of objective-driven approaches in achieving greatness or innovation, illustrating this through metaphors like the stepping stones across a misty lake and the Chinese finger trap. It argues that focusing too closely on a specific objective can lead to deception, diverting us from potential paths to unexpected discoveries.</li>
<li>The concept of non-objective searching, or collecting stepping stones without a specific end objective, is presented as an alternative approach to discovery and innovation, exemplified by natural evolution, human innovation, and systems like Picbreeder.</li>
<li>The text challenges the conventional wisdom that clear, ambitious objectives are essential for success, suggesting instead that significant achievements often result from indirect, unanticipated paths.</li>
</ul>
</section>
<section id="key-concepts-3" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-3">Key Concepts</h3>
<ul>
<li><strong>Stepping Stones:</strong> Represent the waypoints in any large, uncharted search space, critical in the path to discovery or achievement.</li>
<li><strong>Objective Function:</strong> A measure of progress towards a goal, which can be misleading if improvement in the measure doesn’t actually bring one closer to the objective.</li>
<li><strong>Deception:</strong> The problem arising when the path to an objective includes steps that do not appear to bring one closer to, or even seem to diverge from, the ultimate goal.</li>
<li><strong>Non-Objective Systems of Discovery:</strong> Systems like Picbreeder, natural evolution, and human innovation, which operate without a final objective and instead focus on collecting useful or innovative “stepping stones” without a specific end goal in mind.</li>
</ul>
</section>
<section id="noteworthy-facts-2" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-2">Noteworthy Facts</h3>
<ul>
<li>The human brain, created by natural evolution, consists of approx. 100 trillion neural connections.</li>
<li>Evolutionary stepping stones to human-level intelligence included developments such as multicellularity and bilateral symmetry, which do not resemble the end result.</li>
<li>Many of humanity’s greatest achievements, like flight or the discovery of electricity, were not the explicit objectives of their inventors’ initial endeavors.</li>
</ul>
</section>
<section id="practical-implications-2" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-2">Practical Implications</h3>
<ul>
<li>In pursuing ambitious goals, whether in personal, academic, or professional realms, a non-objective approach (focusing on collecting and exploring stepping stones) might lead to greater innovation and unexpected success.</li>
<li>Instead of setting a direct path towards an ambitious objective, it could be more productive to embrace uncertainty and remain open to paths that initially do not seem to lead directly to the goal.</li>
</ul>
</section>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ul>
<li>Embrace a stepping-stone approach to discovery and innovation, focusing on exploring and collecting a wide range of experiences, skills, and knowledge without always having a clear, final objective in mind.</li>
<li>Regularly reassess and question the relevance of conventional objective functions and the direction they are guiding you towards, to avoid the traps of deception.</li>
<li>Foster environments, whether in education, business, or technology development, that encourage non-linear paths and value the exploration of diverse and unexpected stepping stones.</li>
</ul>
</section>
</section>
<section id="the-interesting-and-the-novel" class="level2">
<h2 class="anchored" data-anchor-id="the-interesting-and-the-novel">The Interesting And The Novel</h2>
<section id="summary-4" class="level3">
<h3 class="anchored" data-anchor-id="summary-4">Summary</h3>
<p>Chapter 5 discusses the limitations of setting specific objectives for innovation and progress, arguing that such focus can inhibit discovery by overlooking unexpected or non-linear paths to success. Instead, it promotes the concept of seeking novelty without a predefined goal, highlighting how this approach can lead to serendipitous discoveries and advance knowledge in ways that strictly goal-oriented strategies cannot. Through examples like Picbreeder and algorithmic explorations, the text underscores the power of novelty search in driving innovation and reflecting on the natural world’s complexity through non-objective search processes.</p>
</section>
<section id="key-concepts-4" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-4">Key Concepts</h3>
<ul>
<li><strong>Novelty Over Objectives</strong>: Emphasizes the importance of seeking newness rather than strictly adhering to predefined goals.</li>
<li><strong>Stepping Stones</strong>: The chapter introduces the concept of identifying and valuing stepping stones - interim discoveries or achievements that may lead to unforeseen outcomes, not necessarily tied to an initial objective.</li>
<li><strong>Interestingness as a Guide</strong>: Proposes that what is interesting or novel can be more valuable in the long run than what is strictly useful or goal-oriented at the start.</li>
<li><strong>Non-objective Search Processes</strong>: Contrasts objective-driven search with non-objective or novelty-driven search, showing how the latter can lead to unexpected and often more fruitful outcomes.</li>
</ul>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ul>
<li>New Year’s resolutions often fail, with only 12% of people achieving their stated goals.</li>
<li>Traditional objectives can be limiting, as they may not account for unforeseen stepping stones that are critical for reaching new frontiers of discovery.</li>
<li>Algorithms can be designed to seek novelty without specific objectives, leading to potentially groundbreaking discoveries.</li>
</ul>
</section>
<section id="practical-implications-3" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-3">Practical Implications</h3>
<ul>
<li><strong>Rethinking Goal Setting</strong>: Encourages individuals and organizations to evaluate the potential limitations of rigid goal setting and consider the benefits of open-ended exploration.</li>
<li><strong>Innovation Strategies</strong>: Suggests that industries focused on innovation might benefit from incorporating novelty search in their research and development processes.</li>
<li><strong>Educational Approaches</strong>: Proposes a shift in educational strategies to foster creativity and discovery, emphasizing exploration over rote achievement of predefined objectives.</li>
</ul>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ul>
<li>Consider adopting novelty search principles in problem-solving and creative endeavors to unlock potential avenues of innovation that may not be apparent from the outset.</li>
<li>In goal setting, allow for flexibility and the pursuit of interesting or novel paths that may divert from original objectives but offer valuable discoveries.</li>
<li>Incorporate the assessment of past achievements as stepping stones in the pursuit of novelty, rather than focusing solely on the future goals.</li>
</ul>
</section>
<section id="additional-insights-2" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-2">Additional Insights</h3>
<ul>
<li><strong>Historical Examples of Serendipitous Discoveries</strong>: The chapter highlights how many significant scientific discoveries were not the result of direct pursuit of a specific goal but rather emerged from curiosity-driven exploration.</li>
<li><strong>Limitations of Novelty Search</strong>: While advocating for the benefits of novelty search, the text acknowledges its limitations and the fact that it’s not a panacea for all challenges in discovery and innovation.</li>
<li><strong>The Role of Constraints</strong>: Discusses how the constraints of the physical world naturally limit the scope of novelty search, making it a practical approach despite initial appearances of aimlessness.</li>
</ul>
</section>
</section>
<section id="long-live-the-treasure-hunter" class="level2">
<h2 class="anchored" data-anchor-id="long-live-the-treasure-hunter">Long Live The Treasure Hunter</h2>
<section id="summary-5" class="level3">
<h3 class="anchored" data-anchor-id="summary-5">Summary</h3>
<p>Chapter 6 delves into the limitations and potential of novelty search, a method that often yields better results when not directly pursuing specific objectives. Despite its potential, novelty search is not a universal solution, and combining it with objective-driven methods does not reliably overcome the issue of deception inherent in ambitious goals. The discussion transitions into exploring the broader implications of moving away from objective-based approaches to embrace a treasure-hunting mindset that values diversity and serendipitous discovery over direct goal pursuit.</p>
</section>
<section id="key-concepts-5" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-5">Key Concepts</h3>
<ul>
<li><strong>Novelty Search:</strong> A method that can sometimes outperform objective-driven searches by valuing diversity and exploration over direct goal pursuit.</li>
<li><strong>Objective-Driven Search:</strong> The traditional method focused on achieving specific, pre-defined goals, which can sometimes be deceiving or limit discovery.</li>
</ul>
</section>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ul>
<li>Novelty search illustrates the power of serendipitous discovery, showing that not directly seeking an objective can lead to unexpected and valuable outcomes.</li>
<li>The limitations of objective-driven search become evident in complex or deceptive environments where direct approaches towards goals can mislead or fail.</li>
<li>Embracing a treasure-hunting approach means discarding the notion of a unified objective in favor of exploring a diversity of possibilities and being open to serendipitous discoveries.</li>
</ul>
</section>
<section id="noteworthy-facts-3" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-3">Noteworthy Facts</h3>
<ul>
<li>Novelty search has proven more successful in some experiments, such as with maze-navigating robots and biped walking, than traditional objective-driven methods.</li>
<li>Critical analysis and scientific experiments underline the limitations and potential deception inherent in exclusively objective-driven pursuits, demonstrating the value of novelty search.</li>
</ul>
</section>
<section id="critical-analysis" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis">Critical Analysis</h3>
<ul>
<li>Objective-driven searches are not always optimal, especially in complex situations where the pathway to success is not straightforward or is unknown at the outset.</li>
<li>The concept of objectives as a guiding compass is challenged, showing that a rigid focus can sometimes hinder discovery and innovation.</li>
</ul>
</section>
<section id="practical-implications-4" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-4">Practical Implications</h3>
<ul>
<li>For researchers and practitioners, understanding the limitations and potential of novelty search vs.&nbsp;objective-driven search can inspire new approaches to problem-solving and innovation.</li>
<li>This insight encourages a shift towards fostering environments where exploration, serendipity, and diversity of ideas are valued over single-minded pursuit of pre-defined goals.</li>
</ul>
</section>
<section id="recommendations-5" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-5">Recommendations</h3>
<ul>
<li><strong>In Research:</strong> Incorporate novelty search principles to explore a broader space of possibilities in scientific and technological research.</li>
<li><strong>In Innovation:</strong> Adopt a treasure hunter’s mindset to encourage diversity and serendipity in the development of new ideas, products, and solutions.</li>
<li><strong>In Organizational Strategy:</strong> Create environments that value exploration and diversity of thought, moving away from rigid objective-only focused approaches.</li>
</ul>
</section>
<section id="additional-insights-3" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-3">Additional Insights</h3>
<ul>
<li>The treasure hunter approach to discovery and innovation aligns closely with natural evolution, human innovation, and processes like Picbreeder, showcasing the potential for untapped discoveries when not solely driven by predefined objectives.</li>
<li>This approach could revolutionize various fields by fostering a culture that prioritizes exploration and the accumulation of a diverse set of ‘stepping stones’ over direct pursuit of specific targets.</li>
</ul>
</section>
</section>
<section id="unshackling-education" class="level2">
<h2 class="anchored" data-anchor-id="unshackling-education">Unshackling Education</h2>
<section id="summary-6" class="level3">
<h3 class="anchored" data-anchor-id="summary-6">Summary</h3>
<p>Chapter 7 discusses the detrimental effects of society’s obsession with objectives, particularly within the education system. It argues that focusing on measurable objectives, such as standardized test scores, not only fails to improve outcomes but can also lead to unintended negative consequences.</p>
<p>The text delves into various aspects of how objectives can mislead and hinder societal progress, emphasizing education as a case study. It challenges the reliance on standardized testing and the push towards uniform standards, advocating for a non-objective approach that embraces exploration, creativity, and diversity.</p>
</section>
<section id="key-concepts-6" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-6">Key Concepts</h3>
<ul>
<li><strong>Objective Obsession</strong>: The societal fixation on measurable goals and benchmarks, which often leads to deceptive practices and stifles creativity.</li>
<li><strong>Campbell’s Law</strong>: A principle stating that the more an indicator is used for social decision-making, the more it will corrupt the processes it is intended to monitor.</li>
<li><strong>Perverse Incentives</strong>: When measures designed to improve a situation end up causing negative, unintended consequences.</li>
</ul>
</section>
<section id="noteworthy-facts-4" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-4">Noteworthy Facts</h3>
<ul>
<li>Standardized testing and the focus on measurable outcomes can distort true learning and development.</li>
<li>Objective-driven approaches in societal progress can be deceptive, preventing the discovery of superior results.</li>
<li>Examples of perverse incentives include breeding cobras for bounties in India, which increased the venomous snake population instead of decreasing it.</li>
</ul>
</section>
<section id="critical-analysis-1" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-1">Critical Analysis</h3>
<ul>
<li>The reliance on objectives for societal progress, especially in education, is critiqued. The text presents evidence and arguments suggesting that objectives often lead to superficial or counterproductive outcomes.</li>
<li>The discussion on non-objective approaches to discovery and creativity presents an alternative to the traditional objective-driven mindset, particularly in education and innovation.</li>
</ul>
</section>
<section id="recommendations-for-education" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-for-education">Recommendations for Education</h3>
<ul>
<li><strong>Shift Away from Standardized Testing</strong>: Emphasize diverse and explorative learning over objective measures like test scores.</li>
<li><strong>Encourage Teacher Autonomy</strong>: Grant teachers the freedom to innovate and tailor their teaching methods based on student needs, moving away from a one-size-fits-all curriculum.</li>
<li><strong>Foster Diversity of Ideas</strong>: Avoid uniform standards that stifle creativity and exploration, allowing for a variety of educational practices and assessments.</li>
<li><strong>Peer-Driven Assessment</strong>: Implement a system where teachers review each other’s methodologies and outcomes instead of relying on standardized tests, promoting a culture of sharing and improvement.</li>
</ul>
</section>
<section id="additional-insights-4" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-4">Additional Insights</h3>
<ul>
<li>The critique of objective-driven efforts extends beyond education to broader societal goals, including economic indicators like GDP.</li>
<li>The narrative suggests that focusing on stepping stones, explorative processes, and divergent thinking can lead to significant discoveries and advancements, contrary to traditional objective-focused approaches.</li>
</ul>
</section>
<section id="future-perspectives" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives">Future Perspectives</h3>
<ul>
<li>The discussion hints at the potential for innovative breakthroughs in education, society, and beyond if non-objective thinking and exploration are embraced more broadly.</li>
<li>There’s a call to reassess and possibly reframe societal goals and measures of success, moving away from purely objective benchmarks towards more nuanced and holistic approaches.</li>
</ul>
</section>
</section>
<section id="unchaining-innovation" class="level2">
<h2 class="anchored" data-anchor-id="unchaining-innovation">Unchaining Innovation</h2>
<section id="summary-7" class="level3">
<h3 class="anchored" data-anchor-id="summary-7">Summary</h3>
<p>Chapter 8 delves into the impact of objective-driven pursuits on innovation across multiple domains, including science, business, and art. It highlights the historical drive for exploration and innovation, contrasting traditional exploration of the physical world with contemporary exploration in the realm of ideas. The narrative underscores the pitfalls of focusing solely on predefined objectives in the pursuit of scientific progress, arguing for a more open-ended approach that embraces uncertainty and the serendipitous discovery of stepping stones to advance knowledge and technology.</p>
</section>
<section id="key-concepts-7" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-7">Key Concepts</h3>
<ul>
<li><strong>The Myth of the Objective</strong>: The belief that defining clear, specific objectives is the best way to achieve progress and innovation.</li>
<li><strong>Stepping Stones</strong>: Unpredictable discoveries or ideas that lead to significant progress, but whose value may not be immediately evident.</li>
<li><strong>Non-objective Exploration</strong>: An approach that values curiosity-driven exploration without a predetermined goal, allowing for serendipity and unexpected discoveries.</li>
</ul>
</section>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ul>
<li>Innovation and exploration have historically been driven by a blend of curiosity, the promise of rewards, and the acceptance of risks.</li>
<li>The pursuit of predefined objectives can hinder scientific innovation by limiting funding to projects with clear, consensus-driven goals, ignoring the potential of risky or unconventional ideas.</li>
<li>The most transformational discoveries often arise from unpredictable stepping stones rather than direct, objective-driven research.</li>
</ul>
</section>
<section id="noteworthy-facts-5" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-5">Noteworthy Facts</h3>
<ul>
<li>Magellan’s and Giovanni da Verrazzano’s expeditions, despite their significant risks and minimal immediate rewards, paved the way for future geographical and cultural explorations.</li>
<li>Scientific progress, such as internet-based communication, significantly transformed human life within a relatively short timeframe.</li>
</ul>
</section>
<section id="recommendations-6" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-6">Recommendations</h3>
<ul>
<li><strong>Funding Diverse Paths</strong>: Embrace a funding model that values divergent thinking and the exploration of unpredictable stepping stones, even at the risk of short-term failures.</li>
<li><strong>Valuing Disagreement</strong>: Consider funding scientific projects that polarize expert opinions, as they may represent uncharted territories with the potential for breakthrough discoveries.</li>
<li><strong>Beyond Objective Metrics</strong>: Move away from objective-driven metrics in evaluating the potential impact of scientific research, recognizing the role of serendipity and the unpredictability of stepping stones.</li>
</ul>
</section>
<section id="additional-insights-5" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-5">Additional Insights</h3>
<ul>
<li>The narratives of historical explorers and modern scientific endeavors underscore a universal truth: genuine progress often stems from venturing into the unknown, guided by curiosity rather than a rigid set of objectives.</li>
<li>The critique of objective-based thinking in scientific funding sheds light on broader societal and cultural dynamics that favor conformity and risk aversion, potentially at the expense of groundbreaking innovations.</li>
</ul>
</section>
</section>
<section id="farewell-to-the-mirage" class="level2">
<h2 class="anchored" data-anchor-id="farewell-to-the-mirage">Farewell To The Mirage</h2>
<section id="summary-8" class="level3">
<h3 class="anchored" data-anchor-id="summary-8">Summary</h3>
<ul>
<li>Chapter 9 argues against the traditional emphasis on objectives, suggesting that they can often hinder creativity, discovery, and true innovation.</li>
<li>Through examples across different domains, it’s shown that an objective-driven approach might limit potential by narrowing focus, whereas exploring without fixed objectives can lead to significant, unforeseen accomplishments.</li>
<li>It stresses the importance of interestingness and novelty as guiding principles in the pursuit of innovation rather than rigid objectives.</li>
<li>Real-life success stories, like the development of Minecraft and the release of the iPad, illustrate how moving beyond traditional goals can lead to groundbreaking results.</li>
</ul>
</section>
<section id="key-concepts-8" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-8">Key Concepts</h3>
<ul>
<li><strong>Objective Myth</strong>: The belief that setting and pursuing fixed objectives is the best way to achieve success.</li>
<li><strong>Stepping Stone Principle</strong>: The idea that one innovation or discovery leads to another, forming a chain of progression that cannot be planned in advance.</li>
<li><strong>Treasure Hunter Approach</strong>: A metaphor for exploring and pursuing what feels interesting or novel without a predefined objective or goal.</li>
</ul>
</section>
<section id="noteworthy-facts-6" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-6">Noteworthy Facts</h3>
<ul>
<li>Novelty searching, as demonstrated through algorithms in robotics, showed that not having a specific end-goal can lead to more sophisticated and unexpected outcomes.</li>
<li>Examples like Minecraft and the iPad demonstrate how groundbreaking ideas often stem from combining existing concepts in new ways, without following a strict objective.</li>
<li>Great achievements historically have often resulted from curiosity-driven exploration rather than objective-driven efforts.</li>
</ul>
</section>
<section id="practical-implications-5" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-5">Practical Implications</h3>
<ul>
<li>Encourages individuals and organizations to shift from an objective-centered approach to one that values exploration, interestingness, and novelty.</li>
<li>Suggests that success and innovation can be achieved by focusing on the current context and building upon it, rather than striving towards a distant, predefined goal.</li>
<li>Proposes that the best way to encourage creativity and discovery is to allow for divergent paths and to explore based on what feels interesting or promising.</li>
</ul>
</section>
<section id="recommendations-7" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-7">Recommendations</h3>
<ul>
<li>Embrace exploration and curiosity in personal endeavors and organizational innovation strategies.</li>
<li>Cultivate an ability to perceive and pursue what is interesting or novel without being constrained by specific objectives.</li>
<li>Encourage diverse thinking and approaches in problem-solving to allow for a broader range of discoveries and innovations.</li>
<li>Invest in projects and ideas that, although may not have a clear objective, show promise of leading to new opportunities or developments.</li>
</ul>
</section>
<section id="additional-insights-6" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-6">Additional Insights</h3>
<ul>
<li>The concept of interestingness as a guiding principle suggests a more personalized and instinct-driven approach to innovation, which may align better with human creativity than rigid objectives.</li>
<li>The success of ventures like Minecraft and the iPad underlines the potential of innovation that arises from exploring combinations of existing ideas in new contexts, challenging the necessity of revolutionary technology for success.</li>
<li>The treasure hunter metaphor emphasizes the value of serendipity and the unforeseen connections between ideas, suggesting a more flexible and dynamic approach to progress.</li>
</ul>
</section>
</section>
<section id="reinterpreting-natural-evolution" class="level2">
<h2 class="anchored" data-anchor-id="reinterpreting-natural-evolution">Reinterpreting Natural Evolution</h2>
<section id="summary-9" class="level3">
<h3 class="anchored" data-anchor-id="summary-9">Summary</h3>
<p>Chapter 10 explores the idea that the creative and diverse outcomes of processes like natural evolution are not the result of objective-driven pursuits but rather emerge from non-objective, exploratory mechanisms. The book challenges traditional views of goal-oriented progression in evolution, suggesting that the diversity and complexity of life arise from a process that accumulates novelties and explores different ways to achieve basic survival and reproduction, akin to non-objective searches observed in other domains.</p>
</section>
<section id="key-concepts-9" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-9">Key Concepts</h3>
<ul>
<li><strong>Non-Objective Search</strong>: A mechanism that promotes exploration and discovery without predefined objectives, diverging from traditional goal-driven models.</li>
<li><strong>Natural Evolution</strong>: Presented as an ultimate example of non-objective search, creating vast biodiversity through processes like genetic drift, mutation, natural selection, and exaptation without an overarching objective.</li>
<li><strong>Darwin’s Discovery</strong>: Illuminates that slight imperfections in self-copying mechanisms (mutations) combined with natural selection drive the evolutionary process, countering the perception of intelligent design.</li>
<li><strong>Fitness and Natural Selection</strong>: Clarified as not the sole drivers of evolution; competition exists but is only one of many forces, and not necessarily the one fostering the most creativity and diversity.</li>
<li><strong>Perspectives on Evolution</strong>: Different interpretations of evolution’s mechanisms highlight debates within the field, such as the importance of natural selection versus other forces like genetic drift or the role of historical contingencies.</li>
<li><strong>Minimal Criteria Search</strong>: A proposed model for understanding evolution, focusing on the accumulation of diverse forms of life that meet the basic criteria of surviving and reproducing rather than optimizing for specific objectives.</li>
</ul>
</section>
<section id="noteworthy-facts-7" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-7">Noteworthy Facts</h3>
<ul>
<li>Life on Earth began with simple single-celled organisms, which still dominate in terms of numbers and biomass, despite the emergence of complex multicellular life.</li>
<li>The Cambrian explosion was a pivotal event in natural evolution, leading to the diversification of complex organisms over a relatively short geological period.</li>
</ul>
</section>
<section id="recommendations-8" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-8">Recommendations</h3>
<ul>
<li><strong>Re-evaluation of Objectives in Research and Exploration</strong>: Suggests shifting focus from objective-driven to non-objective searches in various fields, potentially leading to more diverse and creative outcomes.</li>
<li><strong>Application of Non-Objective Models</strong>: Encourages the application of concepts like minimal criteria searches and novelty search with local competition in computational and robotic systems to mimic the diversification seen in natural evolution.</li>
</ul>
</section>
<section id="additional-insights-7" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-7">Additional Insights</h3>
<ul>
<li>The book posits an interesting parallel between natural evolution and human innovation processes, highlighting the commonality of serendipity and the accumulation of novelties over the pursuit of specific objectives.</li>
<li>It proposes reinterpreting natural evolution through the lens of non-objective search, offering an alternative perspective that centers on evolution’s creativity and accumulation of diversity rather than on competitiveness and objective fitness.</li>
</ul>
</section>
</section>
<section id="objectives-and-the-quest-for-ai" class="level2">
<h2 class="anchored" data-anchor-id="objectives-and-the-quest-for-ai">Objectives And The Quest For AI</h2>
<section id="summary-10" class="level3">
<h3 class="anchored" data-anchor-id="summary-10">Summary</h3>
<p>Chapter 11 explores the impact of goal-oriented thinking in scientific discovery, particularly in the field of Artificial Intelligence (AI). It presents a critical examination of how the reliance on objectives and benchmarks can stifle innovation and overlook important insights or alternative research paths.</p>
<p>Through analysis and case studies, the text argues for a more open-ended approach to scientific inquiry and AI research, suggesting that unexpected discoveries and progress often result from exploratory processes rather than targeted searches for predetermined goals.</p>
</section>
<section id="key-concepts-10" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-10">Key Concepts</h3>
<ul>
<li><strong>Objective-Driven Thinking</strong>: A common approach in both society and science where progress is measured against specific, predefined goals.</li>
<li><strong>Science and Innovation</strong>: Recognized for advancing human knowledge and capabilities, science’s progress is attributed to both structured and exploratory research.</li>
<li><strong>AI Research Landscape</strong>: Highlighted as a field striving for the ambitious goal of creating highly intelligent machines, AI research is shaped by its community’s focus on objectives, benchmarks, and peer reviews.</li>
</ul>
</section>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ul>
<li>Emphasizing “anything goes” in scientific inquiry can prevent the limiting effects of strictly adhering to traditional methods and objectives.</li>
<li>The structure of scientific communities, including specialization and cultural differences, significantly influences the progress and direction of research.</li>
<li>The practice of setting objectives can inadvertently narrow the scope of inquiry and innovation within the scientific community and specifically within AI research.</li>
</ul>
</section>
<section id="recommendations-9" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-9">Recommendations</h3>
<ul>
<li><strong>Promote Open-Ended Exploration</strong>: Encourage research approaches that allow for divergence from established goals to ensure a broader exploration of possibilities.</li>
<li><strong>Rethink Peer Review and Publication Norms</strong>: Adjust the criteria for evaluating and sharing scientific work to value innovation and potential impact over adherence to benchmarks and performance metrics.</li>
<li><strong>Cultivate Interdisciplinary Collaboration</strong>: Encourage collaboration across different scientific disciplines to foster new perspectives and breakthroughs that might not emerge within the confines of specialized communities.</li>
</ul>
</section>
<section id="critical-analysis-2" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-2">Critical Analysis</h3>
<ul>
<li>The reliance on objectives and benchmarks in AI research may unknowingly limit the exploration of novel and potentially groundbreaking ideas.</li>
<li>The structural and cultural dynamics of scientific communities play critical roles in shaping research agendas and determining which paths of inquiry are pursued or neglected.</li>
<li>The evaluation processes, including peer review in scientific publication, may need reform to better reward innovative thinking and exploratory research efforts.</li>
</ul>
</section>
<section id="additional-insights-8" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-8">Additional Insights</h3>
<ul>
<li>As illustrated by the case study of AI, the challenge lies not in abandoning goals entirely but in recognizing and leveraging the unanticipated directions and opportunities that arise during the exploratory process.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>personal-growth</category>
  <category>professional-growth</category>
  <category>ai</category>
  <guid>christianjmills.com/posts/why-greatness-cannot-be-planned-book-notes/</guid>
  <pubDate>Fri, 23 Feb 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Notes on Where is My Flying Car Pt. 03</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/where-is-my-flying-car-book-notes/part-3/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/where-is-my-flying-car-book-notes.html"><strong>Where is My Flying Car?</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Ch. 14: The Dawn of Robots</li>
<li>Ch. 15: The Second Atomic Age</li>
<li>Ch. 16: Tom Swift and His Flying Car</li>
<li>Ch. 17: Escape Velocity</li>
<li>Ch. 18: Metropolis</li>
<li>Ch. 19: Engineer’s Dreams</li>
<li>Ch. 20: Rocket to the Resistance</li>
</ul>
<section id="the-dawn-of-robots" class="level2">
<h2 class="anchored" data-anchor-id="the-dawn-of-robots">The Dawn of Robots</h2>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<p>Chapter 14 explores the evolution, current state, and future of robots and artificial intelligence (AI), drawing on historical advancements in technology to predict the capabilities of future AI and robotics. It discusses the societal and ethical implications of advanced AI and the potential for robots to assume roles across various sectors, including healthcare, law, and everyday domestic tasks.</p>
</section>
<section id="key-concepts" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts">Key Concepts</h3>
<ul>
<li><strong>Evolution of AI and Robotics</strong>: Describes the historical development from simple machine learning to complex AI systems capable of deep learning and neural networking, leading to significant advancements in robotics and AI capabilities.</li>
<li><strong>Future of Robotics</strong>: Predicts the integration of AI into everyday life, foreseeing robots with human-like capabilities in reading, writing, talking, and listening, as well as specialized professional tasks.</li>
<li><strong>Ethical Considerations</strong>: Addresses the moral and ethical challenges of creating highly intelligent and autonomous robots, emphasizing the importance of designing AI systems that prioritize human commands and ethical guidelines.</li>
</ul>
</section>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ul>
<li>AI and robotics have evolved from rudimentary technologies to systems capable of deep learning and complex problem-solving.</li>
<li>Future robots are expected to perform tasks with human-like efficiency, potentially transforming various professional fields and daily life.</li>
<li>Ethical programming and control mechanisms are crucial in ensuring that AI systems act in the best interests of humanity.</li>
</ul>
</section>
<section id="noteworthy-facts" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts">Noteworthy Facts</h3>
<ul>
<li>AI systems like GPT-3 can produce human-like text but lack the comprehension of the content they generate.</li>
<li>The productivity of manufacturing workers has increased significantly, highlighting the potential for automation to reshape the workforce.</li>
<li>Ethical considerations in AI development focus on creating systems that follow human commands and make morally sound decisions.</li>
</ul>
</section>
<section id="practical-implications" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications">Practical Implications</h3>
<ul>
<li>The advancement of AI and robotics could lead to the automation of various jobs, necessitating societal adjustments to employment and education systems.</li>
<li>Ethical AI development requires careful consideration of the potential consequences of autonomous decision-making by robots.</li>
<li>The integration of AI into professional services could significantly improve the efficiency and accessibility of healthcare, legal advice, and other services.</li>
</ul>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ul>
<li>Focus on developing AI and robotics technologies that enhance human capabilities without replacing human roles in critical decision-making processes.</li>
<li>Invest in ethical AI research to ensure future robots adhere to moral and ethical standards beneficial to society.</li>
<li>Prepare for the societal impacts of advanced robotics, including potential job displacement and the need for new education and training programs.</li>
</ul>
</section>
<section id="critical-analysis" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis">Critical Analysis</h3>
<ul>
<li>The optimistic view of AI and robotics’ future must be balanced with caution regarding ethical and societal impacts.</li>
<li>While AI advancements promise significant benefits, there is a need for robust frameworks to address the potential risks and ethical dilemmas they present.</li>
<li>The emphasis on AI’s potential to improve professional services highlights the importance of human oversight in ensuring these technologies are used responsibly.</li>
</ul>
</section>
<section id="additional-insights" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights">Additional Insights</h3>
<ul>
<li>The progression of AI technology has often paralleled historical technological advancements, suggesting that society may adapt to and integrate advanced AI and robotics as it has with past innovations.</li>
<li>The concept of AI surpassing human intelligence raises questions about identity, autonomy, and the essence of human expertise.</li>
<li>The development of ethical AI systems reflects broader societal values and priorities, underlining the importance of inclusive and multidisciplinary approaches to AI research and development.</li>
</ul>
</section>
</section>
<section id="the-second-atomic-age" class="level2">
<h2 class="anchored" data-anchor-id="the-second-atomic-age">The Second Atomic Age</h2>
<section id="summary-1" class="level3">
<h3 class="anchored" data-anchor-id="summary-1">Summary</h3>
<p>Chapter 15 delves into the evolution of technology and energy sources, comparing the industrial revolution’s leap from steam to internal combustion engines with the potential of the second atomic age powered by nanotechnology and nuclear advancements. It discusses how nanotech can revolutionize nuclear technology through isotopic separation, extreme structure building, and enhancing productive power.</p>
<p>The chapter also explores the vast potential of renewable energy sources, like uranium from seawater, and the development of safe, efficient, and small-scale nuclear reactors. Additionally, it covers the challenges and possibilities of both cold and hot fusion technologies, the current state of fusion research, and the implications for future energy production.</p>
</section>
<section id="key-concepts-1" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-1">Key Concepts</h3>
<ul>
<li><strong>Second Atomic Age</strong>: A future era characterized by the synergy of nanotechnology and nuclear technology, enabling significant advances in energy production and efficiency.</li>
<li><strong>Nanotechnology’s Role</strong>: Nanotech will revolutionize nuclear technology by enabling isotopic separation, constructing precise structures, and significantly enhancing productive power.</li>
<li><strong>Renewable Energy Potential</strong>: The chapter highlights the immense potential of uranium from seawater as a nearly inexhaustible energy source, facilitated by nanotechnology.</li>
<li><strong>Nuclear Reactor Innovations</strong>: Discusses the development of safe, efficient, and scalable nuclear reactors, including the potential for small, clean, and powerful nuclear energy sources.</li>
</ul>
</section>
<section id="practical-implications-1" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-1">Practical Implications</h3>
<ul>
<li><strong>Energy Production</strong>: Nanotechnology could enable the use of nuclear energy in more efficient, safe, and environmentally friendly ways, drastically changing global energy production.</li>
<li><strong>Environmental Impact</strong>: The extraction of uranium from seawater and the development of clean nuclear reactors could significantly reduce the environmental impact of energy generation.</li>
<li><strong>Technological Innovation</strong>: Advances in nuclear technology and nanotech could lead to breakthroughs in other fields, such as medicine, space exploration, and material science.</li>
</ul>
</section>
<section id="supporting-evidence" class="level3">
<h3 class="anchored" data-anchor-id="supporting-evidence">Supporting Evidence</h3>
<ul>
<li><strong>Isotopic Separation</strong>: Nanotech allows for precise separation of isotopes, making nuclear technology more feasible and efficient.</li>
<li><strong>Uranium from Seawater</strong>: The feasibility of extracting uranium from seawater for energy production, highlighting the potential for a sustainable energy source.</li>
<li><strong>Safe Nuclear Reactors</strong>: The development of small, safe nuclear reactors, such as those based on the Triga design, demonstrates the potential for widespread use of nuclear energy.</li>
</ul>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ul>
<li><strong>Invest in Nanotech and Nuclear Research</strong>: To unlock the full potential of the second atomic age, significant investment in nanotechnology and nuclear research is recommended.</li>
<li><strong>Develop Safe Nuclear Reactor Designs</strong>: Encourage the development of new nuclear reactor designs that are safe, efficient, and scalable.</li>
<li><strong>Explore Renewable Energy Sources</strong>: Continue to explore and invest in renewable energy sources, such as uranium extraction from seawater, to diversify and secure the future energy supply.</li>
</ul>
</section>
<section id="additional-insights-1" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-1">Additional Insights</h3>
<ul>
<li><strong>Cold Fusion</strong>: Despite historical controversy, recent research into Low Energy Nuclear Reactions (LENR) suggests potential for future energy production methods.</li>
<li><strong>Fusion Technology</strong>: Current efforts in hot fusion research, including various startups and experiments, indicate ongoing progress toward achieving practical fusion energy.</li>
</ul>
</section>
<section id="critical-analysis-1" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-1">Critical Analysis</h3>
<ul>
<li><strong>Challenges in Fusion Energy</strong>: The text underscores the significant technical challenges that have historically impeded the development of practical fusion energy, while also highlighting recent advancements that may overcome these obstacles.</li>
<li><strong>Economic and Environmental Considerations</strong>: The potential economic benefits and environmental impacts of advanced nuclear technologies and renewable energy sources are significant, suggesting a need for careful consideration and planning in their development and implementation.</li>
</ul>
<p>The chapter outlines a vision for a future where technological advancements in nanotechnology and nuclear energy could revolutionize how we produce and consume energy, offering solutions to current environmental and energy challenges. However, realizing this vision will require overcoming significant technical, economic, and social hurdles.</p>
</section>
</section>
<section id="tom-swift-and-his-flying-car" class="level2">
<h2 class="anchored" data-anchor-id="tom-swift-and-his-flying-car">Tom Swift and His Flying Car</h2>
<section id="summary-2" class="level3">
<h3 class="anchored" data-anchor-id="summary-2">Summary</h3>
<p>Chapter 16 explores the concept, feasibility, technological requirements, and societal implications of flying cars, tracing the progression from early skepticism towards automobiles to the potential reality of personal air transportation. It discusses the evolution of aviation technology, energy challenges, the potential of electric and ionic propulsion, regulatory and logistical considerations for air traffic management, and the transformative impact of nanotechnology on vehicle design and performance.</p>
</section>
<section id="key-concepts-2" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-2">Key Concepts</h3>
<ul>
<li><strong>Feasibility of Flying Cars</strong>: Acknowledges the technological advancements that make flying cars a realistic possibility.</li>
<li><strong>Energy and Propulsion</strong>: Highlights the challenges related to power sources, including electric motors, fuel cells, and the innovative concept of ionic propulsion.</li>
<li><strong>Regulatory and Logistical Considerations</strong>: Discusses air traffic control (ATC) limitations and the need for a decentralized system to manage the expected increase in air traffic with personal air vehicles.</li>
<li><strong>Impact of Nanotechnology</strong>: Envisions significant improvements in flying car capabilities through advancements in nanotechnology, making them lighter, more efficient, and potentially transforming them into private spaceships.</li>
</ul>
</section>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ul>
<li>The progression from skepticism about automobiles to considering flying cars underscores society’s capacity for technological acceptance and adaptation.</li>
<li>The transition to flying cars requires overcoming substantial energy, safety, and regulatory challenges.</li>
<li>Decentralized air traffic management could revolutionize personal and commercial aviation, making flying cars more viable.</li>
<li>Nanotechnology is poised to be a game-changer, offering solutions to current limitations in flying car design and functionality.</li>
</ul>
</section>
<section id="practical-implications-2" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-2">Practical Implications</h3>
<ul>
<li><strong>Urban Planning and Infrastructure</strong>: Cities may need to adapt by developing vertical takeoff and landing (VTOL) infrastructure and revising zoning laws.</li>
<li><strong>Environmental Considerations</strong>: Flying cars could have significant environmental impacts, necessitating clean energy solutions.</li>
<li><strong>Safety and Training</strong>: As flying becomes more accessible, comprehensive safety regulations and pilot training programs will be essential.</li>
</ul>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ul>
<li><strong>Investment in Renewable Energy Sources</strong>: To support the energy demands of flying cars, especially those utilizing electric and ionic propulsion.</li>
<li><strong>Development of Advanced Materials</strong>: Focus on nanotechnology research to create lighter, more durable materials for air vehicle construction.</li>
<li><strong>Enhanced Air Traffic Control Systems</strong>: Implement decentralized, digital air traffic management systems to safely accommodate increased air traffic.</li>
<li><strong>Public and Private Sector Collaboration</strong>: Encourage partnerships to innovate and regulate flying car technology, ensuring safety, efficiency, and accessibility.</li>
</ul>
</section>
<section id="future-perspectives" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives">Future Perspectives</h3>
<ul>
<li>With advancements in technology and infrastructure, flying cars could become an integral part of daily transportation, offering faster travel times and redefining mobility.</li>
<li>The societal impact of widespread flying car adoption could be profound, affecting everything from daily commutes to global travel, and requiring new approaches to urban planning, environmental protection, and international regulations.</li>
</ul>
</section>
</section>
<section id="escape-velocity" class="level2">
<h2 class="anchored" data-anchor-id="escape-velocity">Escape Velocity</h2>
<section id="summary-3" class="level3">
<h3 class="anchored" data-anchor-id="summary-3">Summary</h3>
<p>Chapter 17 reflects on the stagnation and regression in space travel since the Apollo missions, attributing it to bureaucratic inertia and a lack of continued political and economic motivation. It also discusses the potential for future space travel, including commercial and nuclear-powered spaceflight, and the necessity for humanity to become a space-faring civilization to avoid extinction.</p>
</section>
<section id="key-concepts-3" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-3">Key Concepts</h3>
<ul>
<li><strong>Stagnation in Space Travel</strong>: Post-Apollo missions, space exploration saw a lack of progress, attributed to political motivations and bureaucratic challenges.</li>
<li><strong>Future of Space Travel</strong>: Discusses the potential for nuclear-powered rockets and commercial spaceflight to revolutionize space exploration and human colonization of space.</li>
<li><strong>Technological and Societal Implications</strong>: Explores how advancements in technology could enable humanity to overcome current limitations and expand into the solar system and beyond.</li>
</ul>
</section>
<section id="noteworthy-facts-1" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-1">Noteworthy Facts</h3>
<ul>
<li><strong>Challenger Disaster</strong>: Highlighted the risks and consequences of bureaucratic mismanagement in space exploration.</li>
<li><strong>Cost of Space Travel</strong>: The shuttle program failed to achieve its goal of reducing costs, highlighting economic challenges in space exploration.</li>
<li><strong>Nuclear Propulsion</strong>: Described as a viable method for efficient solar system navigation, offering significantly reduced travel times to other planets.</li>
</ul>
</section>
<section id="practical-implications-3" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-3">Practical Implications</h3>
<ul>
<li><strong>Commercial Space Travel</strong>: The rise of private space companies could lead to more efficient and cost-effective space travel.</li>
<li><strong>Nuclear-Powered Rockets</strong>: Could enable human exploration and colonization of the solar system, changing the future of human civilization.</li>
<li><strong>Space Colonization</strong>: Offers a solution to Earth’s resource limitations and the existential threat of having all humanity on a single planet.</li>
</ul>
</section>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ul>
<li><strong>Invest in Nuclear Propulsion Research</strong>: To make interplanetary travel feasible and efficient.</li>
<li><strong>Support Commercial Space Ventures</strong>: Encourage private investment and innovation in space technology.</li>
<li><strong>Prepare for Space Colonization</strong>: Develop technologies and strategies for long-term living in space, including habitat construction and resource utilization.</li>
</ul>
</section>
<section id="critical-analysis-2" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-2">Critical Analysis</h3>
<ul>
<li>The stagnation in space exploration highlights a broader issue of technological and bureaucratic inertia that can hinder progress. The shift towards private space ventures and potential nuclear propulsion offers new paths forward but requires careful consideration of ethical, environmental, and safety concerns.</li>
</ul>
</section>
<section id="additional-insights-2" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-2">Additional Insights</h3>
<ul>
<li><strong>Space as a Frontier</strong>: Space offers a new frontier for humanity, providing opportunities for exploration, economic expansion, and the potential for new societal models.</li>
<li><strong>Human Adaptation</strong>: Future space colonization may require not just technological advancement but also biological adaptation, including genetic or cybernetic enhancements to thrive in extraterrestrial environments.</li>
</ul>
</section>
<section id="future-perspectives-1" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives-1">Future Perspectives</h3>
<ul>
<li>The development of space travel and colonization technologies could fundamentally alter human civilization, offering new opportunities for growth, exploration, and the potential to safeguard the future of humanity against existential threats.</li>
</ul>
</section>
</section>
<section id="metropolis" class="level2">
<h2 class="anchored" data-anchor-id="metropolis">Metropolis</h2>
<section id="summary-4" class="level3">
<h3 class="anchored" data-anchor-id="summary-4">Summary</h3>
<p>Chapter 18 discusses the evolution of urban development, focusing on the shift towards living in artificial environments, especially in cities and the potential future of constructing mile-high or even 10-mile-high buildings. It explores the idea of vertical living as a solution to land scarcity, examines the technological advancements necessary for such constructions, and critiques current city planning ideologies while envisioning a future where cities are designed for efficiency, connectivity, and sustainability.</p>
</section>
<section id="key-concepts-4" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-4">Key Concepts</h3>
<ul>
<li><strong>Vertical Living:</strong> Emphasizes the concept of constructing tall buildings to accommodate more people in less space, with the Burj Khalifa cited as a current pinnacle of such development.</li>
<li><strong>Technological Advancements:</strong> Discusses the role of materials science, including the development of steel-aluminum alloys and the potential of nanotechnology, in enabling the construction of much taller buildings.</li>
<li><strong>Urban Planning Critiques:</strong> Criticizes current city planning approaches, particularly the focus on densification and the neglect of efficient transportation infrastructure.</li>
<li><strong>Future Urban Environments:</strong> Imagines future cities with advanced transportation systems, including flying cars and multi-level traffic interconnects, to improve living conditions and reduce travel times.</li>
</ul>
</section>
<section id="practical-implications-4" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-4">Practical Implications</h3>
<ul>
<li><strong>Housing and Urban Development:</strong> Insights into how future buildings could revolutionize housing, suggesting a shift towards more sustainable and efficient urban living spaces.</li>
<li><strong>Transportation:</strong> Proposes the development of advanced transportation systems to solve current inefficiencies and improve connectivity within cities.</li>
<li><strong>Environmental Sustainability:</strong> Highlights the potential for vertical cities and advanced transportation to significantly reduce human impact on the environment.</li>
</ul>
</section>
<section id="critical-analysis-3" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-3">Critical Analysis</h3>
<ul>
<li><strong>Feasibility of Construction:</strong> While the text discusses the potential for mile-high buildings and cities with advanced infrastructure, it acknowledges the current technological and economic limitations.</li>
<li><strong>Social and Economic Considerations:</strong> Raises questions about the accessibility of these futuristic urban developments and their implications for social equity.</li>
<li><strong>Environmental Impact:</strong> While aiming for sustainability, the construction and maintenance of such massive structures and transportation systems could have unforeseen environmental consequences.</li>
</ul>
</section>
<section id="future-perspectives-2" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives-2">Future Perspectives</h3>
<ul>
<li><strong>Nanotechnology and Urban Development:</strong> Speculates on the role of nanotechnology in overcoming current limitations to building construction and materials science.</li>
<li><strong>Dynamic and Sustainable Cities:</strong> Envisions a future where cities are not only more efficient and less impactful on the environment but also offer enhanced quality of life through improved design and technology.</li>
<li><strong>Integration of Nature and Urban Environments:</strong> Proposes innovative ways to incorporate green spaces and environmental considerations into urban development, moving towards a harmonious balance between human habitation and the natural world.</li>
</ul>
</section>
<section id="additional-insights-3" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-3">Additional Insights</h3>
<ul>
<li><strong>Historical Context:</strong> Provides a brief history of skyscrapers and urban development, linking past innovations to future possibilities.</li>
<li><strong>Technological Innovation:</strong> Highlights the importance of continuous innovation in materials science and engineering for the future of urban construction.</li>
<li><strong>Urban Planning Philosophy:</strong> Challenges conventional urban planning philosophies by advocating for a holistic approach that prioritizes efficient transportation and sustainable living spaces.</li>
</ul>
</section>
</section>
<section id="engineers-dreams" class="level2">
<h2 class="anchored" data-anchor-id="engineers-dreams">Engineer’s Dreams</h2>
<section id="summary-5" class="level3">
<h3 class="anchored" data-anchor-id="summary-5">Summary</h3>
<p>Chapter 19 explores the potential for revolutionary advancements in physics and technology, focusing on anti-gravity, quantum mechanics interpretations, and space exploration enhancements. It includes a critical analysis of current theoretical physics, proposals for space infrastructure like space piers, and advanced concepts like weather machines and Dyson spheres.</p>
</section>
<section id="key-concepts-5" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-5">Key Concepts</h3>
<ul>
<li><strong>Anti-gravity and Reactionless Thrusters</strong>: The text discusses the long-standing fascination with and theoretical challenges of creating anti-gravity or reactionless drive systems for vehicles, suggesting that our understanding of gravity may evolve to enable such technologies.</li>
<li><strong>Quantum Mechanics and Theoretical Physics</strong>: It critiques the current state of theoretical physics, particularly in quantum mechanics and the interpretations of quantum phenomena, advocating for a new perspective that could revolutionize our understanding and technology.</li>
<li><strong>Space Exploration Infrastructure</strong>: Proposes innovative infrastructure, such as space piers, to bypass the rocket equation and make space travel more feasible and economical.</li>
</ul>
</section>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ul>
<li><strong>Revolution in Physics</strong>: The potential for a major breakthrough in basic physics that could lead to new technologies, including anti-gravity, based on a deeper understanding of quantum mechanics and gravity.</li>
<li><strong>Space Pier Concept</strong>: A detailed proposal for a structure extending into space to launch payloads into orbit more efficiently, using less energy and without the need for traditional rocket propulsion.</li>
</ul>
</section>
<section id="practical-implications-5" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-5">Practical Implications</h3>
<ul>
<li><strong>Space Travel and Exploration</strong>: Significantly reduced costs and increased accessibility to space travel could result from the space pier concept, potentially transforming space exploration and the space economy.</li>
<li><strong>Energy and Climate Control</strong>: Advanced technologies such as weather machines and Dyson spheres could offer unprecedented control over Earth’s climate and energy resources, addressing challenges like climate change and energy scarcity.</li>
</ul>
</section>
<section id="critical-analysis-4" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-4">Critical Analysis</h3>
<ul>
<li>The skepticism towards current theoretical physics, particularly the Copenhagen interpretation of quantum mechanics, suggests a need for a paradigm shift that embraces more coherent and physically intuitive theories.</li>
<li>The proposed technologies, while theoretically plausible, would require significant advancements in material science, energy production, and global cooperation to become reality.</li>
</ul>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ul>
<li><strong>Further Research</strong>: Encourage interdisciplinary research efforts to explore the theoretical foundations of anti-gravity and reactionless thrust, aiming to bridge the gap between current physics understanding and the proposed technologies.</li>
<li><strong>Investment in Nanotechnology and Material Science</strong>: To realize the proposed space infrastructure and energy systems, substantial investment in nanotechnology and material science is necessary.</li>
</ul>
</section>
<section id="additional-insights-4" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-4">Additional Insights</h3>
<ul>
<li>The discussion on quantum mechanics and the critique of its current interpretations highlight the deep philosophical and scientific questions still unanswered in physics, emphasizing the potential for groundbreaking discoveries that could change our interaction with the universe.</li>
<li>The concept of a Kardashev Type 1 civilization and the steps toward achieving such a status through energy and space technology development provide a visionary roadmap for humanity’s future progress.</li>
</ul>
</section>
</section>
<section id="rocket-to-the-resistance" class="level2">
<h2 class="anchored" data-anchor-id="rocket-to-the-resistance">Rocket to the Resistance</h2>
<section id="summary-6" class="level3">
<h3 class="anchored" data-anchor-id="summary-6">Summary</h3>
<p>Chapter 20 explores the transformative impact of technology and science on humanity’s future, contrasting historical skepticism with contemporary possibilities.</p>
<ul>
<li>Discusses the end of traditional agriculture through technological advancements in food production and the potential for lab-grown meat.</li>
<li>Presents the choice facing society: embrace a static existence or pursue dynamic growth enabled by technology, potentially leading to space colonization and beyond.</li>
</ul>
</section>
<section id="key-concepts-6" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-6">Key Concepts</h3>
<ul>
<li><strong>Technological Revolutions:</strong> The shift from traditional agriculture to controlled environment agriculture (CEA) and lab-grown meat signifies a major technological revolution, echoing past shifts like the Industrial Revolution.</li>
<li><strong>Future of Humanity:</strong> Envisions two paths for humanity influenced by technology: a static, comfortable existence versus a dynamic, growth-oriented future with space exploration and limitless energy.</li>
<li><strong>Societal Choice:</strong> The critical decision between maintaining the status quo or embracing technological advancements to unlock human potential and inherit the stars.</li>
</ul>
</section>
<section id="noteworthy-facts-2" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-2">Noteworthy Facts</h3>
<ul>
<li>Lab-grown meat costs have plummeted from $325,000 per pound in 2013 to $363 just five years later, with Singapore approving cultured chicken meat for sale.</li>
<li>Controlled environment agriculture allows for up to 300 times more produce per square foot than traditional methods, independent of external climate conditions.</li>
<li>Technological advancements could potentially end traditional agriculture within a century, transforming human society and its relationship with the planet.</li>
</ul>
</section>
<section id="practical-implications-6" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-6">Practical Implications</h3>
<ul>
<li><strong>Agricultural Innovation:</strong> The rise of CEA and lab-grown meat could drastically reduce water usage, land requirements, and the carbon footprint associated with traditional farming.</li>
<li><strong>Space Exploration:</strong> Technological advancements may make living on other planets or in space feasible, addressing concerns about Earth’s carrying capacity and resource depletion.</li>
<li><strong>Energy Consumption:</strong> The potential for near-limitless energy sources could transform transportation, manufacturing, and daily life, making previously unimaginable technologies feasible.</li>
</ul>
</section>
<section id="recommendations-5" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-5">Recommendations</h3>
<ul>
<li><strong>Invest in R&amp;D:</strong> Governments and private entities should invest heavily in research and development in fields like nanotechnology, biotechnology, and energy.</li>
<li><strong>Regulatory Adaptation:</strong> Legal and regulatory frameworks must evolve to encourage innovation while ensuring safety and ethical considerations.</li>
<li><strong>Education and Training:</strong> Prepare the workforce for future industries through education in STEM fields, emphasizing creativity, critical thinking, and adaptability.</li>
<li><strong>Public Engagement:</strong> Increase public awareness and engagement with science and technology to foster a society that values and supports innovation.</li>
</ul>
</section>
<section id="critical-analysis-5" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-5">Critical Analysis</h3>
<ul>
<li>The text highlights a crucial tension between technological potential and societal readiness. While technology offers solutions to many current problems, societal attitudes, regulations, and fear of the unknown can stifle innovation.</li>
<li>There is an underlying assumption that technological advancement will lead to positive outcomes. However, the ethical, environmental, and economic impacts of such rapid changes need careful consideration to avoid exacerbating inequalities or creating new problems.</li>
<li>The choice between a static or dynamic future is framed as binary, but the reality is likely to be more nuanced. A balanced approach, incorporating elements of both paths, might be necessary to navigate the challenges of technological transformation.</li>
</ul>
</section>
<section id="additional-insights-5" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-5">Additional Insights</h3>
<ul>
<li>The historical perspective on technological skepticism versus achievements offers a valuable lesson in the dangers of underestimating human ingenuity and the potential of science.</li>
<li>The concept of a “Second Atomic Age” suggests a pivotal moment in human history, where mastering energy at a fundamental level could redefine civilization’s capabilities and aspirations.</li>
<li>The role of science fiction in shaping public perceptions and aspirations for the future is significant, highlighting the need for narratives that inspire optimism and ambition towards technological progress.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/where-is-my-flying-car-book-notes/part-3/</guid>
  <pubDate>Sun, 18 Feb 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Notes on Where is My Flying Car Pt. 02</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/where-is-my-flying-car-book-notes/part-2/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/where-is-my-flying-car-book-notes.html"><strong>Where is My Flying Car?</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Ch. 9: Sealing and Visibility Unlimited</li>
<li>Ch. 10: Dialogue Concerning the Two Great Systems of the World</li>
<li>Ch. 11: The Atomic Age</li>
<li>Ch. 12: When Worlds Collide</li>
<li>Ch. 13: When the Sleeper Wakes</li>
</ul>
<section id="sealing-and-visibility-unlimited" class="level2">
<h2 class="anchored" data-anchor-id="sealing-and-visibility-unlimited">Sealing and Visibility Unlimited</h2>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<p>Chapter 9 explores the feasibility, challenges, and potential of personal aviation, including flying cars and general aviation (GA) aircraft, in transforming transportation. It discusses the technological, regulatory, and practical barriers to widespread adoption of personal aircraft, while also delving into the author’s own experience of becoming a pilot to understand the complexities of flying.</p>
</section>
<section id="key-concepts" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts">Key Concepts</h3>
<ul>
<li><strong>Feasibility of Flying Cars</strong>: Since the 1930s, the technical capability to manufacture flying cars for personal use has existed, but societal, regulatory, and practical barriers have prevented widespread adoption.</li>
<li><strong>Challenges in Adoption</strong>: The low percentage of licensed pilots among the population and misconceptions about the difficulty and dangers of flying are major obstacles.</li>
<li><strong>General Aviation Insights</strong>: The author’s journey to becoming a pilot and acquiring a GA aircraft provides firsthand insights into the joys and challenges of personal aviation.</li>
<li><strong>Regulatory and Technical Barriers</strong>: The text highlights how regulations, the aging fleet of GA aircraft, and the specific technical challenges of flying (like navigation and dealing with weather conditions) limit the accessibility of personal aviation.</li>
<li><strong>Safety and Insurance</strong>: Despite perceptions, GA is presented as relatively safe and affordable in terms of insurance, comparable to car insurance.</li>
</ul>
</section>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ul>
<li><strong>Learning to Fly</strong>: Flying is a learnable skill within the capability of a significant portion of the population, despite common perceptions of its complexity and danger.</li>
<li><strong>Automation and Assistance</strong>: Advances in automation, such as GPS and autopilot systems, have made flying more accessible and could potentially enable more people to pilot their own aircraft safely.</li>
<li><strong>Economic and Time Productivity</strong>: While flying provides unmatched views and experiences, it is not just about the economics of time or productivity but also about the unique value of flight itself.</li>
<li><strong>Weather as a Major Barrier</strong>: Weather conditions significantly impact the practicality of personal aviation, often more so than the technological or regulatory challenges.</li>
</ul>
</section>
<section id="noteworthy-facts" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts">Noteworthy Facts</h3>
<ul>
<li>Only 0.2% of Americans are pilots, and the number owning aircraft is even smaller, indicating a large gap in personal aviation participation.</li>
<li><strong>Historical Context</strong>: The development and regulation of GA have been shaped by safety concerns, leading to an aging fleet and a prevalence of home-built aircraft.</li>
<li><strong>Economic Implications</strong>: The cost of flying, in terms of both direct expenses and the “hundred-dollar hamburger,” highlights the economic considerations of personal aviation.</li>
</ul>
</section>
<section id="practical-implications" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications">Practical Implications</h3>
<ul>
<li><strong>Training and Education</strong>: Increasing the accessibility of pilot training and demystifying the skills required for flying could encourage more individuals to consider personal aviation.</li>
<li><strong>Regulatory Reforms</strong>: Addressing regulatory barriers and incentivizing technological advancements could rejuvenate the GA industry and make personal aviation more viable.</li>
<li><strong>Infrastructure Development</strong>: Enhancing infrastructure at GA airports, including the addition of amenities like restaurants, can make personal flying more appealing for recreational and practical purposes.</li>
</ul>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ul>
<li><strong>Promote Flying Education</strong>: Educate the public on the feasibility and safety of personal aviation to dispel myths and encourage more people to learn to fly.</li>
<li><strong>Invest in Technology</strong>: Support the development of more user-friendly and safer flying vehicles, including automated systems that can assist pilots and potentially allow more people to fly.</li>
<li><strong>Improve GA Infrastructure</strong>: Invest in the modernization of GA airports and aircraft to make personal aviation a more attractive and practical mode of transportation.</li>
<li><strong>Regulatory Adjustments</strong>: Advocate for regulatory changes that balance safety with the promotion of innovation and accessibility in personal aviation.</li>
</ul>
</section>
<section id="additional-insights" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights">Additional Insights</h3>
<ul>
<li><strong>Cultural Perception</strong>: The perception of flying and personal aviation is shaped by a mix of awe, fear, and practical considerations, affecting its adoption as a mode of transportation.</li>
<li><strong>The Experience of Flight</strong>: Beyond its practical aspects, flying offers a unique perspective on the world, unmatched by other forms of travel, emphasizing the importance of experiencing flight firsthand to truly appreciate its value.</li>
</ul>
</section>
</section>
<section id="dialogue-concerning-the-two-great-systems-of-the-world" class="level2">
<h2 class="anchored" data-anchor-id="dialogue-concerning-the-two-great-systems-of-the-world">Dialogue Concerning the Two Great Systems of the World</h2>
<section id="summary-1" class="level3">
<h3 class="anchored" data-anchor-id="summary-1">Summary</h3>
<p>Chapter 10 explores the development, possibilities, and implications of flying cars, focusing on their technological and historical evolution, economic factors, and practicality for personal and commercial use.</p>
<ul>
<li>Analyzes various flying car concepts, including convertibles (vehicles that can transition between flying and driving), VTOLs (Vertical Take-Off and Landing vehicles), helicopters, autogyros, and modern innovations in VTOL technology.</li>
<li>Discusses the technical challenges, costs, and potential societal impacts of widespread adoption of flying cars, including environmental considerations and changes in travel patterns.</li>
</ul>
</section>
<section id="key-concepts-1" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-1">Key Concepts</h3>
<ul>
<li><strong>Flying Cars</strong>: Vehicles capable of both air travel and road use, including VTOLs and convertibles.</li>
<li><strong>VTOLs</strong>: Vehicles designed for vertical take-off and landing, offering flexibility in urban environments.</li>
<li><strong>Convertibles</strong>: Flying cars that transition between flying and driving modes, requiring runways or roads.</li>
</ul>
</section>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ul>
<li>The feasibility of flying cars has been technically demonstrated, but practical adoption hinges on cost, safety, and infrastructure.</li>
<li>Helicopters and autogyros present different sets of advantages and challenges for personal aviation, balancing cost, complexity, and versatility.</li>
<li>Modern VTOL innovations potentially reduce the barrier to entry for flying cars, emphasizing electric propulsion and advanced aerodynamics.</li>
</ul>
</section>
<section id="noteworthy-facts-1" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-1">Noteworthy Facts</h3>
<ul>
<li>New Zealand has a higher helicopter-to-population ratio than the US, illustrating different uses and acceptances of personal aviation.</li>
<li>The history of flying cars dates back to early 20th-century concepts and prototypes, with notable advancements and public interest fluctuating over time.</li>
<li>Economic factors, including the Jevons Paradox, suggest increased efficiency in travel could lead to more, not less, overall travel.</li>
</ul>
</section>
<section id="practical-implications-1" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-1">Practical Implications</h3>
<ul>
<li>Flying cars could significantly alter commuting patterns, reduce travel times for short to medium distances, and impact urban and rural development.</li>
<li>Infrastructure for flying cars, including helipads and air traffic management systems, would require substantial investment and innovation.</li>
<li>Safety and training for pilots of personal flying vehicles present major challenges for widespread adoption.</li>
</ul>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ul>
<li>Continued investment in technology that reduces the cost and complexity of flying vehicles, making them accessible to a broader audience.</li>
<li>Development of comprehensive regulatory frameworks to ensure the safe integration of flying cars into national airspace and urban environments.</li>
<li>Encouragement of pilot training programs and public awareness campaigns to prepare society for the potential integration of flying cars.</li>
</ul>
</section>
<section id="critical-analysis" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis">Critical Analysis</h3>
<ul>
<li>While the dream of flying cars remains compelling, the transition from concept to mainstream reality faces significant hurdles, including technical challenges, safety concerns, and societal readiness.</li>
<li>The potential environmental impact of widespread flying car usage, particularly in terms of energy consumption and emissions, requires careful consideration and mitigation strategies.</li>
<li>The economic implications of flying cars, including their effect on existing transportation industries and infrastructure, present both opportunities and challenges for policymakers.</li>
</ul>
</section>
<section id="additional-insights-1" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-1">Additional Insights</h3>
<ul>
<li>The evolution of flying car technology mirrors broader trends in innovation, where advancements often outpace regulatory and societal adaptation.</li>
<li>Flying cars could redefine the notion of personal mobility, offering unprecedented freedom but also raising questions about equity, accessibility, and environmental stewardship.</li>
<li>The future of flying cars likely lies in a hybrid approach, combining the best aspects of helicopters, VTOLs, and convertibles, tailored to specific use cases and environments.</li>
</ul>
</section>
</section>
<section id="the-atomic-age" class="level2">
<h2 class="anchored" data-anchor-id="the-atomic-age">The Atomic Age</h2>
<section id="summary-2" class="level3">
<h3 class="anchored" data-anchor-id="summary-2">Summary</h3>
<p>Chapter 11 delves into the history, potential, and societal perceptions surrounding nuclear energy and its comparison with other energy sources. It highlights the optimism of the atomic age, the technological advancements in nuclear physics, and the societal and regulatory challenges that have hindered nuclear energy’s widespread adoption. It contrasts nuclear energy’s safety and efficiency with the negative public perception and regulatory burdens it faces, suggesting that nuclear energy could have significantly advanced global energy solutions if not for these challenges.</p>
</section>
<section id="key-concepts-2" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-2">Key Concepts</h3>
<ul>
<li><strong>Atomic Age Optimism:</strong> Envisioned a future where nuclear energy provides a clean, abundant, and cheap power source.</li>
<li><strong>Technological Headroom:</strong> The potential for significant advancements in nuclear energy technology compared to the slower progress in heavy-duty energy sectors.</li>
<li><strong>Nuclear vs.&nbsp;Fossil Fuels:</strong> Nuclear energy is cleaner and more efficient but faces more public and regulatory resistance.</li>
<li><strong>Economic and Environmental Impact:</strong> Nuclear energy’s potential to reduce energy costs and environmental impacts significantly.</li>
</ul>
</section>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ul>
<li>The concept of <strong>“Too Cheap to Meter”</strong> was associated with nuclear energy, indicating its potential to drastically reduce energy costs.</li>
<li><strong>Molten Salt Reactors and Thorium:</strong> Innovations like molten salt reactors using thorium could revolutionize nuclear power by enhancing safety, efficiency, and fuel use.</li>
<li><strong>Regulatory Impact:</strong> Excessive regulation has stifled nuclear energy innovation and increased costs, contrary to the trends in other technological fields.</li>
<li><strong>Public Perception and Media Influence:</strong> Negative public perception, fueled by media coverage and activist campaigns, has significantly impacted nuclear energy’s development and acceptance.</li>
</ul>
</section>
<section id="noteworthy-facts-2" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-2">Noteworthy Facts</h3>
<ul>
<li><strong>Energy Density:</strong> Nuclear fuels produce 1 million to 10 million times the energy per weight compared to chemical fuels.</li>
<li><strong>Cost Comparison:</strong> The cost of nuclear energy, primarily due to uranium’s low price, could be significantly lower than current energy sources if not for regulatory and societal barriers.</li>
<li><strong>Safety Record:</strong> Despite public fears, nuclear power has a better safety record compared to other energy sources, including coal and oil.</li>
<li><strong>Waste Management:</strong> Nuclear energy produces significantly less waste than fossil fuels, and technological solutions for waste management exist but are politically contentious.</li>
</ul>
</section>
<section id="practical-implications-2" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-2">Practical Implications</h3>
<ul>
<li><strong>Energy Policy:</strong> A reevaluation of nuclear energy policy and regulatory frameworks could unlock nuclear power’s full potential.</li>
<li><strong>Technological Innovation:</strong> Investment in nuclear technology research and development could lead to safer, more efficient reactors.</li>
<li><strong>Public Education:</strong> Addressing misconceptions and educating the public on nuclear energy’s benefits and safety is crucial for gaining broader acceptance.</li>
<li><strong>Global Energy Strategy:</strong> Incorporating advanced nuclear technologies into global energy strategies could significantly impact climate change efforts and energy independence.</li>
</ul>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ul>
<li><strong>Reform Regulatory Processes:</strong> Simplify and streamline regulatory processes to encourage innovation and reduce the cost of nuclear power development.</li>
<li><strong>Invest in Research:</strong> Increase funding for nuclear energy research, focusing on advanced reactor designs and fuel cycles.</li>
<li><strong>Public Engagement:</strong> Develop comprehensive public education campaigns to improve understanding and acceptance of nuclear energy.</li>
<li><strong>International Collaboration:</strong> Promote international cooperation on nuclear safety, waste management, and technology exchange to advance global nuclear energy deployment.</li>
</ul>
</section>
<section id="critical-analysis-1" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-1">Critical Analysis</h3>
<ul>
<li>The stagnation in nuclear energy advancement contrasts sharply with the rapid development in information technology, highlighting societal and regulatory challenges over technological limitations.</li>
<li>The potential of nuclear energy to transform the global energy landscape remains largely untapped due to historical, political, and perceptual barriers, suggesting a need for a paradigm shift in energy policy and public discourse.</li>
</ul>
</section>
<section id="additional-insights-2" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-2">Additional Insights</h3>
<ul>
<li><strong>Energy Transition:</strong> The transition from fossil fuels to nuclear power represents a critical juncture in addressing climate change and energy security challenges.</li>
<li><strong>Economic Impact:</strong> Lowering the cost of energy through nuclear power could have profound economic benefits, particularly for developing countries.</li>
<li><strong>Innovation Stagnation:</strong> The narrative also sheds light on how innovation in nuclear technology has been stifled, contrasting with potential advancements that could have been achieved.</li>
</ul>
</section>
</section>
<section id="when-worlds-collide" class="level2">
<h2 class="anchored" data-anchor-id="when-worlds-collide">When Worlds Collide</h2>
<section id="summary-3" class="level3">
<h3 class="anchored" data-anchor-id="summary-3">Summary</h3>
<p>Chapter 12 discusses the evolution and potential of nanotechnology, tracing the concept from Richard Feynman’s initial vision of molecular manufacturing to the present day. It highlights the challenges and advancements in creating self-replicating machines (SRMs) and the implications of such technology on society, emphasizing the unexplored path Feynman proposed for building machines from the top down, capable of replicating themselves and operating at increasingly smaller scales.</p>
</section>
<section id="key-concepts-3" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-3">Key Concepts</h3>
<ul>
<li><strong>Feynman’s Path</strong>: A method for achieving nanotechnology through the construction of machines that can replicate themselves at smaller scales.</li>
<li><strong>Self-Replicating Machines (SRMs)</strong>: Machines capable of producing copies of themselves, potentially down to the molecular level.</li>
<li><strong>MEMS (Micro-Electro-Mechanical Systems)</strong>: Small mechanical devices driven by electricity, highlighting the limitations of current technology in achieving nanoscale precision.</li>
<li><strong>Nanotechnology</strong>: The manipulation of matter on an atomic or molecular scale, envisioned to revolutionize manufacturing, medicine, and more.</li>
</ul>
</section>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ul>
<li>The potential for nanotechnology to dramatically reduce the cost and increase the availability of various products, akin to the transformative effects of the Industrial Revolution.</li>
<li>The unexplored feasibility of building compact macro-scale self-replicating machines using conventional fabrication and assembly techniques.</li>
<li>The concept of “mechanical motherhood,” where machines can create smaller, precise copies of themselves, facilitating the miniaturization and multiplication of manufacturing capabilities.</li>
<li>The importance of precision and the challenge of achieving atomic scale tolerance in manufacturing processes.</li>
</ul>
</section>
<section id="noteworthy-facts-3" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-3">Noteworthy Facts</h3>
<ul>
<li><strong>Feynman’s Vision</strong>: In the 1950s, physicist Richard Feynman conceptualized the possibility of machines that could manipulate atoms and molecules to build products with unprecedented precision.</li>
<li><strong>Manhattan and Apollo Projects</strong>: Historical examples of intense, time-sensitive projects that prioritized efficiency and innovation under the principle of “waste anything but time.”</li>
<li><strong><a href="https://reprap.org/wiki/RepRap">RepRap Project</a></strong>: An open-source initiative aimed at creating a 3D printer capable of printing most of its own components, demonstrating progress toward self-replication in manufacturing.</li>
</ul>
</section>
<section id="practical-implications-3" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-3">Practical Implications</h3>
<ul>
<li><strong>Medical Applications</strong>: Nanotechnology could revolutionize healthcare by enabling the creation of advanced medical devices and treatments.</li>
<li><strong>Manufacturing Efficiency</strong>: The ability to produce machines that can replicate themselves and operate at nanoscale would significantly reduce manufacturing costs and resource consumption.</li>
<li><strong>Economic and Social Transformation</strong>: Like the Industrial Revolution, nanotechnology could lead to a significant shift in economic structures and personal autonomy, making previously expensive or scarce products widely accessible.</li>
</ul>
</section>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ul>
<li><strong>Exploring Feynman’s Path</strong>: Dedicated research and development efforts should be directed toward realizing Feynman’s vision of molecular manufacturing through self-replicating machines.</li>
<li><strong>Incremental Advancements</strong>: Focus on achieving small-scale successes in SRM technology, which could lead to breakthroughs in nanotechnology.</li>
<li><strong>Interdisciplinary Collaboration</strong>: Encourage collaboration between fields such as biology, engineering, and materials science to overcome the challenges of nanoscale manufacturing.</li>
</ul>
</section>
<section id="additional-insights-3" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-3">Additional Insights</h3>
<ul>
<li>The text illustrates a gap between the potential of nanotechnology as envisioned by pioneers like Feynman and the current state of the field, which has been limited by technical challenges and perhaps a lack of bold, coordinated effort.</li>
<li>It also points to the RepRap project as a tangible step toward self-replicating technology, suggesting that more ambitious projects could accelerate progress toward Feynman’s vision.</li>
</ul>
</section>
</section>
<section id="when-the-sleeper-wakes" class="level2">
<h2 class="anchored" data-anchor-id="when-the-sleeper-wakes">When the Sleeper Wakes</h2>
<section id="summary-4" class="level3">
<h3 class="anchored" data-anchor-id="summary-4">Summary</h3>
<p>Chapter 13 explores the historical context and potential future of flying cars, the stagnation in technological progress despite advancements in other areas, and the socio-economic factors contributing to the current state of technological development. It delves into how past predictions about technology have not fully materialized, the impact of regulations and cultural shifts on innovation, and the possibilities that lie ahead if certain technological and societal barriers can be overcome.</p>
</section>
<section id="key-concepts-4" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-4">Key Concepts</h3>
<ul>
<li><strong>Technological Stagnation:</strong> The slowing of technological progress in certain areas, particularly in transportation and energy, despite advancements in computing and information technology.</li>
<li><strong>Henry Adams Curve:</strong> Refers to the historical trend of exponential growth in energy use and technological development, which flattened in the latter half of the 20th century.</li>
<li><strong>Flying Cars:</strong> Technologically feasible but hindered by historical, regulatory, and economic barriers rather than technological limitations.</li>
</ul>
</section>
<section id="noteworthy-facts-4" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-4">Noteworthy Facts</h3>
<ul>
<li>Flying cars have been technologically possible and have been built and flown since the 1930s.</li>
<li>The Great Depression, World War II, and subsequent regulatory and liability challenges have significantly hindered the development of personal aviation.</li>
<li>The stagnation in energy development, particularly the flatlining of the Henry Adams curve, is a major factor in why some technological predictions have not been realized.</li>
<li>Advances in computing and information technology have largely followed the optimistic predictions of the past, contrasting with the stagnation in other areas.</li>
</ul>
</section>
<section id="practical-implications-4" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-4">Practical Implications</h3>
<ul>
<li><strong>Infrastructure and Regulation:</strong> The development of flying cars and other advanced technologies has been significantly impacted by government regulation, infrastructure decisions, and the legal environment.</li>
<li><strong>Cultural Shifts:</strong> Changes in societal attitudes towards technology, from optimism to pessimism, have influenced the direction and pace of technological innovation.</li>
<li><strong>Economic Factors:</strong> Economic shifts, including the cost disease affecting healthcare and education, have diverted resources away from technological innovation.</li>
</ul>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ul>
<li>Reevaluate and potentially reduce regulatory barriers to facilitate innovation in transportation and energy.</li>
<li>Foster a cultural and societal shift towards optimism and support for technological progress.</li>
<li>Invest in research and development for alternative energy sources, including nuclear power and advanced battery technologies, to overcome the stagnation in energy development.</li>
</ul>
</section>
<section id="additional-insights-4" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-4">Additional Insights</h3>
<ul>
<li><strong>Contrast with Information Technology:</strong> The rapid progress in computing and digital technologies contrasts starkly with the stagnation in transportation and energy, highlighting the impact of regulatory environments and societal attitudes on different sectors.</li>
<li><strong>Potential for a Technological Renaissance:</strong> Emerging technologies, such as electric and VTOL (Vertical Take-Off and Landing) flying cars, small modular reactors, and advancements in biotechnology, hint at the possibility of overcoming current stagnations.</li>
<li><strong>Socio-Economic Barriers:</strong> The intertwining of technological stagnation with economic, regulatory, and cultural factors suggests that addressing the stagnation requires a holistic approach beyond mere technological innovation.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/where-is-my-flying-car-book-notes/part-2/</guid>
  <pubDate>Sun, 18 Feb 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Notes on Where is My Flying Car Pt. 01</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/where-is-my-flying-car-book-notes/part-1/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/where-is-my-flying-car-book-notes.html"><strong>Where is My Flying Car?</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Ch. 1: The World of Tomorrow</li>
<li>Ch. 2: The Graveyard of Dreams</li>
<li>Ch. 3: The Conquest of the Air</li>
<li>Ch. 4: Waldo and Magic, Inc.</li>
<li>Ch. 5: Cold Fusion</li>
<li>Ch. 6: The Machiavelli Effect</li>
<li>Ch. 7: The Age of Aquarius</li>
<li>Ch. 8: Forbidden Fruit</li>
</ul>
<section id="the-world-of-tomorrow" class="level2">
<h2 class="anchored" data-anchor-id="the-world-of-tomorrow">The World of Tomorrow</h2>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<p>“Where Is My Flying Car” explores the evolution of technological optimism from the early 20th century to the 1960s, highlighting influences from science fiction, key inventors like Thomas Edison, and visionary engineers such as Kelly Johnson of Lockheed Skunk Works. It delves into the societal expectations for technological advancements, including flying cars, and the reasons why such visions have not fully materialized, drawing from historical, cultural, and scientific perspectives.</p>
</section>
<section id="key-themes" class="level3">
<h3 class="anchored" data-anchor-id="key-themes">Key Themes</h3>
<ul>
<li><strong>Technological Optimism and its Evolution</strong>: The text traces how optimism about technology’s potential to transform the future has evolved, influenced by inventors, science fiction, and significant technological achievements.</li>
<li><strong>Influence of Science Fiction on Technological Development</strong>: It highlights the impact of science fiction literature and films on real-world technological innovation and public expectations.</li>
<li><strong>The Role of Key Figures and Events</strong>: The narrative underscores the contributions of figures like Edison and Johnson, and events such as World War II and the Space Race, in shaping technological aspirations.</li>
</ul>
</section>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ul>
<li>The belief in a technologically advanced future was inspired by science fiction and real-life innovators.</li>
<li>The concept of flying cars, popularized by science fiction, was once considered an imminent reality.</li>
<li>The influence of key individuals like Thomas Edison and Kelly Johnson significantly propelled technological optimism.</li>
<li>Cultural and societal factors, including the World Wars and the Space Age, played crucial roles in shaping expectations for the future.</li>
</ul>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ul>
<li>Thomas Edison was a major influence on the character Tom Swift, who inspired generations of engineers and inventors.</li>
<li>Kelly Johnson, inspired by Tom Swift, led Lockheed Skunk Works and contributed to major aeronautical advancements.</li>
<li>The early 20th century saw significant technological advancements, including the introduction of cars, radios, and airplanes.</li>
<li>Science fiction, particularly works like H.G. Wells’s “Things to Come,” played a role in popularizing the vision of a technological utopia.</li>
<li>The 1939 World’s Fair and its Futurama exhibit were influential in shaping public expectations of the future.</li>
</ul>
</section>
<section id="critical-analysis" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis">Critical Analysis</h3>
<ul>
<li>The persistent gap between technological optimism and reality highlights the challenges in actualizing science fiction-inspired visions.</li>
<li>The role of societal, economic, and political factors in facilitating or hindering technological advancements is critical.</li>
<li>The influence of science fiction on technological development illustrates the complex interplay between culture and innovation.</li>
</ul>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ul>
<li>Embrace a balanced view of technological optimism, acknowledging both its inspirational value and the practical challenges of innovation.</li>
<li>Foster interdisciplinary collaboration between scientists, engineers, and creators to envision and realize sustainable technological advancements.</li>
<li>Encourage public engagement and education in science and technology to build realistic expectations and support for innovation.</li>
</ul>
</section>
<section id="future-perspectives" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives">Future Perspectives</h3>
<ul>
<li>The ongoing influence of science fiction on technology suggests that visionary narratives will continue to inspire future innovations.</li>
<li>The realization of technologies like flying cars depends not only on technical feasibility but also on addressing societal, regulatory, and environmental concerns.</li>
</ul>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>The exploration of technological optimism through the lens of history, science fiction, and key figures reveals both the achievements and unfulfilled promises of the past century. Understanding these dynamics is essential for navigating the path toward realizing the technological dreams of the future.</p>
</section>
</section>
<section id="the-graveyard-of-dreams" class="level2">
<h2 class="anchored" data-anchor-id="the-graveyard-of-dreams">The Graveyard of Dreams</h2>
<section id="summary-1" class="level3">
<h3 class="anchored" data-anchor-id="summary-1">Summary</h3>
<p>Chapter 2 reflects on the optimistic predictions of technological advancement from the golden age of science fiction and contrasts them with the reality of technological progress and societal developments. It discusses the decline of cities like Detroit, shifts in societal expectations towards the future, the stagnation of technological innovation in areas like transportation, and the discrepancy between past predictions and current technological achievements.</p>
</section>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ul>
<li>The golden age of science fiction envisioned a future filled with technological wonders, but real-world technological progress has been uneven, with some areas advancing significantly while others have stagnated.</li>
<li>Societal expectations for the future have become more pessimistic compared to the optimism of the 1960s.</li>
<li>The decline of Detroit is used as a metaphor for broader societal and technological stagnation.</li>
<li>Despite past predictions, innovations like flying cars have not materialized, and technological progress in transportation has plateaued.</li>
<li>Economic theories suggest a stagnation in technological innovation and economic growth, with the latter half of the 20th century failing to bring about the same level of transformative technological advances as the first half.</li>
</ul>
</section>
<section id="facts-1" class="level3">
<h3 class="anchored" data-anchor-id="facts-1">Facts</h3>
<ul>
<li>Detroit’s bankruptcy in 2013 highlighted a significant decline from its peak as a symbol of American industrial might.</li>
<li>Technological predictions from the golden age of science fiction often failed to materialize, such as widespread use of flying cars.</li>
<li>Economic data suggests that the growth of per capita GDP has slowed since the 1970s.</li>
<li>The private airplane industry saw a decline in the number of units sold annually since the 1970s.</li>
<li>Energy consumption and efficiency improvements have not kept pace with historical trends, contributing to a stagnation in technological innovation in energy-intensive sectors.</li>
</ul>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ul>
<li>Explore alternative energy sources and technologies to overcome the stagnation in energy efficiency and availability.</li>
<li>Re-evaluate economic and innovation policies to foster a more dynamic environment for technological breakthroughs.</li>
<li>Encourage a balanced view of the future, recognizing both the challenges and opportunities technological advancements can bring.</li>
<li>Invest in research and development in sectors where technological progress has stagnated, particularly in transportation and energy.</li>
<li>Foster a societal mindset that embraces change and innovation, counteracting the pessimism that has set in regarding the future.</li>
</ul>
</section>
<section id="critical-analysis-1" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-1">Critical Analysis</h3>
<ul>
<li><p>The contrast between the optimistic predictions of the past and the current technological reality underscores a need to reassess how society views and invests in technological innovation.</p></li>
<li><p>The stagnation in certain technological fields, especially transportation and energy, suggests a complex interplay between economic policies, societal expectations, and the technical challenges of surpassing certain physical and economic barriers.</p></li>
<li><p>The narrative of decline in cities like Detroit and the stagnation in technological innovation calls for a nuanced understanding of how socio-economic factors influence technological progress.</p></li>
<li><p>The disillusionment with the pace of technological progress reflects a broader societal challenge in managing expectations versus reality.</p></li>
<li><p>The focus on what has not been achieved (e.g., flying cars) may overshadow significant advancements in other areas, such as digital technology and communication.</p></li>
</ul>
</section>
<section id="future-perspectives-1" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives-1">Future Perspectives</h3>
<ul>
<li>Considering the current challenges, there is potential for a new wave of technological innovation that addresses the shortcomings of past predictions, particularly by leveraging advancements in renewable energy and digital technologies.</li>
<li>Future technological progress may require a rethinking of societal priorities, with a greater emphasis on sustainable and equitable development.</li>
</ul>
</section>
</section>
<section id="the-conquest-of-the-air" class="level2">
<h2 class="anchored" data-anchor-id="the-conquest-of-the-air">The Conquest of the Air</h2>
<section id="summary-2" class="level3">
<h3 class="anchored" data-anchor-id="summary-2">Summary</h3>
<p>Chapter 3 explores the history and development of flying machines, specifically focusing on the transition from autogyros to helicopters and the concept of flying cars. It highlights the works of pioneers like Juan de la Sierra, Harold Pitcairn, and Moulton Taylor, among others, in the evolution of aviation technology from the early 20th century through post-World War II. The narrative critically examines the reasons why flying cars have not become mainstream, despite technological feasibility, pointing to economic, regulatory, and practical challenges.</p>
</section>
<section id="key-historical-figures-and-contributions" class="level3">
<h3 class="anchored" data-anchor-id="key-historical-figures-and-contributions">Key Historical Figures and Contributions</h3>
<ul>
<li><strong><a href="https://en.wikipedia.org/wiki/Juan_de_la_Cierva">Juan de la Sierra</a>:</strong> Invented the Auto Gyro, contributing significantly to rotary-wing aviation and laying groundwork for helicopter development.</li>
<li><strong><a href="https://en.wikipedia.org/wiki/Harold_Frederick_Pitcairn">Harold Pitcairn</a>:</strong> Advanced autogyro technology in the U.S., contributed to helicopter development, and faced legal battles over aviation patents.</li>
<li><strong><a href="https://en.wikipedia.org/wiki/Molt_Taylor">Moulton Taylor</a>:</strong> Designed the Aerocar, a notable attempt at creating a practical flying car.</li>
</ul>
</section>
<section id="technological-evolution" class="level3">
<h3 class="anchored" data-anchor-id="technological-evolution">Technological Evolution</h3>
<ul>
<li><strong><a href="https://en.wikipedia.org/wiki/Autogyro">Autogyros</a>:</strong> An early form of rotary-wing aircraft that led to the development of helicopters, offering short takeoff and landing capabilities.</li>
<li><strong>Helicopters:</strong> Evolved from autogyros, solving many of their limitations but remained costly and complex.</li>
<li><strong>Flying Cars:</strong> Various attempts, such as the Aerocar and Convair car, demonstrated feasibility but faced practical and regulatory hurdles.</li>
</ul>
</section>
<section id="challenges-to-widespread-adoption" class="level3">
<h3 class="anchored" data-anchor-id="challenges-to-widespread-adoption">Challenges to Widespread Adoption</h3>
<ul>
<li><strong>Economic Factors:</strong> High costs of production, maintenance, and operation limited accessibility to the broader public.</li>
<li><strong>Practical Challenges:</strong> Issues such as the need for runways, complex controls, and safety concerns hindered practical daily use.</li>
<li><strong>Regulatory and Legal Battles:</strong> Intellectual property disputes and government regulations impacted the development and commercialization of flying cars.</li>
</ul>
</section>
<section id="ideas-for-the-future" class="level3">
<h3 class="anchored" data-anchor-id="ideas-for-the-future">Ideas for the Future</h3>
<ul>
<li><strong>Technological Improvements:</strong> Continuous innovation could potentially overcome current limitations, making flying cars more practical and affordable.</li>
<li><strong>Regulatory Adaptation:</strong> Changes in aviation and urban planning regulations could facilitate the integration of flying cars into daily transportation.</li>
</ul>
</section>
<section id="reflections" class="level3">
<h3 class="anchored" data-anchor-id="reflections">Reflections</h3>
<p>The text prompts readers to consider missed opportunities and alternative paths in technological development. It raises questions about other potential innovations that have not been pursued or have failed to reach mainstream adoption due to various barriers.</p>
</section>
<section id="conclusion-1" class="level3">
<h3 class="anchored" data-anchor-id="conclusion-1">Conclusion</h3>
<p>The history of flying cars and related aviation technologies illustrates a complex interplay of innovation, practicality, and regulation. While technical feasibility has been demonstrated, broader adoption of flying cars remains elusive due to unresolved economic, practical, and regulatory challenges.</p>
</section>
</section>
<section id="waldo-and-magic-inc." class="level2">
<h2 class="anchored" data-anchor-id="waldo-and-magic-inc.">Waldo and Magic, Inc.</h2>
<section id="summary-3" class="level3">
<h3 class="anchored" data-anchor-id="summary-3">Summary</h3>
<p>Chapter 4 delves into the evolution of nanotechnology, starting with <a href="https://en.wikipedia.org/wiki/Robert_A._Heinlein">Robert A. Heinlein</a>’s fictional concept of self-replicating, scale-shifting machines (“<a href="https://en.wikipedia.org/wiki/Waldo_(short_story)">Waldos</a>”) in his 1942 story. It moves on to discuss Richard Feynman’s 1959 proposal for nanoscale manipulation and construction, and finally, <a href="https://en.wikipedia.org/wiki/K._Eric_Drexler">K. Eric Drexler</a>’s expansion of these ideas into what is now recognized as molecular nanotechnology.</p>
<ul>
<li><strong>Feynman’s Vision:</strong> Feynman, in his 1959 talk, imagined the possibility of manipulating matter at the atomic level, suggesting a method of creating smaller and smaller tools to achieve this. Despite offering prizes to stimulate interest, the broader implications of his vision were not fully embraced at the time.</li>
<li><strong>Drexler’s Contribution:</strong> Drexler built upon Feynman’s ideas, proposing the concept of molecular assemblers that could control the structure of matter at the molecular level, thereby introducing the broader public and scientific community to the potential of nanotechnology.</li>
<li><strong>Real-world Implications:</strong> The narrative also touches on the real-world implications and potential of nanotechnology, such as dramatic increases in manufacturing efficiency, medical advancements, and even the reconstitution of materials from waste products.</li>
</ul>
</section>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ul>
<li><strong>Self-Replicating Technology:</strong> The concept of machines that can replicate themselves, initially fictionalized by Heinlein and later conceptualized in a more practical manner by Feynman and Drexler, could revolutionize manufacturing, medicine, and more.</li>
<li><strong>Scale-Shifting Mechanisms:</strong> The idea that machines could operate and manipulate matter at increasingly smaller scales, down to the atomic level, suggests a future where material limitations are vastly reduced.</li>
<li><strong>Nanotechnology’s Potential:</strong> Beyond the mere manipulation of atoms, the envisioned future includes the ability to construct complex machinery, electronics, and even biological materials at the nanoscale, with precision and efficiency far beyond current capabilities.</li>
</ul>
</section>
<section id="facts-2" class="level3">
<h3 class="anchored" data-anchor-id="facts-2">Facts</h3>
<ul>
<li><strong>Historical Milestones:</strong>
<ul>
<li>Heinlein’s story in 1942 introduced the concept of remotely controlled, self-replicating machines.</li>
<li>Feynman’s 1959 speech proposed the practicality of manipulating matter at the atomic level.</li>
<li>Drexler’s work in the 1980s and his publication of “Engines of Creation” brought nanotechnology into the public and academic discourse.</li>
</ul></li>
<li><strong>Technological Projections:</strong>
<ul>
<li>The potential for nanotechnology to transform industries, including manufacturing and medicine, by allowing for the precise and efficient creation of products at the atomic or molecular scale.</li>
<li>The concept of self-replicating nanomachines could lead to exponential growth in manufacturing capabilities, similar to the growth observed in digital information technology.</li>
</ul></li>
</ul>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ul>
<li><strong>Investment in Nanotechnology Research:</strong> Encourage and increase funding for research into nanoscale manipulation and construction techniques, focusing on practical applications and the development of infrastructure to support such technologies.</li>
<li><strong>Educational Focus:</strong> Strengthen educational programs and resources in nanotechnology and related fields to prepare future generations for advancements in this area.</li>
<li><strong>Regulatory Framework:</strong> Develop a regulatory framework to ensure the safe and ethical development and use of nanotechnologies, particularly in regards to self-replicating machines and their potential impacts on society and the environment.</li>
</ul>
</section>
<section id="critical-analysis-2" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-2">Critical Analysis</h3>
<ul>
<li><strong>Feynman’s Underappreciated Insight:</strong> Despite Feynman’s significant contributions to physics and his foresight regarding nanotechnology, his ideas were not immediately pursued with the vigor they deserved, reflecting a possible gap between visionary scientific ideas and their practical exploration and application.</li>
<li><strong>Drexler’s Role in Popularizing Nanotechnology:</strong> Drexler’s work played a crucial role in transforming nanotechnology from a theoretical concept into a field of scientific inquiry with tangible goals and research agendas.</li>
</ul>
</section>
<section id="future-perspectives-2" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives-2">Future Perspectives</h3>
<ul>
<li><strong>The Path to Implementation:</strong> Consideration of how to bridge the gap between the current state of nanotechnology and the future potential outlined by pioneers like Feynman and Drexler. This includes addressing technical challenges, societal implications, and ethical considerations.</li>
<li><strong>Societal Impacts:</strong> Reflect on the potential societal changes and challenges that could arise from widespread implementation of nanotechnology, including economic, environmental, and health impacts.</li>
</ul>
</section>
</section>
<section id="cold-fusion" class="level2">
<h2 class="anchored" data-anchor-id="cold-fusion">Cold Fusion</h2>
<section id="summary-4" class="level3">
<h3 class="anchored" data-anchor-id="summary-4">Summary</h3>
<p>Chapter 5 recounts the intriguing saga of cold fusion, beginning with its unexpected discovery by electrochemists <a href="https://en.wikipedia.org/wiki/Stanley_Pons">Stanley Pons</a> and <a href="https://en.wikipedia.org/wiki/Martin_Fleischmann">Martin Fleischmann</a> in 1989, who believed they had achieved nuclear fusion at room temperature. Despite initial excitement, their claims faced skepticism and were largely discredited by the scientific community. The narrative explores the challenges and controversies surrounding cold fusion, highlighting the clash between groundbreaking scientific discovery and established scientific paradigms.</p>
</section>
<section id="key-events" class="level3">
<h3 class="anchored" data-anchor-id="key-events">Key Events</h3>
<ul>
<li><strong>Discovery:</strong> In 1989, Pons and Fleischmann announced they had achieved cold fusion, a process they thought could revolutionize energy production.</li>
<li><strong>Skepticism and Controversy:</strong> Their claims were met with skepticism and controversy, leading to a divide within the scientific community.</li>
<li><strong>Scientific Investigation:</strong> Various attempts to replicate the results were made, with mixed outcomes, contributing to ongoing debate about the validity of cold fusion.</li>
</ul>
</section>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ul>
<li><strong>Cold Fusion Concept:</strong> The process of achieving nuclear fusion at room temperature, as opposed to the high temperatures required in traditional fusion reactions.</li>
<li><strong>Machiavelli Effect:</strong> The phenomenon where innovators face opposition from those benefiting from the status quo, and lukewarm support from potential beneficiaries of the new order.</li>
<li><strong>Replication Challenges:</strong> Cold fusion experiments are noted for their finicky and intermittent results, making replication difficult and casting doubt on the phenomenon’s reliability.</li>
</ul>
</section>
<section id="facts-3" class="level3">
<h3 class="anchored" data-anchor-id="facts-3">Facts</h3>
<ul>
<li><strong>Initial Experiment:</strong> Pons and Fleischmann used electrolysis on a palladium electrode loaded with deuterium, claiming to observe excess heat indicative of nuclear fusion.</li>
<li><strong>Public and Scientific Reaction:</strong> The announcement was initially met with excitement but quickly turned into skepticism and outright dismissal by many in the scientific community.</li>
<li><strong>Funding and Research:</strong> Despite being discredited, cold fusion research continued with private and limited government funding, leading to further experiments and studies.</li>
</ul>
</section>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ul>
<li><strong>Open-minded Investigation:</strong> Encourage a balanced and open-minded approach to investigating cold fusion, acknowledging both the potential significance of the discovery and the need for rigorous scientific validation.</li>
<li><strong>Replication Efforts:</strong> Support efforts to replicate cold fusion experiments with a high degree of precision and transparency, to clarify the phenomenon’s validity.</li>
<li><strong>Interdisciplinary Collaboration:</strong> Foster collaboration between electrochemists, physicists, and other scientists to explore the underlying mechanisms of cold fusion and address the challenges in replicating results.</li>
</ul>
</section>
<section id="critical-analysis-3" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-3">Critical Analysis</h3>
<ul>
<li><strong>Scientific Process and Innovation:</strong> The cold fusion saga highlights the tension between innovation and established scientific practices, underscoring the importance of maintaining an open mind towards unconventional discoveries.</li>
<li><strong>Impact of Skepticism:</strong> The intense skepticism and dismissal faced by Pons and Fleischmann demonstrate the potential barriers to scientific progress posed by entrenched interests and the difficulty of introducing paradigm-shifting technologies.</li>
<li><strong>Need for Rigorous Validation:</strong> While the possibility of cold fusion remains intriguing, the lack of consistent, replicable results underscores the necessity of rigorous scientific validation before such claims can be accepted as fact.</li>
</ul>
</section>
<section id="future-perspectives-3" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives-3">Future Perspectives</h3>
<ul>
<li><strong>Understanding the Unknown:</strong> Cold fusion represents an area of science where our current understanding is incomplete, suggesting that further research could uncover new principles of physics.</li>
<li><strong>Potential for Energy Revolution:</strong> If validated, cold fusion could dramatically transform the energy landscape, offering a clean, virtually limitless source of power.</li>
<li><strong>Role of Scientific Community:</strong> The scientific community’s response to cold fusion serves as a case study in handling extraordinary claims, emphasizing the need for a balanced approach that supports innovation while upholding scientific rigor.</li>
</ul>
</section>
</section>
<section id="the-machiavelli-effect" class="level2">
<h2 class="anchored" data-anchor-id="the-machiavelli-effect">The Machiavelli Effect</h2>
<section id="summary-5" class="level3">
<h3 class="anchored" data-anchor-id="summary-5">Summary</h3>
<p>Chapter 6 discusses the phenomena of resistance to new ideas and technologies in scientific communities, dubbed the “Machiavelli Effect.” It draws parallels between historical and contemporary examples, notably in the fields of cold fusion, nanotechnology, and broader scientific research funding dynamics.</p>
<ul>
<li>Highlights the societal and systemic responses to innovation, including the resistance from established entities (“nobles”) and the hesitancy of potential innovators (“tradesmen”) due to the fear of backlash.</li>
<li>Points to the influence of government funding in shaping scientific research and its potential to stifle innovation due to the preferential treatment of established fields or ideas over emerging ones.</li>
<li>Mentions significant examples of technological advancement and stagnation, touching on the role of education, bureaucracy, and funding in affecting the pace and direction of scientific progress.</li>
</ul>
</section>
<section id="ideas-4" class="level3">
<h3 class="anchored" data-anchor-id="ideas-4">Ideas</h3>
<ul>
<li>The Machiavelli Effect illustrates how systemic and human nature resistances to innovation can hinder scientific progress.</li>
<li>The distinction between “nobles” and “tradesmen” in the context of innovation resistance highlights the dynamic of power and fear in the face of new technologies.</li>
<li>Government funding, while critical for research, can inadvertently prioritize established fields and suppress novel ideas due to the allocation of resources and the influence of existing scientific elites.</li>
<li>Historical and contemporary examples underscore the recurring pattern of resistance to innovation, suggesting that this phenomenon is deeply rooted in societal and systemic structures.</li>
</ul>
</section>
<section id="facts-4" class="level3">
<h3 class="anchored" data-anchor-id="facts-4">Facts</h3>
<ul>
<li><strong>Cold Fusion</strong>: Initially dismissed as a mistake based on misinterpretations and bad laboratory techniques.</li>
<li><strong>Nanotechnology</strong>: Faced systemic resistance despite its potential, with funding dynamics illustrating the Machiavelli Effect.</li>
<li><strong>Government Funding</strong>: Often reshuffles resources from established programs to new initiatives, potentially stifling innovation in emerging fields.</li>
<li><strong>Historical Examples of Technological Stagnation</strong>: The industrial revolution took off in Britain, not France, despite France’s scientific prowess at the time, illustrating the complex interplay between innovation, societal structures, and economic policies.</li>
</ul>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ul>
<li><strong>Encourage Diverse Funding Sources</strong>: To mitigate the risk of innovation suppression inherent in centralized funding models.</li>
<li><strong>Promote Interdisciplinary Research</strong>: To foster innovation by combining existing knowledge in novel ways, breaking through the barriers of traditional fields.</li>
<li><strong>Support Risk-Taking in Scientific Research</strong>: By creating safe environments for exploring and developing new technologies, even when they contradict established paradigms.</li>
<li><strong>Educate on the History of Technological Innovation</strong>: To build awareness of the systemic and societal factors that influence scientific progress and the acceptance of new ideas.</li>
</ul>
</section>
<section id="critical-analysis-4" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-4">Critical Analysis</h3>
<ul>
<li><p>The Machiavelli Effect, as described, points to a broader issue within the sociology of science, where the power dynamics and risk aversion inherent in human nature and institutional structures can significantly impede technological and scientific advancement.</p></li>
<li><p>The narrative suggests that while funding and resources are crucial for research, the manner in which they are allocated and controlled can either bolster or hinder the development of groundbreaking technologies.</p></li>
<li><p>The comparison between historical and contemporary examples serves to underscore the persistent nature of resistance to innovation, suggesting that understanding and addressing these systemic biases is crucial for fostering future technological breakthroughs.</p></li>
<li><p>The discussion around the Machiavelli Effect and its implications for scientific innovation resonates with broader debates on how societies value and support progress. It raises important questions about the role of funding, education, and societal structures in either nurturing or stifling innovation.</p></li>
</ul>
</section>
<section id="future-perspectives-4" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives-4">Future Perspectives</h3>
<ul>
<li>Exploring new models of research funding and support that emphasize innovation and risk-taking could be key to overcoming the Machiavelli Effect.</li>
<li>The evolving landscape of technology and science necessitates a reassessment of how we approach innovation, with a particular focus on fostering environments that encourage rather than inhibit new ideas.</li>
</ul>
</section>
</section>
<section id="the-age-of-aquarius" class="level2">
<h2 class="anchored" data-anchor-id="the-age-of-aquarius">The Age of Aquarius</h2>
<section id="summary-6" class="level3">
<h3 class="anchored" data-anchor-id="summary-6">Summary</h3>
<p>Chapter 7 examines the transition from a society driven by scientific progress and exploration, exemplified by the moon landing, to one captivated by the cultural and emotional shifts of the 1960s and 1970s, marked by the Age of Aquarius, a focus on love and environmentalism, and a movement away from the hard sciences. It discusses the impact of historical, cultural, and technological shifts on society’s values and priorities, highlighting the tension between scientific advancement and cultural change.</p>
</section>
<section id="ideas-5" class="level3">
<h3 class="anchored" data-anchor-id="ideas-5">Ideas</h3>
<ul>
<li>The progression from a universe understood through mythology to one explained by science and mathematics represents a monumental leap in human thought.</li>
<li>The Age of Aquarius symbolizes a shift from logical and mathematical steering of society to emotional and cultural guidance.</li>
<li>The sexual revolution and environmental movements of the 1960s and 1970s marked significant departures from previous societal norms.</li>
<li>Maslow’s hierarchy of needs provides a framework for understanding the shifts in societal focus from survival and security to self-actualization and societal change.</li>
</ul>
</section>
<section id="facts-5" class="level3">
<h3 class="anchored" data-anchor-id="facts-5">Facts</h3>
<ul>
<li>Isaac Newton’s discoveries in the 17th century laid the groundwork for modern physics and astronomy.</li>
<li>The 1960s cultural revolution included movements for civil rights, environmentalism, and feminism, drastically altering Western, particularly American, societal norms.</li>
<li>H.G. Wells’s “The Time Machine” foresaw societal shifts towards leisure and away from struggle, predicting a focus on art and eroticism over survival and advancement.</li>
<li>The environmental and technological advancements of the 20th century, such as nuclear power and the sexual revolution, were influenced by earlier scientific and cultural movements.</li>
</ul>
</section>
<section id="recommendations-5" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-5">Recommendations</h3>
<ul>
<li>Embrace the value of scientific advancement and maintain a balance between technological progress and cultural shifts.</li>
<li>Foster an understanding of history to better appreciate the evolution of societal norms and values.</li>
<li>Encourage critical thinking and skepticism to navigate the complexities of modern societal challenges, including environmental concerns and technological ethics.</li>
<li>Promote education and dialogue on the importance of balancing human needs across Maslow’s hierarchy to ensure a society that values both scientific progress and cultural richness.</li>
</ul>
</section>
<section id="critical-analysis-5" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-5">Critical Analysis</h3>
<ul>
<li><p>The juxtaposition of scientific achievements with cultural shifts underscores a recurring cycle in human history where periods of technological advancement are often followed by significant societal and cultural transformations.</p></li>
<li><p>The narrative suggests a potential underestimation of the importance of cultural movements in driving societal progress, implying a need to reevaluate how we define progress.</p></li>
<li><p>The discussion on Maslow’s hierarchy as applied to societal shifts provides insight into the evolving priorities of civilizations, hinting at a universal pattern of human development that transcends individual cultures.</p></li>
<li><p>The emphasis on scientific discovery and technological advancement as the pinnacle of human achievement might overlook the critical role of cultural and emotional development in shaping a balanced and fulfilled society.</p></li>
<li><p>The critique of the 1960s and 1970s cultural shifts as a departure from scientific rationalism to emotionalism might not fully appreciate the necessary role of cultural evolution in addressing the limitations and ethical considerations of scientific progress.</p></li>
</ul>
</section>
<section id="future-perspectives-5" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives-5">Future Perspectives</h3>
<ul>
<li>The chapter suggests a future where balancing scientific advancements with cultural and emotional intelligence becomes crucial in addressing global challenges, such as environmental sustainability and social equity.</li>
<li>It hints at the potential for a new synthesis of technological and cultural evolution, where advancements in science and technology are guided by ethical considerations and a deep understanding of human needs and values.</li>
</ul>
</section>
</section>
<section id="forbidden-fruit" class="level2">
<h2 class="anchored" data-anchor-id="forbidden-fruit">Forbidden Fruit</h2>
<section id="summary-7" class="level3">
<h3 class="anchored" data-anchor-id="summary-7">Summary</h3>
<p>Chapter 8 discusses the cultural and technological shifts from the 1960s to the 1970s, the stagnation of technological advancements, particularly in the realm of flying cars, and the impact of bureaucracy, regulation, and societal attitudes towards technology on innovation. It contrasts the optimism and progress of the early 20th century with the regulatory and cultural hurdles that have since hindered technological development, using the example of flying cars to illustrate a broader stagnation in technological innovation due to increased regulation, bureaucratic inefficiency, and a societal shift away from technological optimism.</p>
</section>
<section id="key-ideas" class="level3">
<h3 class="anchored" data-anchor-id="key-ideas">Key Ideas</h3>
<ul>
<li>The 1960s and 70s marked a significant cultural shift away from trust and collaboration towards individualism and skepticism of technology.</li>
<li>Ergophobia, or the fear of work and technology, transitioned from a rare condition to a widespread societal attitude, negatively impacting technological advancement.</li>
<li>Three main barriers to technological progress identified: bureaucratic inefficiency, societal fear of technology, and excessive regulation.</li>
<li>Historical examples, such as the failure of the Aerocar and other flying car projects, illustrate how regulatory hurdles and societal attitudes prevented the commercialization and widespread adoption of revolutionary technologies.</li>
<li>The stagnation of technological progress, referred to as the “Great Stagnation,” is largely attributed to the exponential growth in regulations and a shift in societal values towards skepticism of technological advancement.</li>
<li>The concept of productivity and its impact on technological adoption and societal advancement is discussed, highlighting how increases in productivity made technologies like the family car accessible to the masses, a contrast to the stagnation seen in more recent decades.</li>
</ul>
</section>
<section id="facts-6" class="level3">
<h3 class="anchored" data-anchor-id="facts-6">Facts</h3>
<ul>
<li>By the 1970s, 20% of adult Americans could have owned a flying car, had technological and societal conditions allowed.</li>
<li>The Interstate Highway System significantly contributed to economic growth in the 1950s, showcasing the potential impact of technological advancements on the economy.</li>
<li>The Federal Regulatory Code is over 175,000 pages long, illustrating the complexity and breadth of current regulations.</li>
<li>The cost of compliance with federal regulations significantly impacts economic growth, with studies suggesting that maintaining the 1949 level of regulation could have resulted in much higher median household incomes.</li>
<li>The German economic miracle post-World War II demonstrated how reducing regulation can rapidly stimulate economic growth.</li>
</ul>
</section>
<section id="recommendations-6" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-6">Recommendations</h3>
<ul>
<li>To overcome the current stagnation in technological innovation, a reduction in bureaucratic inefficiency and excessive regulation is necessary.</li>
<li>Embracing a cultural shift towards valuing and trusting technological advancements could foster an environment more conducive to innovation.</li>
<li>Reevaluating societal attitudes towards technology, from fear and skepticism to optimism and support, could help revive the progress seen in earlier eras.</li>
<li>Policymakers and regulators should consider the long-term impacts of regulations on innovation and strive for a balance that protects public interests without stifling technological advancement.</li>
<li>Encouraging public and private investment in technological research and development can pave the way for breakthroughs similar to those seen in the early 20th century.</li>
</ul>
</section>
<section id="critical-analysis-6" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-6">Critical Analysis</h3>
<ul>
<li>The text highlights a paradox: while technological advancements have the potential to significantly improve quality of life and economic prosperity, societal and regulatory barriers often hinder their development and adoption.</li>
<li>It raises questions about the role of government and regulatory bodies in innovation, suggesting that while some oversight is necessary for safety and ethical considerations, excessive regulation can be detrimental.</li>
<li>The comparison between the rapid advancements of the early 20th century and the stagnation of recent decades prompts a reflection on the societal values and priorities that drive or inhibit progress.</li>
<li>The discussion on productivity and its impact on technological adoption offers insights into how economic factors influence the accessibility and widespread use of new technologies.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/where-is-my-flying-car-book-notes/part-1/</guid>
  <pubDate>Sun, 18 Feb 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Notes on The Path of Least Resistance</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/the-path-of-least-resistance-book-notes/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Book LInks:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://www.penguinrandomhouse.com/books/56713/the-path-of-least-resistance-by-robert-fritz/">Publisher Page</a></li>
<li><a href="https://www.robertfritz.com/wp/">Author’s Website</a></li>
</ul>
</div>
</div>
<ul>
<li>Ch. 1: The Path of Least Resistance</li>
<li>Ch. 2: The Reactive-Responsive Orientation</li>
<li>Ch. 3: Creating Is No Problem</li>
<li>Ch. 4: Creating</li>
<li>Ch. 5: The Orientation of the Creative</li>
<li>Ch. 6: Tension Seeks Resolution</li>
<li>Ch. 7: Compensating Strategies</li>
<li>Ch. 8: Structural Tension</li>
<li>Ch. 9: Vision</li>
<li>Ch. 10: Current Reality</li>
<li>Ch. 11: The Creative Cycle</li>
<li>Ch. 12: Germination and Choice</li>
<li>Ch. 13: Primary, Secondary, and Fundamental Choice</li>
<li>Ch. 14: Assimilation</li>
<li>Ch. 15: Momentum</li>
<li>Ch. 16: Strategic Moments</li>
<li>Ch. 17: Completion</li>
<li>Ch. 18: The Power of Transcendence</li>
</ul>
<section id="the-path-of-least-resistance" class="level2">
<h2 class="anchored" data-anchor-id="the-path-of-least-resistance">The Path of Least Resistance</h2>
<section id="summary" class="level3">
<h3 class="anchored" data-anchor-id="summary">Summary</h3>
<p>The book “The Path of Least Resistance” by Robert Fritz explores how individuals can become the creative force in their own lives by understanding and altering the structures that guide their actions. Through the metaphor of Boston’s cow paths, Fritz illustrates how paths of least resistance are formed and how they can determine behavior. The book is structured around three main insights: our lives follow the path of least resistance, our life’s structure determines its path, and by changing this structure, we can direct our lives toward what we truly want.</p>
</section>
<section id="key-concepts" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts">Key Concepts</h3>
<ul>
<li><strong>Path of Least Resistance:</strong> The natural tendency of energy, whether in nature or human behavior, to follow the easiest route, shaped by existing structures.</li>
<li><strong>Underlying Structures:</strong> The fundamental parts and their relationships within a system that determine the path of least resistance.</li>
<li><strong>Creating Change:</strong> The possibility of altering the basic structures of one’s life to change its direction towards desired outcomes.</li>
</ul>
</section>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ul>
<li>People and nature inherently follow the path of least resistance, guided by the structure of their environment or life.</li>
<li>The underlying structure of life determines personal paths of least resistance, shaping behaviors and outcomes.</li>
<li>Changing the fundamental structures of life can lead to desired changes and outcomes, making new paths the path of least resistance.</li>
<li>Understanding and applying structural thinking, rather than a psychological or problem-solving approach, can lead to meaningful change.</li>
</ul>
</section>
<section id="practical-implications" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications">Practical Implications</h3>
<ul>
<li>Recognizing that attempts to change behavior without addressing underlying structures are likely to result in a return to old patterns.</li>
<li>The importance of identifying and modifying the structures that lead to undesired outcomes in life.</li>
<li>The potential for applying the principles of the creative process, traditionally used in arts, to personal and professional life for better outcomes.</li>
</ul>
</section>
<section id="supporting-evidence" class="level3">
<h3 class="anchored" data-anchor-id="supporting-evidence">Supporting Evidence</h3>
<ul>
<li>The analogy of Boston’s cow paths and the behavior of energy in nature (water, wind, electricity) illustrate how paths of least resistance are formed by existing structures.</li>
<li>Historical examples of successful change, whether in city planning or personal habits, highlight the importance of structural change over mere behavioral adjustments.</li>
</ul>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ul>
<li>Assess and identify the underlying structures in one’s life that dictate current paths and outcomes.</li>
<li>Adopt a structural perspective to recognize and address the real causes of issues, rather than focusing solely on symptoms or behaviors.</li>
<li>Engage in the creative process to design and implement new structures that align with desired goals and outcomes.</li>
<li>Apply the principles learned from the creative process in arts and sciences to broader aspects of life, including career and personal development.</li>
</ul>
</section>
<section id="additional-insights" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights">Additional Insights</h3>
<ul>
<li>Many accomplished individuals in creative fields fail to apply the principles of the creative process to their own lives, highlighting a common disconnect between professional skills and personal development.</li>
<li>The creative process offers a model for moving from problem orientation to creation orientation, focusing on bringing into being desired results rather than merely solving problems.</li>
</ul>
</section>
<section id="critical-analysis" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis">Critical Analysis</h3>
<ul>
<li>The book challenges conventional approaches to personal change by focusing on structural rather than psychological factors. This perspective shifts the focus from internal states and behaviors to the external and internal structures that govern them.</li>
<li>While the book provides a compelling argument for the importance of structural thinking, it might underplay the role of psychological factors and the complexity of human behavior in some instances.</li>
</ul>
</section>
</section>
<section id="the-reactive-responsive-orientation" class="level2">
<h2 class="anchored" data-anchor-id="the-reactive-responsive-orientation">The Reactive-Responsive Orientation</h2>
<section id="summary-1" class="level3">
<h3 class="anchored" data-anchor-id="summary-1">Summary</h3>
<p>Chapter 2 discusses the reactive-responsive orientation formed during childhood, influenced by the need to adapt to or rebel against given circumstances and societal norms. It explores how individuals either react to or respond to their environment, based on learned behaviors from childhood, and how this orientation leads to a feeling of powerlessness, as actions are dictated by external or internal circumstances.</p>
</section>
<section id="key-concepts-1" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-1">Key Concepts</h3>
<ul>
<li><strong>Reactive-Responsive Orientation:</strong> A life approach based on reacting to or responding to circumstances, leading to a cycle of behavior that reinforces a sense of powerlessness.</li>
<li><strong>Powerlessness:</strong> The underlying presumption of the reactive-responsive orientation, where individuals feel actions and choices are determined by external circumstances.</li>
<li><strong>Avoidance Strategies:</strong> Tactics developed to evade unwanted situations or outcomes, reinforcing the cycle of reactivity or responsiveness without truly addressing underlying desires or needs.</li>
<li><strong>Preemptive Strikes:</strong> Actions taken to prevent perceived negative outcomes, often based on past experiences, which can limit personal growth and satisfaction.</li>
<li><strong>Closed and Circular System:</strong> The cycle of moving between reactive and responsive behaviors, which keeps individuals within the confines of a reactive-responsive orientation without real change.</li>
</ul>
</section>
<section id="practical-implications-1" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-1">Practical Implications</h3>
<ul>
<li><strong>Understanding Behavior:</strong> Recognizing the origins of reactive or responsive behavior can be a first step towards changing unhelpful patterns.</li>
<li><strong>Breaking the Cycle:</strong> Identifying and challenging the presumption of powerlessness can lead to more autonomous and creative approaches to life.</li>
<li><strong>Redefining Success:</strong> Success achieved through avoidance or preemptive strategies often does not lead to fulfillment, suggesting the need for a reevaluation of personal goals and methods of achieving them.</li>
<li><strong>Personal Growth:</strong> Moving beyond the reactive-responsive orientation requires a deep understanding of one’s motivations and behaviors, setting the stage for genuine change.</li>
</ul>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ul>
<li>Reflect on personal behaviors to identify reactive or responsive patterns and their origins.</li>
<li>Challenge the assumption of powerlessness by identifying areas of life where one can exercise creative control.</li>
<li>Develop new strategies for dealing with circumstances that focus on personal values and goals, rather than avoidance or compliance.</li>
<li>Seek experiences that encourage autonomy and self-expression, breaking the cycle of reactivity or responsiveness.</li>
</ul>
</section>
<section id="additional-insights-1" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-1">Additional Insights</h3>
<ul>
<li>The chapter highlights how societal and familial norms shape individual behavior patterns from a young age, emphasizing the importance of conscious effort in developing new orientations towards life.</li>
<li>It suggests that true satisfaction and fulfillment come from becoming the creative force in one’s own life, rather than adhering to externally imposed expectations or avoiding perceived negative outcomes.</li>
</ul>
</section>
</section>
<section id="creating-is-no-problem" class="level2">
<h2 class="anchored" data-anchor-id="creating-is-no-problem">Creating Is No Problem</h2>
<section id="summary-2" class="level3">
<h3 class="anchored" data-anchor-id="summary-2">Summary</h3>
<p>Chapter 3 emphasizes the distinction between problem-solving and creating. Fritz argues that while problem-solving aims to eliminate issues, creating focuses on bringing into existence something desired. He critiques the prevalent problem-solving mentality in society and advocates for a creative approach to life and societal issues.</p>
</section>
<section id="key-concepts-2" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-2">Key Concepts</h3>
<ul>
<li><strong>Problem Solving vs.&nbsp;Creating:</strong> Problem-solving is about eliminating issues, while creating is about bringing desired outcomes into reality.</li>
<li><strong>Problem Mentality:</strong> Society often focuses on identifying and solving problems rather than envisioning and creating desired outcomes.</li>
<li><strong>Creative Process:</strong> The true creative process involves envisioning what one wants to create and methodically bringing it to reality, differing from merely generating solutions to problems.</li>
</ul>
</section>
<section id="practical-implications-2" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-2">Practical Implications</h3>
<ul>
<li><strong>Individual and Societal Growth:</strong> Shifting focus from problem-solving to creating can lead to more meaningful individual and societal growth.</li>
<li><strong>Leadership:</strong> Effective leaders and statesmen are highlighted as those who build and create, not just solve problems.</li>
<li><strong>Global Development:</strong> The approach to global development, such as the case in Uganda (prioritizing self-empowerment over outside intervention), shows that empowering individuals to create can have more sustainable and impactful results than traditional problem-solving methods.</li>
</ul>
</section>
<section id="critical-analysis-1" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-1">Critical Analysis</h3>
<ul>
<li>Fritz challenges the conventional emphasis on problem-solving, suggesting that it often leads to temporary fixes rather than sustainable solutions.</li>
<li>He argues that a creative approach, focusing on the creation of desired outcomes, is more effective for individual fulfillment and societal progress.</li>
<li>The distinction between problem-solving and creating is crucial for understanding how we approach challenges and opportunities in life and society.</li>
<li>The transition from a problem-solving to a creating mindset may require significant societal and educational reform, as well as a shift in individual attitudes and behaviors.</li>
<li>Fritz’s examples, including the contrast between responses to crises like the famine in Ethiopia and development projects in Uganda, illustrate the effectiveness of a creative approach.</li>
</ul>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ul>
<li><strong>Shift Focus:</strong> Individuals and organizations should shift their focus from merely solving problems to envisioning and creating desired outcomes.</li>
<li><strong>Educate on Creativity:</strong> There should be more emphasis on educating people about the creative process and its importance in all aspects of life.</li>
<li><strong>Promote Creative Leadership:</strong> Encourage leadership that focuses on building and creating, rather than just problem identification and resolution.</li>
</ul>
</section>
<section id="future-perspectives" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives">Future Perspectives</h3>
<ul>
<li><strong>Shifting Societal Paradigms:</strong> A future where societies prioritize creative solutions over problem-centric approaches could lead to more innovative and sustainable developments.</li>
<li><strong>Education Reform:</strong> Educational systems might increasingly focus on nurturing creativity and the ability to create, preparing individuals to be creators in their own lives and in society.</li>
<li><strong>Increased Collaboration:</strong> A creative approach to life encourages collaboration over competition, as individuals and groups work towards shared visions of the future.</li>
</ul>
</section>
</section>
<section id="creating" class="level2">
<h2 class="anchored" data-anchor-id="creating">Creating</h2>
<section id="summary-3" class="level3">
<h3 class="anchored" data-anchor-id="summary-3">Summary</h3>
<p>Chapter 4 delves into the essence of creativity, illustrating how adverse conditions like those in East Harlem’s ghettos can foster unique artistic expressions, such as graffiti art. It challenges the notion that creativity is a product of one’s environment and instead presents it as an innate human capability that thrives regardless of circumstances. Through anecdotes and analysis, it posits that everyone has the potential to be creative in their endeavors, not just in traditional arts but across all aspects of life.</p>
</section>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ul>
<li>Creativity can emerge from challenging and adverse conditions, not just conducive environments.</li>
<li>The transformation of graffiti from vandalism to a recognized art form exemplifies the evolution of creativity in response to societal changes.</li>
<li>Creativity is an inherent human trait that transcends socio-economic and educational barriers.</li>
<li>The creative process is universal and can be applied in various fields beyond the arts, like manual labor and innovation in everyday life.</li>
</ul>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ul>
<li>Graffiti art originated as a form of vandalism but evolved into a competitive and recognized art form, with some artists eventually gaining gallery representation.</li>
<li>Tokyo invited one of the prominent graffiti artists to paint murals on their subway cars, showcasing international recognition of this art form.</li>
<li>Historical figures like Pablo Casals and Carl Rogers emphasized the universality and value of creativity across different domains of human activity.</li>
</ul>
</section>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ul>
<li>Embrace creativity as an accessible process, not limited by current circumstances or traditional environments designed to foster creativity.</li>
<li>Engage actively in the creative process by conceiving clear results, understanding the current state of affairs, taking action, and adjusting based on feedback.</li>
<li>Recognize and develop the skills necessary for creativity, including the ability to view reality objectively and to innovate beyond conventional methods.</li>
<li>Understand and navigate the rhythms of the creative process: germination, assimilation, and completion, to effectively bring ideas to fruition.</li>
<li>Build momentum in creative endeavors through continuous practice and learning, recognizing that expertise and the ability to innovate improve over time.</li>
</ul>
</section>
<section id="critical-analysis-2" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-2">Critical Analysis</h3>
<ul>
<li>The narrative challenges the conventional wisdom that creativity is solely a product of favorable conditions, arguing that adversity can also be a powerful catalyst for creative expression.</li>
<li>The story of graffiti’s evolution in East Harlem serves as a metaphor for the potential of creativity to transcend boundaries and alter perceptions in society.</li>
<li>The text critiques the educational system’s failure to nurture the skill of creativity, suggesting that a reevaluation of teaching methods could better prepare individuals for creative thinking and problem-solving.</li>
</ul>
</section>
<section id="future-perspectives-1" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives-1">Future Perspectives</h3>
<ul>
<li>The narrative suggests that recognizing and fostering creativity in unconventional settings could lead to innovative solutions to societal challenges.</li>
<li>There is an implication that the future of education and professional development could benefit from integrating the principles of the creative process, promoting a more holistic approach to problem-solving and innovation.</li>
</ul>
</section>
</section>
<section id="the-orientation-of-the-creative" class="level2">
<h2 class="anchored" data-anchor-id="the-orientation-of-the-creative">The Orientation of the Creative</h2>
<section id="summary-4" class="level3">
<h3 class="anchored" data-anchor-id="summary-4">Summary</h3>
<p>Chapter 5 discusses the difference between reactive/responsive orientation and the creative orientation. It emphasizes that shifting to a creative orientation enables individuals to become the predominant force in their lives, using circumstances as tools rather than being controlled by them. The text explores the essence of creativity, the importance of creating for the sake of love, and the process of making up what one wants to create, as opposed to discovering or revealing it.</p>
</section>
<section id="key-concepts-3" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-3">Key Concepts</h3>
<section id="creative-vs.-reactiveresponsive-orientation" class="level4">
<h4 class="anchored" data-anchor-id="creative-vs.-reactiveresponsive-orientation">Creative vs.&nbsp;Reactive/Responsive Orientation</h4>
<ul>
<li>The creative process is distinct from merely reacting or responding to circumstances.</li>
<li>Being creative involves organizing life around what one wants to create, rather than circumstances.</li>
<li>The transition to a creative orientation is a fundamental shift, not a gradual change.</li>
</ul>
</section>
<section id="the-nature-of-creativity" class="level4">
<h4 class="anchored" data-anchor-id="the-nature-of-creativity">The Nature of Creativity</h4>
<ul>
<li>Creativity is about making up what one wants to create, not discovering or uncovering hidden desires.</li>
<li>Emotions are not the primary driver of creation; creators work with or without positive emotions.</li>
<li>The act of creating is motivated by the desire for the creation itself to exist.</li>
</ul>
</section>
<section id="the-role-of-love-in-creativity" class="level4">
<h4 class="anchored" data-anchor-id="the-role-of-love-in-creativity">The Role of Love in Creativity</h4>
<ul>
<li>True creation is driven by love for the work itself, not for external rewards or recognition.</li>
<li>This concept parallels the unconditional love a parent has for a child, emphasizing creation for its own sake.</li>
</ul>
</section>
<section id="misconceptions-and-societys-influence" class="level4">
<h4 class="anchored" data-anchor-id="misconceptions-and-societys-influence">Misconceptions and Society’s Influence</h4>
<ul>
<li>Society often misunderstands the creative process, focusing on the result rather than the process of creation.</li>
<li>The educational system typically emphasizes learning processes rather than encouraging students to focus on what they want to create.</li>
</ul>
</section>
<section id="the-process-of-creating" class="level4">
<h4 class="anchored" data-anchor-id="the-process-of-creating">The Process of Creating</h4>
<ul>
<li>Creating involves deciding what one wants without being confined by existing conditions or precedents.</li>
<li>The creative process is flexible and can change based on the desired outcome, emphasizing the function over form.</li>
</ul>
</section>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ul>
<li><strong>Embrace a Creative Orientation:</strong> Shift focus from reacting to circumstances to actively creating desired outcomes.</li>
<li><strong>Create for Love, Not Reward:</strong> Engage in creative activities for the inherent satisfaction and love of the process, rather than external validation.</li>
<li><strong>Question and Explore:</strong> Continuously ask “What do I want to create?” to keep the creative process aligned with personal desires and goals.</li>
<li><strong>Allow Flexibility in Process:</strong> Be open to changing processes based on what works best for achieving the desired result, rather than sticking rigidly to preconceived methods.</li>
<li><strong>Cultivate Emotional Independence:</strong> Work towards goals regardless of current emotional states, recognizing that emotions are transient and not the core of creative action.</li>
</ul>
</section>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ul>
<li>The notion that creativity comes from a place of love and intrinsic motivation, rather than external circumstances or rewards.</li>
<li>The creative orientation as a paradigm shift that allows individuals to use circumstances to their advantage rather than being hindered by them.</li>
<li>The importance of making up what one wants to create as a cornerstone of the creative process, challenging the conventional wisdom that creativity involves discovery or revelation.</li>
</ul>
</section>
<section id="facts-1" class="level3">
<h3 class="anchored" data-anchor-id="facts-1">Facts</h3>
<ul>
<li><strong>Historical Perspectives:</strong> The chapter references historical figures like Robert Frost, Albert Einstein, Marie Curie, and Thomas Edison to illustrate different aspects of the creative process.</li>
<li><strong>Educational Critique:</strong> Fritz critiques the educational system for focusing more on teaching processes than on encouraging students to identify and pursue their own creative desires.</li>
<li><strong>Creative Process Insights:</strong> The text provides insights into the creative process, emphasizing the importance of asking “What do I want to create?” over “How do I create it?”</li>
</ul>
</section>
</section>
<section id="tension-seeks-resolution" class="level2">
<h2 class="anchored" data-anchor-id="tension-seeks-resolution">Tension Seeks Resolution</h2>
<section id="summary-5" class="level3">
<h3 class="anchored" data-anchor-id="summary-5">Summary</h3>
<p>Chapter 6 by Robert Fritz discusses the concept of tension seeking resolution and how structures either oscillate or resolve towards a final outcome. The chapter emphasizes the importance of creating structures that resolve in favor of the creation and introduces the concept of tension resolution systems found in nature and human behavior. It highlights the challenges of structural conflict, where competing tension resolution systems cause oscillation and prevent effective resolution.</p>
</section>
<section id="key-concepts-4" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-4">Key Concepts</h3>
<ul>
<li><strong>Tension Seeks Resolution:</strong> A fundamental principle in nature and human behavior where structures naturally move towards resolving tension.</li>
<li><strong>Oscillating vs.&nbsp;Resolving Structures:</strong> Oscillating structures are characterized by recurring patterns without final resolution, while resolving structures move towards a definitive outcome.</li>
<li><strong>Structural Conflict:</strong> Occurs when two tension resolution systems compete, leading to oscillation and preventing a clear path to resolution.</li>
</ul>
</section>
<section id="noteworthy-facts" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts">Noteworthy Facts</h3>
<ul>
<li>Tension resolution systems are ubiquitous in nature, from the formation of galaxies to the behavior of human beings.</li>
<li>Simple tension resolution systems involve a single tension that the structure seeks to resolve, such as the natural tendency to answer a question that has been posed.</li>
<li>Complex tension resolution systems can lead to oscillation, especially when there is a conflict between two competing systems, such as the desire to eat when hungry versus the desire to lose weight.</li>
</ul>
</section>
<section id="practical-implications-3" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-3">Practical Implications</h3>
<ul>
<li>Understanding the nature of structural conflict can help individuals recognize why certain goals or changes are difficult to achieve.</li>
<li>Recognizing the presence of oscillating structures in one’s life can be the first step towards creating resolving structures that support achieving desired outcomes.</li>
</ul>
</section>
<section id="supporting-evidence-1" class="level3">
<h3 class="anchored" data-anchor-id="supporting-evidence-1">Supporting Evidence</h3>
<ul>
<li>Examples provided include the struggle between the desire to eat and the goal to lose weight, and the oscillation faced by corporations balancing short-term profitability and long-term growth investments.</li>
</ul>
</section>
<section id="recommendations-5" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-5">Recommendations</h3>
<ul>
<li>To overcome structural conflict, it’s crucial to identify and adjust the underlying structures rather than focusing solely on changing behaviors or beliefs.</li>
<li>Exploring the creative process can offer ways to form resolving structures that align with one’s goals and desires, moving away from the limitations of oscillating structures.</li>
</ul>
</section>
<section id="additional-insights-2" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-2">Additional Insights</h3>
<ul>
<li>The discussion on the nature of desire versus the belief in the impossibility of fulfilling certain desires highlights a deep-rooted structural conflict many people face, impacting their ability to achieve what they truly want.</li>
</ul>
</section>
<section id="future-perspectives-2" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives-2">Future Perspectives</h3>
<ul>
<li>As we further understand and apply the principles of tension resolution and structural conflict resolution, there’s potential for significant shifts in personal development, organizational behavior, and even societal change. The key lies in our ability to form and sustain resolving structures that align with our deepest desires and creative aspirations.</li>
</ul>
</section>
</section>
<section id="compensating-strategies" class="level2">
<h2 class="anchored" data-anchor-id="compensating-strategies">Compensating Strategies</h2>
<section id="summary-6" class="level3">
<h3 class="anchored" data-anchor-id="summary-6">Summary</h3>
<p>Chapter 7 discusses the concept of compensating strategies developed by individuals to manage structural conflicts in their lives. These strategies are gradually formed as a response to underlying structural issues, leading to oscillation and preventing true resolution and achievement of desired outcomes. Fritz explores three major compensating strategies: staying within an area of tolerable conflict, conflict manipulation, and willpower manipulation, explaining how each strategy ultimately reinforces existing structural conflicts and contributes to a cycle of oscillation.</p>
</section>
<section id="key-concepts-5" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-5">Key Concepts</h3>
<ul>
<li><strong>Structural Conflicts</strong>: Situations where underlying structures in one’s life lead to ongoing problems without resolution.</li>
<li><strong>Compensating Strategies</strong>: Methods individuals develop over time to cope with or temporarily alleviate the symptoms of structural conflicts.</li>
<li><strong>Oscillation</strong>: The back-and-forth movement between wanting something and the structural impediments to achieving it, caused by unresolved structural conflicts.</li>
</ul>
</section>
<section id="compensating-strategies-1" class="level3">
<h3 class="anchored" data-anchor-id="compensating-strategies-1">Compensating Strategies</h3>
<section id="area-of-tolerable-conflict" class="level4">
<h4 class="anchored" data-anchor-id="area-of-tolerable-conflict">Area of Tolerable Conflict</h4>
<ul>
<li>Involves minimizing the impact of structural conflict to keep discomfort within bearable limits, leading to a cycle of limited aspirations and mediocrity.</li>
</ul>
</section>
<section id="conflict-manipulation" class="level4">
<h4 class="anchored" data-anchor-id="conflict-manipulation">Conflict Manipulation</h4>
<ul>
<li>A strategy where individuals motivate themselves or others through the anticipation of negative consequences, leading to temporary action but ultimately reinforcing feelings of powerlessness.</li>
</ul>
</section>
<section id="willpower-manipulation" class="level4">
<h4 class="anchored" data-anchor-id="willpower-manipulation">Willpower Manipulation</h4>
<ul>
<li>Relies on forcing oneself through determination, positive thinking, or other means of self-coercion, often resulting in short-term gains but long-term reinforcement of the structural conflict.</li>
</ul>
</section>
</section>
<section id="implications" class="level3">
<h3 class="anchored" data-anchor-id="implications">Implications</h3>
<ul>
<li><strong>Emotional and Behavioral Oscillation</strong>: The emotional highs and lows and inconsistent behaviors resulting from these strategies, which prevent sustained progress towards goals.</li>
<li><strong>Reinforcement of Structural Conflict</strong>: How each strategy, rather than resolving the underlying issues, actually perpetuates them.</li>
<li><strong>Societal and Personal Impacts</strong>: The widespread adoption of these strategies across various domains of life, including personal development, organizational behavior, and societal norms, leading to a culture of mediocrity and unfulfilled potential.</li>
</ul>
</section>
<section id="recommendations-for-change" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-for-change">Recommendations for Change</h3>
<ul>
<li>Recognizing the Limitations of Compensating Strategies: An acknowledgment of the inherent flaws in these approaches as a first step towards real change.</li>
<li>Structural Change as a Precondition for Behavioral Change: Emphasizing the need to address and modify underlying structures before lasting behavioral change can occur.</li>
<li>Exploring Alternative Structures: The importance of shifting to new structures that genuinely support the achievement of desired outcomes, moving away from the reactive patterns dictated by structural conflicts.</li>
</ul>
</section>
<section id="reflections-on-positive-thinking-and-willpower" class="level3">
<h3 class="anchored" data-anchor-id="reflections-on-positive-thinking-and-willpower">Reflections on Positive Thinking and Willpower</h3>
<ul>
<li>Critique of Positive Thinking: The counterproductive nature of trying to force a positive outlook without addressing underlying structural issues.</li>
<li>The Role of Truth and Reality in Creative Processes: Highlighting the necessity for a clear and honest assessment of one’s situation as a foundation for effective creation and change.</li>
</ul>
</section>
</section>
<section id="structural-tension" class="level2">
<h2 class="anchored" data-anchor-id="structural-tension">Structural Tension</h2>
<section id="summary-7" class="level3">
<h3 class="anchored" data-anchor-id="summary-7">Summary</h3>
<p>Chapter 8 discusses the concept of structural tension in the creative process. It highlights the importance of recognizing and utilizing the discrepancy between current reality and the desired outcome to fuel creativity. The chapter argues that attempts to change within a structure of conflict lead to oscillation and compensation, suggesting instead the formation of a new structure that transcends structural conflict. This new structure should simplify complex structures and prioritize the creator’s vision, using the energy of discrepancy to drive creation.</p>
</section>
<section id="key-concepts-6" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-6">Key Concepts</h3>
<ul>
<li><strong>Structural Tension:</strong> The discrepancy between what you want (vision) and what you currently have (reality), which forms the basis of the creative process.</li>
<li><strong>Structural Conflict:</strong> A condition where efforts to change are trapped within conflicting structures, leading to oscillation and ineffective outcomes.</li>
<li><strong>Discrepancy as Creative Force:</strong> Emphasizes the role of discrepancy as a positive force in creation, contrary to common perceptions that view it negatively.</li>
</ul>
</section>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ul>
<li>Structural tension is essential for creativity, acting both as the framework and the driving force of the creative process.</li>
<li>Creators must learn to appreciate and utilize discrepancy, seeing it as a source of energy rather than a problem to avoid.</li>
<li>The ability to accurately perceive and articulate both one’s vision and current reality is crucial for generating and maintaining structural tension.</li>
<li>Mastery of structural tension is a developed skill and an acquired taste, improving over time with practice and experience.</li>
</ul>
</section>
<section id="facts-2" class="level3">
<h3 class="anchored" data-anchor-id="facts-2">Facts</h3>
<ul>
<li>Most attempts at change within existing structures of conflict result in compensation and oscillation, not genuine transformation.</li>
<li>A structure superior to structural conflict incorporates the conflict into itself and simplifies complex structures.</li>
<li>Creators have a higher tolerance for discrepancy compared to others, using it as a tool in the creative process.</li>
<li>The process of creation involves navigating forces like contrasts, opposites, similarities, and differences, with discrepancy being a key element.</li>
</ul>
</section>
<section id="recommendations-6" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-6">Recommendations</h3>
<ul>
<li>Cultivate an understanding and appreciation for the role of discrepancy in the creative process.</li>
<li>Practice forming and maintaining structural tension by clearly defining your vision and accurately assessing your current reality.</li>
<li>Avoid weakening structural tension by misrepresenting your desires or the current state of affairs.</li>
<li>Engage actively with the creative process, using the energy generated by discrepancy to propel your efforts towards realizing your vision.</li>
<li>Be wary of common pitfalls that reduce structural tension, such as compromising your vision or inaccurately assessing reality.</li>
<li>Experiment and test the boundaries of what is possible, rather than imposing limitations on yourself prematurely.</li>
</ul>
</section>
<section id="critical-analysis-3" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-3">Critical Analysis</h3>
<ul>
<li>The concept of structural tension challenges conventional attitudes towards discrepancy and conflict in the creative process, proposing a paradigm where these elements are not only inevitable but beneficial.</li>
<li>The emphasis on the dynamic interplay between vision and reality offers a practical framework for navigating the complexities of creation, though it requires significant self-awareness and honesty.</li>
<li>Fritz’s ideas invite a reevaluation of societal norms around goal-setting and achievement, advocating for a more nuanced understanding of the creative process that accommodates uncertainty and embraces potential failure as part of the journey towards innovation.</li>
</ul>
</section>
<section id="future-perspectives-3" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives-3">Future Perspectives</h3>
<ul>
<li>Exploring the implications of structural tension in collaborative and organizational settings could offer valuable insights into how groups can harness collective creativity and navigate structural conflicts effectively.</li>
<li>Further research into the psychological and social factors that influence an individual’s capacity to tolerate and utilize discrepancy could enhance the applicability of Fritz’s theories across diverse contexts.</li>
</ul>
</section>
</section>
<section id="vision" class="level2">
<h2 class="anchored" data-anchor-id="vision">Vision</h2>
<section id="summary-8" class="level3">
<h3 class="anchored" data-anchor-id="summary-8">Summary</h3>
<p>Chapter 9 emphasizes beginning the creative process with a clear vision of the desired outcome, a practice contrary to conventional education that focuses on procedural learning before understanding the ultimate goal. This approach fosters purpose and direction in learning and creation.</p>
</section>
<section id="ideas-4" class="level3">
<h3 class="anchored" data-anchor-id="ideas-4">Ideas</h3>
<ul>
<li><strong>Begin with the End in Mind</strong>: Starting the creative process with a vision of the final result enhances focus and effectiveness.</li>
<li><strong>Blank Canvas Approach</strong>: Conceiving new ideas effectively starts from a position of openness, without preconceived notions.</li>
<li><strong>Visual Thinking</strong>: Visualizing the desired outcome can aid in comprehensively understanding and planning the creation.</li>
<li><strong>Flexibility in Creativity</strong>: While some creators work with clear visions, others discover their path through experimentation, highlighting the diverse methods in the creative process.</li>
<li><strong>Concept vs.&nbsp;Vision</strong>: Transitioning from a broad concept to a specific, focused vision is a critical step in creation, emphasizing the importance of clarity and specificity.</li>
<li><strong>Knowing What You Want</strong>: Asking oneself what one truly desires is foundational in creating a vision and setting the stage for effective creation.</li>
</ul>
</section>
<section id="facts-3" class="level3">
<h3 class="anchored" data-anchor-id="facts-3">Facts</h3>
<ul>
<li><strong>Educational System Focus</strong>: Traditional education prioritizes procedural learning over conceptual understanding or vision-setting.</li>
<li><strong>Visual Literacy</strong>: People can learn to become visually literate, enhancing their ability to visualize and create desired outcomes.</li>
<li><strong>Creative Confidence</strong>: Confidence in one’s vision can exist irrespective of personal insecurities, underlining the power of a clear creative vision.</li>
<li><strong>Process vs.&nbsp;Outcome</strong>: Distinguishing between the creative process and the clarity of the desired outcome is essential; clarity in vision does not necessitate a detailed understanding of the process to achieve it.</li>
<li><strong>Creativity and Possibility</strong>: Envisioning what one wants without being constrained by perceived limitations or possibilities is crucial for breakthroughs in creativity.</li>
</ul>
</section>
<section id="recommendations-7" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-7">Recommendations</h3>
<ul>
<li><strong>Cultivate a Clear Vision</strong>: Practice forming a clear and detailed vision of what you want to achieve to guide your creative endeavors.</li>
<li><strong>Embrace Visual Thinking</strong>: Regardless of natural inclination, work on visualizing your goals to enhance planning and realization of your projects.</li>
<li><strong>Separate Concept from Vision</strong>: Distinguish between the broad strokes of your concept and the focused clarity of your vision to refine your creative process.</li>
<li><strong>Challenge Educational Norms</strong>: Question and expand beyond traditional educational models that prioritize procedural knowledge over creative vision.</li>
<li><strong>Practice Decisiveness</strong>: Regularly ask yourself what you truly want, in various contexts, to build decisiveness and clarity in your desires and objectives.</li>
<li><strong>Think Beyond Possibilities</strong>: Allow yourself to envision desires and outcomes without being limited by current capabilities or perceived realities.</li>
</ul>
</section>
<section id="additional-insights-3" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-3">Additional Insights</h3>
<ul>
<li><strong>Visual vs.&nbsp;Aural vs.&nbsp;Kinesthetic Learners</strong>: While individuals may have a natural inclination towards one learning style, flexibility and development in other styles can enhance creative abilities.</li>
<li><strong>Creative Rituals</strong>: Some artists, like Jackson Pollock, utilize unique rituals to balance structure and spontaneity in their creative process, demonstrating the diverse methods of achieving artistic vision.</li>
<li><strong>Vision as an Organizing Principle</strong>: A clear vision not only guides the creation process but also organizes actions, values, and perceptions of reality, showcasing the transformative power of a well-defined goal.</li>
</ul>
<p>By focusing on the end goal and cultivating a clear vision, individuals can navigate the creative process more effectively, transcending traditional educational limitations and exploring new possibilities in their creative endeavors.</p>
</section>
</section>
<section id="current-reality" class="level2">
<h2 class="anchored" data-anchor-id="current-reality">Current Reality</h2>
<section id="summary-9" class="level3">
<h3 class="anchored" data-anchor-id="summary-9">Summary</h3>
<p>Chapter 10 explores the concept of reality and the importance of accurately perceiving it. Through anecdotes and philosophical discussions, it argues that misrepresenting reality or holding onto past realities can hinder personal growth and creativity. The text emphasizes the need for individuals to confront and accept reality as it is, without biases or preconceived notions, to live fully and creatively.</p>
</section>
<section id="key-concepts-7" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-7">Key Concepts</h3>
<ul>
<li><strong>Reality vs.&nbsp;Perception</strong>: Differentiates between actual reality and how individuals perceive or conceptualize it.</li>
<li><strong>The Importance of Accepting Reality</strong>: Stresses that acknowledging and accepting reality is crucial for personal development and creativity.</li>
<li><strong>Misrepresentation of Reality</strong>: Discusses how people often misrepresent reality to avoid negative consequences or due to biases.</li>
</ul>
</section>
<section id="ideas-5" class="level3">
<h3 class="anchored" data-anchor-id="ideas-5">Ideas</h3>
<ul>
<li>Reality is subjective and often clouded by personal biases and preconceived notions.</li>
<li>Accurately perceiving and accepting reality is essential for creative and personal growth.</li>
<li>Misrepresenting reality, whether to oneself or others, can have detrimental effects on one’s life and society.</li>
</ul>
</section>
<section id="noteworthy-facts-1" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-1">Noteworthy Facts</h3>
<ul>
<li>The story of the man who thought he was a zombie highlights the difficulty of changing one’s perception of reality.</li>
<li>Children learn to lie as a defense against authority, showing early encounters with the concept of altering reality.</li>
<li>Societal norms often encourage the misrepresentation of reality through excuses and reasons for failure.</li>
</ul>
</section>
<section id="practical-implications-4" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-4">Practical Implications</h3>
<ul>
<li>Understanding and accepting reality is crucial for effective decision-making and problem-solving.</li>
<li>Creativity and innovation thrive in environments where reality is accurately perceived and accepted.</li>
<li>Personal relationships can benefit from a mutual acceptance of reality, avoiding misunderstandings and conflicts.</li>
</ul>
</section>
<section id="recommendations-8" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-8">Recommendations</h3>
<ul>
<li>Practice observing reality without letting preconceived notions or biases cloud judgment.</li>
<li>Encourage open discussions about reality and perceptions to foster understanding and creativity.</li>
<li>In personal and professional settings, prioritize honesty and transparency to ensure a shared perception of reality.</li>
</ul>
</section>
<section id="critical-analysis-4" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-4">Critical Analysis</h3>
<ul>
<li>The chapter challenges the notion that altering one’s perception of reality is always negative, suggesting that creative processes often require a reimagining of reality.</li>
<li>It also prompts a reflection on the societal and cultural factors that influence our perception of reality and how these can be navigated or changed.</li>
</ul>
</section>
<section id="additional-insights-4" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-4">Additional Insights</h3>
<ul>
<li>The analogy of art students learning to see colors as they truly are serves as a powerful metaphor for the broader challenge of seeing reality without the filter of our expectations or desires.</li>
<li>The distinction between using reasons for failure as learning experiences versus excuses highlights a fundamental approach to life and success.</li>
</ul>
</section>
</section>
<section id="the-creative-cycle" class="level2">
<h2 class="anchored" data-anchor-id="the-creative-cycle">The Creative Cycle</h2>
<section id="summary-10" class="level3">
<h3 class="anchored" data-anchor-id="summary-10">Summary</h3>
<p>Chapter 11 discusses the three stages of the creative cycle: germination, assimilation, and completion. Each stage plays a crucial role in the growth and life-building process, mirroring natural and organic cycles such as the human birth cycle.</p>
</section>
<section id="germination" class="level3">
<h3 class="anchored" data-anchor-id="germination">Germination</h3>
<ul>
<li>Germination is the initial burst of energy at the beginning of a creative process, characterized by excitement and enthusiasm.</li>
<li>Notable individuals like Roger Sessions and Alfred Hitchcock thrived on this energy during the conceptual phase of their work.</li>
<li>The chapter emphasizes that while germination is important, focusing solely on this stage without progressing to the others results in fleeting experiences and unfulfilled potential.</li>
<li>It suggests that the addiction to the excitement of new beginnings can prevent sustained growth and achievement.</li>
</ul>
</section>
<section id="assimilation" class="level3">
<h3 class="anchored" data-anchor-id="assimilation">Assimilation</h3>
<ul>
<li>Assimilation represents the internalization and development phase, akin to gestation, where the creative work or idea grows organically.</li>
<li>This stage is marked by subconscious work and the emergence of the creation’s tangible aspects, often accompanied by a deepening connection with the vision or idea.</li>
<li>Insights, ideas, and momentum build during assimilation, making the creation more concrete and integrated with the creator’s identity.</li>
<li>The chapter highlights the hidden, yet essential nature of this stage, using examples from Mozart, Gertrude Stein, and Jules-Henri Poincaré to illustrate the importance of internal, often subconscious, development.</li>
</ul>
</section>
<section id="completion" class="level3">
<h3 class="anchored" data-anchor-id="completion">Completion</h3>
<ul>
<li>Completion involves finalizing the creative work, manifesting it fully, and learning to live with the result.</li>
<li>This stage is characterized by the ability to bring creative activities to fruition and the capacity to receive and appreciate the outcomes.</li>
<li>The chapter notes that many struggle with this stage, failing to finalize their creative endeavors, and underscores the importance of mastering the ability to complete projects.</li>
<li>Completion is also about releasing the creation to the world and accepting it as a separate entity, akin to a parent letting go of a grown child.</li>
</ul>
</section>
<section id="moving-forward" class="level3">
<h3 class="anchored" data-anchor-id="moving-forward">Moving Forward</h3>
<ul>
<li>Each stage of the creative cycle generates specific energy that propels the creator into the next stage, forming a continuous loop of creation.</li>
<li>The energy from completion fuels the genesis of new ideas, illustrating the self-renewing nature of creative energy.</li>
<li>Understanding and harnessing the energy inherent in each stage is crucial for sustained creative success.</li>
</ul>
</section>
<section id="critical-analysis-5" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-5">Critical Analysis</h3>
<ul>
<li>The chapter provides a comprehensive framework for understanding the creative process, emphasizing the importance of progressing through all three stages for meaningful and lasting creation.</li>
<li>It challenges common misconceptions about creativity being solely about the initial spark, highlighting the significance of development, refinement, and completion.</li>
<li>The use of examples from various fields illustrates the universal applicability of the creative cycle, offering valuable insights for creators across disciplines.</li>
</ul>
</section>
<section id="recommendations-9" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-9">Recommendations</h3>
<ul>
<li>Embrace the excitement of germination but recognize the need to progress beyond this initial stage.</li>
<li>Dedicate time and effort to the assimilation stage, allowing ideas to develop fully and integrate with your identity.</li>
<li>Cultivate the skills and mindset necessary to bring creative projects to completion, overcoming barriers to finalization.</li>
<li>Reflect on completed projects as sources of inspiration and energy for future creative endeavors, thus engaging in the continuous loop of creation.</li>
</ul>
</section>
</section>
<section id="germination-and-choice" class="level2">
<h2 class="anchored" data-anchor-id="germination-and-choice">Germination and Choice</h2>
<section id="summary-11" class="level3">
<h3 class="anchored" data-anchor-id="summary-11">Summary</h3>
<p>Chapter 12 explores the concept of making effective choices as a crucial component of the creative process. It emphasizes the importance of focusing choices on desired results to mobilize energies and resources, highlights common pitfalls in decision-making, and provides insights into developing a more strategic and creative orientation towards making choices.</p>
</section>
<section id="key-concepts-8" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-8">Key Concepts</h3>
<ul>
<li><strong>Making Choices</strong>: Choosing focuses on desired results, mobilizing untapped energies.</li>
<li><strong>Learning to Choose</strong>: Effective decision-making can be practiced and refined.</li>
<li><strong>The Creative Process</strong>: Making choices is vital in creativity, involving strategic decisions and improvisation.</li>
<li><strong>Avoiding Ineffective Choices</strong>: Identifies eight ways people undermine their decision-making power.
<ol type="1">
<li>Choice by Limitation: Choosing only what seems possible or reasonable.</li>
<li>Choice by Indirectness: Choosing the process instead of the result.</li>
<li>Choice by Elimination: Eliminating all other possibilities so that only one choice remains.</li>
<li>Choice by Default: The choice not to make a choice, so that whatever results happen seem to occur without choice.</li>
<li>Conditional Choice: Imposing preconditions on choices</li>
<li>Choice by Reaction: Choice is designed to overcome a conflict</li>
<li>Choice by Consensus: Choosing by finding out what everyone else is willing to recommend and following the results of that poll</li>
<li>Choice by Adverse Possession: Choice based on a hazy metaphysical notion about the nature of the universe</li>
</ol></li>
</ul>
</section>
<section id="ideas-6" class="level3">
<h3 class="anchored" data-anchor-id="ideas-6">Ideas</h3>
<ul>
<li>Making effective choices involves clearly identifying what you want to create and mobilizing resources towards that goal.</li>
<li>Practicing decision-making in low-risk situations can improve one’s ability to make better choices.</li>
<li>Creativity and choice-making are closely linked; being decisive can enhance one’s creative abilities.</li>
<li>Education and upbringing often neglect the development of choice-making skills, impacting personal and societal well-being.</li>
</ul>
</section>
<section id="noteworthy-facts-2" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-2">Noteworthy Facts</h3>
<ul>
<li>The author shares personal anecdotes to illustrate the importance and impact of learning to make effective choices.</li>
<li>The chapter references Karlheinz Stockhausen’s view on composing as an exercise in decision-making.</li>
<li>The text criticizes traditional education for not adequately preparing individuals to make empowering choices.</li>
</ul>
</section>
<section id="practical-implications-5" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-5">Practical Implications</h3>
<ul>
<li>Practicing quick, low-risk decision-making can build confidence and improve one’s ability to make more significant choices.</li>
<li>Recognizing and avoiding the eight common pitfalls in decision-making can lead to more effective choices.</li>
<li>Focusing on creating positive outcomes rather than avoiding negative ones establishes a more constructive and creative orientation towards life.</li>
</ul>
</section>
<section id="recommendations-10" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-10">Recommendations</h3>
<ul>
<li>Practice making decisions quickly in everyday situations to develop a sharper instinct for what you truly want.</li>
<li>Reflect on past decisions to understand your decision-making patterns and areas for improvement.</li>
<li>Educate and encourage children and young adults to make choices, fostering a sense of autonomy and responsibility.</li>
<li>Regularly reassess your goals and the choices you’re making to ensure they align with what you truly want to create in your life.</li>
</ul>
</section>
<section id="critical-analysis-6" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-6">Critical Analysis</h3>
<ul>
<li>The chapter challenges conventional attitudes towards decision-making and creativity, advocating for a more proactive and strategic approach.</li>
<li>By dissecting common ineffective choice-making strategies, it provides a clear framework for understanding and improving one’s decision-making skills.</li>
<li>The emphasis on practice and experimentation as methods to enhance decision-making abilities highlights the process-oriented nature of personal growth.</li>
</ul>
</section>
<section id="additional-insights-5" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-5">Additional Insights</h3>
<ul>
<li>The discussion on choice and power reveals a deeper philosophical perspective on autonomy and self-determination.</li>
<li>The text suggests that societal and educational systems could benefit from integrating choice-making skills into their curriculums to prepare individuals for a more successful and fulfilling life.</li>
<li>The contrast between choosing from a place of fear versus a place of desire offers a valuable lens through which to view personal motivations and behaviors.</li>
</ul>
</section>
</section>
<section id="primary-secondary-and-fundamental-choice" class="level2">
<h2 class="anchored" data-anchor-id="primary-secondary-and-fundamental-choice">Primary, Secondary, and Fundamental Choice</h2>
<section id="summary-12" class="level3">
<h3 class="anchored" data-anchor-id="summary-12">Summary</h3>
<p>Chapter 13 discusses three types of choices: primary, secondary, and fundamental choices, which are strategic elements in the creative process. Primary choices are about major results one directly desires. Secondary choices support achieving the primary choices. Fundamental choices relate to one’s state of being or basic life orientation, acting as a foundation upon which primary and secondary choices rest.</p>
</section>
<section id="primary-choice" class="level3">
<h3 class="anchored" data-anchor-id="primary-choice">Primary Choice</h3>
<ul>
<li>Primary choices are about achieving specific results for their own sake, not as means to other ends.</li>
<li>They can be professional or personal, like choosing to be an effective manager, creating a work of art, or having a meaningful job.</li>
<li>The importance of primary choices is highlighted through examples, including inventors and artists who pursue their work for the joy and fulfillment it brings, not for financial or external rewards.</li>
</ul>
</section>
<section id="secondary-choice" class="level3">
<h3 class="anchored" data-anchor-id="secondary-choice">Secondary Choice</h3>
<ul>
<li>Secondary choices are steps taken to support and achieve the primary choice.</li>
<li>They are strategic and clear once the primary choice is made, often requiring daily decisions that align with one’s main goal, like choosing to exercise regularly to achieve a well-toned body.</li>
<li>Secondary choices demonstrate commitment to the primary goal, making sacrifices and decisions that directly support achieving the desired result.</li>
</ul>
</section>
<section id="fundamental-choice" class="level3">
<h3 class="anchored" data-anchor-id="fundamental-choice">Fundamental Choice</h3>
<ul>
<li>Fundamental choices concern one’s basic life orientation or state of being, like choosing to be healthy, free, or true to oneself.</li>
<li>They provide a foundation for making primary and secondary choices, influencing overall life direction and the fulfillment of specific goals.</li>
<li>Success and the direction of one’s life are not necessarily determined by early achievements but by these fundamental choices that guide personal and professional growth.</li>
</ul>
</section>
<section id="making-choices" class="level3">
<h3 class="anchored" data-anchor-id="making-choices">Making Choices</h3>
<ul>
<li>The process of making choices involves identifying what one truly wants (primary choice), taking steps towards it (secondary choice), and aligning these actions with a basic life orientation or state of being (fundamental choice).</li>
<li>To make effective choices, one must be honest about desires, prioritize them, and be willing to commit to actions that support these choices, whether they are long-term goals or daily decisions.</li>
<li>Fundamental choices require deep introspection and a commitment to a desired state of being, independent of external circumstances or immediate outcomes.</li>
</ul>
</section>
<section id="practical-steps" class="level3">
<h3 class="anchored" data-anchor-id="practical-steps">Practical Steps</h3>
<ol type="1">
<li><strong>List Making</strong>: Create a comprehensive list of everything you want, encompassing personal and professional desires without considering their feasibility.</li>
<li><strong>Choice Verification</strong>: Review each item by asking if you would take it if you could, adjusting the list based on true desires.</li>
<li><strong>Formal Choosing</strong>: Formally choose each item you truly want, marking the first step in the creative process towards achieving these goals.</li>
<li><strong>Secondary Support</strong>: Identify and commit to secondary choices that support your primary choices, aligning actions with goals.</li>
<li><strong>Fundamental Orientation</strong>: Reflect on and make fundamental choices about your basic life orientation, like choosing to be the predominant creative force in your own life.</li>
</ol>
</section>
<section id="the-impact-of-choices" class="level3">
<h3 class="anchored" data-anchor-id="the-impact-of-choices">The Impact of Choices</h3>
<ul>
<li>Making informed and genuine primary, secondary, and fundamental choices reorganizes life towards achieving desired results and fulfilling a preferred state of being.</li>
<li>These choices influence daily decisions, long-term goals, and the overall direction of one’s life, highlighting the power of creative orientation in personal development and achievement.</li>
</ul>
</section>
</section>
<section id="assimilation-1" class="level2">
<h2 class="anchored" data-anchor-id="assimilation-1">Assimilation</h2>
<section id="summary-13" class="level3">
<h3 class="anchored" data-anchor-id="summary-13">Summary</h3>
<p>Chapter 14 explores the concept of assimilation, a critical stage of growth and development following germination. It delves into how assimilation is a natural part of learning and development, emphasizing its importance in incorporating new skills and knowledge into our lives seamlessly. The chapter also highlights common challenges during the assimilation phase, such as frustration and the temptation to give up when progress is not immediately visible.</p>
</section>
<section id="key-concepts-9" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-9">Key Concepts</h3>
<ul>
<li><strong>Assimilation:</strong> The process of incorporating new skills and knowledge, making them a natural part of ourselves.</li>
<li><strong>Structural Tension:</strong> The discrepancy between current reality and the desired result, which drives the creative process.</li>
<li><strong>Embodiment:</strong> Living in alignment with one’s vision, beyond mere behavior, embodying the values and principles one stands for.</li>
<li><strong>Internalizing and Externalizing Phases:</strong> The two phases of assimilation, where learning is internalized and then expressed outwardly.</li>
</ul>
</section>
<section id="ideas-7" class="level3">
<h3 class="anchored" data-anchor-id="ideas-7">Ideas</h3>
<ul>
<li>Assimilation is an ongoing process throughout life, used in learning various skills from walking to professional expertise.</li>
<li>Progress in the assimilation stage may not be immediately visible, leading to feelings of frustration and the temptation to abandon efforts.</li>
<li>Understanding and patience during periods where “nothing seems to be happening” are crucial in the creative orientation.</li>
<li>Experiences of learning, such as falling off a bicycle, are moments of assimilation and not failure.</li>
<li>Moving to the next step even when feeling unprepared can enhance assimilation and learning.</li>
</ul>
</section>
<section id="noteworthy-facts-3" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-3">Noteworthy Facts</h3>
<ul>
<li>Assimilation is poorly understood despite its universal experience.</li>
<li>Emotional experiences of discomfort, frustration, and disappointment are common at the start of assimilation.</li>
<li>The creative process includes continual learning and deepening assimilation, enabling easier internalization of future learnings.</li>
<li>Assimilation contributes to structural tension by highlighting the gap between current reality and desired outcomes.</li>
</ul>
</section>
<section id="practical-implications-6" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-6">Practical Implications</h3>
<ul>
<li>Recognizing and respecting the assimilation phase can prevent premature abandonment of learning and development efforts.</li>
<li>Embracing the challenges and frustrations of early assimilation stages can lead to deeper learning and mastery.</li>
<li>Practitioners can foster assimilation by pushing boundaries and embracing more challenging tasks before perfecting current ones.</li>
<li>Understanding the internal and external phases of assimilation can enhance the ability to learn and apply new skills effectively.</li>
</ul>
</section>
<section id="recommendations-11" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-11">Recommendations</h3>
<ul>
<li>Cultivate patience and maintain effort during the invisible stages of growth to ensure continued development and mastery of new skills.</li>
<li>Embrace challenging tasks as opportunities for deeper assimilation and learning.</li>
<li>Foster an environment that encourages experimentation and learning from errors as part of the assimilation process.</li>
<li>Recognize and respect the natural cycles of growth, decay, and renewal in personal and professional life, aligning actions with these cycles for effective change and development.</li>
<li>Practice embodiment of values and visions to deepen assimilation and impact both personal growth and external achievements.</li>
</ul>
</section>
<section id="critical-analysis-7" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-7">Critical Analysis</h3>
<ul>
<li>The chapter challenges common perceptions of learning and development, emphasizing the importance of unseen stages of growth. It invites a reevaluation of how progress and success are measured, advocating for a broader understanding of learning that includes the value of setbacks and challenges as integral to the process.</li>
</ul>
</section>
<section id="additional-insights-6" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-6">Additional Insights</h3>
<ul>
<li>Assimilation as an organic process mirrors natural cycles, reminding us of the importance of aligning with these rhythms in our creative and learning endeavors.</li>
<li>The concept of embodiment as described by the experiences of historical figures like Martin Luther King Jr.&nbsp;underscores the transformative power of living in alignment with deeply held values and visions.</li>
</ul>
</section>
</section>
<section id="momentum" class="level2">
<h2 class="anchored" data-anchor-id="momentum">Momentum</h2>
<section id="summary-14" class="level3">
<h3 class="anchored" data-anchor-id="summary-14">Summary</h3>
<p>Chapter 15 explores how the process of assimilation builds momentum in learning and creative endeavors. It argues that mastering a skill or area of knowledge involves a graduated, organic process where earlier steps facilitate the assimilation of subsequent, more advanced steps, leading to exponential growth and easier learning over time. This process applies across various fields, including mathematics, sports, and the arts, and is crucial for personal and creative growth.</p>
</section>
<section id="key-concepts-10" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-10">Key Concepts</h3>
<ul>
<li><strong>Assimilation as a Graduated Process</strong>: Learning builds upon itself in a step-by-step manner, creating momentum.</li>
<li><strong>Momentum Through Learning</strong>: Early mastery leads to easier assimilation of advanced concepts, enhancing creative output and personal growth.</li>
<li><strong>The Role of Experience in Creating</strong>: Real accomplishment, rather than affirmations or self-hypnosis, instills confidence and a sense of capability.</li>
<li><strong>Continuous Learning and Mastery</strong>: Mastery in any field, including creativity, is a long-term process requiring ongoing learning and application.</li>
</ul>
</section>
<section id="practical-implications-7" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-7">Practical Implications</h3>
<ul>
<li>Learning one skill makes it easier to learn others, thanks to the process of assimilation.</li>
<li>Real confidence comes from actual achievements, not just positive thinking or affirmations.</li>
<li>Mastery takes time and is built on the accumulation of experiences and successes.</li>
</ul>
</section>
<section id="supporting-evidence-2" class="level3">
<h3 class="anchored" data-anchor-id="supporting-evidence-2">Supporting Evidence</h3>
<ul>
<li>Examples of individuals mastering languages, arts, and inventions illustrate how initial successes build momentum for further achievements.</li>
<li>The story of a successful entrepreneur demonstrates how small successes can lead to larger accomplishments through the strategic building of momentum.</li>
</ul>
</section>
<section id="recommendations-12" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-12">Recommendations</h3>
<ul>
<li><strong>Focus on Early Mastery</strong>: Concentrate on fully understanding and mastering early steps in any learning process to facilitate easier assimilation of advanced concepts.</li>
<li><strong>Learn from Every Outcome</strong>: Treat both successes and failures as learning opportunities to build momentum in your creative endeavors.</li>
<li><strong>Embrace the Long-Term Process</strong>: Recognize that mastery and creative achievement are not instantaneous but require sustained effort and learning.</li>
</ul>
</section>
<section id="additional-insights-7" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-7">Additional Insights</h3>
<ul>
<li>The concept of <strong>Structural Tension</strong> is highlighted as a key to mastering the creative process, where one must balance the vision of the desired outcome with the reality of the current situation to effectively navigate towards goals.</li>
<li>The narrative counters the notion of quick fixes or instant success, advocating for a deep, methodical approach to personal and creative development.</li>
</ul>
</section>
<section id="critical-analysis-8" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-8">Critical Analysis</h3>
<ul>
<li>Fritz challenges the prevalent culture of instant gratification, emphasizing the importance of persistence, patience, and a systematic approach to learning and creativity.</li>
<li>The chapter demystifies the creative process, showing it as accessible and achievable through structured effort rather than innate talent or luck.</li>
</ul>
</section>
</section>
<section id="strategic-moments" class="level2">
<h2 class="anchored" data-anchor-id="strategic-moments">Strategic Moments</h2>
<section id="summary-15" class="level3">
<h3 class="anchored" data-anchor-id="summary-15">Summary</h3>
<p>Chapter 16 discusses the concept of strategic moments in the creative process, emphasizing times when progress seems stalled or regressing. It illustrates the importance of recognizing and navigating these moments to achieve ultimate success. Using metaphors like a novice hiker’s journey and various personal and professional scenarios, it explores themes of perception, reality, and the significance of understanding and adapting to current circumstances.</p>
</section>
<section id="key-concepts-11" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-11">Key Concepts</h3>
<ul>
<li><strong>Strategic Moments</strong>: Periods where it appears no progress is made, critical for eventual success.</li>
<li><strong>Time Delay</strong>: The lag between initiating change and seeing results, which can lead to prematurely abandoning effective actions.</li>
<li><strong>Current Reality</strong>: The importance of accurately recognizing and accepting the present situation without resentment to leverage it creatively.</li>
<li><strong>Structural Tension</strong>: The gap between current reality and the desired outcome, serving as a driving force in the creative process.</li>
</ul>
</section>
<section id="practical-implications-8" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-8">Practical Implications</h3>
<ul>
<li>Recognizing strategic moments allows for better decision-making and perseverance through challenges.</li>
<li>Understanding time delays can prevent discouragement and cessation of effective actions.</li>
<li>Accurately assessing current reality enables more effective planning and action.</li>
<li>Leveraging structural tension can catalyze creativity and progress toward goals.</li>
</ul>
</section>
<section id="supporting-evidence-3" class="level3">
<h3 class="anchored" data-anchor-id="supporting-evidence-3">Supporting Evidence</h3>
<ul>
<li>The novice hiker’s misunderstanding of his proximity to the goal illustrates how misperceptions can occur during strategic moments.</li>
<li>The examples of the corporate executive and the assembly line training demonstrate real-world implications of time delays and misinterpretation of current reality.</li>
<li>Personal stories, like the young woman adjusting to city life, highlight the difficulties in recognizing and adapting to new realities.</li>
</ul>
</section>
<section id="recommendations-13" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-13">Recommendations</h3>
<ul>
<li><p><strong>For Individuals</strong>: Cultivate awareness of strategic moments and time delays in personal growth and creative endeavors. Practice accurately assessing and accepting current reality without resentment.</p></li>
<li><p><strong>For Leaders and Managers</strong>: Implement strategies that account for time delays in seeing results from changes or initiatives. Encourage teams to maintain actions that align with long-term goals, even when immediate results are not visible.</p></li>
<li><p><strong>For Creatives</strong>: Use the concept of structural tension as a tool to drive creative processes. Recognize and adapt to shifts in current reality to maintain momentum towards achieving creative goals.</p></li>
<li><p><strong>Navigating Strategic Moments</strong>:</p>
<ul>
<li>Pause and reassess both the goal and the current position regularly.</li>
<li>Maintain flexibility in methods while keeping the end goal clear.</li>
</ul></li>
<li><p><strong>Dealing with Delays</strong>:</p>
<ul>
<li>Cultivate patience and understand the natural lag between effort and outcome.</li>
<li>Continuously evaluate and adjust actions based on emerging results, not immediate feedback.</li>
</ul></li>
<li><p><strong>Current Reality Assessment</strong>:</p>
<ul>
<li>Practice objective evaluation of situations without letting emotions cloud judgment.</li>
<li>Use difficulties and unplanned events as feedback to refine strategies and actions.</li>
</ul></li>
<li><p><strong>Utilizing the Pivotal Technique</strong>:</p>
<ul>
<li>Clearly define the current state and desired outcome.</li>
<li>Formally choose the desired outcome, regardless of perceived obstacles.</li>
<li>Shift focus after establishing structural tension to allow subconscious processing and creativity.</li>
</ul></li>
<li><p><strong>Embracing Unwanted Situations</strong>:</p>
<ul>
<li>View challenges as opportunities to clarify and reaffirm goals.</li>
<li>Develop resilience and adaptability by embracing reality and using it as a springboard for creative action.</li>
</ul></li>
</ul>
</section>
<section id="critical-analysis-9" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-9">Critical Analysis</h3>
<ul>
<li>The emphasis on individual perception and internal processes may underplay external factors and constraints that also significantly impact goal attainment. Balancing internal strategies with external realities could provide a more holistic approach to creative problem-solving and goal achievement.</li>
</ul>
</section>
<section id="additional-insights-8" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-8">Additional Insights</h3>
<ul>
<li>The pivotal technique outlined offers a structured approach to leveraging unwanted circumstances for creative advantage. This technique emphasizes the importance of clarity in defining current reality and desired outcomes, choosing the latter explicitly, and then moving forward with an open mind to new possibilities and solutions.</li>
</ul>
</section>
</section>
<section id="completion-1" class="level2">
<h2 class="anchored" data-anchor-id="completion-1">Completion</h2>
<section id="summary-16" class="level3">
<h3 class="anchored" data-anchor-id="summary-16">Summary</h3>
<p>Chapter 17 explores the final stage of the creative cycle, emphasizing the full realization of one’s vision. It delves into the psychological dynamics associated with completion, including the paradoxical anxiety akin to the “Prisoner Syndrome” and the contrasting feelings of fulfillment and depression that can accompany the completion of creative endeavors. The chapter further discusses the importance of mastering the art of receiving and acknowledging one’s creations to fully realize the completion phase.</p>
</section>
<section id="main-ideas" class="level3">
<h3 class="anchored" data-anchor-id="main-ideas">Main Ideas</h3>
<ul>
<li><strong>Completion as the Culmination of the Creative Process</strong>: Emphasizes the importance of fully realizing one’s vision to achieve completion.</li>
<li><strong>Psychological Dynamics of Completion</strong>: Explores the complex emotions, including anticipatory anxiety and the contrasting experiences of fulfillment versus depression upon completing significant milestones.</li>
<li><strong>The Art of Receiving and Acknowledging</strong>: Highlights the necessity of being open to receiving and properly acknowledging one’s achievements as integral to the completion phase.</li>
</ul>
</section>
<section id="psychological-insights" class="level3">
<h3 class="anchored" data-anchor-id="psychological-insights">Psychological Insights</h3>
<ul>
<li><strong>Prisoner Syndrome</strong>: Describes the anxiety and stress experienced by prisoners nearing release, paralleled in everyday situations where individuals approach the realization of long-sought goals.</li>
<li><strong>Emotional Oscillation</strong>: Discusses the fluctuation between fulfillment and depression upon achieving one’s aims, with references to Virginia Wharfe’s personal experiences.</li>
</ul>
</section>
<section id="recommendations-14" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-14">Recommendations</h3>
<ul>
<li><strong>Mastering Receiving</strong>: Encourages developing the ability to fully accept and integrate the fruits of one’s creative efforts into one’s life.</li>
<li><strong>Cultivating Acknowledgment Skills</strong>: Stresses the importance of acknowledging one’s progress and creations as a distinct and crucial step toward true completion.</li>
<li><strong>Embracing the Creative Orientation</strong>: Recommends shifting towards a creative mindset where receiving and acknowledgment become natural and familiar, enhancing the ability to live with and continue creating desired outcomes.</li>
</ul>
</section>
<section id="critical-analysis-10" class="level3">
<h3 class="anchored" data-anchor-id="critical-analysis-10">Critical Analysis</h3>
<ul>
<li><p><strong>The Challenge of Emotional Management</strong>: Analyzes the necessity of managing complex emotions associated with achieving significant goals, suggesting that understanding these emotional dynamics is essential for personal growth and creativity.</p></li>
<li><p><strong>The Role of Structural Tension in Creation</strong>: Examines how the structure of one’s aspirations and the tension between current reality and the vision for the future drive the creative process.</p></li>
<li><p><strong>The Universal Relevance of Completion Dynamics</strong>: Reflects on how the insights provided in this chapter about completion, receiving, and acknowledgment apply broadly across various aspects of life and work.</p></li>
</ul>
</section>
<section id="future-perspectives-4" class="level3">
<h3 class="anchored" data-anchor-id="future-perspectives-4">Future Perspectives</h3>
<ul>
<li><strong>Beyond Completion</strong>: Contemplates the continuous nature of the creative cycle, where the completion of one phase seeds the germination of new creative endeavors, emphasizing the perpetual momentum of creation.</li>
</ul>
</section>
<section id="connection-to-broader-themes" class="level3">
<h3 class="anchored" data-anchor-id="connection-to-broader-themes">Connection to Broader Themes</h3>
<ul>
<li><strong>Human Nature as Creative Force</strong>: Discusses the inherent creative capacities of humans, drawing on Judeo-Christian narratives to underline the role of creation in human identity and purpose.</li>
<li><strong>Critical Judgment in the Creative Process</strong>: Explores the necessity of critical judgment and acknowledgment in the creative process, challenging contemporary aversions to judgmental thinking.</li>
</ul>
</section>
<section id="conclusion" class="level3">
<h3 class="anchored" data-anchor-id="conclusion">Conclusion</h3>
<p>The chapter concludes by reinforcing the idea that mastering the stage of completion is not only about achieving one’s goals but also about being able to receive and acknowledge the fruits of one’s labor, setting the stage for future creative endeavors. It posits that aligning with one’s natural instinct to create leads to a fulfilling and purpose-driven life.</p>
</section>
</section>
<section id="the-power-of-transcendence" class="level2">
<h2 class="anchored" data-anchor-id="the-power-of-transcendence">The Power of Transcendence</h2>
<section id="summary-17" class="level3">
<h3 class="anchored" data-anchor-id="summary-17">Summary</h3>
<p>Chapter 18 discusses the concept of transcendence as a powerful force enabling individuals to overcome the limitations set by their past, conditioning, genetics, social background, or any other determinants. Through transcendence, individuals can start anew, unburdened by past victories or defeats.</p>
<p>The chapter uses the story of Scrooge from Charles Dickens’ “A Christmas Carol” and the Parable of the Prodigal Son to illustrate the transformative power of transcendence. It emphasizes shifting from a reactive-responsive orientation to a creative orientation, where one becomes the predominant causal force in their life. The chapter concludes with the idea that transcendence is not only a personal principle but can also apply to civilization as a whole, suggesting a shift towards a more creative and vision-driven society.</p>
</section>
<section id="key-concepts-12" class="level3">
<h3 class="anchored" data-anchor-id="key-concepts-12">Key Concepts</h3>
<ul>
<li><strong>Transcendence</strong>: The ability to start fresh, unburdened by past experiences.</li>
<li><strong>Reactive-Responsive Orientation</strong>: A mindset where individuals feel fixed in their life patterns due to external determinants.</li>
<li><strong>Creative Orientation</strong>: An approach where individuals see themselves as the primary causal force in their lives.</li>
<li><strong>Senior Forces</strong>: Elements like fundamental choice and structural tension that take priority over lesser forces like willpower manipulation.</li>
<li><strong>The Power of the Source</strong>: The innate drive within individuals to express their life source fully.</li>
<li><strong>One-Way Bargains</strong>: Assumptions where individuals expect reciprocity without mutual agreement, often leading to disappointment.</li>
</ul>
</section>
<section id="ideas-8" class="level3">
<h3 class="anchored" data-anchor-id="ideas-8">Ideas</h3>
<ul>
<li>The concept of transcendence allows individuals to reimagine their lives, free from the constraints of their past.</li>
<li>Transitioning from a reactive-responsive orientation to a creative orientation empowers individuals to shape their destiny.</li>
<li>Senior forces, such as fundamental choice and structural tension, are crucial in overcoming lesser forces and achieving one’s true aspirations.</li>
<li>Stories like Scrooge’s transformation and the Parable of the Prodigal Son serve as metaphors for the personal journey toward transcendence.</li>
</ul>
</section>
<section id="noteworthy-facts-4" class="level3">
<h3 class="anchored" data-anchor-id="noteworthy-facts-4">Noteworthy Facts</h3>
<ul>
<li><strong>Scrooge’s Transformation</strong>: Illustrates how transcendence can lead to a fundamental change in life orientation.</li>
<li><strong>The Prodigal Son</strong>: Represents the idea that returning to one’s source, or true self, is a powerful form of personal reconciliation and transformation.</li>
<li><strong>Civilizational Transcendence</strong>: Suggests that as individuals embrace a creative orientation, society as a whole can move towards a more visionary and creative future.</li>
</ul>
</section>
<section id="practical-implications-9" class="level3">
<h3 class="anchored" data-anchor-id="practical-implications-9">Practical Implications</h3>
<ul>
<li>Individuals can apply the concept of transcendence to overcome perceived limitations and create a new life direction.</li>
<li>By embracing a creative orientation, people can become the predominant causal force in their lives, leading to more fulfillment and purpose.</li>
<li>Societies can benefit from a collective shift towards creativity and vision, potentially leading to transformative changes in civilization.</li>
</ul>
</section>
<section id="recommendations-15" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-15">Recommendations</h3>
<ul>
<li>Individuals feeling trapped by their past should explore the concept of transcendence to envision and create a new future.</li>
<li>Adopting a creative orientation can help individuals and organizations overcome structural conflicts and limitations.</li>
<li>Reflecting on stories like Scrooge and the Prodigal Son can provide insights into one’s own journey towards personal transformation and renewal.</li>
</ul>
</section>
<section id="additional-insights-9" class="level3">
<h3 class="anchored" data-anchor-id="additional-insights-9">Additional Insights</h3>
<ul>
<li>The shift towards a creative orientation requires recognizing and prioritizing senior forces over lesser forces.</li>
<li>The process of transcendence involves a realignment with one’s life source, leading to a fundamental change in how one approaches life.</li>
<li>The ability for civilization to transcend its current limitations lies in the collective shift of its individuals towards a more creative and vision-driven orientation.</li>
</ul>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>personal-growth</category>
  <category>professional-growth</category>
  <guid>christianjmills.com/posts/the-path-of-least-resistance-book-notes/</guid>
  <pubDate>Sat, 17 Feb 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Exporting Keypoint R-CNN Models from PyTorch to ONNX</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/pytorch-train-keypoint-rcnn-series.html"><strong>Training Keypoint R-CNN Models with PyTorch</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading the Checkpoint Data</li>
<li>Exporting the Model to ONNX</li>
<li>Performing Inference with ONNX Runtime</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome back to this series on training Keypoint R-CNN models with PyTorch. Previously, we demonstrated how to fine-tune a Keypoint R-CNN model by training it to identify the locations of human noses and faces. This tutorial builds on that by showing how to export the model to <a href="https://onnx.ai/">ONNX</a> and perform inference using <a href="https://onnxruntime.ai/docs/">ONNX Runtime</a>.</p>
<p>ONNX (Open Neural Network Exchange) is an open format to represent machine learning models and make them portable across various platforms. ONNX Runtime is a cross-platform inference accelerator that provides interfaces to hardware-specific libraries. By exporting our model to ONNX, we can deploy it to multiple devices and leverage hardware acceleration for faster inference. The Keypoint R-CNN model is computationally intensive, so any improvements to inference speed are welcome.</p>
<p>Additionally, we’ll implement the functionality to annotate images with key points without relying on PyTorch as a dependency. By the end of this tutorial, you will have an ONNX version of our Keypoint R-CNN model that you can deploy to servers and edge devices using ONNX Runtime.</p>
<div class="callout callout-style-default callout-important callout-titled" title="This post assumes the reader has completed the previous tutorial linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post assumes the reader has completed the previous tutorial linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../">Training Keypoint R-CNN Models with PyTorch</a></li>
</ul>
</div>
</div>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>As with the previous tutorial, the code is available as a Jupyter Notebook.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Google Colab</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/pytorch-keypoint-rcnn-tutorial-code/blob/main/notebooks/pytorch-keypoint-r-cnn-onnx-export.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-keypoint-rcnn-tutorial-code/blob/main/notebooks/pytorch-keypoint-r-cnn-onnx-export-colab.ipynb">Open In Colab</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>We’ll need to add a few new libraries to our <a href="../#setting-up-your-python-environment">Python environment</a> for working with ONNX models.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>onnx</code></td>
<td>This package provides a Python API for working with ONNX models. (<a href="https://pypi.org/project/onnx/">link</a>)</td>
</tr>
<tr class="even">
<td><code>onnxruntime</code></td>
<td>ONNX Runtime is a runtime accelerator for machine learning models. (<a href="https://onnxruntime.ai/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>onnx-simplifier</code></td>
<td>This package helps simplify ONNX models. (<a href="https://pypi.org/project/onnx-simplifier/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following command to install these additional libraries:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install ONNX packages</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install onnx onnxruntime onnx-simplifier</span></code></pre></div>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>With our environment updated, we can dive into the code. First, we will import the necessary Python dependencies into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb2-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb2-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw, ImageFont</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb2-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Keypoint R-CNN</span></span>
<span id="cb2-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keypointrcnn_resnet50_fpn</span>
<span id="cb2-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.keypoint_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KeypointRCNNPredictor</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import ONNX dependencies</span></span>
<span id="cb2-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the onnx module</span></span>
<span id="cb2-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> onnxsim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> simplify <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the method to simplify ONNX models</span></span>
<span id="cb2-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnxruntime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ort <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the ONNX Runtime</span></span></code></pre></div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we’ll set the folder locations for our project and training session with the PyTorch checkpoint. Let’s also ensure we have a font file for annotating images.</p>
<section id="set-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="set-the-directory-paths">Set the Directory Paths</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb3-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-keypoint-r-cnn"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb3-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb3-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path to the checkpoint folder</span></span>
<span id="cb3-11">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"2024-01-30_10-44-52"</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13">pd.Series({</span>
<span id="cb3-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir,</span>
<span id="cb3-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Checkpoint Directory:"</span>: checkpoint_dir,</span>
<span id="cb3-16">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_d7624">
<thead>
</thead>
<tbody>
<tr>
<th id="T_d7624_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_d7624_row0_col0" class="data row0 col0">
pytorch-keypoint-r-cnn
</td>
</tr>
<tr>
<th id="T_d7624_level0_row1" class="row_heading level0 row1">
Checkpoint Directory:
</th>
<td id="T_d7624_row1_col0" class="data row1 col0">
pytorch-keypoint-r-cnn/2024-01-30_10-44-52
</td>
</tr>
</tbody>
</table>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="I made a model checkpoint available on Hugging Face Hub in the repository linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
I made a model checkpoint available on Hugging Face Hub in the repository linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://huggingface.co/cj-mills/keypoint-rcnn-eyes-noses-pytorch/tree/main">cj-mills/keypoint-rcnn-eyes-noses-pytorch</a></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Those following along on Google Colab can drag the contents of their checkpoint folder into Colab's file browser. Keep in mind the model checkpoint has a large file size. ">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Those following along on Google Colab can drag the contents of their checkpoint folder into Colab’s file browser. Keep in mind the model checkpoint has a large file size.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
<section id="download-a-font-file" class="level3">
<h3 class="anchored" data-anchor-id="download-a-font-file">Download a Font File</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb4-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb4-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
</section>
<section id="loading-the-checkpoint-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-checkpoint-data">Loading the Checkpoint Data</h2>
<p>Now, we can load the colormap used during training and initialize a Keypoint R-CNN model with the saved checkpoint.</p>
<section id="load-the-colormap" class="level3">
<h3 class="anchored" data-anchor-id="load-the-colormap">Load the Colormap</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The colormap path</span></span>
<span id="cb5-2">colormap_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*colormap.json'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the JSON colormap data</span></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(colormap_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb5-6">        colormap_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the JSON data to a dictionary        </span></span>
<span id="cb5-9">colormap_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]: item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'items'</span>]}</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the class names from the colormap</span></span>
<span id="cb5-12">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(colormap_dict.keys())</span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the colormap in integer format</span></span>
<span id="cb5-15">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_dict.values()]</span></code></pre></div>
</section>
<section id="load-the-model-checkpoint" class="level3">
<h3 class="anchored" data-anchor-id="load-the-model-checkpoint">Load the Model Checkpoint</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb6-2">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.pth'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model checkpoint onto the CPU</span></span>
<span id="cb6-5">model_checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(checkpoint_path, map_location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span></code></pre></div>
</section>
<section id="load-the-trained-keypoint-r-cnn-model" class="level3">
<h3 class="anchored" data-anchor-id="load-the-trained-keypoint-r-cnn-model">Load the Trained Keypoint R-CNN Model</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load a pre-trained model</span></span>
<span id="cb7-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keypointrcnn_resnet50_fpn(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEFAULT'</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace the classifier head with the number of keypoints</span></span>
<span id="cb7-5">in_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.keypoint_predictor.kps_score_lowres.in_channels</span>
<span id="cb7-6">model.roi_heads.keypoint_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KeypointRCNNPredictor(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>in_features, num_keypoints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the model with the checkpoint parameters and buffers</span></span>
<span id="cb7-9">model.load_state_dict(model_checkpoint)</span></code></pre></div>
<pre class="text"><code>&lt;All keys matched successfully&gt;</code></pre>
</section>
</section>
<section id="exporting-the-model-to-onnx" class="level2">
<h2 class="anchored" data-anchor-id="exporting-the-model-to-onnx">Exporting the Model to ONNX</h2>
<p>Before exporting the model, let’s ensure the model is in evaluation mode.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<section id="prepare-the-input-tensor" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor">Prepare the Input Tensor</h3>
<p>We need a sample input tensor for the export process.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
</section>
<section id="export-the-model-to-onnx" class="level3">
<h3 class="anchored" data-anchor-id="export-the-model-to-onnx">Export the Model to ONNX</h3>
<p>We can export the model using PyTorch’s <a href="https://pytorch.org/docs/stable/onnx.html#torch.onnx.export"><code>torch.onnx.export()</code></a> function. This function performs a single pass through the model and records all operations to generate a <a href="https://pytorch.org/docs/stable/jit.html">TorchScript graph</a>. It then exports this graph to ONNX by decomposing each graph node (which contains a PyTorch operator) into a series of ONNX operators.</p>
<p>If we want the ONNX model to support different input sizes, we must set the width and height input axes as dynamic.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a filename for the ONNX model</span></span>
<span id="cb11-2">onnx_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>colormap_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>removesuffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-colormap'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.onnx"</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export the PyTorch model to ONNX format</span></span>
<span id="cb11-5">torch.onnx.export(model.cpu(),</span>
<span id="cb11-6">                  input_tensor.cpu(),</span>
<span id="cb11-7">                  onnx_file_path,</span>
<span id="cb11-8">                  export_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-9">                  do_constant_folding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb11-10">                  input_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>],</span>
<span id="cb11-11">                  output_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scores'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keypoints'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keypoints_scores'</span>],</span>
<span id="cb11-12">                  dynamic_axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>: {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>}}</span>
<span id="cb11-13">                 )</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The export function may return some <code>UserWarning</code> messages when we export the model. We can ignore these warnings as the exported model functions as expected.</p>
</div>
</div>
</section>
<section id="simplify-the-onnx-model" class="level3">
<h3 class="anchored" data-anchor-id="simplify-the-onnx-model">Simplify the ONNX Model</h3>
<p>The ONNX models generated by PyTorch are not always the most concise. We can use the <a href="https://pypi.org/project/onnx-simplifier/"><code>onnx-simplifier</code></a> package to tidy up the exported model.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the ONNX model from the onnx_file_name</span></span>
<span id="cb12-2">onnx_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onnx.load(onnx_file_path)</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simplify the model</span></span>
<span id="cb12-5">model_simp, check <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simplify(onnx_model)</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the simplified model to the onnx_file_name</span></span>
<span id="cb12-8">onnx.save(model_simp, onnx_file_path)</span></code></pre></div>
</section>
</section>
<section id="performing-inference-with-onnx-runtime" class="level2">
<h2 class="anchored" data-anchor-id="performing-inference-with-onnx-runtime">Performing Inference with ONNX Runtime</h2>
<p>Now that we have our ONNX model, it’s time to test it with ONNX Runtime.</p>
<section id="create-an-inference-session" class="level3">
<h3 class="anchored" data-anchor-id="create-an-inference-session">Create an Inference Session</h3>
<p>We interact with models in ONNX Runtime through an <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#load-and-run-a-model"><code>InferenceSession</code></a> object. Here we can specify which Execution Providers to use for inference and other configuration information. <a href="https://onnxruntime.ai/docs/execution-providers/">Execution Providers</a> are the interfaces for hardware-specific inference engines like <a href="https://onnxruntime.ai/docs/execution-providers/TensorRT-ExecutionProvider.html">TensorRT</a> for NVIDIA and <a href="https://onnxruntime.ai/docs/execution-providers/OpenVINO-ExecutionProvider.html">OpenVINO</a> for Intel. By default, the <code>InferenceSession</code> uses the generic <code>CPUExecutionProvider</code>.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model and create an InferenceSession</span></span>
<span id="cb13-2">session <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort.InferenceSession(onnx_file_path, providers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CPUExecutionProvider'</span>])</span></code></pre></div>
</section>
<section id="define-annotation-function" class="level3">
<h3 class="anchored" data-anchor-id="define-annotation-function">Define Annotation Function</h3>
<p>Next, we need to annotate images with key points. PIL includes functionality to draw circles on images.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_keypoints_pil(image, keypoints, labels, colors, radius:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb14-2"></span>
<span id="cb14-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Annotates an image with keypoints, each marked by a circle and associated with specific labels and colors.</span></span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function draws circles on the provided image at given keypoint coordinates. Each keypoint is associated </span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with a label and a color. The radius of the circles can be adjusted.</span></span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    image (PIL.Image): The input image on which annotations will be drawn.</span></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    keypoints (list of tuples): A list of (x, y) tuples representing the coordinates of each keypoint.</span></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    labels (list of str): A list of labels corresponding to each keypoint.</span></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    colors (list of tuples): A list of RGB tuples for each keypoint, defining the color of the circle to be drawn.</span></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    radius (int, optional): The radius of the circles to be drawn for each keypoint. Defaults to 5.</span></span>
<span id="cb14-15"></span>
<span id="cb14-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb14-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    annotated_image (PIL.Image): The image annotated with keypoints, each represented as a colored circle.</span></span>
<span id="cb14-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-19">        </span>
<span id="cb14-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a copy of the image</span></span>
<span id="cb14-21">    annotated_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.copy()</span>
<span id="cb14-22"></span>
<span id="cb14-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an ImageDraw object for drawing on the image</span></span>
<span id="cb14-24">    draw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDraw.Draw(annotated_image)</span>
<span id="cb14-25"></span>
<span id="cb14-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop through the bounding boxes and labels in the 'annotation' DataFrame</span></span>
<span id="cb14-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels)):</span>
<span id="cb14-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the key point coordinates</span></span>
<span id="cb14-29">        x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keypoints[i]</span>
<span id="cb14-30"></span>
<span id="cb14-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw a circle</span></span>
<span id="cb14-32">        draw.ellipse((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> radius, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> radius, x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> radius, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> radius), fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[i])</span>
<span id="cb14-33">        </span>
<span id="cb14-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> annotated_image</span></code></pre></div>
</section>
<section id="select-a-test-image" class="level3">
<h3 class="anchored" data-anchor-id="select-a-test-image">Select a Test Image</h3>
<p>We can download an image from one of my HuggingFace repositories to verify the exported model performs as expected.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">test_img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pexels-2769554-man-doing-rock-and-roll-sign.jpg"</span></span>
<span id="cb15-2">test_img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/cj-mills/pexel-hand-gesture-test-images/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_img_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb15-3"></span>
<span id="cb15-4">download_file(test_img_url, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb15-5"></span>
<span id="cb15-6">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_img_name)</span>
<span id="cb15-7">display(test_img)</span>
<span id="cb15-8"></span>
<span id="cb15-9">pd.Series({</span>
<span id="cb15-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test Image Size:"</span>: test_img.size, </span>
<span id="cb15-11">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/images/output_32_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_daf38">
<thead>
</thead>
<tbody>
<tr>
<th id="T_daf38_level0_row0" class="row_heading level0 row0">
Test Image Size:
</th>
<td id="T_daf38_row0_col0" class="data row0 col0">
(640, 960)
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="prepare-the-test-image" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-test-image">Prepare the Test Image</h3>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set test image size</span></span>
<span id="cb16-2">test_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Resize the test image</span></span>
<span id="cb16-5">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the scale between the source image and the resized image</span></span>
<span id="cb16-8">min_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(test_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(input_img.size)</span>
<span id="cb16-9"></span>
<span id="cb16-10">display(input_img)</span>
<span id="cb16-11"></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas DataFrame for easy formatting</span></span>
<span id="cb16-13">pd.Series({</span>
<span id="cb16-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image Size:"</span>: test_img.size,</span>
<span id="cb16-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Dims:"</span>: input_img.size,</span>
<span id="cb16-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min Image Scale:"</span>: min_img_scale,</span>
<span id="cb16-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size</span>
<span id="cb16-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/images/output_34_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_54014">
<thead>
</thead>
<tbody>
<tr>
<th id="T_54014_level0_row0" class="row_heading level0 row0">
Source Image Size:
</th>
<td id="T_54014_row0_col0" class="data row0 col0">
(640, 960)
</td>
</tr>
<tr>
<th id="T_54014_level0_row1" class="row_heading level0 row1">
Input Dims:
</th>
<td id="T_54014_row1_col0" class="data row1 col0">
(512, 768)
</td>
</tr>
<tr>
<th id="T_54014_level0_row2" class="row_heading level0 row2">
Min Image Scale:
</th>
<td id="T_54014_row2_col0" class="data row2 col0">
1.250000
</td>
</tr>
<tr>
<th id="T_54014_level0_row3" class="row_heading level0 row3">
Input Image Size:
</th>
<td id="T_54014_row3_col0" class="data row3 col0">
(512, 768)
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="prepare-the-input-tensor-1" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor-1">Prepare the Input Tensor</h3>
<p>When we convert the PIL input image to a NumPy array, we need to reorder the array values to channels-first format, scale the values from <code>[0,255]</code> to <code>[0,1]</code>, and add a batch dimension.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the input image to NumPy format</span></span>
<span id="cb17-2">input_tensor_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(input_img, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32).transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span></code></pre></div>
</section>
<section id="compute-the-predictions" class="level3">
<h3 class="anchored" data-anchor-id="compute-the-predictions">Compute the Predictions</h3>
<p>Now, we can finally perform inference with our ONNX model.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run inference</span></span>
<span id="cb18-2">model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> session.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: input_tensor_np})</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the confidence threshold</span></span>
<span id="cb18-5">conf_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span></span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the output based on the confidence threshold</span></span>
<span id="cb18-8">scores_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> conf_threshold</span>
<span id="cb18-9"></span>
<span id="cb18-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and scale the predicted keypoints</span></span>
<span id="cb18-11">predicted_keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>][scores_mask])[:,:,:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>min_img_scale</span>
<span id="cb18-12">predicted_keypoints</span>
<span id="cb18-13"></span>
<span id="cb18-14">labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>class_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(scores_mask).item()</span>
<span id="cb18-15"></span>
<span id="cb18-16">draw_keypoints_pil(test_img, </span>
<span id="cb18-17">                predicted_keypoints, </span>
<span id="cb18-18">                labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels,</span>
<span id="cb18-19">                colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]],</span>
<span id="cb18-20">               )</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/images/output_38_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The model appears to work as intended, even on this new image.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Don’t forget to download the ONNX model from the Colab Environment’s file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</li>
</ol>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on reaching the end of this tutorial! We previously trained a Keypoint R-CNN model in PyTorch, and now we’ve exported that model to ONNX. With this, we can streamline our deployment process and leverage platform-specific hardware optimizations through ONNX Runtime.</p>
<p>As you move forward, consider exploring more about ONNX and its ecosystem. Check out the available <a href="https://onnxruntime.ai/docs/execution-providers/">Execution Providers</a> that provide flexible interfaces to different hardware acceleration libraries.</p>
<p><br></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Next Steps">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Next Steps
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Feel free to post questions or problems related to this tutorial in the comments below. I try to make time to address them on Thursdays and Fridays.</li>
<li>If you would like to explore my <a href="../../../about.html#services">services</a> for your project, you can reach out via email at <a href="mailto:christian@christianjmills.com">christian@christianjmills.com</a></li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>onnx</category>
  <category>keypoint-rcnn</category>
  <category>keypoint-estimation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/</guid>
  <pubDate>Tue, 30 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Training Keypoint R-CNN Models with PyTorch</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../series/tutorials/pytorch-train-keypoint-rcnn-series.html"><strong>Training Keypoint R-CNN Models with PyTorch</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading and Exploring the Dataset</li>
<li>Loading the Keypoint R-CNN Model</li>
<li>Preparing the Data</li>
<li>Fine-tuning the Model</li>
<li>Making Predictions with the Model</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide to training Keypoint R-CNN models in PyTorch. Keypoint estimation models predict the locations of points on a given object or person, allowing us to recognize and interpret poses, gestures, or significant parts of objects.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/pytorch-keypoint-r-cnn-tutorial-hero-image.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw keypoint annotations, annotating and augmenting images, creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model, finetuning a Keypoint R-CNN model, and performing inference.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. Upon completion, you will have a solid foundation for training custom key point estimation models for other projects.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></li>
<li><a href="../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Platform</th>
<th>Jupyter Notebook</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Google Colab</td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-keypoint-rcnn-tutorial-code/blob/main/notebooks/pytorch-keypoint-r-cnn-training-labelme.ipynb">Open In Colab</a></td>
</tr>
<tr class="even">
<td>Linux</td>
<td><a href="https://github.com/cj-mills/pytorch-keypoint-rcnn-tutorial-code/blob/main/notebooks/pytorch-keypoint-r-cnn-training-labelme.ipynb">GitHub Repository</a></td>
</tr>
<tr class="odd">
<td>Windows</td>
<td><a href="https://github.com/cj-mills/pytorch-keypoint-rcnn-tutorial-code/blob/main/notebooks/pytorch-keypoint-r-cnn-training-labelme-windows.ipynb">GitHub Repository</a></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.11 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.11 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>torchtnt</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>tabulate</code></td>
<td>Pretty-print tabular data in Python. (<a href="https://pypi.org/project/tabulate/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following command to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow torchtnt==0.2.0 tabulate tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pandas_utils</code></td>
<td>Some utility functions for working with Pandas. (<a href="https://cj-mills.github.io/cjm-pandas-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following command to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pandas_utils cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python modules into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> contextlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> contextmanager</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> glob <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pandas_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> markdown_to_pandas</span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img, get_img_files, stack_imgs</span>
<span id="cb9-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> set_seed, pil_to_tensor, tensor_to_pil, get_torch_device, denorm_img_tensor, move_data_to_device</span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop, RandomPixelCopy</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-31"></span>
<span id="cb9-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-33">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-34"></span>
<span id="cb9-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-37"></span>
<span id="cb9-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-39"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-40"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb9-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb9-43"></span>
<span id="cb9-44"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-45"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchtnt.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb9-46"></span>
<span id="cb9-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-48"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-49">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-50"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes</span>
<span id="cb9-51"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-52"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-53"></span>
<span id="cb9-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Keypoint R-CNN</span></span>
<span id="cb9-55"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.keypoint_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KeypointRCNNPredictor</span>
<span id="cb9-56"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.rpn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AnchorGenerator</span>
<span id="cb9-57"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keypointrcnn_resnet50_fpn</span>
<span id="cb9-58"></span>
<span id="cb9-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-60"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. While there is currently no dedicated TVTensor class for keypoint annotations, we can use the one for <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html">bounding boxes</a> instead. Torchvision does include a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_keypoints.html"><code>draw_keypoints</code></a> function, but we might as well stick with the <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function to annotate images.</p>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we set up some basics for our project, such as initializing random number generators, setting the PyTorch device to run the model, and preparing the folders for our project and datasets.</p>
<section id="setting-a-random-number-seed" class="level3">
<h3 class="anchored" data-anchor-id="setting-a-random-number-seed">Setting a Random Number Seed</h3>
<p>First, we set the seed for generating random numbers using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#set_seed">set_seed</a> function from the <code>cjm_pytorch_utils</code> package.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the seed for generating random numbers in PyTorch, NumPy, and Python's random module.</span></span>
<span id="cb10-2">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span></span>
<span id="cb10-3">set_seed(seed)</span></code></pre></div>
</section>
<section id="setting-the-device-and-data-type" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-device-and-data-type">Setting the Device and Data Type</h3>
<p>Next, we determine the device to use for training using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#get_torch_device">get_torch_device</a> function from the <code>cjm_pytorch_utils</code> package and set the data type of our tensors.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_torch_device()</span>
<span id="cb11-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb11-3">device, dtype</span></code></pre></div>
<pre class="text"><code>('cuda', torch.float32)</code></pre>
</section>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We can then set up a directory for our project to store our results and other related files. We also need a place to store our dataset. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb13-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-keypoint-r-cnn"</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb13-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb13-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb13-11">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb13-13">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb13-16">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb13-18">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-19"></span>
<span id="cb13-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb13-21">pd.Series({</span>
<span id="cb13-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir,</span>
<span id="cb13-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb13-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb13-25">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_c7875">
<thead>
</thead>
<tbody>
<tr>
<th id="T_c7875_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_c7875_row0_col0" class="data row0 col0">
pytorch-keypoint-r-cnn
</td>
</tr>
<tr>
<th id="T_c7875_level0_row1" class="row_heading level0 row1">
Dataset Directory:
</th>
<td id="T_c7875_row1_col0" class="data row1 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_c7875_level0_row2" class="row_heading level0 row2">
Archive Directory:
</th>
<td id="T_c7875_row2_col0" class="data row2 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
<p>Double-check the project and dataset directories exist in the specified paths and that you can add files to them before continuing. At this point, our project is set up and ready to go. In the next section, we will download and explore the dataset.</p>
</section>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>I annotated a small dataset with key points for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/labelme-keypoint-eyes-noses-dataset/tree/main">labelme-keypoint-eyes-noses-dataset</a></li>
</ul>
<p>The dataset contains 2D coordinates for eyes and noses on human faces.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Keypoint Annotation Format">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Keypoint Annotation Format
</div>
</div>
<div class="callout-body-container callout-body">
<p>The keypoints for this dataset use the <a href="https://github.com/labelmeai/labelme">LabelMe</a> annotation format. You can learn more about this format and how to work with such annotations in the tutorial linked below:</p>
<ul>
<li><a href="../../posts/torchvision-labelme-annotation-tutorials/keypoints/">Working with LabelMe Keypoint Annotations in Torchvision</a></li>
</ul>
</div>
</div>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>First, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb14-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labelme-keypoint-eyes-noses-dataset'</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb14-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb14-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb14-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb14-14">pd.Series({</span>
<span id="cb14-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb14-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb14-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb14-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_be76c">
<thead>
</thead>
<tbody>
<tr>
<th id="T_be76c_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_be76c_row0_col0" class="data row0 col0">
cj-mills/labelme-keypoint-eyes-noses-dataset
</td>
</tr>
<tr>
<th id="T_be76c_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_be76c_row1_col0" class="data row1 col0">
Datasets/../Archive/labelme-keypoint-eyes-noses-dataset.zip
</td>
</tr>
<tr>
<th id="T_be76c_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_be76c_row2_col0" class="data row2 col0">
Datasets/labelme-keypoint-eyes-noses-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb15-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb15-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb15-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb15-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb15-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb15-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb15-14">    </span>
<span id="cb15-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb15-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb15-17">    </span>
<span id="cb15-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb15-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Next, we will make a dictionary that maps each image’s unique name to its file path, allowing us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the dataset</span></span>
<span id="cb16-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_img_files(dataset_path)</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb16-5">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (img_file_paths)}</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb16-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb16-11">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 200</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
denim-jacket-fashion-fashion-model-1848570
</th>
<td>
Datasets/labelme-keypoint-eyes-noses-dataset/denim-jacket-fashion-fashion-model-1848570.jpg
</td>
</tr>
<tr>
<th>
dried-dry-face-2965690
</th>
<td>
Datasets/labelme-keypoint-eyes-noses-dataset/dried-dry-face-2965690.jpg
</td>
</tr>
<tr>
<th>
elderly-face-old-person-2856346
</th>
<td>
Datasets/labelme-keypoint-eyes-noses-dataset/elderly-face-old-person-2856346.jpg
</td>
</tr>
<tr>
<th>
elderly-hair-man-1319289
</th>
<td>
Datasets/labelme-keypoint-eyes-noses-dataset/elderly-hair-man-1319289.jpg
</td>
</tr>
<tr>
<th>
face-facial-expression-fashion-2592000
</th>
<td>
Datasets/labelme-keypoint-eyes-noses-dataset/face-facial-expression-fashion-2592000.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>We will then read the content of the JSON annotation file associated with each image into a single Pandas DataFrame so we can easily query the annotations.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of JSON files in the dataset</span></span>
<span id="cb18-2">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb18-5">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb18-8">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb18-9"></span>
<span id="cb18-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb18-11">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-12">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb18-13"></span>
<span id="cb18-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb18-15">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb18-16"></span>
<span id="cb18-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb18-18">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
denim-jacket-fashion-fashion-model-1848570
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘left-eye’, ‘points’: [[329.17073170731703, 252.59756097560972]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘nose’, ‘points’: [[323.68292682926835, 291.0121951219512]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘right-eye’, ‘points’: [[260.2682926829268, 234.91463414634143]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
denim-jacket-fashion-fashion-model-1848570.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
512
</td>
</tr>
<tr>
<th>
dried-dry-face-2965690
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘right-eye’, ‘points’: [[201.7317073170732, 351.9878048780488]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘left-eye’, ‘points’: [[333.43902439024396, 342.23170731707313]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘nose’, ‘points’: [[271.2439024390244, 436.1341463414634]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
dried-dry-face-2965690.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
512
</td>
</tr>
<tr>
<th>
elderly-face-old-person-2856346
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘left-eye’, ‘points’: [[302.3414634146342, 286.1341463414634]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘nose’, ‘points’: [[243.80487804878055, 339.79268292682923]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘right-eye’, ‘points’: [[196.2439024390244, 286.7439024390244]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
elderly-face-old-person-2856346.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
512
</td>
</tr>
<tr>
<th>
elderly-hair-man-1319289
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘right-eye’, ‘points’: [[490.910569105691, 175.71544715447155]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘left-eye’, ‘points’: [[548.6341463414634, 167.58536585365852]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘nose’, ‘points’: [[526.6829268292682, 201.73170731707316]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
elderly-hair-man-1319289.jpg
</td>
<td>
None
</td>
<td>
512
</td>
<td>
768
</td>
</tr>
<tr>
<th>
face-facial-expression-fashion-2592000
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘left-eye’, ‘points’: [[301.45454545454544, 106.85561497326205]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘right-eye’, ‘points’: [[250.65240641711233, 115.94652406417114]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘nose’, ‘points’: [[272.0427807486631, 121.29411764705884]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
face-facial-expression-fashion-2592000.jpg
</td>
<td>
None
</td>
<td>
672
</td>
<td>
512
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>Now that we have the annotation data, we can extract the unique class names and inspect the class distribution. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb19-3">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb19-6">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb19-9">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
left-eye
</td>
</tr>
<tr>
<th>
1
</th>
<td>
nose
</td>
</tr>
<tr>
<th>
2
</th>
<td>
right-eye
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb20-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].value_counts()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb20-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span>
<span id="cb20-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb20-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb20-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb20-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb20-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_26_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its bounding boxes using torchvision’s <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html"><code>BoundingBoxes</code></a> class and <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>First, we will generate a color map for the object classes.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb21-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb21-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb21-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_30_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb22-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb22-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="annotate-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h3>
<p>Finally, we will open a sample image and annotate it with it’s associated bounding boxes.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb24-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb24-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb24-8">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb24-9">keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]])).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb24-10">BBOX_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb24-11">keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((keypoints, torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>BBOX_DIM), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-12"></span>
<span id="cb24-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb24-14">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb24-15">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb24-16">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(keypoints_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>),</span>
<span id="cb24-17">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb24-18">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb24-19">)</span>
<span id="cb24-20"></span>
<span id="cb24-21">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_36_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="loading-the-keypoint-r-cnn-model" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-keypoint-r-cnn-model">Loading the Keypoint R-CNN Model</h2>
<p>TorchVision provides <a href="https://pytorch.org/vision/stable/models.html#table-of-all-available-keypoint-detection-weights">checkpoints</a> for the Keypoint R-CNN model trained on the <a href="https://cocodataset.org/">COCO</a> (Common Objects in Context) dataset. We can initialize a model with these pretrained weights using the <a href="https://pytorch.org/vision/stable/models/generated/torchvision.models.detection.keypointrcnn_resnet50_fpn.html?highlight=keypointrcnn_resnet50_fpn"><code>keypointrcnn_resnet50_fpn</code></a> function. We must then replace the keypoint predictor for the pretrained model with a new one for our dataset.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load a pre-trained model</span></span>
<span id="cb25-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keypointrcnn_resnet50_fpn(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEFAULT'</span>)</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace the classifier head with the number of keypoints</span></span>
<span id="cb25-5">in_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.keypoint_predictor.kps_score_lowres.in_channels</span>
<span id="cb25-6">model.roi_heads.keypoint_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KeypointRCNNPredictor(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>in_features, num_keypoints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb25-7"></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model's device and data type</span></span>
<span id="cb25-9">model.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-10"></span>
<span id="cb25-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add attributes to store the device and model name for later reference</span></span>
<span id="cb25-12">model.device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device</span>
<span id="cb25-13">model.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keypointrcnn_resnet50_fpn'</span></span></code></pre></div>
<p>The model internally normalizes input using the mean and standard deviation values used during the pretraining process, so we do not need to keep track of them separately.</p>
<section id="summarizing-the-model" class="level3">
<h3 class="anchored" data-anchor-id="summarizing-the-model">Summarizing the Model</h3>
<p>Before moving on, let’s generate a summary of our model to get an overview of its performance characteristics. We can use this to gauge the computational requirements for deploying the model.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the input to the model</span></span>
<span id="cb26-2">test_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>).to(device)</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a summary of the model as a Pandas DataFrame</span></span>
<span id="cb26-5">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_to_pandas(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_module_summary(model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>(), [test_inp])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-6"></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the summary to only the model</span></span>
<span id="cb26-8">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_df[summary_df.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb26-9"></span>
<span id="cb26-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the column "Contains Uninitialized Parameters?"</span></span>
<span id="cb26-11">summary_df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'In size'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Out size'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Contains Uninitialized Parameters?'</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Type
</th>
<th>
# Parameters
</th>
<th>
# Trainable Parameters
</th>
<th>
Size (bytes)
</th>
<th>
Forward FLOPs
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
KeypointRCNN
</td>
<td>
59.0 M
</td>
<td>
58.8 M
</td>
<td>
236 M
</td>
<td>
144 G
</td>
</tr>
</tbody>
</table>
</div>
<p>The above table shows the model has approximately <code>58.8</code> million trainable parameters. It takes up <code>263</code> Megabytes and performs around <code>144</code> billion floating point operations for a single <code>256x256</code> RGB image. This model internally resizes input images and executes the same number of floating point operations for different input resolutions.</p>
<p>That completes the model setup. In the next section, we will prepare our dataset for training.</p>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>The data preparation involves several steps, such as applying data augmentation techniques, setting up the train-validation split for the dataset, resizing and padding the images, defining the training dataset class, and initializing DataLoaders to feed data to the model.</p>
<section id="training-validation-split" class="level3">
<h3 class="anchored" data-anchor-id="training-validation-split">Training-Validation Split</h3>
<p>Let’s begin by defining the training-validation split. We’ll randomly select 90% of the available samples for the training set and use the remaining 10% for the validation set.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the list of image IDs</span></span>
<span id="cb27-2">img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shuffle the image IDs</span></span>
<span id="cb27-5">random.shuffle(img_keys)</span>
<span id="cb27-6"></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the percentage of the images that should be used for training</span></span>
<span id="cb27-8">train_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span></span>
<span id="cb27-9">val_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb27-10"></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the index at which to split the subset of image paths into training and validation sets</span></span>
<span id="cb27-12">train_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_keys)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>train_pct)</span>
<span id="cb27-13">val_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_keys)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(train_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>val_pct))</span>
<span id="cb27-14"></span>
<span id="cb27-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the subset of image paths into training and validation sets</span></span>
<span id="cb27-16">train_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys[:train_split]</span>
<span id="cb27-17">val_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys[train_split:]</span>
<span id="cb27-18"></span>
<span id="cb27-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of images in the training and validation sets</span></span>
<span id="cb27-20">pd.Series({</span>
<span id="cb27-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training Samples:"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_keys),</span>
<span id="cb27-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Validation Samples:"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_keys)</span>
<span id="cb27-23">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_39a47">
<thead>
</thead>
<tbody>
<tr>
<th id="T_39a47_level0_row0" class="row_heading level0 row0">
Training Samples:
</th>
<td id="T_39a47_row0_col0" class="data row0 col0">
180
</td>
</tr>
<tr>
<th id="T_39a47_level0_row1" class="row_heading level0 row1">
Validation Samples:
</th>
<td id="T_39a47_row1_col0" class="data row1 col0">
20
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>First, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb28-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Next, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb29-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb29-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb29-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb29-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb29-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb29-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb29-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb29-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb29-12"></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb29-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels for the sample</span></span>
<span id="cb30-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb30-5">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torchvision.ops.box_convert(keypoints_bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb30-6">                                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb30-7">                                canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb30-8">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])}</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb30-11">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb30-12"></span>
<span id="cb30-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb30-14">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb30-15"></span>
<span id="cb30-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb30-17">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb30-18"></span>
<span id="cb30-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb30-20">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb30-21">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb30-22">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb30-23"></span>
<span id="cb30-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb30-25">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb30-26"></span>
<span id="cb30-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb30-28">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb30-29">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb30-30">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb30-31">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb30-32">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors,</span>
<span id="cb30-33">)</span>
<span id="cb30-34"></span>
<span id="cb30-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb30-36">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb30-37"></span>
<span id="cb30-38">pd.Series({</span>
<span id="cb30-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb30-40">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb30-41">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb30-42">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb30-43">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb30-44">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_52_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_5be68">
<thead>
</thead>
<tbody>
<tr>
<th id="T_5be68_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_5be68_row0_col0" class="data row0 col0">
(512, 768)
</td>
</tr>
<tr>
<th id="T_5be68_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_5be68_row1_col0" class="data row1 col0">
(512, 768)
</td>
</tr>
<tr>
<th id="T_5be68_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_5be68_row2_col0" class="data row2 col0">
(341, 511)
</td>
</tr>
<tr>
<th id="T_5be68_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_5be68_row3_col0" class="data row3 col0">
(511, 511)
</td>
</tr>
<tr>
<th id="T_5be68_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_5be68_row4_col0" class="data row4 col0">
(512, 512)
</td>
</tr>
</tbody>
</table>
</div>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<p>We will be applying the <code>SanitizeBoundingBoxes</code> transform here as well. This transform can remove key points if a previous transform moves them outside the image dimensions. The Keypoint R-CNN model still expects values for key points even when not visible, so we will fill the target annotations with dummy values as needed.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> LabelMeKeypointDataset(Dataset):</span>
<span id="cb31-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A PyTorch Dataset class for handling LabelMe image keypoints.</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class extends PyTorch's Dataset and is designed to work with image data and</span></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    associated keypoints annotations. It supports loading images and corresponding</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    keypoints annotations, and applying transformations.</span></span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_keys (list): List of image keys.</span></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation_df (DataFrame): DataFrame containing annotations for each image.</span></span>
<span id="cb31-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_dict (dict): Dictionary mapping image keys to their file paths.</span></span>
<span id="cb31-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transforms (callable, optional): Transformations to be applied to the images and targets.</span></span>
<span id="cb31-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb31-16"></span>
<span id="cb31-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb31-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the LabelMeKeypointDataset with image keys, annotations, and other relevant information.</span></span>
<span id="cb31-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb31-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_keys (list): List of image keys.</span></span>
<span id="cb31-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation_df (DataFrame): DataFrame containing annotations for each image.</span></span>
<span id="cb31-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_dict (dict): Dictionary mapping image keys to their file paths.</span></span>
<span id="cb31-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb31-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            transforms (callable, optional): Transformations to be applied to the images and targets.</span></span>
<span id="cb31-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb31-29">        </span>
<span id="cb31-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys</span>
<span id="cb31-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df</span>
<span id="cb31-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict</span>
<span id="cb31-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx</span>
<span id="cb31-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms</span>
<span id="cb31-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sanitize_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.transforms.v2.SanitizeBoundingBoxes()</span>
<span id="cb31-36"></span>
<span id="cb31-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.BBOX_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb31-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.DUMMY_VALUE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb31-39"></span>
<span id="cb31-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb31-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the number of items in the dataset.</span></span>
<span id="cb31-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb31-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            int: Number of items in the dataset.</span></span>
<span id="cb31-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb31-48">        </span>
<span id="cb31-49">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb31-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an item from the dataset at the specified index.</span></span>
<span id="cb31-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb31-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            index (int): Index of the item to retrieve.</span></span>
<span id="cb31-55"></span>
<span id="cb31-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its corresponding target (annotations).</span></span>
<span id="cb31-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-59">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb31-60">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb31-61">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb31-62">        </span>
<span id="cb31-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Applying transformations if specified</span></span>
<span id="cb31-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb31-65">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb31-66"></span>
<span id="cb31-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill any missing keypoints with dummy values</span></span>
<span id="cb31-68">        target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._fill_and_order_target(target)</span>
<span id="cb31-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb31-70"></span>
<span id="cb31-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> order_points_by_labels(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data, label_order):</span>
<span id="cb31-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Extracts and orders points from a list of dictionaries based on a given order of labels.</span></span>
<span id="cb31-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param data: List of dictionaries containing labels and points.</span></span>
<span id="cb31-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param label_order: List of labels in the desired order.</span></span>
<span id="cb31-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :return: List of points in the specified label order.</span></span>
<span id="cb31-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-79">        ordered_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb31-80">        label_to_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]: item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data}</span>
<span id="cb31-81">    </span>
<span id="cb31-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> label_order:</span>
<span id="cb31-83">            points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_to_points.get(label)</span>
<span id="cb31-84">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb31-85">                ordered_points.extend(points)</span>
<span id="cb31-86"></span>
<span id="cb31-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ordered_points</span>
<span id="cb31-88"></span>
<span id="cb31-89">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb31-90">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Loads an image and its corresponding target (annotations) based on the provided annotation.</span></span>
<span id="cb31-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb31-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation (DataFrame row): Annotation data for a specific image.</span></span>
<span id="cb31-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Returns:</span></span>
<span id="cb31-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the loaded image and its corresponding target data.</span></span>
<span id="cb31-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-98">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image from the file path specified in the annotations</span></span>
<span id="cb31-99">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb31-100">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb31-101"></span>
<span id="cb31-102">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extracting keypoints from the annotation and converting them to a tensor</span></span>
<span id="cb31-103">        keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.order_points_by_labels(annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>], <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx.keys())</span>
<span id="cb31-104">        keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.array(keypoints, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb31-105">        </span>
<span id="cb31-106">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding an offset to create bounding boxes around keypoints</span></span>
<span id="cb31-107">        keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((keypoints, torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.BBOX_DIM), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-108">                </span>
<span id="cb31-109">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert bounding box format and create a BoundingBoxes object</span></span>
<span id="cb31-110">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.box_convert(keypoints_bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>)</span>
<span id="cb31-111">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb31-112">        </span>
<span id="cb31-113">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create tensor for labels based on the class indices</span></span>
<span id="cb31-114">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx.keys()])</span>
<span id="cb31-115">        </span>
<span id="cb31-116">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span>
<span id="cb31-117"></span>
<span id="cb31-118">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _fill_and_order_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, target):</span>
<span id="cb31-119">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-120"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Fills and orders the target bounding boxes and labels based on the class index.</span></span>
<span id="cb31-121"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-122"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This method ensures that each target has a bounding box and label for each class,</span></span>
<span id="cb31-123"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        even if some classes are not present in the original target. Missing classes</span></span>
<span id="cb31-124"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        are filled with dummy values.</span></span>
<span id="cb31-125"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            target (dict): A dictionary containing 'boxes' and 'labels' keys, where</span></span>
<span id="cb31-128"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           'boxes' is a tensor of bounding boxes and 'labels' is a tensor</span></span>
<span id="cb31-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           of labels corresponding to these boxes.</span></span>
<span id="cb31-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-131"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-132"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dict: The updated target dictionary with boxes and labels ordered and filled</span></span>
<span id="cb31-133"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  according to the class index.</span></span>
<span id="cb31-134"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-135">    </span>
<span id="cb31-136">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize new boxes with dummy values for each class</span></span>
<span id="cb31-137">        new_boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.full((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.DUMMY_VALUE)</span>
<span id="cb31-138">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare labels tensor based on the class indices</span></span>
<span id="cb31-139">        new_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx.values()), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32)</span>
<span id="cb31-140">    </span>
<span id="cb31-141">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over each class label</span></span>
<span id="cb31-142">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(new_labels):</span>
<span id="cb31-143">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the current label exists in the target's labels</span></span>
<span id="cb31-144">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]:</span>
<span id="cb31-145">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the index of the current label in the target's labels</span></span>
<span id="cb31-146">                idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> label).nonzero(as_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb31-147">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the corresponding box to the new boxes tensor</span></span>
<span id="cb31-148">                new_boxes[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>][idx]</span>
<span id="cb31-149">    </span>
<span id="cb31-150">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the target dictionary with the new boxes and labels</span></span>
<span id="cb31-151">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_boxes</span>
<span id="cb31-152">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_labels</span>
<span id="cb31-153">    </span>
<span id="cb31-154">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> target</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb32-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb32-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb32-4">        transforms.ColorJitter(</span>
<span id="cb32-5">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb32-6">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb32-7">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb32-8">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb32-9">        ),</span>
<span id="cb32-10">        transforms.RandomGrayscale(),</span>
<span id="cb32-11">        transforms.RandomEqualize(),</span>
<span id="cb32-12">        RandomPixelCopy(max_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>),</span>
<span id="cb32-13">        transforms.RandomPerspective(distortion_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">117</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">104</span>)),</span>
<span id="cb32-14">        transforms.RandomRotation(degrees<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">117</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">104</span>)),</span>
<span id="cb32-15">        iou_crop,</span>
<span id="cb32-16">    ],</span>
<span id="cb32-17">)</span>
<span id="cb32-18"></span>
<span id="cb32-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb32-20">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-21">    resize_max, </span>
<span id="cb32-22">    pad_square,</span>
<span id="cb32-23">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb32-24">])</span>
<span id="cb32-25"></span>
<span id="cb32-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb32-27">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-28">    transforms.ToImage(), </span>
<span id="cb32-29">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb32-30">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb32-31">])</span>
<span id="cb32-32"></span>
<span id="cb32-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb32-34">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-35">    data_aug_tfms, </span>
<span id="cb32-36">    resize_pad_tfm, </span>
<span id="cb32-37">    final_tfms</span>
<span id="cb32-38">])</span>
<span id="cb32-39">valid_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([resize_pad_tfm, final_tfms])</span></code></pre></div>
</section>
<section id="initialize-datasets" class="level3">
<h3 class="anchored" data-anchor-id="initialize-datasets">Initialize Datasets</h3>
<p>Now, we can create the dataset objects for the training and validation sets using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb33-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb33-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelMeKeypointDataset(train_keys, annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb33-6">valid_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelMeKeypointDataset(val_keys, annotation_df, img_dict, class_to_idx, valid_tfms)</span>
<span id="cb33-7"></span>
<span id="cb33-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training and validation datasets</span></span>
<span id="cb33-9">pd.Series({</span>
<span id="cb33-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb33-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Validation dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataset)}</span>
<span id="cb33-12">).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_408f0">
<thead>
</thead>
<tbody>
<tr>
<th id="T_408f0_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_408f0_row0_col0" class="data row0 col0">
180
</td>
</tr>
<tr>
<th id="T_408f0_level0_row1" class="row_heading level0 row1">
Validation dataset size:
</th>
<td id="T_408f0_row1_col0" class="data row1 col0">
20
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>Let’s verify the dataset objects work correctly by inspecting the first samples from the training and validation sets.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<p>Since our custom dataset fills missing annotations with dummy values, we will pass the target dictionary through the <code>SanitizeBoundingBoxes</code> function again.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a sample image and its target annotations</span></span>
<span id="cb34-2">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sanitize bounding boxes to remove dummy values</span></span>
<span id="cb34-5">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb34-6">targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb34-7">sanitized_image, sanitized_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], targets)</span>
<span id="cb34-8"></span>
<span id="cb34-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with the sanitized annotations</span></span>
<span id="cb34-10">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb34-11">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(sanitized_image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb34-12">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb34-13">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb34-14">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb34-15">)</span>
<span id="cb34-16"></span>
<span id="cb34-17">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_62_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-validation-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-validation-set-sample">Inspect validation set sample</h4>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb35-2"></span>
<span id="cb35-3">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb35-4">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb35-5">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb35-6">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb35-7">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb35-8">)</span>
<span id="cb35-9"></span>
<span id="cb35-10">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_64_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="initialize-dataloaders" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataloaders">Initialize DataLoaders</h3>
<p>The last step before training is to instantiate the DataLoaders for the training and validation sets. Try decreasing the batch size if you encounter memory limitations.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the training batch size</span></span>
<span id="cb36-2">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the number of worker processes for loading data. This should be the number of CPUs available.</span></span>
<span id="cb36-5">num_workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.cpu_count()</span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define parameters for DataLoader</span></span>
<span id="cb36-8">data_loader_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb36-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch_size'</span>: bs,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch size for data loading</span></span>
<span id="cb36-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_workers'</span>: num_workers,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of subprocesses to use for data loading</span></span>
<span id="cb36-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'persistent_workers'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If True, the data loader will not shutdown the worker processes after a dataset has been consumed once. This allows to maintain the worker dataset instances alive.</span></span>
<span id="cb36-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> device,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If True, the data loader will copy Tensors into CUDA pinned memory before returning them. Useful when using GPU.</span></span>
<span id="cb36-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory_device'</span>: device <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> device <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specifies the device where the data should be loaded. Commonly set to use the GPU.</span></span>
<span id="cb36-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'collate_fn'</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> batch: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>batch)),</span>
<span id="cb36-15">}</span>
<span id="cb36-16"></span>
<span id="cb36-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for training data. Data is shuffled for every epoch.</span></span>
<span id="cb36-18">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb36-19"></span>
<span id="cb36-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for validation data. Shuffling is not necessary for validation data.</span></span>
<span id="cb36-21">valid_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params)</span>
<span id="cb36-22"></span>
<span id="cb36-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of batches in the training and validation DataLoaders</span></span>
<span id="cb36-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of batches in train DataLoader: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb36-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of batches in validation DataLoader: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataloader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<pre><code>Number of batches in train DataLoader: 45
Number of batches in validation DataLoader: 5</code></pre>
</section>
</section>
<section id="fine-tuning-the-model" class="level2">
<h2 class="anchored" data-anchor-id="fine-tuning-the-model">Fine-tuning the Model</h2>
<p>In this section, we will implement the training code and fine-tune our model.</p>
<section id="define-utility-functions" class="level3">
<h3 class="anchored" data-anchor-id="define-utility-functions">Define Utility Functions</h3>
<p>First, we need to define a couple of utility functions.</p>
<section id="define-a-function-to-create-a-bounding-box-that-encapsulates-the-key-points" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-create-a-bounding-box-that-encapsulates-the-key-points">Define a function to create a bounding box that encapsulates the key points</h4>
<p>The Keypoint R-CNN model expects a bounding box encapsulating the points associated with a given person/object. We could include these bounding box annotations in our dataset (e.g., have bounding boxes around each face). However, dynamically making one large enough to contain the key points will suffice.</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> keypoints_to_bbox(keypoints, offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb38-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Convert a tensor of keypoint coordinates to a bounding box.</span></span>
<span id="cb38-4"></span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb38-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    keypoints (Tensor): A tensor of shape (N, 2), where N is the number of keypoints.</span></span>
<span id="cb38-7"></span>
<span id="cb38-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb38-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Tensor: A tensor representing the bounding box [xmin, ymin, xmax, ymax].</span></span>
<span id="cb38-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb38-11">    x_coordinates, y_coordinates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keypoints[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], keypoints[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb38-12"></span>
<span id="cb38-13">    xmin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x_coordinates)</span>
<span id="cb38-14">    ymin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(y_coordinates)</span>
<span id="cb38-15">    xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x_coordinates)</span>
<span id="cb38-16">    ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(y_coordinates)</span>
<span id="cb38-17"></span>
<span id="cb38-18">    bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([xmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>offset, ymin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>offset, xmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset, ymax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset])</span>
<span id="cb38-19"></span>
<span id="cb38-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> bbox</span></code></pre></div>
</section>
<section id="define-a-conditional-autocast-context-manager" class="level4">
<h4 class="anchored" data-anchor-id="define-a-conditional-autocast-context-manager">Define a conditional <code>autocast</code> context manager</h4>
<p>The autocast context manager that handles mixed-precision training on CPUs does not fully support the Keypoint R-CNN model. Therefore, we will only use mixed-precision training when not using the CPU.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb39-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> conditional_autocast(device):</span>
<span id="cb39-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A context manager for conditional automatic mixed precision (AMP).</span></span>
<span id="cb39-5"></span>
<span id="cb39-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This context manager applies automatic mixed precision for operations if the</span></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    specified device is not a CPU. It's a no-op (does nothing) if the device is a CPU.</span></span>
<span id="cb39-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Mixed precision can speed up computations and reduce memory usage on compatible</span></span>
<span id="cb39-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    hardware, primarily GPUs.</span></span>
<span id="cb39-10"></span>
<span id="cb39-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb39-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    device (str): The device type, e.g., 'cuda' or 'cpu', which determines whether</span></span>
<span id="cb39-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  autocasting is applied.</span></span>
<span id="cb39-14"></span>
<span id="cb39-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Yields:</span></span>
<span id="cb39-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    None - This function does not return any value but enables the wrapped code</span></span>
<span id="cb39-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           block to execute under the specified precision context.</span></span>
<span id="cb39-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb39-19"></span>
<span id="cb39-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the specified device is not a CPU</span></span>
<span id="cb39-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> device:</span>
<span id="cb39-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the device is not a CPU, enable autocast for the specified device type.</span></span>
<span id="cb39-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Autocast will automatically choose the precision (e.g., float16) for certain</span></span>
<span id="cb39-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># operations to improve performance.</span></span>
<span id="cb39-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> autocast(device_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device):</span>
<span id="cb39-26">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb39-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb39-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the device is a CPU, autocast is not applied.</span></span>
<span id="cb39-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This yields control back to the with-block with no changes.</span></span>
<span id="cb39-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span></code></pre></div>
</section>
</section>
<section id="define-the-training-loop" class="level3">
<h3 class="anchored" data-anchor-id="define-the-training-loop">Define the Training Loop</h3>
<p>The following function performs a single pass through the training or validation set.</p>
<p>As mentioned earlier, the Keypoint R-CNN model expects values for key points even when not visible. We indicate which key points are visible, with a <code>1</code> for visible and a <code>0</code> for not.</p>
<p>The model has different behavior when in <code>training</code> mode versus <code>evaluation</code> mode. In training mode, it calculates the loss internally for the key point estimation task and returns a dictionary with the individual loss values. We can sum up these separate values to get the total loss.</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to run a single training/validation epoch</span></span>
<span id="cb40-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_epoch(model, dataloader, optimizer, lr_scheduler, device, scaler, epoch_id, is_training):</span>
<span id="cb40-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Function to run a single training or evaluation epoch.</span></span>
<span id="cb40-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb40-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A PyTorch model to train or evaluate.</span></span>
<span id="cb40-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dataloader: A PyTorch DataLoader providing the data.</span></span>
<span id="cb40-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: The optimizer to use for training the model.</span></span>
<span id="cb40-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_func: The loss function used for training.</span></span>
<span id="cb40-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        device: The device (CPU or GPU) to run the model on.</span></span>
<span id="cb40-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        scaler: Gradient scaler for mixed-precision training.</span></span>
<span id="cb40-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        is_training: Boolean flag indicating whether the model is in training or evaluation mode.</span></span>
<span id="cb40-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb40-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb40-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The average loss for the epoch.</span></span>
<span id="cb40-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb40-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set model to training mode</span></span>
<span id="cb40-19">    model.train()</span>
<span id="cb40-20">    </span>
<span id="cb40-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the average loss for the current epoch </span></span>
<span id="cb40-22">    epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb40-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize progress bar with total number of batches in the dataloader</span></span>
<span id="cb40-24">    progress_bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tqdm(total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eval"</span>)</span>
<span id="cb40-25">    </span>
<span id="cb40-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over data batches</span></span>
<span id="cb40-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch_id, (inputs, targets) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader):</span>
<span id="cb40-28">        </span>
<span id="cb40-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move inputs and targets to the specified device</span></span>
<span id="cb40-30">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(inputs).to(device)</span>
<span id="cb40-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the ground truth bounding boxes and labels</span></span>
<span id="cb40-32">        gt_bboxes, gt_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>[(d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>].to(device), d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].to(device)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets])</span>
<span id="cb40-33">        </span>
<span id="cb40-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert ground truth bounding boxes from 'xyxy' to 'cxcywh' format and only keep center coordinates</span></span>
<span id="cb40-35">        gt_keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.box_convert(torch.stack(gt_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>)[:,:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb40-36">        </span>
<span id="cb40-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a visibility tensor with ones, indicating all keypoints are visible</span></span>
<span id="cb40-38">        visibility <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(inputs),gt_keypoints.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(device)</span>
<span id="cb40-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a visibility mask based on whether the bounding boxes are valid (greater than or equal to 0)</span></span>
<span id="cb40-40">        visibility_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (torch.stack(gt_bboxes) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>)[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].view(visibility.shape).to(device)</span>
<span id="cb40-41">        </span>
<span id="cb40-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the keypoints with the visibility mask, adding a visibility channel to keypoints</span></span>
<span id="cb40-43">        gt_keypoints_with_visibility <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat((</span>
<span id="cb40-44">            gt_keypoints, </span>
<span id="cb40-45">            visibility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>visibility_mask</span>
<span id="cb40-46">        ), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb40-47">        </span>
<span id="cb40-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert keypoints to bounding boxes for each input and move them to the specified device</span></span>
<span id="cb40-49">        gt_object_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.vstack([keypoints_to_bbox(keypoints) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> keypoints <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gt_keypoints]).to(device)</span>
<span id="cb40-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize ground truth labels as tensor of ones and move them to the specified device</span></span>
<span id="cb40-51">        gt_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(inputs), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int64).to(device)</span>
<span id="cb40-52">        </span>
<span id="cb40-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare the targets for the Keypoint R-CNN model</span></span>
<span id="cb40-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This includes bounding boxes, labels, and keypoints with visibility for each input image</span></span>
<span id="cb40-55">        keypoint_rcnn_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb40-56">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span> : boxes[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keypoints'</span>: keypoints[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]}</span>
<span id="cb40-57">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> boxes, labels, keypoints <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(gt_object_bboxes, gt_labels, gt_keypoints_with_visibility)</span>
<span id="cb40-58">        ]</span>
<span id="cb40-59"></span>
<span id="cb40-60">        </span>
<span id="cb40-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass with Automatic Mixed Precision (AMP) context manager</span></span>
<span id="cb40-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> conditional_autocast(torch.device(device).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>):</span>
<span id="cb40-63">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb40-64">                losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs.to(device), move_data_to_device(keypoint_rcnn_targets, device))</span>
<span id="cb40-65">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb40-66">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb40-67">                    losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs.to(device), move_data_to_device(keypoint_rcnn_targets, device))</span>
<span id="cb40-68">        </span>
<span id="cb40-69">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the loss</span></span>
<span id="cb40-70">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([loss <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loss <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> losses.values()])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum up the losses</span></span>
<span id="cb40-71">                </span>
<span id="cb40-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If in training mode</span></span>
<span id="cb40-73">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb40-74">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> scaler:</span>
<span id="cb40-75">                scaler.scale(loss).backward()</span>
<span id="cb40-76">                scaler.step(optimizer)</span>
<span id="cb40-77">                old_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.get_scale()</span>
<span id="cb40-78">                scaler.update()</span>
<span id="cb40-79">                new_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.get_scale()</span>
<span id="cb40-80">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> new_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> old_scaler:</span>
<span id="cb40-81">                    lr_scheduler.step()</span>
<span id="cb40-82">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb40-83">                loss.backward()</span>
<span id="cb40-84">                optimizer.step()</span>
<span id="cb40-85">                lr_scheduler.step()</span>
<span id="cb40-86">                </span>
<span id="cb40-87">            optimizer.zero_grad()</span>
<span id="cb40-88">        </span>
<span id="cb40-89">        loss_item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss.item()</span>
<span id="cb40-90">        epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss_item</span>
<span id="cb40-91">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update progress bar</span></span>
<span id="cb40-92">        progress_bar.set_postfix(loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_item, </span>
<span id="cb40-93">                                 avg_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(batch_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb40-94">                                 lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb40-95">        progress_bar.update()</span>
<span id="cb40-96">        </span>
<span id="cb40-97">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If loss is NaN or infinity, stop training</span></span>
<span id="cb40-98">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb40-99">            stop_training_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss is NaN or infinite at epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, batch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Stopping training."</span></span>
<span id="cb40-100">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> math.isnan(loss_item) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> math.isfinite(loss_item), stop_training_message</span>
<span id="cb40-101">        </span>
<span id="cb40-102">    progress_bar.close()</span>
<span id="cb40-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (batch_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Next, we define the <code>train_loop</code> function, which executes the main training loop. It iterates over each epoch, runs through the training and validation sets, and saves the best model based on the validation loss.</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_loop(model, </span>
<span id="cb41-2">               train_dataloader, </span>
<span id="cb41-3">               valid_dataloader, </span>
<span id="cb41-4">               optimizer,  </span>
<span id="cb41-5">               lr_scheduler, </span>
<span id="cb41-6">               device, </span>
<span id="cb41-7">               epochs, </span>
<span id="cb41-8">               checkpoint_path, </span>
<span id="cb41-9">               use_scaler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb41-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb41-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Main training loop.</span></span>
<span id="cb41-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb41-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb41-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A PyTorch model to train.</span></span>
<span id="cb41-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        train_dataloader: A PyTorch DataLoader providing the training data.</span></span>
<span id="cb41-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        valid_dataloader: A PyTorch DataLoader providing the validation data.</span></span>
<span id="cb41-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: The optimizer to use for training the model.</span></span>
<span id="cb41-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        lr_scheduler: The learning rate scheduler.</span></span>
<span id="cb41-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        device: The device (CPU or GPU) to run the model on.</span></span>
<span id="cb41-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        epochs: The number of epochs to train for.</span></span>
<span id="cb41-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        checkpoint_path: The path where to save the best model checkpoint.</span></span>
<span id="cb41-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        use_scaler: Whether to scale graidents when using a CUDA device</span></span>
<span id="cb41-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb41-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb41-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        None</span></span>
<span id="cb41-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb41-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a gradient scaler for mixed-precision training if the device is a CUDA GPU</span></span>
<span id="cb41-28">    scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.amp.GradScaler() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> use_scaler <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb41-29">    best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inf'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the best validation loss</span></span>
<span id="cb41-30"></span>
<span id="cb41-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over the epochs</span></span>
<span id="cb41-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epochs"</span>):</span>
<span id="cb41-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run a training epoch and get the training loss</span></span>
<span id="cb41-34">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, train_dataloader, optimizer, lr_scheduler, device, scaler, epoch, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run an evaluation epoch and get the validation loss</span></span>
<span id="cb41-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb41-37">            valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, valid_dataloader, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, device, scaler, epoch, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb41-38"></span>
<span id="cb41-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the validation loss is lower than the best validation loss seen so far, save the model checkpoint</span></span>
<span id="cb41-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> best_loss:</span>
<span id="cb41-41">            best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss</span>
<span id="cb41-42">            torch.save(model.state_dict(), checkpoint_path)</span>
<span id="cb41-43"></span>
<span id="cb41-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save metadata about the training process</span></span>
<span id="cb41-45">            training_metadata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb41-46">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>: epoch,</span>
<span id="cb41-47">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>: train_loss,</span>
<span id="cb41-48">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_loss'</span>: valid_loss, </span>
<span id="cb41-49">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning_rate'</span>: lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb41-50">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_architecture'</span>: model.name</span>
<span id="cb41-51">            }</span>
<span id="cb41-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(Path(checkpoint_path.parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'training_metadata.json'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb41-53">                json.dump(training_metadata, f)</span>
<span id="cb41-54"></span>
<span id="cb41-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the device is a GPU, empty the cache</span></span>
<span id="cb41-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>:</span>
<span id="cb41-57">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(torch, device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>).empty_cache()</span></code></pre></div>
</section>
<section id="set-the-model-checkpoint-path" class="level3">
<h3 class="anchored" data-anchor-id="set-the-model-checkpoint-path">Set the Model Checkpoint Path</h3>
<p>Before we proceed with training, let’s generate a timestamp for the training session and create a directory to save the checkpoints during training.</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate timestamp for the training session (Year-Month-Day_Hour_Minute_Second)</span></span>
<span id="cb42-2">timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_%H-%M-%S"</span>)</span>
<span id="cb42-3"></span>
<span id="cb42-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a directory to store the checkpoints if it does not already exist</span></span>
<span id="cb42-5">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>timestamp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-6"></span>
<span id="cb42-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the checkpoint directory if it does not already exist</span></span>
<span id="cb42-8">checkpoint_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb42-9"></span>
<span id="cb42-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb42-11">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth"</span></span>
<span id="cb42-12"></span>
<span id="cb42-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(checkpoint_path)</span></code></pre></div>
<pre><code>pytorch-keypoint-r-cnn/2024-01-28_17-07-09/keypointrcnn_resnet50_fpn.pth</code></pre>
<p>Let’s also save a copy of the colormap for the current dataset in the training folder for future use.</p>
</section>
<section id="save-the-color-map" class="level3">
<h3 class="anchored" data-anchor-id="save-the-color-map">Save the Color Map</h3>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a color map and write it to a JSON file</span></span>
<span id="cb44-2">color_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'items'</span>: [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: label, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>: color} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(class_names, colors)]}</span>
<span id="cb44-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-colormap.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb44-4">    json.dump(color_map, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb44-5"></span>
<span id="cb44-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the name of the file that the color map was written to</span></span>
<span id="cb44-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-colormap.json"</span>)</span></code></pre></div>
<pre><code>pytorch-keypoint-r-cnn/2024-01-28_17-07-09/labelme-keypoint-eyes-noses-dataset-colormap.json</code></pre>
</section>
<section id="configure-the-training-parameters" class="level3">
<h3 class="anchored" data-anchor-id="configure-the-training-parameters">Configure the Training Parameters</h3>
<p>Now, we can configure the parameters for training. We must specify the learning rate and number of training epochs. We will also instantiate the optimizer and learning rate scheduler.</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate for the model</span></span>
<span id="cb46-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e-4</span></span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of training epochs</span></span>
<span id="cb46-5">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AdamW optimizer; includes weight decay for regularization</span></span>
<span id="cb46-8">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb46-9"></span>
<span id="cb46-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate scheduler; adjusts the learning rate during training</span></span>
<span id="cb46-11">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.OneCycleLR(optimizer, </span>
<span id="cb46-12">                                                   max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, </span>
<span id="cb46-13">                                                   total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader))</span></code></pre></div>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the Model</h3>
<p>Finally, we can train the model using the <code>train_loop</code> function. Training time will depend on the available hardware.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Training usually takes around 30 minutes on the free GPU tier of Google Colab.</p>
</div>
</div>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">train_loop(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, </span>
<span id="cb47-2">           train_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataloader,</span>
<span id="cb47-3">           valid_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_dataloader,</span>
<span id="cb47-4">           optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, </span>
<span id="cb47-5">           lr_scheduler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr_scheduler, </span>
<span id="cb47-6">           device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.device(device), </span>
<span id="cb47-7">           epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, </span>
<span id="cb47-8">           checkpoint_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>checkpoint_path,</span>
<span id="cb47-9">           use_scaler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled" title="Training Progress">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Training Progress
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre class="text"><code>Epochs: 100% |██████████| 70/70 [07:29&lt;00:00, 6.55s/it]
Train: 100% |██████████| 45/45 [00:07&lt;00:00, 8.58it/s, avg_loss=6.95, loss=6.07, lr=2.27e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 8.31it/s, avg_loss=5.17, loss=5.31, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.50it/s, avg_loss=5.42, loss=4.87, lr=3.07e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.40it/s, avg_loss=4.3, loss=4.14, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 7.09it/s, avg_loss=4.85, loss=4.88, lr=4.38e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.72it/s, avg_loss=4.54, loss=4.73, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.12it/s, avg_loss=4.55, loss=4.27, lr=6.18e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 13.73it/s, avg_loss=4.16, loss=3.78, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.77it/s, avg_loss=4.37, loss=4.64, lr=8.42e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.63it/s, avg_loss=3.79, loss=3.36, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.46it/s, avg_loss=4.53, loss=6.24, lr=0.000111]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.26it/s, avg_loss=3.81, loss=3.25, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.30it/s, avg_loss=4.39, loss=4.33, lr=0.00014]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.50it/s, avg_loss=3.93, loss=3.63, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.64it/s, avg_loss=4.2, loss=4.98, lr=0.000173]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.93it/s, avg_loss=3.85, loss=3.1, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.43it/s, avg_loss=4.37, loss=4.64, lr=0.000207]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.57it/s, avg_loss=4.49, loss=4.54, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.54it/s, avg_loss=4.26, loss=3.53, lr=0.000242]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.36it/s, avg_loss=4.11, loss=4.03, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.48it/s, avg_loss=4.38, loss=4.53, lr=0.000278]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.60it/s, avg_loss=4.34, loss=3.82, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.51it/s, avg_loss=4.58, loss=4.45, lr=0.000314]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.03it/s, avg_loss=4.42, loss=4.41, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.58it/s, avg_loss=4.47, loss=3.38, lr=0.000348]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.05it/s, avg_loss=4.24, loss=3.27, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.53it/s, avg_loss=4.44, loss=5.01, lr=0.00038]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.75it/s, avg_loss=4.22, loss=4.14, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.58it/s, avg_loss=4.54, loss=4.36, lr=0.00041]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.24it/s, avg_loss=4.02, loss=3.7, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.83it/s, avg_loss=4.55, loss=3.89, lr=0.000436]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.35it/s, avg_loss=4.04, loss=3.33, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.58it/s, avg_loss=4.57, loss=4.49, lr=0.000459]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.79it/s, avg_loss=4.68, loss=4.85, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.84it/s, avg_loss=4.57, loss=4.47, lr=0.000477]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.73it/s, avg_loss=3.98, loss=3.36, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.83it/s, avg_loss=4.4, loss=4.59, lr=0.00049]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.27it/s, avg_loss=4.11, loss=3.59, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.76it/s, avg_loss=4.59, loss=4.98, lr=0.000497]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.49it/s, avg_loss=3.98, loss=3.41, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.85it/s, avg_loss=4.35, loss=4.5, lr=0.0005]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.15it/s, avg_loss=4, loss=3.34, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.05it/s, avg_loss=4.6, loss=5.02, lr=0.000499]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 13.54it/s, avg_loss=4.14, loss=3.99, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.92it/s, avg_loss=4.5, loss=3.75, lr=0.000498]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.00it/s, avg_loss=4.38, loss=4.55, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.39it/s, avg_loss=4.25, loss=3.95, lr=0.000495]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.46it/s, avg_loss=3.72, loss=3.16, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.55it/s, avg_loss=4.26, loss=5.19, lr=0.000492]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.02it/s, avg_loss=4.54, loss=4.14, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.46it/s, avg_loss=4.15, loss=3.68, lr=0.000487]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.73it/s, avg_loss=3.94, loss=3.61, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.77it/s, avg_loss=4.3, loss=3.22, lr=0.000482]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.81it/s, avg_loss=3.71, loss=3.57, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.42it/s, avg_loss=4.08, loss=3.55, lr=0.000475]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.04it/s, avg_loss=3.88, loss=3.6, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.42it/s, avg_loss=4.18, loss=3.19, lr=0.000468]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.78it/s, avg_loss=3.84, loss=3.7, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.52it/s, avg_loss=4.09, loss=3.7, lr=0.000459]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.19it/s, avg_loss=3.91, loss=3.65, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.16it/s, avg_loss=3.93, loss=4.28, lr=0.00045]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.02it/s, avg_loss=3.8, loss=3.52, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.15it/s, avg_loss=4.04, loss=3.38, lr=0.00044]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.09it/s, avg_loss=3.88, loss=4.04, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.36it/s, avg_loss=4.1, loss=3.53, lr=0.000429]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.44it/s, avg_loss=3.7, loss=2.95, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.62it/s, avg_loss=4.05, loss=4.06, lr=0.000418]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.18it/s, avg_loss=3.78, loss=3.28, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.20it/s, avg_loss=3.95, loss=3.53, lr=0.000406]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.48it/s, avg_loss=3.44, loss=3.38, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.27it/s, avg_loss=3.86, loss=2.82, lr=0.000393]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.31it/s, avg_loss=3.63, loss=3, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.35it/s, avg_loss=3.97, loss=3.48, lr=0.000379]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.21it/s, avg_loss=3.62, loss=3.22, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.46it/s, avg_loss=3.72, loss=3.94, lr=0.000365]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.22it/s, avg_loss=3.45, loss=2.83, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.30it/s, avg_loss=3.75, loss=3.34, lr=0.000351]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.41it/s, avg_loss=3.52, loss=3.38, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.63it/s, avg_loss=3.7, loss=4.19, lr=0.000336]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.00it/s, avg_loss=3.56, loss=2.9, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.47it/s, avg_loss=3.65, loss=4.22, lr=0.000321]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.94it/s, avg_loss=3.67, loss=3.11, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.50it/s, avg_loss=3.58, loss=4.13, lr=0.000305]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.86it/s, avg_loss=3.55, loss=2.98, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.55it/s, avg_loss=3.54, loss=3.29, lr=0.00029]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.17it/s, avg_loss=3.42, loss=2.62, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.25it/s, avg_loss=3.51, loss=3.97, lr=0.000274]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.54it/s, avg_loss=3.33, loss=2.68, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.39it/s, avg_loss=3.5, loss=2.83, lr=0.000258]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.36it/s, avg_loss=3.27, loss=2.94, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.22it/s, avg_loss=3.45, loss=4.09, lr=0.000242]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.64it/s, avg_loss=3.63, loss=3.29, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.37it/s, avg_loss=3.44, loss=2.97, lr=0.000226]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 13.97it/s, avg_loss=3.44, loss=2.87, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.26it/s, avg_loss=3.35, loss=2.87, lr=0.00021]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.52it/s, avg_loss=3.35, loss=2.94, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.29it/s, avg_loss=3.32, loss=3.1, lr=0.000194]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.92it/s, avg_loss=3.58, loss=3.28, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.67it/s, avg_loss=3.21, loss=3.25, lr=0.000179]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.04it/s, avg_loss=3.36, loss=2.86, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.12it/s, avg_loss=3.29, loss=2.95, lr=0.000163]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.03it/s, avg_loss=3.36, loss=2.87, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.07it/s, avg_loss=3.21, loss=3.99, lr=0.000148]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.45it/s, avg_loss=3.32, loss=2.96, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.23it/s, avg_loss=3.21, loss=2.92, lr=0.000134]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.38it/s, avg_loss=3.15, loss=2.81, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.05it/s, avg_loss=3.13, loss=2.58, lr=0.00012]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.48it/s, avg_loss=3.39, loss=2.86, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.27it/s, avg_loss=3.07, loss=2.13, lr=0.000107]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.16it/s, avg_loss=3.15, loss=2.68, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 7.66it/s, avg_loss=3.12, loss=3.1, lr=9.39e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.06it/s, avg_loss=3.27, loss=2.85, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 7.56it/s, avg_loss=3.02, loss=3.05, lr=8.17e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.53it/s, avg_loss=3.24, loss=2.74, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.42it/s, avg_loss=2.99, loss=2.36, lr=7.02e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.08it/s, avg_loss=3.1, loss=2.56, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.24it/s, avg_loss=2.93, loss=2.53, lr=5.94e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.33it/s, avg_loss=3.21, loss=2.85, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.11it/s, avg_loss=2.98, loss=2.77, lr=4.94e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.40it/s, avg_loss=3.31, loss=2.95, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.16it/s, avg_loss=3.04, loss=3.37, lr=4.03e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.74it/s, avg_loss=3.15, loss=2.93, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.33it/s, avg_loss=3, loss=3.06, lr=3.2e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.16it/s, avg_loss=3.1, loss=2.8, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.36it/s, avg_loss=2.92, loss=2.94, lr=2.46e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.99it/s, avg_loss=3.23, loss=2.85, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.45it/s, avg_loss=2.86, loss=2.2, lr=1.81e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.14it/s, avg_loss=3.06, loss=2.78, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.53it/s, avg_loss=2.94, loss=2.69, lr=1.26e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.66it/s, avg_loss=3.07, loss=2.53, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.29it/s, avg_loss=2.86, loss=2.94, lr=8.09e-6]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.19it/s, avg_loss=3.04, loss=2.48, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.56it/s, avg_loss=2.79, loss=2.45, lr=4.54e-6]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 13.92it/s, avg_loss=3.15, loss=2.65, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 7.95it/s, avg_loss=2.87, loss=2.57, lr=2.01e-6]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.27it/s, avg_loss=3.02, loss=2.29, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.31it/s, avg_loss=2.93, loss=2.63, lr=4.93e-7]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.89it/s, avg_loss=2.96, loss=2.65, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.32it/s, avg_loss=2.87, loss=2.75, lr=2.25e-9]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.32it/s, avg_loss=3.07, loss=2.65, lr=]</code></pre>
</div>
</div>
</div>
<p>At last, we have our fine-tuned Keypoint R-CNN model. To wrap up the tutorial, we can test our model by performing inference on individual images.</p>
</section>
</section>
<section id="making-predictions-with-the-model" class="level2">
<h2 class="anchored" data-anchor-id="making-predictions-with-the-model">Making Predictions with the Model</h2>
<p>In this final part of the tutorial, we will cover how to perform inference on individual images with our Mask R-CNN model and filter the predictions.</p>
<section id="prepare-input-data" class="level3">
<h3 class="anchored" data-anchor-id="prepare-input-data">Prepare Input Data</h3>
<p>Let’s use an image from the validation set. That way, we have some ground truth annotation data to compare against. Unlike during training, we won’t stick to square input dimensions for inference.</p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose a random item from the validation set</span></span>
<span id="cb49-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> val_keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb49-3"></span>
<span id="cb49-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the image file path associated with the file ID</span></span>
<span id="cb49-5">test_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict[file_id]</span>
<span id="cb49-6"></span>
<span id="cb49-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the test file</span></span>
<span id="cb49-8">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_file).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb49-9"></span>
<span id="cb49-10">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb49-11"></span>
<span id="cb49-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the scale between the source image and the resized image</span></span>
<span id="cb49-13">min_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(test_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(input_img.size)</span>
<span id="cb49-14"></span>
<span id="cb49-15">display(test_img)</span>
<span id="cb49-16"></span>
<span id="cb49-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas DataFrame for easy formatting</span></span>
<span id="cb49-18">pd.Series({</span>
<span id="cb49-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image Size:"</span>: test_img.size,</span>
<span id="cb49-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Dims:"</span>: input_img.size,</span>
<span id="cb49-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min Image Scale:"</span>: min_img_scale,</span>
<span id="cb49-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size</span>
<span id="cb49-23">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_87_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_0ac3f">
<thead>
</thead>
<tbody>
<tr>
<th id="T_0ac3f_level0_row0" class="row_heading level0 row0">
Source Image Size:
</th>
<td id="T_0ac3f_row0_col0" class="data row0 col0">
(512, 768)
</td>
</tr>
<tr>
<th id="T_0ac3f_level0_row1" class="row_heading level0 row1">
Input Dims:
</th>
<td id="T_0ac3f_row1_col0" class="data row1 col0">
(512, 768)
</td>
</tr>
<tr>
<th id="T_0ac3f_level0_row2" class="row_heading level0 row2">
Min Image Scale:
</th>
<td id="T_0ac3f_row2_col0" class="data row2 col0">
1.000000
</td>
</tr>
<tr>
<th id="T_0ac3f_level0_row3" class="row_heading level0 row3">
Input Image Size:
</th>
<td id="T_0ac3f_row3_col0" class="data row3 col0">
(512, 768)
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-target-annotation-data" class="level3">
<h3 class="anchored" data-anchor-id="get-target-annotation-data">Get Target Annotation Data</h3>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the source annotations for the test image</span></span>
<span id="cb50-2">gt_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb50-3">gt_keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]])).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb50-4">gt_keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((gt_keypoints, torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gt_keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>BBOX_DIM), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</section>
<section id="pass-input-data-to-the-model" class="level3">
<h3 class="anchored" data-anchor-id="pass-input-data-to-the-model">Pass Input Data to the Model</h3>
<p>Now, we can convert the test image to a tensor and pass it to the model. Ensure the model is set to evaluation mode to get predictions instead of loss values.</p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb51-2">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb51-3"></span>
<span id="cb51-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the model and input data are on the same device</span></span>
<span id="cb51-5">model.to(device)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb51-6">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([transforms.ToImage(), </span>
<span id="cb51-7">                                   transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)])(input_img)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>].to(device)</span>
<span id="cb51-8"></span>
<span id="cb51-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb51-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb51-11">    model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_tensor)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</section>
<section id="filter-the-model-output" class="level3">
<h3 class="anchored" data-anchor-id="filter-the-model-output">Filter the Model Output</h3>
<p>The model performs most post-processing steps internally, so we only need to filter the output based on the desired confidence threshold. The model returns predictions as a list of dictionaries. Each dictionary stores bounding boxes, label indices, confidence scores, and key points for a single sample in the input batch.</p>
<p>Since we resized the test image, we must scale the key points to the source resolution.</p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the confidence threshold</span></span>
<span id="cb52-2">conf_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span></span>
<span id="cb52-3"></span>
<span id="cb52-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the output based on the confidence threshold</span></span>
<span id="cb52-5">scores_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scores'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> conf_threshold</span>
<span id="cb52-6"></span>
<span id="cb52-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and scale the predicted keypoints</span></span>
<span id="cb52-8">predicted_keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (model_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keypoints'</span>][scores_mask])[:,:,:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>min_img_scale</span></code></pre></div>
</section>
<section id="compare-model-predictions-with-the-source-annotations" class="level3">
<h3 class="anchored" data-anchor-id="compare-model-predictions-with-the-source-annotations">Compare Model Predictions with the Source Annotations</h3>
<p>Finally, we can compare the model predictions with the ground-truth annotations.</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the test image with the ground-truth annotations</span></span>
<span id="cb53-2">gt_annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb53-3">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(test_img), </span>
<span id="cb53-4">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(gt_keypoints_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>),</span>
<span id="cb53-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># labels=gt_labels, </span></span>
<span id="cb53-6">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gt_labels]]</span>
<span id="cb53-7">)</span>
<span id="cb53-8"></span>
<span id="cb53-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare the labels and bounding box annotations for the test image</span></span>
<span id="cb53-10">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(scores_mask).item()</span>
<span id="cb53-11">keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((predicted_keypoints.cpu(), torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(predicted_keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb53-12"></span>
<span id="cb53-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the test image with the model predictions</span></span>
<span id="cb53-14">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb53-15">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(test_img), </span>
<span id="cb53-16">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(keypoints_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb53-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># labels=labels, </span></span>
<span id="cb53-18">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb53-19">)</span>
<span id="cb53-20"></span>
<span id="cb53-21">stack_imgs([tensor_to_pil(gt_annotated_tensor), tensor_to_pil(annotated_tensor)])</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_95_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The model appears to have learned to detect eyes and noses as desired.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on completing this tutorial for training Keypoint R-CNN models in PyTorch! The skills and knowledge you acquired here provide a solid foundation for future projects.</p>
<p>As a next step, perhaps try annotating a keypoint dataset with <a href="https://github.com/labelmeai/labelme">LabelMe</a> for your own Keypoint R-CNN model or experiment with the data augmentations to see how they impact model accuracy.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/"><strong>Exporting Keypoint R-CNN Models from PyTorch to ONNX</strong></a><strong>:</strong> Learn how to export Keypoint R-CNN models from PyTorch to ONNX and perform inference using ONNX Runtime.</li>
<li><a href="../../posts/pytorch-train-mask-rcnn-tutorial/"><strong>Training Mask R-CNN Models with PyTorch</strong></a><strong>:</strong> Learn how to train Mask R-CNN models on custom datasets with PyTorch.</li>
</ul>
<p><br></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Next Steps">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Next Steps
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Feel free to post questions or problems related to this tutorial in the comments below. I try to make time to address them on Thursdays and Fridays.</li>
<li>If you would like to explore my <a href="../../about.html#services">services</a> for your project, you can reach out via email at <a href="mailto:christian@christianjmills.com">christian@christianjmills.com</a></li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>keypoint-rcnn</category>
  <category>keypoint-estimation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/</guid>
  <pubDate>Mon, 29 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create Custom Torchvision V2 Transforms</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/</link>
  <description><![CDATA[ 




<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Examining the Transforms V2 Class</li>
<li>Creating a Random Pixel Copy Transform</li>
<li>Creating a Random Patch Copy Transform</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide to creating custom <a href="https://pytorch.org/vision/stable/transforms.html#v1-or-v2-which-one-should-i-use">V2 transforms</a> in torchvision. Torchvision’s V2 <a href="https://pytorch.org/vision/stable/transforms.html#v2-api-reference-recommended">image transforms</a> support annotations for various tasks, such as <a href="../../posts/torchvision-labelme-annotation-tutorials/bounding-boxes/">bounding boxes</a> for object detection and <a href="../../posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/">segmentation masks</a> for image segmentation.</p>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, and creating custom data augmentations that support bounding box annotations.</p>
<p>Data augmentation is a technique that creates variations of existing training samples to prevent a model from seeing the same sample twice. The goal is to help the model learn general features versus memorizing specific examples.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. Upon completion, you will have a solid foundation for creating custom V2 image transforms in torchvision for object detection tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></li>
<li><a href="../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-custom-v2-transform-tutorial.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-custom-v2-transform-tutorial.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.11 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.11 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any, Dict, Optional, List, Tuple, Union</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> singledispatchmethod</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-15"></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-18"></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-21"></span>
<span id="cb9-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-24"></span>
<span id="cb9-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-26">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-27"></span>
<span id="cb9-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-30"></span>
<span id="cb9-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-32"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-33"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-34"></span>
<span id="cb9-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-37">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes, Mask</span>
<span id="cb9-39"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tv_tensors</span>
<span id="cb9-40"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wrap <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tv_wrap</span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-43"></span>
<span id="cb9-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-45"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>After importing the dependencies, we can load our dataset.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>We will use the following toy dataset containing images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a> and its bounding box annotations:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/labelme-bounding-box-toy-dataset/tree/main">labelme-bounding-box-toy-dataset</a></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled" title="Bounding Box Annotation Format">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Bounding Box Annotation Format
</div>
</div>
<div class="callout-body-container callout-body">
<p>The bounding boxes for this dataset use the <a href="https://github.com/labelmeai/labelme">LabelMe</a> annotation format. You can learn more about this format and how to work with such annotations in the tutorial linked below:</p>
<ul>
<li><a href="../../posts/torchvision-labelme-annotation-tutorials/bounding-boxes/">Working with LabelMe Bounding Box Annotations in Torchvision</a></li>
</ul>
</div>
</div>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_4e87e">
<thead>
</thead>
<tbody>
<tr>
<th id="T_4e87e_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_4e87e_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_4e87e_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_4e87e_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labelme-bounding-box-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_e1208">
<thead>
</thead>
<tbody>
<tr>
<th id="T_e1208_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_e1208_row0_col0" class="data row0 col0">
cj-mills/labelme-bounding-box-toy-dataset
</td>
</tr>
<tr>
<th id="T_e1208_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_e1208_row1_col0" class="data row1 col0">
Datasets/../Archive/labelme-bounding-box-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_e1208_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_e1208_row2_col0" class="data row2 col0">
Datasets/labelme-bounding-box-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Next, we will make a dictionary that maps each image’s unique name to its file path, allowing us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the dataset</span></span>
<span id="cb13-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_img_files(dataset_path)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb13-5">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (img_file_paths)}</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb13-11">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 28</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
adults-attractive-beautiful-1727660
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/adults-attractive-beautiful-1727660.jpg
</td>
</tr>
<tr>
<th>
balloon-launch-festival-flame-1426050
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/balloon-launch-festival-flame-1426050.jpg
</td>
</tr>
<tr>
<th>
bar-beer-celebration-3009788
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/bar-beer-celebration-3009788.jpg
</td>
</tr>
<tr>
<th>
beach-child-daughter-1438511
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/beach-child-daughter-1438511.jpg
</td>
</tr>
<tr>
<th>
cellphone-festival-girl-1408983
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/cellphone-festival-girl-1408983.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>We will then read the content of the JSON annotation file associated with each image into a single Pandas DataFrame so we can easily query the annotations.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of JSON files in the dataset</span></span>
<span id="cb15-2">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb15-5">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb15-8">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb15-11">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-12">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb15-15">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb15-16"></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb15-18">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
adults-attractive-beautiful-1727660
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[450.1688537597656, 174.04931640625], [925.5413818359375, 765.6500244140625]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[1.195121951219533, 169.67073170731703], [448.7560975609756, 766.6219512195121]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
adults-attractive-beautiful-1727660.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
928
</td>
</tr>
<tr>
<th>
balloon-launch-festival-flame-1426050
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[740.9563598632812, 368.4273681640625], [1088.41552734375, 764.3656005859375]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
balloon-launch-festival-flame-1426050.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
<tr>
<th>
bar-beer-celebration-3009788
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[670.41650390625, 147.376953125], [1088.8197021484375, 760.0108642578125]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[116.53658536585372, 207.47560975609753], [629.3414634146342, 766.6219512195121]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[250.68292682926835, 1.378048780487799], [455.5609756097561, 225.15853658536582]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[427.51219512195127, 2.59756097560975], [593.9756097560976, 219.67073170731703]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[647.6341463414634, 2.59756097560975], [817.7560975609756, 137.96341463414632]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[731.170731707317, 0.7682926829268231], [917.1463414634146, 221.49999999999997]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[1009.2195121951219, 19.670731707317067], [1116.5365853658536, 262.3536585365854]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
bar-beer-celebration-3009788.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1216
</td>
</tr>
<tr>
<th>
beach-child-daughter-1438511
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[393.214111328125, 317.10064697265625], [588.5502319335938, 723.3473510742188]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[578.9024390243902, 351.3780487804878], [692.9268292682926, 697.1097560975609]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
beach-child-daughter-1438511.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1120
</td>
</tr>
<tr>
<th>
cellphone-festival-girl-1408983
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[119.5823974609375, 97.06643676757812], [886.0499877929688, 763.5545654296875]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
cellphone-festival-girl-1408983.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its bounding boxes using torchvision’s <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html"><code>BoundingBoxes</code></a> class and <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<p>First, we get the names of all the classes in our dataset.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe and rename the 'shapes' column to 'shapes'</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb16-4">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb16-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb16-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
person
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>Next, we will generate a color map for the object classes.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb17-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb17-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb17-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_20_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb18-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb18-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
<section id="define-function-that-ensures-bounding-boxes-are-in-a-consistent-format" class="level4">
<h4 class="anchored" data-anchor-id="define-function-that-ensures-bounding-boxes-are-in-a-consistent-format">Define function that ensures bounding boxes are in a consistent format</h4>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> correct_bounding_boxes(bboxes):</span>
<span id="cb20-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure input is a NumPy array</span></span>
<span id="cb20-3">    bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(bboxes)</span>
<span id="cb20-4">    </span>
<span id="cb20-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correct x coordinates</span></span>
<span id="cb20-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the x coordinates if the top-left x is greater than the bottom-right x</span></span>
<span id="cb20-7">    x_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb20-8">    x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb20-9">    </span>
<span id="cb20-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correct y coordinates</span></span>
<span id="cb20-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the y coordinates if the top-left y is greater than the bottom-right y</span></span>
<span id="cb20-12">    y_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb20-13">    y_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb20-14">    </span>
<span id="cb20-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the corrected bounding boxes array</span></span>
<span id="cb20-16">    corrected_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack([x_min, y_min, x_max, y_max], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-17">    </span>
<span id="cb20-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> corrected_bboxes</span></code></pre></div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>Finally, we will open a sample image and annotate it with it’s associated bounding boxes.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb21-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>]</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb21-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb21-8">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb21-9">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32).reshape(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb21-12">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb21-13">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb21-14">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BoundingBoxes(torchvision.ops.box_convert(torch.Tensor(bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]),</span>
<span id="cb21-15">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb21-16">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb21-17">)</span>
<span id="cb21-18"></span>
<span id="cb21-19">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_26_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset and visualized the annotations for a sample image. In the next section, we will explore the V2 Transforms class.</p>
</section>
</section>
</section>
<section id="examining-the-transforms-v2-class" class="level2">
<h2 class="anchored" data-anchor-id="examining-the-transforms-v2-class">Examining the Transforms V2 Class</h2>
<p>Our custom transforms will inherit from the <a href="https://github.com/pytorch/vision/blob/315f31527e720999eecbb986679b3177d4ed5e37/torchvision/transforms/v2/_transform.py#L17"><code>transforms.v2.Transform</code></a> class, so let’s look at the source code for that class first.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Transforms V2 Class Source Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Transforms V2 Class Source Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Transform(nn.Module):</span>
<span id="cb22-2"></span>
<span id="cb22-3"></span>
<span id="cb22-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Class attribute defining transformed types. Other types are passed-through without any transformation</span></span>
<span id="cb22-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We support both Types and callables that are able to do further checks on the type of the input.</span></span>
<span id="cb22-6">    _transformed_types: Tuple[Union[Type, Callable[[Any], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>]], ...] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (torch.Tensor, PIL.Image.Image)</span>
<span id="cb22-7">    </span>
<span id="cb22-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb22-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb22-10">        _log_api_usage_once(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb22-11">    </span>
<span id="cb22-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _check_inputs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, flat_inputs: List[Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb22-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb22-14">    </span>
<span id="cb22-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _get_params(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, flat_inputs: List[Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]:</span>
<span id="cb22-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb22-17">    </span>
<span id="cb22-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _call_kernel(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, functional: Callable, inpt: Any, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args: Any, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs: Any) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb22-19">        kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _get_kernel(functional, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(inpt), allow_passthrough<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb22-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> kernel(inpt, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb22-21">    </span>
<span id="cb22-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _transform(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Any, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb22-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NotImplementedError</span></span>
<span id="cb22-24">    </span>
<span id="cb22-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>inputs: Any) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb22-26">        flat_inputs, spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree_flatten(inputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(inputs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> inputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb22-27">    </span>
<span id="cb22-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._check_inputs(flat_inputs)</span>
<span id="cb22-29">    </span>
<span id="cb22-30">        needs_transform_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._needs_transform_list(flat_inputs)</span>
<span id="cb22-31">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._get_params(</span>
<span id="cb22-32">            [inpt <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (inpt, needs_transform) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(flat_inputs, needs_transform_list) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> needs_transform]</span>
<span id="cb22-33">        )</span>
<span id="cb22-34">    </span>
<span id="cb22-35">        flat_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb22-36">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform(inpt, params) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> needs_transform <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> inpt</span>
<span id="cb22-37">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (inpt, needs_transform) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(flat_inputs, needs_transform_list)</span>
<span id="cb22-38">        ]</span>
<span id="cb22-39">    </span>
<span id="cb22-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tree_unflatten(flat_outputs, spec)</span>
<span id="cb22-41">    </span>
<span id="cb22-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _needs_transform_list(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, flat_inputs: List[Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>]:</span>
<span id="cb22-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Below is a heuristic on how to deal with pure tensor inputs:</span></span>
<span id="cb22-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Pure tensors, i.e. tensors that are not a tv_tensor, are passed through if there is an explicit image</span></span>
<span id="cb22-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    (`tv_tensors.Image` or `PIL.Image.Image`) or video (`tv_tensors.Video`) in the sample.</span></span>
<span id="cb22-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. If there is no explicit image or video in the sample, only the first encountered pure tensor is</span></span>
<span id="cb22-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    transformed as image, while the rest is passed through. The order is defined by the returned `flat_inputs`</span></span>
<span id="cb22-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    of `tree_flatten`, which recurses depth-first through the input.</span></span>
<span id="cb22-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb22-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This heuristic stems from two requirements:</span></span>
<span id="cb22-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. We need to keep BC for single input pure tensors and treat them as images.</span></span>
<span id="cb22-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. We don't want to treat all pure tensors as images, because some datasets like `CelebA` or `Widerface`</span></span>
<span id="cb22-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    return supplemental numerical data as tensors that cannot be transformed as images.</span></span>
<span id="cb22-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb22-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The heuristic should work well for most people in practice. The only case where it doesn't is if someone</span></span>
<span id="cb22-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tries to transform multiple pure tensors at the same time, expecting them all to be treated as images.</span></span>
<span id="cb22-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># However, this case wasn't supported by transforms v1 either, so there is no BC concern.</span></span>
<span id="cb22-58">    </span>
<span id="cb22-59">        needs_transform_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb22-60">        transform_pure_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> has_any(flat_inputs, tv_tensors.Image, tv_tensors.Video, PIL.Image.Image)</span>
<span id="cb22-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> inpt <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> flat_inputs:</span>
<span id="cb22-62">            needs_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb22-63">    </span>
<span id="cb22-64">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> check_type(inpt, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transformed_types):</span>
<span id="cb22-65">                needs_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb22-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> is_pure_tensor(inpt):</span>
<span id="cb22-67">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> transform_pure_tensor:</span>
<span id="cb22-68">                    transform_pure_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb22-69">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb22-70">                    needs_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb22-71">            needs_transform_list.append(needs_transform)</span>
<span id="cb22-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> needs_transform_list</span>
<span id="cb22-73">    </span>
<span id="cb22-74">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extra_repr(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb22-75">        extra <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb22-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__dict__.items():</span>
<span id="cb22-77">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"training"</span>:</span>
<span id="cb22-78">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb22-79">    </span>
<span id="cb22-80">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(value, (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>, enum.Enum)):</span>
<span id="cb22-81">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb22-82">    </span>
<span id="cb22-83">            extra.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb22-84">    </span>
<span id="cb22-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>.join(extra)</span>
<span id="cb22-86">    </span>
<span id="cb22-87">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This attribute should be set on all transforms that have a v1 equivalent. Doing so enables two things:</span></span>
<span id="cb22-88">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. In case the v1 transform has a static `get_params` method, it will also be available under the same name on</span></span>
<span id="cb22-89">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    the v2 transform. See `__init_subclass__` for details.</span></span>
<span id="cb22-90">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. The v2 transform will be JIT scriptable. See `_extract_params_for_v1_transform` and `__prepare_scriptable__`</span></span>
<span id="cb22-91">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    for details.</span></span>
<span id="cb22-92">    _v1_transform_cls: Optional[Type[nn.Module]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb22-93">    </span>
<span id="cb22-94">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init_subclass__</span>(cls) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb22-95">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Since `get_params` is a `@staticmethod`, we have to bind it to the class itself rather than to an instance.</span></span>
<span id="cb22-96">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This method is called after subclassing has happened, i.e. `cls` is the subclass, e.g. `Resize`.</span></span>
<span id="cb22-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cls._v1_transform_cls <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(cls._v1_transform_cls, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get_params"</span>):</span>
<span id="cb22-98">            cls.get_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">staticmethod</span>(cls._v1_transform_cls.get_params)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># type: ignore[attr-defined]</span></span>
<span id="cb22-99">    </span>
<span id="cb22-100">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _extract_params_for_v1_transform(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]:</span>
<span id="cb22-101">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This method is called by `__prepare_scriptable__` to instantiate the equivalent v1 transform from the current</span></span>
<span id="cb22-102">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># v2 transform instance. It extracts all available public attributes that are specific to that transform and</span></span>
<span id="cb22-103">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># not `nn.Module` in general.</span></span>
<span id="cb22-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Overwrite this method on the v2 transform class if the above is not sufficient. For example, this might happen</span></span>
<span id="cb22-105">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the v2 transform introduced new parameters that are not support by the v1 transform.</span></span>
<span id="cb22-106">        common_attrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Module().__dict__.keys()</span>
<span id="cb22-107">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb22-108">            attr: value</span>
<span id="cb22-109">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> attr, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__dict__.items()</span>
<span id="cb22-110">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> attr.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> attr <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> common_attrs</span>
<span id="cb22-111">        }</span>
<span id="cb22-112">    </span>
<span id="cb22-113">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> __prepare_scriptable__(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> nn.Module:</span>
<span id="cb22-114">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This method is called early on when `torch.jit.script`'ing an `nn.Module` instance. If it succeeds, the return</span></span>
<span id="cb22-115">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># value is used for scripting over the original object that should have been scripted. Since the v1 transforms</span></span>
<span id="cb22-116">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># are JIT scriptable, and we made sure that for single image inputs v1 and v2 are equivalent, we just return the</span></span>
<span id="cb22-117">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equivalent v1 transform here. This of course only makes transforms v2 JIT scriptable as long as transforms v1</span></span>
<span id="cb22-118">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is around.</span></span>
<span id="cb22-119">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._v1_transform_cls <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb22-120">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(</span>
<span id="cb22-121">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Transform </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> cannot be JIT scripted. "</span></span>
<span id="cb22-122">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torchscript is only supported for backward compatibility with transforms "</span></span>
<span id="cb22-123">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which are already in torchvision.transforms. "</span></span>
<span id="cb22-124">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"For torchscript support (on tensors only), you can use the functional API instead."</span></span>
<span id="cb22-125">            )</span>
<span id="cb22-126">    </span>
<span id="cb22-127">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._v1_transform_cls(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_params_for_v1_transform())</span></code></pre></div>
</div>
</div>
</div>
<p>The above source code indicates that our custom transforms must implement the <code>_transform</code> method, which handles images and annotations.</p>
</section>
<section id="creating-a-random-pixel-copy-transform" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-random-pixel-copy-transform">Creating a Random Pixel Copy Transform</h2>
<p>Our first custom transform will randomly copy and paste pixels in random locations. This one will not require updating the associated image annotations.</p>
<section id="define-the-custom-transform-class" class="level3">
<h3 class="anchored" data-anchor-id="define-the-custom-transform-class">Define the Custom Transform Class</h3>
<p>We can use Python’s <a href="https://docs.python.org/3/library/functools.html#functools.singledispatchmethod"><code>singledispatchmethod</code></a> decorator to overload the <code>_transform</code> method based on the first (non-<em>self</em> or non-<em>cls)</em> argument’s type.</p>
<p>We will implement different versions to handle PIL Images, PyTorch Tensors, and torchvision’s <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.Image.html"><code>tv_tensor.Image</code></a> class as image input types and to return annotations such as BoundingBoxes and Mask instances unaltered.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RandomPixelCopy(transforms.Transform):</span>
<span id="cb23-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A torchvision V2 transform that copies data from a randomly selected set of pixels to another </span></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    randomly selected set of pixels of a image tensor.</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb23-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb23-7">                 min_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0025</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The minimum percentage of the tensor's pixels to be copied.</span></span>
<span id="cb23-8">                 max_pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The maximum percentage of the tensor's pixels to be copied.</span></span>
<span id="cb23-9">                ):</span>
<span id="cb23-10">        </span>
<span id="cb23-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb23-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_pct</span>
<span id="cb23-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_pct</span>
<span id="cb23-14"></span>
<span id="cb23-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rand_pixel_copy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, </span>
<span id="cb23-16">                        img_tensor:torch.Tensor, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The input image tensor.</span></span>
<span id="cb23-17">                        pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The percentage of the total number of pixels to be selected as the source and target sets of pixels.</span></span>
<span id="cb23-18">                       ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor : <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The modified input image tensor.</span></span>
<span id="cb23-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Copy data from a randomly selected set of pixels to another randomly selected set of pixels of a image tensor.</span></span>
<span id="cb23-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb23-22">        </span>
<span id="cb23-23">        src_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.dim()</span>
<span id="cb23-24">        </span>
<span id="cb23-25">        img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> src_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> img_tensor</span>
<span id="cb23-26">        </span>
<span id="cb23-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the shape of the img_tensor</span></span>
<span id="cb23-28">        b, c, h, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.shape</span>
<span id="cb23-29">        </span>
<span id="cb23-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the number of pixels to be selected</span></span>
<span id="cb23-31">        num_pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(img_tensor[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].numel() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pct)</span>
<span id="cb23-32">        </span>
<span id="cb23-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the source pixel indices</span></span>
<span id="cb23-34">        source_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.LongTensor(num_pixels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).random_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb23-35">        source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> w</span>
<span id="cb23-36">        source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> w</span>
<span id="cb23-37">        </span>
<span id="cb23-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the target pixel indices</span></span>
<span id="cb23-39">        target_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.LongTensor(num_pixels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).random_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb23-40">        target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> w</span>
<span id="cb23-41">        target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> w</span>
<span id="cb23-42">        </span>
<span id="cb23-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the indices of the channels</span></span>
<span id="cb23-44">        c_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(c).repeat(num_pixels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).t()</span>
<span id="cb23-45">        </span>
<span id="cb23-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy the pixels</span></span>
<span id="cb23-47">        source_pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor[:, c_indices, source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb23-48">        img_tensor[:, c_indices, target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_pixels</span>
<span id="cb23-49">        </span>
<span id="cb23-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> img_tensor.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> src_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> img_tensor</span>
<span id="cb23-51"></span>
<span id="cb23-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@singledispatchmethod</span></span>
<span id="cb23-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _transform(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Any, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb23-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Default Behavior: Don't modify the input"""</span></span>
<span id="cb23-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span>
<span id="cb23-56"></span>
<span id="cb23-57">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(torch.Tensor)</span>
<span id="cb23-58">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(tv_tensors.Image)</span>
<span id="cb23-59">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Union[torch.Tensor, tv_tensors.Image], params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb23-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Apply the `rand_pixel_copy` method to the input tensor"""</span></span>
<span id="cb23-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rand_pixel_copy(inpt, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_pct, random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_pct))</span>
<span id="cb23-62"></span>
<span id="cb23-63">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(Image.Image)</span>
<span id="cb23-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Image.Image, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb23-65">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Convert the PIL Image to a torch.Tensor to apply the transform"""</span></span>
<span id="cb23-66">        inpt_torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(inpt)</span>
<span id="cb23-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> transforms.ToPILImage()(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform(inpt_torch, params))</span>
<span id="cb23-68"></span>
<span id="cb23-69">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(BoundingBoxes)</span>
<span id="cb23-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(Mask)</span>
<span id="cb23-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Union[BoundingBoxes, Mask], params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb23-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Don't modify image annotations"""</span></span>
<span id="cb23-73">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span></code></pre></div>
<p>With our custom transform defined, we can create an instance of it and try it out.</p>
</section>
<section id="initialize-the-transform" class="level3">
<h3 class="anchored" data-anchor-id="initialize-the-transform">Initialize the Transform</h3>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomPixelCopy object</span></span>
<span id="cb24-2">rand_pixel_copy_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomPixelCopy(max_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span></code></pre></div>
</section>
<section id="prepare-the-annotation-targets" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-annotation-targets">Prepare the Annotation Targets</h3>
<p>The V2 image transforms take an image and a <code>targets</code> dictionary as input. The dictionary contains the annotations and labels for the image.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb25-2">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb25-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torch.Tensor(bboxes), </span>
<span id="cb25-4">                           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb25-5">                           canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb25-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb25-7">}</span></code></pre></div>
</section>
<section id="apply-the-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="apply-the-augmentation">Apply the Augmentation</h3>
<p>Now, we can see how our sample image looks after applying the augmentation.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">PIL.Image</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">torch.Tensor</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-3" aria-controls="tabset-3-3" aria-selected="false">tv_tensor.Image</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb26-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_pixel_copy_tfm(sample_img, targets)</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb26-5">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb26-6">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(augmented_img), </span>
<span id="cb26-7">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb26-8">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb26-9">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb26-10">)</span>
<span id="cb26-11"></span>
<span id="cb26-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb26-13">transforms.ToPILImage()(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_37_0.png" class="img-fluid"></p>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb27-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_pixel_copy_tfm(transforms.PILToTensor()(sample_img), targets)</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb27-5">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb27-6">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_img, </span>
<span id="cb27-7">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb27-8">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb27-9">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb27-10">)</span>
<span id="cb27-11"></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb27-13">transforms.ToPILImage()(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_39_0.png" class="img-fluid"></p>
</div>
<div id="tabset-3-3" class="tab-pane" aria-labelledby="tabset-3-3-tab">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb28-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_pixel_copy_tfm(transforms.ToImage()(sample_img), targets)</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb28-5">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb28-6">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_img, </span>
<span id="cb28-7">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb28-8">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb28-9">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb28-10">)</span>
<span id="cb28-11"></span>
<span id="cb28-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb28-13">transforms.ToPILImage()(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_41_0.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>As intended, the transform randomly copy-pasted pixel values while leaving the bounding box annotations unchanged. In the next section, we will create a transform that requires us to update the bounding box annotations with the image.</p>
</section>
</section>
<section id="creating-a-random-patch-copy-transform" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-random-patch-copy-transform">Creating a Random Patch Copy Transform</h2>
<p>Our second transform will randomly copy rectangular patches from the image and paste them in random locations. This transform may potentially occlude annotated areas, so we need to manage the associated bounding box annotations accordingly.</p>
<section id="define-the-custom-transform-class-1" class="level3">
<h3 class="anchored" data-anchor-id="define-the-custom-transform-class-1">Define the Custom Transform Class</h3>
<p>To determine if any copy-pasted patches occlude an annotated area, we will keep track of the patches for the current image and check how much they overlap with the bounding box annotations.</p>
<p>If the patches overlap a given bounding box by a certain threshold, we will set the dimensions for that bounding box to <code>0</code> so the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform removes it. The <code>SanitizeBoundingBoxes</code> transform would also remove a segmentation mask associated with the bounding box.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RandomPatchCopy(transforms.Transform):</span>
<span id="cb29-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A torchvision V2 transform that copies data from a randomly selected rectangular patch</span></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to another randomly selected rectangular region of an image tensor multiple times.</span></span>
<span id="cb29-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb29-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, </span>
<span id="cb29-7">                 pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The percentage of the tensor's size to be used as the side length of the square regions.</span></span>
<span id="cb29-8">                 min_num:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The minimum number of times to apply the `rand_square_copy` function.</span></span>
<span id="cb29-9">                 max_num:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The maximum number of times to apply the `rand_square_copy` function.</span></span>
<span id="cb29-10">                 iou_thresh:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The IoU threshold for bounding box suppression.</span></span>
<span id="cb29-11">                ):</span>
<span id="cb29-12">        </span>
<span id="cb29-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb29-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pct</span>
<span id="cb29-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_num</span>
<span id="cb29-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_num</span>
<span id="cb29-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.iou_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_thresh</span>
<span id="cb29-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.patches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb29-19"></span>
<span id="cb29-20"></span>
<span id="cb29-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calculate_iou_multi(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb29-22">                            boxes1:torch.Tensor, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># An array of bounding boxes in [x1, y1, x2, y2] format.</span></span>
<span id="cb29-23">                            boxes2:torch.Tensor <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Another array of bounding boxes in [x1, y1, x2, y2] format.</span></span>
<span id="cb29-24">                           ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A 2D array where element (i, j) is the IoU of boxes1[i] and boxes2[j].</span></span>
<span id="cb29-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb29-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Calculate the Intersection over Union (IoU) for each combination of bounding boxes in two arrays</span></span>
<span id="cb29-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        using PyTorch broadcasting.</span></span>
<span id="cb29-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb29-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expand boxes1 and boxes2 for broadcasting</span></span>
<span id="cb29-30">        boxes1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxes1[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :]</span>
<span id="cb29-31">        boxes2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxes2[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :, :]</span>
<span id="cb29-32">    </span>
<span id="cb29-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate intersection coordinates</span></span>
<span id="cb29-34">        int_x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb29-35">        int_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb29-36">        int_x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb29-37">        int_y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb29-38">    </span>
<span id="cb29-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate intersection and union areas</span></span>
<span id="cb29-40">        int_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.clamp(int_x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> int_x1, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.clamp(int_y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> int_y1, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb29-41">        box1_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb29-42">        box2_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb29-43">        union_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> box1_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> box2_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> int_area</span>
<span id="cb29-44">    </span>
<span id="cb29-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate IoU</span></span>
<span id="cb29-46">        iou <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> int_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.clamp(union_area, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span>)</span>
<span id="cb29-47">    </span>
<span id="cb29-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iou</span>
<span id="cb29-49">    </span>
<span id="cb29-50"></span>
<span id="cb29-51">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rand_patch_copy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, </span>
<span id="cb29-52">                        img_tensor:torch.Tensor, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The input image tensor.</span></span>
<span id="cb29-53">                        pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # The percentage of the image tensor's size to be used as the side length of the patch.</span></span>
<span id="cb29-54">                       ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> (torch.Tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The modified input image tensor and coordinates of the target patch in the format [x, y, w, h].</span></span>
<span id="cb29-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb29-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Copy data from a randomly selected rectangular patch to another randomly selected </span></span>
<span id="cb29-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        rectangular region of an image tensor, and return the coordinates of the target patch.</span></span>
<span id="cb29-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Assumes the tensor is in 'channels-first' format.</span></span>
<span id="cb29-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb29-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb29-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct must be between 0 and 1"</span>)</span>
<span id="cb29-62">    </span>
<span id="cb29-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the shape of the tensor</span></span>
<span id="cb29-64">        _, h, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.shape</span>
<span id="cb29-65">    </span>
<span id="cb29-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the size of the rectangle</span></span>
<span id="cb29-67">        szx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb29-68">        szy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h)</span>
<span id="cb29-69">    </span>
<span id="cb29-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the top-left coordinate of the source rectangle</span></span>
<span id="cb29-71">        sty1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> szx)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-coordinate</span></span>
<span id="cb29-72">        stx1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> szy)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y-coordinate</span></span>
<span id="cb29-73">    </span>
<span id="cb29-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the top-left coordinate of the target rectangle</span></span>
<span id="cb29-75">        sty2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> szx)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-coordinate</span></span>
<span id="cb29-76">        stx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> szy)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y-coordinate</span></span>
<span id="cb29-77">    </span>
<span id="cb29-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy the data from the source square to the target rectangle</span></span>
<span id="cb29-79">        img_tensor[:, stx2:stx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szy, sty2:sty2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor[:, stx1:stx1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szy, sty1:sty1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szx]</span>
<span id="cb29-80">    </span>
<span id="cb29-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The coordinates of the target patch</span></span>
<span id="cb29-82">        target_patch_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sty2, stx2, sty2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szx, stx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szy]</span>
<span id="cb29-83">    </span>
<span id="cb29-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> img_tensor, target_patch_coords</span>
<span id="cb29-85"></span>
<span id="cb29-86"></span>
<span id="cb29-87">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@singledispatchmethod</span></span>
<span id="cb29-88">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _transform(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Any, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb29-89">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Default Behavior: Don't modify the input"""</span></span>
<span id="cb29-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span>
<span id="cb29-91"></span>
<span id="cb29-92">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(torch.Tensor)</span>
<span id="cb29-93">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(tv_tensors.Image)</span>
<span id="cb29-94">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Union[torch.Tensor, tv_tensors.Image], params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb29-95">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.patches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb29-96">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Apply the `rand_square_copy` function to the input tensor multiple times"""</span></span>
<span id="cb29-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(random.randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_num, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num)):</span>
<span id="cb29-98">            inpt, patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rand_patch_copy(inpt, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,random.random()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pct))</span>
<span id="cb29-99">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.patches.append(patch)</span>
<span id="cb29-100">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span>
<span id="cb29-101"></span>
<span id="cb29-102">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(Image.Image)</span>
<span id="cb29-103">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Image.Image, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb29-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Convert the PIL Image to a torch.Tensor to apply the transform"""</span></span>
<span id="cb29-105">        inpt_torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(inpt)    </span>
<span id="cb29-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> transforms.ToPILImage()(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform(inpt_torch, params))</span>
<span id="cb29-107">    </span>
<span id="cb29-108">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(BoundingBoxes)</span>
<span id="cb29-109">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: BoundingBoxes, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb29-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Update the bounding box annotations based on the list of patches"""</span></span>
<span id="cb29-111">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.patches) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb29-112">            iou_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.calculate_iou_multi(inpt, torch.tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.patches, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32))</span>
<span id="cb29-113">            </span>
<span id="cb29-114">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum the IoU values for each box in boxes1</span></span>
<span id="cb29-115">            cumulative_iou <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(iou_matrix, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-116">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mask based on the cumulative IoU threshold</span></span>
<span id="cb29-117">            mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cumulative_iou <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.iou_thresh</span>
<span id="cb29-118">            inpt_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.clone(inpt)</span>
<span id="cb29-119">            inpt_copy[mask] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb29-120">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tv_wrap(inpt_copy, like<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>inpt)</span>
<span id="cb29-121">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span>
<span id="cb29-122"></span>
<span id="cb29-123">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(Mask)</span>
<span id="cb29-124">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Mask, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb29-125">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Don't modify segmentation annotations"""</span></span>
<span id="cb29-126">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span></code></pre></div>
<p>Now, let’s see how our sample image and its bounding box annotations look with this transform.</p>
</section>
<section id="initialize-the-transform-1" class="level3">
<h3 class="anchored" data-anchor-id="initialize-the-transform-1">Initialize the Transform</h3>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomPatchCopy object</span></span>
<span id="cb30-2">rand_patch_copy_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomPatchCopy(pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, min_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</section>
<section id="apply-the-augmentation-1" class="level3">
<h3 class="anchored" data-anchor-id="apply-the-augmentation-1">Apply the Augmentation</h3>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">PIL.Image</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">torch.Tensor</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-3" aria-controls="tabset-4-3" aria-selected="false">tv_tensor.Image</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb31-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_patch_copy_tfm(sample_img, targets)</span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove degenerate/invalid bounding boxes and their corresponding labels and masks.</span></span>
<span id="cb31-4">sanitized_img, sanitized_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(augmented_img, augmented_targets)</span>
<span id="cb31-5"></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb31-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb31-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb31-9">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb31-10">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb31-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb31-12">)</span>
<span id="cb31-13"></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb31-15">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_53_0.png" class="img-fluid"></p>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb32-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_patch_copy_tfm(transforms.PILToTensor()(sample_img), targets)</span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove degenerate/invalid bounding boxes and their corresponding labels and masks.</span></span>
<span id="cb32-4">sanitized_img, sanitized_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(augmented_img, augmented_targets)</span>
<span id="cb32-5"></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb32-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb32-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_img, </span>
<span id="cb32-9">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb32-10">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb32-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb32-12">)</span>
<span id="cb32-13"></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb32-15">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_55_0.png" class="img-fluid"></p>
</div>
<div id="tabset-4-3" class="tab-pane" aria-labelledby="tabset-4-3-tab">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb33-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_patch_copy_tfm(transforms.ToImage()(sample_img), targets)</span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove degenerate/invalid bounding boxes and their corresponding labels and masks.</span></span>
<span id="cb33-4">sanitized_img, sanitized_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(augmented_img, augmented_targets)</span>
<span id="cb33-5"></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb33-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb33-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_img, </span>
<span id="cb33-9">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb33-10">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb33-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb33-12">)</span>
<span id="cb33-13"></span>
<span id="cb33-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb33-15">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_57_0.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>Here, we can see some of the patches overlapped with one of the annotated areas too much, and the <code>SanitizeBoundingBoxes</code> transform removed the relevant bounding box.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we created custom V2 image transforms in torchvision that support bounding box annotations. The knowledge acquired here provides a solid foundation for making other custom transforms.</p>
<p>As a next step, perhaps try experimenting with the transforms created here to see how they impact training performance in one of the following tutorials:</p>
<ul>
<li><a href="../../posts/pytorch-train-image-classifier-timm-hf-tutorial/">Fine-Tuning Image Classifiers with PyTorch and the timm library for Beginners</a></li>
<li><a href="../../posts/pytorch-train-object-detector-yolox-tutorial/">Training YOLOX Models for Real-Time Object Detection in PyTorch</a></li>
<li><a href="../../posts/pytorch-train-mask-rcnn-tutorial/">Training Mask R-CNN Models with PyTorch</a></li>
</ul>
<p>See how adjusting the intensity of the data augmentations impacts the model accuracy on new data.</p>
<p><br></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Next Steps">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Next Steps
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Feel free to post questions or problems related to this tutorial in the comments below. I try to make time to address them on Thursdays and Fridays.</li>
<li>If you would like to explore my <a href="../../about.html#services">services</a> for your project, you can reach out via email at <a href="mailto:christian@christianjmills.com">christian@christianjmills.com</a></li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>object-detection</category>
  <category>instance-segmentation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/</guid>
  <pubDate>Tue, 23 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with LabelMe Segmentation Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with segmentation annotations created with the <a href="https://github.com/labelmeai/labelme">LabelMe annotation tool</a> in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Segmentation annotations indicate the pixels occupied by specific objects or areas of interest in images for training models to recognize and delineate these objects at a pixel level.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/segmentation-mask-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with bounding box annotations made with LabelMe for instance segmentation tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-segmentation-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-segmentation-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-24">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-32"></span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-34"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-35">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes, Mask</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes, draw_segmentation_masks</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. The TVTensor class for segmentation annotations is called <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.Mask.html">Mask</a>. Torchvision also includes a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_segmentation_masks.html">draw_segmentation_masks</a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with segmentation masks for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/labelme-instance-segmentation-toy-dataset/tree/main">labelme-instance-segmentation-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_ee114">
<thead>
</thead>
<tbody>
<tr>
<th id="T_ee114_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_ee114_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_ee114_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_ee114_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labelme-instance-segmentation-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_a4f39">
<thead>
</thead>
<tbody>
<tr>
<th id="T_a4f39_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_a4f39_row0_col0" class="data row0 col0">
cj-mills/labelme-instance-segmentation-toy-dataset
</td>
</tr>
<tr>
<th id="T_a4f39_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_a4f39_row1_col0" class="data row1 col0">
Datasets/../Archive/labelme-instance-segmentation-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_a4f39_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_a4f39_row2_col0" class="data row2 col0">
Datasets/labelme-instance-segmentation-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-image-and-annotation-files" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-image-and-annotation-files">Getting the Image and Annotation Files</h3>
<p>The dataset folder contains sample images and annotation files. Each sample image has its own JSON annotation file.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the dataset</span></span>
<span id="cb13-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_img_files(dataset_path)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of JSON files in the dataset</span></span>
<span id="cb13-5">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the names of the folders using a Pandas DataFrame</span></span>
<span id="cb13-8">pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image File"</span>: [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths], </span>
<span id="cb13-9">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>:[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_file_paths]}).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image File
</th>
<th>
Annotation File
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
258421.jpg
</td>
<td>
258421.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
3075367.jpg
</td>
<td>
3075367.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3076319.jpg
</td>
<td>
3076319.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3145551.jpg
</td>
<td>
3145551.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3176048.jpg
</td>
<td>
3176048.json
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths}</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-8">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre><code>Number of Images: 31</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
Datasets/labelme-instance-segmentation-toy-dataset/258421.jpg
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
Datasets/labelme-instance-segmentation-toy-dataset/3075367.jpg
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
Datasets/labelme-instance-segmentation-toy-dataset/3076319.jpg
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
Datasets/labelme-instance-segmentation-toy-dataset/3145551.jpg
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
Datasets/labelme-instance-segmentation-toy-dataset/3176048.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of each JSON annotation file into a single Pandas DataFrame so we can easily query the annotations.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb16-2">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb16-5">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb16-8">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-9">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb16-10"></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb16-12">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb16-15">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[404.0, 775.5], [396.5, 766.0], [411.5, 753.0], [411.5, 738.0], [416.5, 731.0], [412.5, 598.0], [419.5, 559.0], [416.0, 554.5], [404.0, 566.5], [387.0, 572.5], [375.5, 566.0], [377.5, 554.0], [405.5, 529.0], [413.5, 504.0], [414.5, 493.0], [386.5, 463.0], [388.5, 453.0], [399.0, 443.5], [413.0, 444.5], [423.5, 453.0], [457.5, 506.0], [452.5, 575.0], [458.5, 607.0], [447.5, 635.0], [444.5, 676.0], [452.5, 764.0], [443.0, 770.5]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[377.0, 775.5], [368.0, 774.5], [346.5, 764.0], [349.5, 751.0], [348.5, 707.0], [358.5, 668.0], [343.5, 651.0], [359.5, 605.0], [379.5, 583.0], [366.00692041522484, 583.3910034602076], [362.5467128027681, 575.7785467128027], [361.85467128027676, 565.3979238754325], [353.2041522491349, 557.0934256055363], [357.7024221453287, 547.4048442906574], [350.7820069204152, 532.5259515570934], [356.31833910034595, 520.7612456747405], [359.7785467128027, 481.31487889273353], [376.3875432525951, 467.47404844290656], [387.4602076124567, 469.5501730103806], [401.3010380622837, 484.08304498269894], [405.79930795847747, 501.038062283737], [394.03460207612454, 505.88235294117646], [394.72664359861585, 519.0311418685121], [399.916955017301, 531.1418685121107], [374.6574394463667, 554.3252595155709], [369.81314878892726, 571.280276816609], [374.31141868512105, 574.0484429065743], [388.152249134948, 574.39446366782], [397.49480968858126, 569.8961937716263], [402.5, 578.0], [410.5, 594.0], [412.5, 668.0], [387.0, 667.5], [375.5, 692.0], [376.5, 738.0], [380.5, 753.0], [388.5, 764.0], [386.5, 772.0]], ‘group_id’: None, ‘description’: None, ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
258421.jpg
</td>
<td>
None
</td>
<td>
1152
</td>
<td>
768
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[714.0, 766.5], [664.0, 765.5], [654.0, 716.5], [640.0, 765.5], [578.5, 764.0], [578.5, 599.0], [570.5, 587.0], [592.5, 403.0], [583.5, 339.0], [525.5, 278.0], [463.5, 187.0], [423.5, 98.0], [422.5, 72.0], [444.0, 52.5], [460.5, 62.0], [458.5, 104.0], [485.5, 166.0], [581.0, 270.5], [623.0, 295.5], [644.5, 293.0], [630.5, 261.0], [642.5, 193.0], [667.0, 182.5], [707.0, 191.5], [719.5, 249.0], [709.0, 307.5], [774.0, 271.5], [848.5, 176.0], [875.5, 108.0], [867.5, 55.0], [902.0, 63.5], [908.5, 76.0], [902.5, 134.0], [858.5, 233.0], [759.5, 350.0], [736.5, 495.0], [752.5, 614.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[829.0, 466.5], [825.5, 464.0], [824.5, 455.0], [825.5, 425.0], [828.0, 419.5], [833.5, 418.0], [827.5, 417.0], [822.5, 396.0], [825.5, 327.0], [843.5, 313.0], [842.5, 296.0], [833.5, 291.0], [832.5, 270.0], [837.0, 265.5], [856.0, 264.5], [868.5, 277.0], [870.5, 306.0], [881.5, 318.0], [883.5, 329.0], [893.0, 332.5], [899.5, 340.0], [901.5, 367.0], [883.5, 382.0], [849.5, 443.0], [842.5, 448.0], [838.5, 460.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[359.0, 509.5], [355.0, 509.5], [350.5, 502.0], [353.5, 486.0], [349.5, 475.0], [349.5, 449.0], [345.5, 430.0], [339.5, 419.0], [337.5, 394.0], [327.5, 378.0], [331.5, 371.0], [332.5, 357.0], [342.5, 345.0], [345.5, 327.0], [354.0, 313.5], [365.5, 317.0], [366.5, 339.0], [385.0, 350.5], [399.5, 371.0], [398.5, 383.0], [390.0, 391.5], [390.5, 378.0], [383.0, 369.5], [379.5, 370.0], [380.5, 441.0], [376.5, 471.0], [370.0, 464.5], [364.5, 472.0], [362.5, 482.0], [364.5, 504.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘car’, ‘points’: [[1343.0, 764.5], [964.0, 745.5], [930.0, 764.5], [914.5, 759.0], [904.0, 722.5], [865.0, 706.5], [848.0, 735.5], [801.0, 735.5], [788.5, 699.0], [792.5, 577.0], [821.5, 476.0], [849.5, 454.0], [890.5, 382.0], [930.0, 355.5], [1021.0, 347.5], [1195.0, 358.5], [1287.0, 378.5], [1343.0, 436.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
3075367.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1344
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[590.0, 1119.0], [508.5, 1119.0], [393.5, 881.0], [363.5, 778.0], [359.5, 738.0], [377.5, 685.0], [420.5, 660.0], [388.5, 650.0], [410.5, 606.0], [412.5, 477.0], [349.5, 383.0], [364.5, 338.0], [341.5, 303.0], [369.5, 313.0], [396.5, 191.0], [449.0, 157.5], [496.0, 169.5], [524.5, 203.0], [534.5, 320.0], [577.5, 380.0], [588.5, 493.0], [635.5, 554.0], [631.5, 567.0], [687.5, 625.0], [704.5, 673.0], [698.5, 743.0], [632.5, 833.0], [618.5, 955.0], [573.5, 1096.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[262.0, 1119.0], [128.5, 1119.0], [131.5, 1089.0], [35.5, 901.0], [11.5, 772.0], [33.5, 686.0], [70.5, 663.0], [34.5, 612.0], [25.5, 569.0], [52.5, 375.0], [97.0, 332.5], [195.5, 306.0], [205.5, 255.0], [192.5, 220.0], [240.0, 154.5], [290.0, 133.5], [323.5, 153.0], [341.5, 209.0], [332.5, 279.0], [294.5, 326.0], [347.5, 357.0], [352.5, 399.0], [400.5, 459.0], [404.5, 517.0], [391.5, 631.0], [344.5, 679.0], [359.5, 719.0], [323.5, 907.0], [224.5, 1082.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
3076319.jpg
</td>
<td>
None
</td>
<td>
1120
</td>
<td>
768
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[683.0, 398.5], [675.0, 398.5], [671.5, 396.0], [673.5, 378.0], [669.5, 366.0], [669.5, 359.0], [664.5, 346.0], [663.5, 326.0], [661.5, 320.0], [661.5, 312.0], [666.5, 304.0], [662.5, 295.0], [666.0, 283.5], [673.0, 283.5], [674.5, 285.0], [676.5, 289.0], [676.5, 297.0], [681.5, 302.0], [685.5, 313.0], [686.5, 336.0], [683.5, 344.0], [685.5, 395.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[649.0, 398.5], [644.0, 398.5], [641.5, 396.0], [640.5, 387.0], [644.5, 379.0], [650.5, 358.0], [650.5, 351.0], [644.5, 335.0], [644.5, 323.0], [646.5, 316.0], [644.5, 300.0], [648.5, 291.0], [654.0, 288.5], [661.5, 295.0], [662.5, 298.0], [658.5, 309.0], [662.5, 316.0], [664.5, 324.0], [665.5, 349.0], [669.5, 364.0], [665.5, 383.0], [666.5, 396.0], [663.0, 397.5], [659.5, 392.0], [662.5, 375.0], [662.5, 364.0], [660.0, 361.5], [649.5, 383.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
3145551.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1184
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[661.0, 436.5], [659.5, 436.0], [660.5, 432.0], [660.5, 396.0], [659.5, 392.0], [663.5, 376.0], [661.0, 373.5], [658.0, 373.5], [650.0, 377.5], [641.0, 377.5], [640.5, 376.0], [647.0, 372.5], [651.0, 372.5], [656.0, 370.5], [666.0, 365.5], [667.5, 364.0], [667.5, 359.0], [670.0, 356.5], [674.0, 356.5], [677.5, 360.0], [676.5, 367.0], [682.5, 374.0], [683.5, 389.0], [681.0, 390.5], [678.5, 388.0], [678.5, 385.0], [677.5, 385.0], [677.5, 390.0], [673.5, 395.0], [673.5, 408.0], [671.5, 411.0], [670.5, 420.0], [668.5, 425.0], [668.5, 433.0], [669.5, 434.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[562.0, 464.5], [552.0, 464.5], [550.5, 462.0], [553.5, 454.0], [550.5, 433.0], [558.5, 402.0], [558.5, 389.0], [561.5, 380.0], [557.0, 372.5], [549.0, 374.5], [537.0, 372.5], [533.0, 377.5], [532.5, 371.0], [529.5, 368.0], [542.0, 365.5], [551.0, 366.5], [562.0, 361.5], [567.0, 361.5], [568.5, 360.0], [567.5, 346.0], [572.0, 342.5], [577.0, 342.5], [582.5, 348.0], [581.5, 360.0], [591.5, 372.0], [593.5, 386.0], [592.0, 388.5], [587.0, 388.5], [585.5, 391.0], [578.5, 419.0], [572.5, 434.0], [571.5, 445.0], [566.5, 454.0], [565.5, 462.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
3176048.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The source JSON content corresponding to the first row in the DataFrame is available below:</p>
<div style="overflow-x:auto; max-height:500px">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5.3.1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{},</span></span>
<span id="cb17-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shapes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"points"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-8">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-9">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">404.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-10">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">775.5</span></span>
<span id="cb17-11">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-12">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-13">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">396.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-14">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">766.0</span></span>
<span id="cb17-15">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-16">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-17">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">411.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-18">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">753.0</span></span>
<span id="cb17-19">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-20">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-21">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">411.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-22">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">738.0</span></span>
<span id="cb17-23">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-24">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-25">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">416.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-26">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">731.0</span></span>
<span id="cb17-27">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-28">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-29">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">412.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-30">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">598.0</span></span>
<span id="cb17-31">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-32">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-33">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">419.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-34">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">559.0</span></span>
<span id="cb17-35">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-36">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-37">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">416.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-38">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">554.5</span></span>
<span id="cb17-39">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-40">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-41">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">404.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-42">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">566.5</span></span>
<span id="cb17-43">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-44">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-45">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">387.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-46">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">572.5</span></span>
<span id="cb17-47">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-48">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-49">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">375.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-50">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">566.0</span></span>
<span id="cb17-51">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-52">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-53">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">377.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-54">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">554.0</span></span>
<span id="cb17-55">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-56">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-57">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">405.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-58">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">529.0</span></span>
<span id="cb17-59">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-60">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-61">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">413.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-62">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">504.0</span></span>
<span id="cb17-63">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-64">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-65">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">414.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-66">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">493.0</span></span>
<span id="cb17-67">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-68">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-69">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">386.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-70">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">463.0</span></span>
<span id="cb17-71">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-72">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-73">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">388.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-74">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">453.0</span></span>
<span id="cb17-75">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-76">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-77">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">399.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-78">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">443.5</span></span>
<span id="cb17-79">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-80">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-81">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">413.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-82">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">444.5</span></span>
<span id="cb17-83">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-84">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-85">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">423.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-86">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">453.0</span></span>
<span id="cb17-87">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-88">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-89">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">457.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-90">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">506.0</span></span>
<span id="cb17-91">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-92">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-93">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">452.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-94">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">575.0</span></span>
<span id="cb17-95">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-96">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-97">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">458.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-98">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">607.0</span></span>
<span id="cb17-99">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-100">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-101">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">447.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-102">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">635.0</span></span>
<span id="cb17-103">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-104">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-105">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">444.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-106">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">676.0</span></span>
<span id="cb17-107">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-108">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-109">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">452.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-110">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">764.0</span></span>
<span id="cb17-111">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-112">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-113">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">443.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-114">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">770.5</span></span>
<span id="cb17-115">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-116">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-117">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"group_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-118">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-119">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shape_type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polygon"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-120">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb17-121">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-122">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-123">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-124">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"points"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-125">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-126">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">377.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-127">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">775.5</span></span>
<span id="cb17-128">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-129">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-130">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">368.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-131">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">774.5</span></span>
<span id="cb17-132">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-133">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-134">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">346.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-135">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">764.0</span></span>
<span id="cb17-136">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-137">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-138">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">349.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-139">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">751.0</span></span>
<span id="cb17-140">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-141">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-142">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">348.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-143">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">707.0</span></span>
<span id="cb17-144">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-145">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-146">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">358.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-147">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">668.0</span></span>
<span id="cb17-148">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-149">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-150">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">343.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-151">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">651.0</span></span>
<span id="cb17-152">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-153">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-154">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">359.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-155">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">605.0</span></span>
<span id="cb17-156">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-157">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-158">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">379.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-159">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">583.0</span></span>
<span id="cb17-160">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-161">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-162">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">366.00692041522484</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-163">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">583.3910034602076</span></span>
<span id="cb17-164">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-165">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-166">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">362.5467128027681</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-167">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">575.7785467128027</span></span>
<span id="cb17-168">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-169">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-170">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">361.85467128027676</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-171">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">565.3979238754325</span></span>
<span id="cb17-172">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-173">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-174">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">353.2041522491349</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-175">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">557.0934256055363</span></span>
<span id="cb17-176">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-177">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-178">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">357.7024221453287</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-179">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">547.4048442906574</span></span>
<span id="cb17-180">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-181">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-182">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">350.7820069204152</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-183">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">532.5259515570934</span></span>
<span id="cb17-184">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-185">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-186">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">356.31833910034595</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-187">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">520.7612456747405</span></span>
<span id="cb17-188">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-189">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-190">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">359.7785467128027</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-191">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">481.31487889273353</span></span>
<span id="cb17-192">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-193">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-194">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">376.3875432525951</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-195">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">467.47404844290656</span></span>
<span id="cb17-196">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-197">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-198">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">387.4602076124567</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-199">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">469.5501730103806</span></span>
<span id="cb17-200">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-201">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-202">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">401.3010380622837</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-203">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">484.08304498269894</span></span>
<span id="cb17-204">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-205">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-206">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">405.79930795847747</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-207">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">501.038062283737</span></span>
<span id="cb17-208">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-209">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-210">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">394.03460207612454</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-211">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">505.88235294117646</span></span>
<span id="cb17-212">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-213">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-214">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">394.72664359861585</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-215">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">519.0311418685121</span></span>
<span id="cb17-216">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-217">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-218">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">399.916955017301</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-219">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">531.1418685121107</span></span>
<span id="cb17-220">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-221">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-222">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">374.6574394463667</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-223">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">554.3252595155709</span></span>
<span id="cb17-224">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-225">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-226">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">369.81314878892726</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-227">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">571.280276816609</span></span>
<span id="cb17-228">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-229">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-230">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">374.31141868512105</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-231">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">574.0484429065743</span></span>
<span id="cb17-232">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-233">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-234">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">388.152249134948</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-235">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">574.39446366782</span></span>
<span id="cb17-236">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-237">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-238">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">397.49480968858126</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-239">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">569.8961937716263</span></span>
<span id="cb17-240">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-241">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-242">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">402.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-243">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">578.0</span></span>
<span id="cb17-244">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-245">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-246">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">410.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-247">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">594.0</span></span>
<span id="cb17-248">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-249">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-250">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">412.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-251">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">668.0</span></span>
<span id="cb17-252">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-253">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-254">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">387.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-255">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">667.5</span></span>
<span id="cb17-256">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-257">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-258">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">375.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-259">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">692.0</span></span>
<span id="cb17-260">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-261">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-262">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">376.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-263">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">738.0</span></span>
<span id="cb17-264">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-265">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-266">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">380.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-267">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">753.0</span></span>
<span id="cb17-268">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-269">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-270">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">388.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-271">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">764.0</span></span>
<span id="cb17-272">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-273">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-274">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">386.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-275">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">772.0</span></span>
<span id="cb17-276">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-277">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-278">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"group_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-279">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-280">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shape_type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polygon"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-281">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb17-282">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-283">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-284">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imagePath"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"258421.jpg"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-285">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageData"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-286">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageHeight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1152</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-287">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageWidth"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span></span>
<span id="cb17-288"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<hr>
<p>The segmentation polygon annotation are in <code>[[x1,y1], [x2,y2], ..., [xn,yn]]</code> format.</p>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step is not strictly necessary for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb18-4">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb18-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb18-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
person
</td>
</tr>
<tr>
<th>
1
</th>
<td>
car
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb19-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].value_counts()</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb19-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span>
<span id="cb19-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb19-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb19-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb19-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb19-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_21_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Note the class distribution is quite imbalanced between the <code>person</code> and <code>car</code> classes. For a real dataset, you would want these to be much closer.</p>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its segmentation masks and bounding boxes using torchvision’s <code>BoundingBoxes</code> and <code>Mask</code> classes and <code>draw_bounding_boxes</code> and <code>draw_segmentation_masks</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to bounding boxes and segmentation masks for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb20-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb20-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb20-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_24_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb21-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb21-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
<pre><code>The file ./KFOlCnqEu92Fr1MmEU9vAw.ttf already exists and overwrite is set to False.</code></pre>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb24-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb24-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb24-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb24-11">sample_img</span></code></pre></div>
<pre><code>Image Dims: (768, 1152)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_31_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb26-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
258421
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
version
</th>
<td>
5.3.1
</td>
</tr>
<tr>
<th>
flags
</th>
<td>
{}
</td>
</tr>
<tr>
<th>
shapes
</th>
<td>
[{‘label’: ‘person’, ‘points’: [[404.0, 775.5], [396.5, 766.0], [411.5, 753.0], [411.5, 738.0], [416.5, 731.0], [412.5, 598.0], [419.5, 559.0], [416.0, 554.5], [404.0, 566.5], [387.0, 572.5], [375.5, 566.0], [377.5, 554.0], [405.5, 529.0], [413.5, 504.0], [414.5, 493.0], [386.5, 463.0], [388.5, 453.0], [399.0, 443.5], [413.0, 444.5], [423.5, 453.0], [457.5, 506.0], [452.5, 575.0], [458.5, 607.0], [447.5, 635.0], [444.5, 676.0], [452.5, 764.0], [443.0, 770.5]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[377.0, 775.5], [368.0, 774.5], [346.5, 764.0], [349.5, 751.0], [348.5, 707.0], [358.5, 668.0], [343.5, 651.0], [359.5, 605.0], [379.5, 583.0], [366.00692041522484, 583.3910034602076], [362.5467128027681, 575.7785467128027], [361.85467128027676, 565.3979238754325], [353.2041522491349, 557.0934256055363], [357.7024221453287, 547.4048442906574], [350.7820069204152, 532.5259515570934], [356.31833910034595, 520.7612456747405], [359.7785467128027, 481.31487889273353], [376.3875432525951, 467.47404844290656], [387.4602076124567, 469.5501730103806], [401.3010380622837, 484.08304498269894], [405.79930795847747, 501.038062283737], [394.03460207612454, 505.88235294117646], [394.72664359861585, 519.0311418685121], [399.916955017301, 531.1418685121107], [374.6574394463667, 554.3252595155709], [369.81314878892726, 571.280276816609], [374.31141868512105, 574.0484429065743], [388.152249134948, 574.39446366782], [397.49480968858126, 569.8961937716263], [402.5, 578.0], [410.5, 594.0], [412.5, 668.0], [387.0, 667.5], [375.5, 692.0], [376.5, 738.0], [380.5, 753.0], [388.5, 764.0], [386.5, 772.0]], ‘group_id’: None, ‘description’: None, ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
</tr>
<tr>
<th>
imagePath
</th>
<td>
258421.jpg
</td>
</tr>
<tr>
<th>
imageData
</th>
<td>
None
</td>
</tr>
<tr>
<th>
imageHeight
</th>
<td>
1152
</td>
</tr>
<tr>
<th>
imageWidth
</th>
<td>
768
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The lists of point coordinates in the segmentation annotations are the vertices of a polygon for the individual segmentation masks. We can use these to generate images for each segmentation mask.</p>
</section>
<section id="define-a-function-to-convert-segmentation-polygons-to-images" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-convert-segmentation-polygons-to-images">Define a function to convert segmentation polygons to images</h4>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_polygon_mask(image_size, vertices):</span>
<span id="cb27-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Create a grayscale image with a white polygonal area on a black background.</span></span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - image_size (tuple): A tuple representing the dimensions (width, height) of the image.</span></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - vertices (list): A list of tuples, each containing the x, y coordinates of a vertex</span></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        of the polygon. Vertices should be in clockwise or counter-clockwise order.</span></span>
<span id="cb27-9"></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - PIL.Image.Image: A PIL Image object containing the polygonal mask.</span></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb27-13"></span>
<span id="cb27-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new black image with the given dimensions</span></span>
<span id="cb27-15">    mask_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>, image_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb27-16">    </span>
<span id="cb27-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the polygon on the image. The area inside the polygon will be white (255).</span></span>
<span id="cb27-18">    ImageDraw.Draw(mask_img, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>).polygon(vertices, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb27-19"></span>
<span id="cb27-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the image with the drawn polygon</span></span>
<span id="cb27-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mask_img</span></code></pre></div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>We can now generate the segmentation mask images and feed those to the <code>draw_segmentation_mask</code> function.</p>
<p>We can use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.masks_to_boxes.html#torchvision.ops.masks_to_boxes"><code>masks_to_boxes</code></a> function included with torchvision to generate bounding box annotations in the <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format from the segmentation masks. That is the same format the <code>draw_bounding_boxes</code> function expects so we can use the output directly.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels for the sample</span></span>
<span id="cb28-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb28-4">shape_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb28-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format polygon points for PIL</span></span>
<span id="cb28-6">xy_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shape_points]</span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb28-8">mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(sample_img.size, xy) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xy <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xy_coords]</span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb28-10">masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs])</span>
<span id="cb28-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate bounding box annotations from segmentation masks</span></span>
<span id="cb28-12">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.masks_to_boxes(masks)</span>
<span id="cb28-13"></span>
<span id="cb28-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb28-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb28-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb28-17">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>masks, </span>
<span id="cb28-18">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb28-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb28-20">)</span>
<span id="cb28-21"></span>
<span id="cb28-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb28-23">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb28-24">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb28-25">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bboxes, </span>
<span id="cb28-26">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb28-27">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb28-28">)</span>
<span id="cb28-29"></span>
<span id="cb28-30">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_37_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb29-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb30-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb30-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb30-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb30-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb30-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb30-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb30-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb30-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb30-12"></span>
<span id="cb30-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb30-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels for the sample</span></span>
<span id="cb31-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb31-4">shape_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format polygon points for PIL</span></span>
<span id="cb31-6">xy_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shape_points]</span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb31-8">mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(sample_img.size, xy) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xy <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xy_coords]</span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb31-10">masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs])</span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate bounding box annotations from segmentation masks</span></span>
<span id="cb31-12">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.masks_to_boxes(masks), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb31-13"></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb31-15">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb31-16"></span>
<span id="cb31-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare mask and bounding box targets</span></span>
<span id="cb31-18">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb31-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: Mask(masks), </span>
<span id="cb31-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: bboxes, </span>
<span id="cb31-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb31-22">}</span>
<span id="cb31-23"></span>
<span id="cb31-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb31-25">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb31-26"></span>
<span id="cb31-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb31-28">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb31-29"></span>
<span id="cb31-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb31-31">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb31-32"></span>
<span id="cb31-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb31-34">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-35">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb31-36">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb31-37"></span>
<span id="cb31-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb31-39">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb31-40">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb31-41">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb31-42">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb31-43">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb31-44">)</span>
<span id="cb31-45"></span>
<span id="cb31-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb31-47">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb31-48">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb31-49">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb31-50">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb31-51">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb31-52">)</span>
<span id="cb31-53"></span>
<span id="cb31-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Display the annotated image</span></span>
<span id="cb31-55">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb31-56"></span>
<span id="cb31-57">pd.Series({</span>
<span id="cb31-58">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb31-59">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb31-60">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb31-61">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb31-62">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb31-63">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_45_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_6ce5b">
<thead>
</thead>
<tbody>
<tr>
<th id="T_6ce5b_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_6ce5b_row0_col0" class="data row0 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_6ce5b_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_6ce5b_row1_col0" class="data row1 col0">
(403, 484)
</td>
</tr>
<tr>
<th id="T_6ce5b_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_6ce5b_row2_col0" class="data row2 col0">
(426, 511)
</td>
</tr>
<tr>
<th id="T_6ce5b_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_6ce5b_row3_col0" class="data row3 col0">
(511, 511)
</td>
</tr>
<tr>
<th id="T_6ce5b_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_6ce5b_row4_col0" class="data row4 col0">
(512, 512)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> LabelMeInstSegDataset(Dataset):</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A PyTorch Dataset class for handling LabelMe instance segmentation data.</span></span>
<span id="cb32-4"></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_keys (list): A list of image keys identifying the images.</span></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _annotation_df (DataFrame): A pandas DataFrame containing the annotations for each image.</span></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_dict (dict): A dictionary mapping image keys to their corresponding file paths.</span></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _class_to_idx (dict): A dictionary mapping class names to their respective indices.</span></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _transforms (callable, optional): A function/transform that takes in an image and its target</span></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                           and returns a transformed version.</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb32-13"></span>
<span id="cb32-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb32-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the LabelMeInstSegDataset object with images, annotations, and optional transforms.</span></span>
<span id="cb32-17"></span>
<span id="cb32-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb32-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_keys (list): List of image keys.</span></span>
<span id="cb32-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation_df (DataFrame): DataFrame with annotations for each image.</span></span>
<span id="cb32-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_dict (dict): Dictionary mapping image keys to image file paths.</span></span>
<span id="cb32-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb32-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            transforms (callable, optional): Optional transforms to be applied on the images.</span></span>
<span id="cb32-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb32-26">        </span>
<span id="cb32-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys</span>
<span id="cb32-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df</span>
<span id="cb32-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict</span>
<span id="cb32-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx</span>
<span id="cb32-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms</span>
<span id="cb32-32">        </span>
<span id="cb32-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb32-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the total number of items in the dataset."""</span></span>
<span id="cb32-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb32-36">        </span>
<span id="cb32-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb32-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an image and its corresponding target (annotations) by index.</span></span>
<span id="cb32-40"></span>
<span id="cb32-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb32-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            index (int): The index of the item.</span></span>
<span id="cb32-43"></span>
<span id="cb32-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb32-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its target (a dictionary with keys 'masks', 'boxes', 'labels').</span></span>
<span id="cb32-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-47">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb32-48">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb32-49">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb32-50">        </span>
<span id="cb32-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb32-52">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb32-53">        </span>
<span id="cb32-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb32-55"></span>
<span id="cb32-56">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb32-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Loads an image and its corresponding target data based on the given annotation.</span></span>
<span id="cb32-59"></span>
<span id="cb32-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb32-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation (DataFrame row): The annotation row corresponding to an image.</span></span>
<span id="cb32-62"></span>
<span id="cb32-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb32-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its target (a dictionary with keys 'masks', 'boxes', 'labels').</span></span>
<span id="cb32-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-66">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb32-67">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb32-68">        </span>
<span id="cb32-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract labels for each shape in the annotation and convert them to tensor</span></span>
<span id="cb32-70">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb32-71">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb32-72">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels.to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int64)</span>
<span id="cb32-73"></span>
<span id="cb32-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process shape points to create masks</span></span>
<span id="cb32-75">        shape_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb32-76">        xy_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shape_points]</span>
<span id="cb32-77">        mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(image.size, xy) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xy <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xy_coords]</span>
<span id="cb32-78">        masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mask(torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs]))</span>
<span id="cb32-79"></span>
<span id="cb32-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create bounding boxes from masks</span></span>
<span id="cb32-81">        bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.masks_to_boxes(masks), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb32-82"></span>
<span id="cb32-83">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: masks, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb33-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb33-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb33-4">        iou_crop,</span>
<span id="cb33-5">        transforms.ColorJitter(</span>
<span id="cb33-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb33-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb33-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb33-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb33-10">        ),</span>
<span id="cb33-11">        transforms.RandomGrayscale(),</span>
<span id="cb33-12">        transforms.RandomEqualize(),</span>
<span id="cb33-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb33-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb33-15">    ],</span>
<span id="cb33-16">)</span>
<span id="cb33-17"></span>
<span id="cb33-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb33-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-20">    resize_max, </span>
<span id="cb33-21">    pad_square,</span>
<span id="cb33-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-23">])</span>
<span id="cb33-24"></span>
<span id="cb33-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb33-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-27">    transforms.ToImage(), </span>
<span id="cb33-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb33-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb33-30">])</span>
<span id="cb33-31"></span>
<span id="cb33-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb33-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-34">    data_aug_tfms, </span>
<span id="cb33-35">    resize_pad_tfm, </span>
<span id="cb33-36">    final_tfms</span>
<span id="cb33-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb34-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb34-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelMeInstSegDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training and validation datasets</span></span>
<span id="cb34-8">pd.Series({</span>
<span id="cb34-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb34-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_bc8cc">
<thead>
</thead>
<tbody>
<tr>
<th id="T_bc8cc_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_bc8cc_row0_col0" class="data row0 col0">
31
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb35-4">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb35-5"></span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb35-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks( </span>
<span id="cb35-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb35-9">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb35-10">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb35-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb35-12">)</span>
<span id="cb35-13"></span>
<span id="cb35-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with bounding boxes</span></span>
<span id="cb35-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb35-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb35-17">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb35-18">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb35-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb35-20">)</span>
<span id="cb35-21"></span>
<span id="cb35-22">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_54_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom segmentation annotations made with the LabelMe annotation tool and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future instance segmentation projects.</p>
<p>As a next step, perhaps try annotating a custom instance segmentation dataset with LabelMe and loading it with this tutorial’s code. Once you’re comfortable with that, try adapting the code in the following tutorial to train an instance segmentation model on your custom dataset.</p>
<ul>
<li><a href="../../../posts/pytorch-train-mask-rcnn-tutorial/">Training Mask R-CNN Models with PyTorch</a></li>
</ul>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-labelme-annotation-tutorials/bounding-boxes/"><strong>Working with LabelMe Bounding Box Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe bounding box annotations in torchvision for object detection tasks.</li>
<li><a href="http://localhost:3847/posts/torchvision-labelme-annotation-tutorials/keypoints/"><strong>Working with LabelMe Keypoint Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe keypoint annotations in torchvision for keypoint estimation tasks.</li>
<li><a href="http://localhost:3847/posts/pytorch-train-mask-rcnn-tutorial/"><strong>Training Mask R-CNN Models with PyTorch</strong></a><strong>:</strong> Learn how to train Mask R-CNN models on custom datasets with PyTorch.</li>
</ul>
<p><br></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Next Steps">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Next Steps
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Feel free to post questions or problems related to this tutorial in the comments below. I try to make time to address them on Thursdays and Fridays.</li>
<li>If you would like to explore my <a href="../../../about.html#services">services</a> for your project, you can reach out via email at <a href="mailto:christian@christianjmills.com">christian@christianjmills.com</a></li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>object-detection</category>
  <category>instance-segmentation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with LabelMe Keypoint Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with keypoint annotations created with the <a href="https://github.com/labelmeai/labelme">LabelMe annotation tool</a> in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Keypoint annotations mark specific points of interest on an object in an image for training models to recognize and interpret poses, gestures, or significant parts of objects.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/keypoint-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with keypoint annotations made with LabelMe for keypoint estimation tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-keypoint-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-keypoint-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-24">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-32"></span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-34"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-35">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. While there is currently no dedicated TVTensor class for keypoint annotations, we can use the one for <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html">bounding boxes</a> instead. Torchvision does include a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_keypoints.html"><code>draw_keypoints</code></a> function, but we might as well stick with the <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with keypoints for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/labelme-keypoint-toy-dataset/tree/main">labelme-keypoint-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_792fe">
<thead>
</thead>
<tbody>
<tr>
<th id="T_792fe_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_792fe_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_792fe_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_792fe_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labelme-keypoint-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_5c071">
<thead>
</thead>
<tbody>
<tr>
<th id="T_5c071_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_5c071_row0_col0" class="data row0 col0">
cj-mills/labelme-keypoint-toy-dataset
</td>
</tr>
<tr>
<th id="T_5c071_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_5c071_row1_col0" class="data row1 col0">
Datasets/../Archive/labelme-keypoint-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_5c071_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_5c071_row2_col0" class="data row2 col0">
Datasets/labelme-keypoint-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-image-and-annotation-files" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-image-and-annotation-files">Getting the Image and Annotation Files</h3>
<p>The dataset folder contains sample images and annotation files. Each sample image has its own JSON annotation file.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the dataset</span></span>
<span id="cb13-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_img_files(dataset_path)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of JSON files in the dataset</span></span>
<span id="cb13-5">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the names of the folders using a Pandas DataFrame</span></span>
<span id="cb13-8">pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image File"</span>: [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths], </span>
<span id="cb13-9">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>:[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_file_paths]}).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image File
</th>
<th>
Annotation File
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
133196.jpg
</td>
<td>
133196.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
245035.jpg
</td>
<td>
245035.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
245036.jpg
</td>
<td>
245036.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
247937.jpg
</td>
<td>
247937.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3172614.jpg
</td>
<td>
3172614.json
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths}</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-8">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 38</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
133196
</th>
<td>
Datasets/labelme-keypoint-toy-dataset/133196.jpg
</td>
</tr>
<tr>
<th>
245035
</th>
<td>
Datasets/labelme-keypoint-toy-dataset/245035.jpg
</td>
</tr>
<tr>
<th>
245036
</th>
<td>
Datasets/labelme-keypoint-toy-dataset/245036.jpg
</td>
</tr>
<tr>
<th>
247937
</th>
<td>
Datasets/labelme-keypoint-toy-dataset/247937.jpg
</td>
</tr>
<tr>
<th>
3172614
</th>
<td>
Datasets/labelme-keypoint-toy-dataset/3172614.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of each JSON annotation file into a single Pandas DataFrame so we can easily query the annotations.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb16-2">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb16-5">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb16-8">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-9">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb16-10"></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb16-12">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb16-15">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
133196
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘nose’, ‘points’: [[386.70731707317077, 297.109756097561]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
133196.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
960
</td>
</tr>
<tr>
<th>
245035
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘nose’, ‘points’: [[334.4587155963303, 319.57798165137615]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
245035.jpg
</td>
<td>
None
</td>
<td>
1152
</td>
<td>
768
</td>
</tr>
<tr>
<th>
245036
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘nose’, ‘points’: [[226.8571428571429, 240.80357142857144]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
245036.jpg
</td>
<td>
None
</td>
<td>
1120
</td>
<td>
768
</td>
</tr>
<tr>
<th>
247937
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘nose’, ‘points’: [[454.6585365853659, 230.03658536585363]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
247937.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
<tr>
<th>
3172614
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘nose’, ‘points’: [[539.4146341463414, 608.0853658536585]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
3172614.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The source JSON content corresponding to the first row in the DataFrame is available below:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5.3.1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{},</span></span>
<span id="cb17-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shapes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nose"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"points"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-8">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-9">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">386.70731707317077</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-10">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">297.109756097561</span></span>
<span id="cb17-11">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-12">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"group_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-15">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shape_type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"point"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-16">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb17-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-18">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-19">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imagePath"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"133196.jpg"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-20">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageData"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageHeight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageWidth"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">960</span></span>
<span id="cb17-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step won’t yield any insights for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe and rename the 'shapes' column to 'shapes'</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb18-4">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb18-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb18-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
nose
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb19-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].value_counts()</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb19-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span>
<span id="cb19-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb19-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb19-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb19-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb19-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_21_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its keypoints using torchvision’s <code>BoundingBoxes</code> class and <code>draw_bounding_boxes</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to keypoints for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb20-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb20-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb20-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_25_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb21-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb21-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb23-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb23-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb23-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-9"></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb23-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (960, 768)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_33_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb25-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
133196
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
version
</th>
<td>
5.3.1
</td>
</tr>
<tr>
<th>
flags
</th>
<td>
{}
</td>
</tr>
<tr>
<th>
shapes
</th>
<td>
[{‘label’: ‘nose’, ‘points’: [[386.70731707317077, 297.109756097561]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
</tr>
<tr>
<th>
imagePath
</th>
<td>
133196.jpg
</td>
</tr>
<tr>
<th>
imageData
</th>
<td>
None
</td>
</tr>
<tr>
<th>
imageHeight
</th>
<td>
768
</td>
</tr>
<tr>
<th>
imageWidth
</th>
<td>
960
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>We can convert our keypoint annotations to bounding boxes by adding values for box width and height, making it <code>[center-x, center-y, width, height]</code> format</p>
<p>The <code>draw_bounding_boxes</code> function expects bounding box annotations in <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format, so we’ll use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.box_convert.html#torchvision.ops.box_convert"><code>box_convert</code></a> function included with torchvision to convert the bounding box annotations from <code>[cx,cy,w,h]</code> to <code>[x,y,x,y]</code> format.</p>
<p>We can reverse this process during training to extract the target keypoints for calculating the loss.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and keypoint annotations for the sample image</span></span>
<span id="cb26-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb26-3">keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]])).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-4">keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((keypoints, torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb26-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb26-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb26-9">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(keypoints_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>),</span>
<span id="cb26-10">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb26-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb26-12">)</span>
<span id="cb26-13"></span>
<span id="cb26-14">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_37_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb27-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb28-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb28-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb28-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb28-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb28-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb28-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb28-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb28-9"></span>
<span id="cb28-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb28-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb28-12"></span>
<span id="cb28-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb28-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb29-2">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb29-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torchvision.ops.box_convert(keypoints_bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb29-4">                           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb29-5">                           canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb29-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb29-7">}</span>
<span id="cb29-8"></span>
<span id="cb29-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb29-10">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb29-11"></span>
<span id="cb29-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb29-13">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb29-14"></span>
<span id="cb29-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb29-16">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb29-17"></span>
<span id="cb29-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb29-19">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-20">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb29-21">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb29-22"></span>
<span id="cb29-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb29-24">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb29-25">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb29-26">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb29-27">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb29-28">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb29-29">)</span>
<span id="cb29-30"></span>
<span id="cb29-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb29-32">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb29-33"></span>
<span id="cb29-34">pd.Series({</span>
<span id="cb29-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb29-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb29-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb29-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb29-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb29-40">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_45_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_f49db">
<thead>
</thead>
<tbody>
<tr>
<th id="T_f49db_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_f49db_row0_col0" class="data row0 col0">
(960, 768)
</td>
</tr>
<tr>
<th id="T_f49db_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_f49db_row1_col0" class="data row1 col0">
(960, 768)
</td>
</tr>
<tr>
<th id="T_f49db_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_f49db_row2_col0" class="data row2 col0">
(383, 307)
</td>
</tr>
<tr>
<th id="T_f49db_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_f49db_row3_col0" class="data row3 col0">
(383, 383)
</td>
</tr>
<tr>
<th id="T_f49db_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_f49db_row4_col0" class="data row4 col0">
(384, 384)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> LabelMeKeypointDataset(Dataset):</span>
<span id="cb30-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A PyTorch Dataset class for handling LabelMe image keypoints.</span></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class extends PyTorch's Dataset and is designed to work with image data and</span></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    associated keypoints annotations. It supports loading images and corresponding</span></span>
<span id="cb30-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    keypoints annotations, and applying transformations.</span></span>
<span id="cb30-8"></span>
<span id="cb30-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_keys (list): List of image keys.</span></span>
<span id="cb30-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation_df (DataFrame): DataFrame containing annotations for each image.</span></span>
<span id="cb30-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_dict (dict): Dictionary mapping image keys to their file paths.</span></span>
<span id="cb30-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb30-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transforms (callable, optional): Transformations to be applied to the images and targets.</span></span>
<span id="cb30-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb30-16"></span>
<span id="cb30-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb30-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the LabelMeKeypointDataset with image keys, annotations, and other relevant information.</span></span>
<span id="cb30-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb30-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb30-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_keys (list): List of image keys.</span></span>
<span id="cb30-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation_df (DataFrame): DataFrame containing annotations for each image.</span></span>
<span id="cb30-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_dict (dict): Dictionary mapping image keys to their file paths.</span></span>
<span id="cb30-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb30-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            transforms (callable, optional): Transformations to be applied to the images and targets.</span></span>
<span id="cb30-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb30-29">        </span>
<span id="cb30-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys</span>
<span id="cb30-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df</span>
<span id="cb30-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict</span>
<span id="cb30-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx</span>
<span id="cb30-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms</span>
<span id="cb30-35"></span>
<span id="cb30-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.BBOX_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb30-37"></span>
<span id="cb30-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb30-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the number of items in the dataset.</span></span>
<span id="cb30-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb30-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb30-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            int: Number of items in the dataset.</span></span>
<span id="cb30-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb30-46">        </span>
<span id="cb30-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb30-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an item from the dataset at the specified index.</span></span>
<span id="cb30-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb30-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb30-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            index (int): Index of the item to retrieve.</span></span>
<span id="cb30-53"></span>
<span id="cb30-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb30-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its corresponding target (annotations).</span></span>
<span id="cb30-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-57">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb30-58">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb30-59">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb30-60">        </span>
<span id="cb30-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Applying transformations if specified</span></span>
<span id="cb30-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb30-63">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb30-64"></span>
<span id="cb30-65">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill any missing keypoints with dummy values</span></span>
<span id="cb30-66">        target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._fill_and_order_target(target)</span>
<span id="cb30-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb30-68"></span>
<span id="cb30-69">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> order_points_by_labels(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data, label_order):</span>
<span id="cb30-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Extracts and orders points from a list of dictionaries based on a given order of labels.</span></span>
<span id="cb30-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb30-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param data: List of dictionaries containing labels and points.</span></span>
<span id="cb30-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param label_order: List of labels in the desired order.</span></span>
<span id="cb30-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :return: List of points in the specified label order.</span></span>
<span id="cb30-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-77">        ordered_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb30-78">        label_to_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]: item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data}</span>
<span id="cb30-79">    </span>
<span id="cb30-80">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> label_order:</span>
<span id="cb30-81">            points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_to_points.get(label)</span>
<span id="cb30-82">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb30-83">                ordered_points.extend(points)</span>
<span id="cb30-84"></span>
<span id="cb30-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ordered_points</span>
<span id="cb30-86"></span>
<span id="cb30-87">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb30-88">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Loads an image and its corresponding target (annotations) based on the provided annotation.</span></span>
<span id="cb30-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb30-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb30-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation (DataFrame row): Annotation data for a specific image.</span></span>
<span id="cb30-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Returns:</span></span>
<span id="cb30-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the loaded image and its corresponding target data.</span></span>
<span id="cb30-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-96">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image from the file path specified in the annotations</span></span>
<span id="cb30-97">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb30-98">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb30-99"></span>
<span id="cb30-100">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extracting keypoints from the annotation and converting them to a tensor</span></span>
<span id="cb30-101">        keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.order_points_by_labels(annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>], class_to_idx.keys())</span>
<span id="cb30-102">        keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.array(keypoints, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb30-103">        </span>
<span id="cb30-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding an offset to create bounding boxes around keypoints</span></span>
<span id="cb30-105">        keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((keypoints, torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.BBOX_DIM), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb30-106">                </span>
<span id="cb30-107">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert bounding box format and create a BoundingBoxes object</span></span>
<span id="cb30-108">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.box_convert(keypoints_bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>)</span>
<span id="cb30-109">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb30-110">        </span>
<span id="cb30-111">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create tensor for labels based on the class indices</span></span>
<span id="cb30-112">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> class_to_idx.keys()])</span>
<span id="cb30-113">        </span>
<span id="cb30-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span>
<span id="cb30-115"></span>
<span id="cb30-116">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _fill_and_order_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, target):</span>
<span id="cb30-117">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-118"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Fills and orders the target bounding boxes and labels based on the class index.</span></span>
<span id="cb30-119"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb30-120"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This method ensures that each target has a bounding box and label for each class,</span></span>
<span id="cb30-121"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        even if some classes are not present in the original target. Missing classes</span></span>
<span id="cb30-122"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        are filled with dummy values.</span></span>
<span id="cb30-123"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb30-124"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb30-125"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            target (dict): A dictionary containing 'boxes' and 'labels' keys, where</span></span>
<span id="cb30-126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           'boxes' is a tensor of bounding boxes and 'labels' is a tensor</span></span>
<span id="cb30-127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           of labels corresponding to these boxes.</span></span>
<span id="cb30-128"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb30-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb30-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dict: The updated target dictionary with boxes and labels ordered and filled</span></span>
<span id="cb30-131"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  according to the class index.</span></span>
<span id="cb30-132"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-133">    </span>
<span id="cb30-134">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize new boxes with dummy values (-1.0) for each class</span></span>
<span id="cb30-135">        new_boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.full((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb30-136">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare labels tensor based on the class indices</span></span>
<span id="cb30-137">        new_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx.values()), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32)</span>
<span id="cb30-138">    </span>
<span id="cb30-139">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over each class label</span></span>
<span id="cb30-140">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(new_labels):</span>
<span id="cb30-141">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the current label exists in the target's labels</span></span>
<span id="cb30-142">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]:</span>
<span id="cb30-143">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the index of the current label in the target's labels</span></span>
<span id="cb30-144">                idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> label).nonzero(as_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb30-145">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the corresponding box to the new boxes tensor</span></span>
<span id="cb30-146">                new_boxes[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>][idx]</span>
<span id="cb30-147">    </span>
<span id="cb30-148">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the target dictionary with the new boxes and labels</span></span>
<span id="cb30-149">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_boxes</span>
<span id="cb30-150">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_labels</span>
<span id="cb30-151">    </span>
<span id="cb30-152">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> target</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb31-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb31-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb31-4">        iou_crop,</span>
<span id="cb31-5">        transforms.ColorJitter(</span>
<span id="cb31-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb31-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb31-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb31-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb31-10">        ),</span>
<span id="cb31-11">        transforms.RandomGrayscale(),</span>
<span id="cb31-12">        transforms.RandomEqualize(),</span>
<span id="cb31-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb31-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb31-15">    ],</span>
<span id="cb31-16">)</span>
<span id="cb31-17"></span>
<span id="cb31-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb31-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb31-20">    resize_max, </span>
<span id="cb31-21">    pad_square,</span>
<span id="cb31-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-23">])</span>
<span id="cb31-24"></span>
<span id="cb31-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb31-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb31-27">    transforms.ToImage(), </span>
<span id="cb31-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb31-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb31-30">])</span>
<span id="cb31-31"></span>
<span id="cb31-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb31-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb31-34">    data_aug_tfms, </span>
<span id="cb31-35">    resize_pad_tfm, </span>
<span id="cb31-36">    final_tfms</span>
<span id="cb31-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb32-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb32-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelMeKeypointDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb32-6"></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training dataset</span></span>
<span id="cb32-8">pd.Series({</span>
<span id="cb32-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb32-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_1c8b9">
<thead>
</thead>
<tbody>
<tr>
<th id="T_1c8b9_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_1c8b9_row0_col0" class="data row0 col0">
38
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a sample image and its target annotations</span></span>
<span id="cb33-2">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sanitize bounding boxes to remove dummy values</span></span>
<span id="cb33-5">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb33-6">targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb33-7">sanitized_image, sanitized_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], targets)</span>
<span id="cb33-8"></span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with the sanitized annotations</span></span>
<span id="cb33-10">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb33-11">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(sanitized_image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb33-12">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb33-13">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb33-14">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb33-15">)</span>
<span id="cb33-16"></span>
<span id="cb33-17">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_54_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom keypoint annotations made with the LabelMe annotation tool and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future keypoint estimation projects.</p>
<p>As a next step, perhaps try annotating a custom keypoint estimation dataset with LabelMe and loading it with this tutorial’s code. Once you’re comfortable with that, try adapting the code in the following tutorial to train a keypoint estimation model on your custom dataset.</p>
<ul>
<li><a href="../../../posts/pytorch-train-keypoint-rcnn-tutorial">Training Keypoint R-CNN Models with PyTorch</a></li>
</ul>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-labelme-annotation-tutorials/bounding-boxes/"><strong>Working with LabelMe Bounding Box Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe bounding box annotations in torchvision for object detection tasks.</li>
<li><a href="http://localhost:3847/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/"><strong>Working with LabelMe Segmentation Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe segmentation annotations in torchvision for instance segmentation tasks.</li>
</ul>
<p><br></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Next Steps">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Next Steps
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Feel free to post questions or problems related to this tutorial in the comments below. I try to make time to address them on Thursdays and Fridays.</li>
<li>If you would like to explore my <a href="../../../about.html#services">services</a> for your project, you can reach out via email at <a href="mailto:christian@christianjmills.com">christian@christianjmills.com</a></li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>keypoint-estimation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with LabelMe Bounding Box Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with bounding box annotations created with the <a href="https://github.com/labelmeai/labelme">LabelMe annotation tool</a> in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Bounding box annotations specify rectangular frames around objects in images to identify and locate them for training object detection models.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/bounding-box-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with bounding box annotations made with LabelMe for object detection tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-bounding-box-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-bounding-box-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-24">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-32"></span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-34"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-35">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. The TVTensor class for bounding box annotations is called <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html"><code>BoundingBoxes</code></a>. Torchvision also includes a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with bounding boxes for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/labelme-bounding-box-toy-dataset/tree/main">labelme-bounding-box-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_4e87e">
<thead>
</thead>
<tbody>
<tr>
<th id="T_4e87e_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_4e87e_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_4e87e_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_4e87e_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labelme-bounding-box-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_e1208">
<thead>
</thead>
<tbody>
<tr>
<th id="T_e1208_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_e1208_row0_col0" class="data row0 col0">
cj-mills/labelme-bounding-box-toy-dataset
</td>
</tr>
<tr>
<th id="T_e1208_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_e1208_row1_col0" class="data row1 col0">
Datasets/../Archive/labelme-bounding-box-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_e1208_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_e1208_row2_col0" class="data row2 col0">
Datasets/labelme-bounding-box-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-image-and-annotation-files" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-image-and-annotation-files">Getting the Image and Annotation Files</h3>
<p>The dataset folder contains sample images and annotation files. Each sample image has its own JSON annotation file.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the dataset</span></span>
<span id="cb13-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_img_files(dataset_path)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of JSON files in the dataset</span></span>
<span id="cb13-5">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the names of the folders using a Pandas DataFrame</span></span>
<span id="cb13-8">pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image File"</span>: [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths], </span>
<span id="cb13-9">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>:[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_file_paths]}).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image File
</th>
<th>
Annotation File
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
258421.jpg
</td>
<td>
258421.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
3075367.jpg
</td>
<td>
3075367.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3076319.jpg
</td>
<td>
3076319.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3145551.jpg
</td>
<td>
3145551.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3176048.jpg
</td>
<td>
3176048.json
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths}</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-8">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 29</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/258421.jpg
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/3075367.jpg
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/3076319.jpg
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/3145551.jpg
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/3176048.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of each JSON annotation file into a single Pandas DataFrame so we can easily query the annotations.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb16-2">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb16-5">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb16-8">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-9">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb16-10"></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb16-12">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb16-15">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[340.2519836425781, 466.943359375], [418.9939880371094, 777.34423828125]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[386.076124567474, 443.94463667820065], [460.81660899653974, 777.1626297577855]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
258421.jpg
</td>
<td>
None
</td>
<td>
1152
</td>
<td>
768
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[413.31866455078125, 41.2171630859375], [919.8128051757812, 763.16552734375]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
3075367.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1344
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[335.30731201171875, 151.749755859375], [711.2194213867188, 1117.489013671875]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[8.10714285714289, 131.87500000000003], [404.2032880329769, 1119.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
3076319.jpg
</td>
<td>
None
</td>
<td>
1120
</td>
<td>
768
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[658.6324462890625, 281.2455139160156], [687.085693359375, 398.6059265136719]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[642.0, 289.8510638297872], [669.6595744680851, 398.8936170212766]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
3145551.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1184
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[518.2313232421875, 338.9653015136719], [594.632080078125, 466.0799865722656]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[683.419689119171, 356.47668393782385], [638.860103626943, 437.8238341968912]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
3176048.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Let’s examine the source JSON content corresponding to the first row in the DataFrame:</p>
<div style="overflow-x:auto; max-height:500px">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5.3.1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{},</span></span>
<span id="cb17-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shapes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"points"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-8">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-9">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">340.2519836425781</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-10">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">466.943359375</span></span>
<span id="cb17-11">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-12">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-13">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">418.9939880371094</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-14">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">777.34423828125</span></span>
<span id="cb17-15">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-16">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-17">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"group_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-18">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-19">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shape_type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rectangle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-20">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb17-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-23">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-24">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"points"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-25">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-26">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">386.076124567474</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-27">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">443.94463667820065</span></span>
<span id="cb17-28">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-29">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-30">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">460.81660899653974</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-31">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">777.1626297577855</span></span>
<span id="cb17-32">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-33">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-34">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"group_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-35">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-36">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shape_type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rectangle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-37">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb17-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-39">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-40">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imagePath"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"258421.jpg"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-41">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageData"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-42">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageHeight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1152</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-43">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageWidth"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span></span>
<span id="cb17-44"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<hr>
<p>The bounding box annotations are in <code>[[Top-Left X, Top-Left Y],[Bottom-Right X, Bottom-Right Y]]</code> format.</p>
<section id="fill-empty-annotations" class="level4">
<h4 class="anchored" data-anchor-id="fill-empty-annotations">Fill empty annotations</h4>
<p>Next, we will fill empty entries for images without bounding box annotations with a default value.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a default value for empty annotations</span></span>
<span id="cb18-2">EMPTY_BBOX_FILL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'none'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>: [[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>], [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>]], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'group_id'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'description'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shape_type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rectangle'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flags'</span>: {}}]</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill empty annotations</span></span>
<span id="cb18-5">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: EMPTY_BBOX_FILL <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> x)</span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Annotations Filled: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> EMPTY_BBOX_FILL)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<pre class="text"><code>    Annotations Filled: 1</code></pre>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step won’t yield any insights for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe</span></span>
<span id="cb20-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb20-4">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb20-5"></span>
<span id="cb20-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb20-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb20-8"></span>
<span id="cb20-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb20-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
person
</td>
</tr>
<tr>
<th>
1
</th>
<td>
none
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb21-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].value_counts()</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb21-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb21-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb21-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb21-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb21-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb21-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_24_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its bounding boxes using torchvision’s <code>BoundingBoxes</code> class and <code>draw_bounding_boxes</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to bounding boxes for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb22-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb22-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb22-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_28_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb23-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb23-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb25-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb25-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb25-6"></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb25-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-9"></span>
<span id="cb25-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb25-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (768, 1152)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_33_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb27-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
258421
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
version
</th>
<td>
5.3.1
</td>
</tr>
<tr>
<th>
flags
</th>
<td>
{}
</td>
</tr>
<tr>
<th>
shapes
</th>
<td>
[{‘label’: ‘person’, ‘points’: [[340.2519836425781, 466.943359375], [418.9939880371094, 777.34423828125]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[386.076124567474, 443.94463667820065], [460.81660899653974, 777.1626297577855]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
</tr>
<tr>
<th>
imagePath
</th>
<td>
258421.jpg
</td>
</tr>
<tr>
<th>
imageData
</th>
<td>
None
</td>
</tr>
<tr>
<th>
imageHeight
</th>
<td>
1152
</td>
</tr>
<tr>
<th>
imageWidth
</th>
<td>
768
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="define-function-that-ensures-bounding-boxes-are-in-a-consistent-format" class="level4">
<h4 class="anchored" data-anchor-id="define-function-that-ensures-bounding-boxes-are-in-a-consistent-format">Define function that ensures bounding boxes are in a consistent format</h4>
<p>LabelMe does not enforce a consistent order for storing the (x,y) coordinates for bounding box annotations. The order depends on how you initiate the bounding box annotation. Therefore, we will create a function that ensures the order is in [top-left x, top-left y, bottom-right x, bottom-right y] format.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> correct_bounding_boxes(bboxes):</span>
<span id="cb28-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure input is a NumPy array</span></span>
<span id="cb28-3">    bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(bboxes)</span>
<span id="cb28-4">    </span>
<span id="cb28-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correct x coordinates</span></span>
<span id="cb28-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the x coordinates if the top-left x is greater than the bottom-right x</span></span>
<span id="cb28-7">    x_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb28-8">    x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb28-9">    </span>
<span id="cb28-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correct y coordinates</span></span>
<span id="cb28-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the y coordinates if the top-left y is greater than the bottom-right y</span></span>
<span id="cb28-12">    y_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb28-13">    y_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb28-14">    </span>
<span id="cb28-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the corrected bounding boxes array</span></span>
<span id="cb28-16">    corrected_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack([x_min, y_min, x_max, y_max], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb28-17">    </span>
<span id="cb28-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> corrected_bboxes</span></code></pre></div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>The <code>draw_bounding_boxes</code> function expects bounding box annotations in <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format, so we don’t need to convert the annotation values.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb29-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb29-3">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]).reshape(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb29-4">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> correct_bounding_boxes(bboxes)</span>
<span id="cb29-5"></span>
<span id="cb29-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb29-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb29-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb29-9">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BoundingBoxes(torch.Tensor(bboxes), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]),</span>
<span id="cb29-10">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb29-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb29-12">)</span>
<span id="cb29-13"></span>
<span id="cb29-14">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_37_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb30-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb31-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb31-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb31-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb31-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb31-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb31-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb31-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb31-9"></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb31-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb31-12"></span>
<span id="cb31-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb31-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb32-2">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torch.Tensor(bboxes), </span>
<span id="cb32-4">                           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb32-5">                           canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb32-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb32-7">}</span>
<span id="cb32-8"></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb32-10">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb32-11"></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb32-13">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb32-14"></span>
<span id="cb32-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb32-16">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb32-17"></span>
<span id="cb32-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb32-19">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb32-20">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb32-21">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb32-22"></span>
<span id="cb32-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb32-24">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb32-25">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb32-26">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb32-27">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb32-28">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb32-29">)</span>
<span id="cb32-30"></span>
<span id="cb32-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb32-32">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb32-33"></span>
<span id="cb32-34">pd.Series({</span>
<span id="cb32-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb32-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb32-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb32-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb32-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb32-40">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_45_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_c2ef8">
<thead>
</thead>
<tbody>
<tr>
<th id="T_c2ef8_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_c2ef8_row0_col0" class="data row0 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_c2ef8_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_c2ef8_row1_col0" class="data row1 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_c2ef8_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_c2ef8_row2_col0" class="data row2 col0">
(256, 384)
</td>
</tr>
<tr>
<th id="T_c2ef8_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_c2ef8_row3_col0" class="data row3 col0">
(384, 384)
</td>
</tr>
<tr>
<th id="T_c2ef8_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_c2ef8_row4_col0" class="data row4 col0">
(384, 384)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> LabelMeBBoxDataset(Dataset):</span>
<span id="cb33-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A custom dataset class for handling LabelMe bounding box datasets.</span></span>
<span id="cb33-4"></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class is designed to work with datasets where annotations are</span></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    provided in a DataFrame and images are referenced by keys.</span></span>
<span id="cb33-7"></span>
<span id="cb33-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_keys (list): A list of image keys identifying each image.</span></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _annotation_df (DataFrame): A DataFrame containing image annotations.</span></span>
<span id="cb33-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_dict (dict): A dictionary mapping image keys to image file paths.</span></span>
<span id="cb33-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _class_to_idx (dict): A dictionary mapping class names to class indices.</span></span>
<span id="cb33-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _transforms (function): A function or series of functions to apply transformations to the images and targets.</span></span>
<span id="cb33-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb33-15"></span>
<span id="cb33-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb33-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the dataset with image keys, annotation data, image dictionary, class indices, and transforms.</span></span>
<span id="cb33-19"></span>
<span id="cb33-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb33-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_keys (list): A list of image keys.</span></span>
<span id="cb33-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation_df (DataFrame): A DataFrame containing image annotations.</span></span>
<span id="cb33-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_dict (dict): A dictionary mapping image keys to image file paths.</span></span>
<span id="cb33-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            class_to_idx (dict): A dictionary mapping class names to class indices.</span></span>
<span id="cb33-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            transforms (function, optional): A function for transforming images and targets. Defaults to None.</span></span>
<span id="cb33-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb33-27">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb33-28">        </span>
<span id="cb33-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys</span>
<span id="cb33-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df</span>
<span id="cb33-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict</span>
<span id="cb33-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx</span>
<span id="cb33-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms</span>
<span id="cb33-34"></span>
<span id="cb33-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb33-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the total number of items in the dataset.</span></span>
<span id="cb33-38"></span>
<span id="cb33-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb33-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            int: The total number of images in the dataset.</span></span>
<span id="cb33-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb33-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb33-43">        </span>
<span id="cb33-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb33-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an image and its corresponding target (annotations) at the specified index.</span></span>
<span id="cb33-47"></span>
<span id="cb33-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb33-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            index (int): The index of the item to retrieve.</span></span>
<span id="cb33-50"></span>
<span id="cb33-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb33-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its corresponding target (annotations).</span></span>
<span id="cb33-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb33-54">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb33-55">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb33-56">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb33-57">        </span>
<span id="cb33-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply transformations if any</span></span>
<span id="cb33-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb33-60">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb33-61">        </span>
<span id="cb33-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb33-63"></span>
<span id="cb33-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb33-65">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Loads an image and its corresponding target (annotations) based on the given annotation.</span></span>
<span id="cb33-67"></span>
<span id="cb33-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb33-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation (Series): A pandas Series containing the annotation data for a single image.</span></span>
<span id="cb33-70"></span>
<span id="cb33-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb33-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its corresponding target (annotations).</span></span>
<span id="cb33-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb33-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image from the filepath</span></span>
<span id="cb33-75">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb33-76">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb33-77"></span>
<span id="cb33-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process bounding box annotations</span></span>
<span id="cb33-79">        bbox_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]).reshape(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb33-80">        bbox_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> correct_bounding_boxes(bbox_list)</span>
<span id="cb33-81">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor(bbox_list)</span>
<span id="cb33-82">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb33-83"></span>
<span id="cb33-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process label annotations</span></span>
<span id="cb33-85">        annotation_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb33-86">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_labels])</span>
<span id="cb33-87"></span>
<span id="cb33-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb34-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb34-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb34-4">        iou_crop,</span>
<span id="cb34-5">        transforms.ColorJitter(</span>
<span id="cb34-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb34-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb34-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb34-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb34-10">        ),</span>
<span id="cb34-11">        transforms.RandomGrayscale(),</span>
<span id="cb34-12">        transforms.RandomEqualize(),</span>
<span id="cb34-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb34-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb34-15">    ],</span>
<span id="cb34-16">)</span>
<span id="cb34-17"></span>
<span id="cb34-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb34-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb34-20">    resize_max, </span>
<span id="cb34-21">    pad_square,</span>
<span id="cb34-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb34-23">])</span>
<span id="cb34-24"></span>
<span id="cb34-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb34-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb34-27">    transforms.ToImage(), </span>
<span id="cb34-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb34-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb34-30">])</span>
<span id="cb34-31"></span>
<span id="cb34-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb34-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb34-34">    data_aug_tfms, </span>
<span id="cb34-35">    resize_pad_tfm, </span>
<span id="cb34-36">    final_tfms</span>
<span id="cb34-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb35-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb35-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelMeBBoxDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb35-6"></span>
<span id="cb35-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training dataset</span></span>
<span id="cb35-8">pd.Series({</span>
<span id="cb35-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb35-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_b3d5b">
<thead>
</thead>
<tbody>
<tr>
<th id="T_b3d5b_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_b3d5b_row0_col0" class="data row0 col0">
29
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb36-2"></span>
<span id="cb36-3">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb36-4">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb36-5">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb36-6">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb36-7">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb36-8">)</span>
<span id="cb36-9"></span>
<span id="cb36-10">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_54_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom bounding box annotations made with the LabelMe annotation tool and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future object detection projects.</p>
<p>As a next step, perhaps try annotating a custom object detection dataset with LabelMe and loading it with this tutorial’s code. Once you’re comfortable with that, try adapting the code in the following tutorial to train an object detection model on your custom dataset.</p>
<ul>
<li><a href="../../../posts/pytorch-train-object-detector-yolox-tutorial">Training YOLOX Models for Real-Time Object Detection in PyTorch</a></li>
</ul>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-labelme-annotation-tutorials/keypoints/"><strong>Working with LabelMe Keypoint Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe keypoint annotations in torchvision for keypoint estimation tasks.</li>
<li><a href="../../../posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/"><strong>Working with LabelMe Segmentation Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe segmentation annotations in torchvision for instance segmentation tasks.</li>
<li><a href="http://localhost:3847/posts/pytorch-train-object-detector-yolox-tutorial"><strong>Training YOLOX Models for Real-Time Object Detection in PyTorch</strong></a><strong>:</strong> Learn how to train YOLOX models for real-time object detection in PyTorch by creating a hand gesture detection model.</li>
</ul>
<p><br></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Next Steps">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Next Steps
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Feel free to post questions or problems related to this tutorial in the comments below. I try to make time to address them on Thursdays and Fridays.</li>
<li>If you would like to explore my <a href="../../../about.html#services">services</a> for your project, you can reach out via email at <a href="mailto:christian@christianjmills.com">christian@christianjmills.com</a></li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>object-detection</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with CVAT Segmentation Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with segmentation annotations created with the <a href="https://github.com/opencv/cvat">CVAT annotation tool</a> in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Segmentation annotations indicate the pixels occupied by specific objects or areas of interest in images for training models to recognize and delineate these objects at a pixel level.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/segmentation-mask-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with segmentation annotations made with CVAT for instance segmentation tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/cvat/torchvision-cvat-segmentation-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/cvat/torchvision-cvat-segmentation-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="caption-top table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> xml.etree.ElementTree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ET</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-17"></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-25">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-26"></span>
<span id="cb9-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw</span>
<span id="cb9-29"></span>
<span id="cb9-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-32"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-33"></span>
<span id="cb9-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-35"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-36">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes, Mask</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes, draw_segmentation_masks</span>
<span id="cb9-39"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-40"></span>
<span id="cb9-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. The TVTensor class for segmentation annotations is called <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.Mask.html">Mask</a>. Torchvision also includes a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_segmentation_masks.html">draw_segmentation_masks</a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with segmentation masks for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/cvat-instance-segmentation-toy-dataset/tree/main">cvat-instance-segmentation-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_f4094">
<thead>
</thead>
<tbody>
<tr>
<th id="T_f4094_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_f4094_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_f4094_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_f4094_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cvat-instance-segmentation-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_38429">
<thead>
</thead>
<tbody>
<tr>
<th id="T_38429_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_38429_row0_col0" class="data row0 col0">
cj-mills/cvat-instance-segmentation-toy-dataset
</td>
</tr>
<tr>
<th id="T_38429_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_38429_row1_col0" class="data row1 col0">
Datasets/../Archive/cvat-instance-segmentation-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_38429_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_38429_row2_col0" class="data row2 col0">
Datasets/cvat-instance-segmentation-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-images-and-annotations" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-images-and-annotations">Getting the Images and Annotations</h3>
<p>The dataset has a folder containing the sample images and an XML file containing the annotations.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming the images are stored in a subfolder named 'default'</span></span>
<span id="cb13-2">img_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images/default'</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming annotation file is in XML format and located in any subdirectory of the dataset</span></span>
<span id="cb13-5">annotation_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'annotations.xml'</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb13-8">pd.Series({</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image Folder"</span>: img_dir, </span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>: annotation_file_path}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_c53a2">
<thead>
</thead>
<tbody>
<tr>
<th id="T_c53a2_level0_row0" class="row_heading level0 row0">
Image Folder
</th>
<td id="T_c53a2_row0_col0" class="data row0 col0">
Datasets/cvat-instance-segmentation-toy-dataset/images/default
</td>
</tr>
<tr>
<th id="T_c53a2_level0_row1" class="row_heading level0 row1">
Annotation File
</th>
<td id="T_c53a2_row1_col0" class="data row1 col0">
Datasets/cvat-instance-segmentation-toy-dataset/annotations.xml
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all image files in the 'img_dir' directory</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> get_img_files(img_dir) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in each image folder</span></span>
<span id="cb14-5">}</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-11">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 31</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
adults-affection-attractive-2760688
</th>
<td>
Datasets/cvat-instance-segmentation-toy-dataset/images/default/adults-affection-attractive-2760688.jpg
</td>
</tr>
<tr>
<th>
258421
</th>
<td>
Datasets/cvat-instance-segmentation-toy-dataset/images/default/258421.jpg
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
Datasets/cvat-instance-segmentation-toy-dataset/images/default/3075367.jpg
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
Datasets/cvat-instance-segmentation-toy-dataset/images/default/3076319.jpg
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
Datasets/cvat-instance-segmentation-toy-dataset/images/default/3145551.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of the XML annotation file into a Pandas DataFrame so we can easily query the annotations.</p>
<section id="define-a-function-to-parse-the-cvat-xml-annotations" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-parse-the-cvat-xml-annotations">Define a function to parse the CVAT XML annotations</h4>
<p>The following helper function parses the raw XML content into a Pandas DataFrame.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parse_cvat_segmentation_xml(xml_content):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parses an XML string representing image segmentation data from CVAT and converts it into a pandas DataFrame.</span></span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The function expects an XML string with a structure containing 'image' elements, each with 'id', 'name', 'width', </span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and 'height' attributes, and nested 'polygon' elements with 'label' and 'points' attributes. It processes this </span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    XML content to extract relevant data and organizes it into a structured DataFrame.</span></span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    xml_content (str): A string containing the XML data to be parsed.</span></span>
<span id="cb16-11"></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pandas.DataFrame: A DataFrame where each row represents an image and contains the following columns:</span></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      'Image ID', 'Image Name', 'Width', 'Height', and 'Polygons'.</span></span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      'Polygons' is a list of dictionaries, each representing a polygon with 'Label' and 'Points'.</span></span>
<span id="cb16-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb16-17"></span>
<span id="cb16-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the XML content from the provided string.</span></span>
<span id="cb16-19">    root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ET.fromstring(xml_content)</span>
<span id="cb16-20">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb16-21"></span>
<span id="cb16-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> root.findall(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>):</span>
<span id="cb16-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract attributes for each image.</span></span>
<span id="cb16-24">        image_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb16-25">        image_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>)</span>
<span id="cb16-26">        width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>)</span>
<span id="cb16-27">        height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>)</span>
<span id="cb16-28"></span>
<span id="cb16-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a dictionary to store image data.</span></span>
<span id="cb16-30">        image_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-31">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(image_id),</span>
<span id="cb16-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image Name'</span>: image_name,</span>
<span id="cb16-33">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Width'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(width),</span>
<span id="cb16-34">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Height'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(height),</span>
<span id="cb16-35">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>: []</span>
<span id="cb16-36">        }</span>
<span id="cb16-37"></span>
<span id="cb16-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over each polygon element within the current image.</span></span>
<span id="cb16-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> polygon <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> image.findall(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'polygon'</span>):</span>
<span id="cb16-40">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the label and points of the polygon.</span></span>
<span id="cb16-41">            label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> polygon.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>)</span>
<span id="cb16-42">            </span>
<span id="cb16-43">            points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>.join(polygon.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>).split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span>))</span>
<span id="cb16-44">            points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(point) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> point <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)]</span>
<span id="cb16-45">            </span>
<span id="cb16-46">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary to store the polygon data.</span></span>
<span id="cb16-47">            points_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-48">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>: label,</span>
<span id="cb16-49">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Points'</span>: points</span>
<span id="cb16-50">            }</span>
<span id="cb16-51">            image_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>].append(points_data)</span>
<span id="cb16-52"></span>
<span id="cb16-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the processed image data to the main data dictionary.</span></span>
<span id="cb16-54">        data[image_id] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_data</span>
<span id="cb16-55"></span>
<span id="cb16-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the data dictionary into a pandas DataFrame and return it.</span></span>
<span id="cb16-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pd.DataFrame.from_dict(data, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span></code></pre></div>
</section>
<section id="load-cvat-xml-annotations-into-a-dataframe" class="level4">
<h4 class="anchored" data-anchor-id="load-cvat-xml-annotations-into-a-dataframe">Load CVAT XML annotations into a DataFrame</h4>
<p>After parsing the XML content, we will change the index for the <code>annotation_df</code> DataFrame to match the keys in the <code>img_dict</code> dictionary, allowing us to retrieve both the image paths and annotation data using the same index key.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the XML file</span></span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(annotation_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb17-3">    xml_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the XML content</span></span>
<span id="cb17-6">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse_cvat_segmentation_xml(xml_content)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a new column 'Image ID' by extracting it from 'Image Name'</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This assumes that the 'Image ID' is the part of the 'Image Name' before the first period</span></span>
<span id="cb17-10">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image Name'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the new 'Image ID' column as the index of the DataFrame</span></span>
<span id="cb17-13">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>)</span>
<span id="cb17-14"></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first few rows of the DataFrame</span></span>
<span id="cb17-16">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image Name
</th>
<th>
Width
</th>
<th>
Height
</th>
<th>
Polygons
</th>
</tr>
<tr>
<th>
Image ID
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
258421.jpg
</td>
<td>
768
</td>
<td>
1152
</td>
<td>
[{‘Label’: ‘person’, ‘Points’: [377.0, 775.5, 368.0, 774.5, 346.5, 764.0, 349.5, 751.0, 348.5, 707.0, 358.5, 668.0, 343.5, 651.0, 359.5, 605.0, 379.5, 583.0, 366.01, 583.39, 362.55, 575.78, 361.85, 565.4, 353.2, 557.09, 357.7, 547.4, 350.78, 532.53, 356.32, 520.76, 359.78, 481.31, 376.39, 467.47, 387.46, 469.55, 401.3, 484.08, 405.8, 501.04, 394.03, 505.88, 394.73, 519.03, 399.92, 531.14, 374.66, 554.33, 369.81, 571.28, 374.31, 574.05, 388.15, 574.39, 397.49, 569.9, 402.5, 578.0, 410.5, 594.0, 412.5, 668.0, 387.0, 667.5, 375.5, 692.0, 376.5, 738.0, 380.5, 753.0, 388.5, 764.0, 386.5, 772.0]}, {‘Label’: ‘person’, ‘Points’: [404.0, 775.5, 396.5, 766.0, 411.5, 753.0, 411.5, 738.0, 416.5, 731.0, 412.5, 598.0, 419.5, 559.0, 416.0, 554.5, 404.0, 566.5, 387.0, 572.5, 375.5, 566.0, 377.5, 554.0, 405.5, 529.0, 413.5, 504.0, 414.5, 493.0, 386.5, 463.0, 388.5, 453.0, 399.0, 443.5, 413.0, 444.5, 423.5, 453.0, 457.5, 506.0, 452.5, 575.0, 458.5, 607.0, 447.5, 635.0, 444.5, 676.0, 452.5, 764.0, 443.0, 770.5]}]
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
3075367.jpg
</td>
<td>
1344
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘person’, ‘Points’: [829.0, 466.5, 825.5, 464.0, 824.5, 455.0, 825.5, 425.0, 828.0, 419.5, 833.5, 418.0, 827.5, 417.0, 822.5, 396.0, 825.5, 327.0, 843.5, 313.0, 842.5, 296.0, 833.5, 291.0, 832.5, 270.0, 837.0, 265.5, 856.0, 264.5, 868.5, 277.0, 870.5, 306.0, 881.5, 318.0, 883.5, 329.0, 893.0, 332.5, 899.5, 340.0, 901.5, 367.0, 883.5, 382.0, 849.5, 443.0, 842.5, 448.0, 838.5, 460.0]}, {‘Label’: ‘person’, ‘Points’: [714.0, 766.5, 664.0, 765.5, 654.0, 716.5, 640.0, 765.5, 578.5, 764.0, 578.5, 599.0, 570.5, 587.0, 592.5, 403.0, 583.5, 339.0, 525.5, 278.0, 463.5, 187.0, 423.5, 98.0, 422.5, 72.0, 444.0, 52.5, 460.5, 62.0, 458.5, 104.0, 485.5, 166.0, 581.0, 270.5, 623.0, 295.5, 644.5, 293.0, 630.5, 261.0, 642.5, 193.0, 667.0, 182.5, 707.0, 191.5, 719.5, 249.0, 709.0, 307.5, 774.0, 271.5, 848.5, 176.0, 875.5, 108.0, 867.5, 55.0, 902.0, 63.5, 908.5, 76.0, 902.5, 134.0, 858.5, 233.0, 759.5, 350.0, 736.5, 495.0, 752.5, 614.0]}, {‘Label’: ‘person’, ‘Points’: [359.0, 509.5, 355.0, 509.5, 350.5, 502.0, 353.5, 486.0, 349.5, 475.0, 349.5, 449.0, 345.5, 430.0, 339.5, 419.0, 337.5, 394.0, 327.5, 378.0, 331.5, 371.0, 332.5, 357.0, 342.5, 345.0, 345.5, 327.0, 354.0, 313.5, 365.5, 317.0, 366.5, 339.0, 385.0, 350.5, 399.5, 371.0, 398.5, 383.0, 390.0, 391.5, 390.5, 378.0, 383.0, 369.5, 379.5, 370.0, 380.5, 441.0, 376.5, 471.0, 370.0, 464.5, 364.5, 472.0, 362.5, 482.0, 364.5, 504.0]}, {‘Label’: ‘car’, ‘Points’: [1343.0, 764.5, 964.0, 745.5, 930.0, 764.5, 914.5, 759.0, 904.0, 722.5, 865.0, 706.5, 848.0, 735.5, 801.0, 735.5, 788.5, 699.0, 792.5, 577.0, 821.5, 476.0, 849.5, 454.0, 890.5, 382.0, 930.0, 355.5, 1021.0, 347.5, 1195.0, 358.5, 1287.0, 378.5, 1343.0, 436.0]}]
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
3076319.jpg
</td>
<td>
768
</td>
<td>
1120
</td>
<td>
[{‘Label’: ‘person’, ‘Points’: [590.0, 1119.0, 508.5, 1119.0, 393.5, 881.0, 363.5, 778.0, 359.5, 738.0, 377.5, 685.0, 420.5, 660.0, 388.5, 650.0, 410.5, 606.0, 412.5, 477.0, 349.5, 383.0, 364.5, 338.0, 341.5, 303.0, 369.5, 313.0, 396.5, 191.0, 449.0, 157.5, 496.0, 169.5, 524.5, 203.0, 534.5, 320.0, 577.5, 380.0, 588.5, 493.0, 635.5, 554.0, 631.5, 567.0, 687.5, 625.0, 704.5, 673.0, 698.5, 743.0, 632.5, 833.0, 618.5, 955.0, 573.5, 1096.0]}, {‘Label’: ‘person’, ‘Points’: [262.0, 1119.0, 128.5, 1119.0, 131.5, 1089.0, 35.5, 901.0, 11.5, 772.0, 33.5, 686.0, 70.5, 663.0, 34.5, 612.0, 25.5, 569.0, 52.5, 375.0, 97.0, 332.5, 195.5, 306.0, 205.5, 255.0, 192.5, 220.0, 240.0, 154.5, 290.0, 133.5, 323.5, 153.0, 341.5, 209.0, 332.5, 279.0, 294.5, 326.0, 347.5, 357.0, 352.5, 399.0, 400.5, 459.0, 404.5, 517.0, 391.5, 631.0, 344.5, 679.0, 359.5, 719.0, 323.5, 907.0, 224.5, 1082.0]}]
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
3145551.jpg
</td>
<td>
1184
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘person’, ‘Points’: [683.0, 398.5, 675.0, 398.5, 671.5, 396.0, 673.5, 378.0, 669.5, 366.0, 669.5, 359.0, 664.5, 346.0, 663.5, 326.0, 661.5, 320.0, 661.5, 312.0, 666.5, 304.0, 662.5, 295.0, 666.0, 283.5, 673.0, 283.5, 674.5, 285.0, 676.5, 289.0, 676.5, 297.0, 681.5, 302.0, 685.5, 313.0, 686.5, 336.0, 683.5, 344.0, 685.5, 395.0]}, {‘Label’: ‘person’, ‘Points’: [649.0, 398.5, 644.0, 398.5, 641.5, 396.0, 640.5, 387.0, 644.5, 379.0, 650.5, 358.0, 650.5, 351.0, 644.5, 335.0, 644.5, 323.0, 646.5, 316.0, 644.5, 300.0, 648.5, 291.0, 654.0, 288.5, 661.5, 295.0, 662.5, 298.0, 658.5, 309.0, 662.5, 316.0, 664.5, 324.0, 665.5, 349.0, 669.5, 364.0, 665.5, 383.0, 666.5, 396.0, 663.0, 397.5, 659.5, 392.0, 662.5, 375.0, 662.5, 364.0, 660.0, 361.5, 649.5, 383.0]}]
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
3176048.jpg
</td>
<td>
1152
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘person’, ‘Points’: [562.0, 464.5, 552.0, 464.5, 550.5, 462.0, 553.5, 454.0, 550.5, 433.0, 558.5, 402.0, 558.5, 389.0, 561.5, 380.0, 557.0, 372.5, 549.0, 374.5, 537.0, 372.5, 533.0, 377.5, 532.5, 371.0, 529.5, 368.0, 542.0, 365.5, 551.0, 366.5, 562.0, 361.5, 567.0, 361.5, 568.5, 360.0, 567.5, 346.0, 572.0, 342.5, 577.0, 342.5, 582.5, 348.0, 581.5, 360.0, 591.5, 372.0, 593.5, 386.0, 592.0, 388.5, 587.0, 388.5, 585.5, 391.0, 578.5, 419.0, 572.5, 434.0, 571.5, 445.0, 566.5, 454.0, 565.5, 462.0]}, {‘Label’: ‘person’, ‘Points’: [661.0, 436.5, 659.5, 436.0, 660.5, 432.0, 660.5, 396.0, 659.5, 392.0, 663.5, 376.0, 661.0, 373.5, 658.0, 373.5, 650.0, 377.5, 641.0, 377.5, 640.5, 376.0, 647.0, 372.5, 651.0, 372.5, 656.0, 370.5, 666.0, 365.5, 667.5, 364.0, 667.5, 359.0, 670.0, 356.5, 674.0, 356.5, 677.5, 360.0, 676.5, 367.0, 682.5, 374.0, 683.5, 389.0, 681.0, 390.5, 678.5, 388.0, 678.5, 385.0, 677.5, 385.0, 677.5, 390.0, 673.5, 395.0, 673.5, 408.0, 671.5, 411.0, 670.5, 420.0, 668.5, 425.0, 668.5, 433.0, 669.5, 434.0]}]
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The source XML content corresponding to the first row in the DataFrame is available below:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">&lt;?xml</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> version=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> encoding=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">?&gt;</span></span>
<span id="cb18-2">&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">annotations</span>&gt;</span>
<span id="cb18-3">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">version</span>&gt;1.1&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">version</span>&gt;</span>
<span id="cb18-4">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span>&gt;</span>
<span id="cb18-5">  &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span>&gt;</span>
<span id="cb18-6">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">image</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"258421.jpg"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> subset=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> task_id=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> width=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"768"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> height=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1152"</span>&gt;</span>
<span id="cb18-7">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">polygon</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> label=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> source=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> occluded=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> points=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"377.00,775.50;368.00,774.50;346.50,764.00;349.50,751.00;348.50,707.00;358.50,668.00;343.50,651.00;359.50,605.00;379.50,583.00;366.01,583.39;362.55,575.78;361.85,565.40;353.20,557.09;357.70,547.40;350.78,532.53;356.32,520.76;359.78,481.31;376.39,467.47;387.46,469.55;401.30,484.08;405.80,501.04;394.03,505.88;394.73,519.03;399.92,531.14;374.66,554.33;369.81,571.28;374.31,574.05;388.15,574.39;397.49,569.90;402.50,578.00;410.50,594.00;412.50,668.00;387.00,667.50;375.50,692.00;376.50,738.00;380.50,753.00;388.50,764.00;386.50,772.00"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> z_order=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>&gt;</span>
<span id="cb18-8">    &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">polygon</span>&gt;</span>
<span id="cb18-9">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">polygon</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> label=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> source=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> occluded=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> points=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"404.00,775.50;396.50,766.00;411.50,753.00;411.50,738.00;416.50,731.00;412.50,598.00;419.50,559.00;416.00,554.50;404.00,566.50;387.00,572.50;375.50,566.00;377.50,554.00;405.50,529.00;413.50,504.00;414.50,493.00;386.50,463.00;388.50,453.00;399.00,443.50;413.00,444.50;423.50,453.00;457.50,506.00;452.50,575.00;458.50,607.00;447.50,635.00;444.50,676.00;452.50,764.00;443.00,770.50"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> z_order=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>&gt;</span>
<span id="cb18-10">    &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">polygon</span>&gt;</span>
<span id="cb18-11">  &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">image</span>&gt;</span>
<span id="cb18-12">&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">annotations</span>&gt;</span></code></pre></div>
<p>The segmentation polygon annotations in <code>[x1,y1, x2,y2, ..., xn,yn]</code> format.</p>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step is not strictly necessary for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'boxes_df' column in the annotation_df dataframe</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe and rename the 'boxes_df' column to 'boxes_df'</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'boxes_df' column of the dataframe</span></span>
<span id="cb19-4">polygon_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>].explode().to_frame().Polygons.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb19-5"></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb19-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> polygon_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>].unique().tolist()</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb19-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
person
</td>
</tr>
<tr>
<th>
1
</th>
<td>
car
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb20-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> polygon_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>].value_counts()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb20-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb20-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb20-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb20-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb20-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb20-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_24_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Note the class distribution is quite imbalanced between the <code>person</code> and <code>car</code> classes. For a real dataset, you would want these to be much closer.</p>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its segmentation masks and bounding boxes using torchvision’s <code>BoundingBoxes</code> and <code>Mask</code> classes and <code>draw_bounding_boxes</code> and <code>draw_segmentation_masks</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to bounding boxes for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb21-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb21-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb21-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_28_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb22-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb22-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb24-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb24-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb24-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb24-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (768, 1152)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_35_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb26-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
adults-affection-attractive-2760688
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
Image Name
</th>
<td>
adults-affection-attractive-2760688.jpg
</td>
</tr>
<tr>
<th>
Width
</th>
<td>
768
</td>
</tr>
<tr>
<th>
Height
</th>
<td>
1152
</td>
</tr>
<tr>
<th>
Polygons
</th>
<td>
[{‘Label’: ‘person’, ‘Points’: [389.0, 1151.0, 34.5, 1151.0, 82.5, 992.0, 103.0, 965.5, 147.5, 953.0, 135.5, 848.0, 104.5, 763.0, 97.5, 672.0, 129.5, 581.0, 186.5, 519.0, 127.5, 466.0, 106.5, 422.0, 118.5, 369.0, 181.0, 306.5, 258.0, 325.5, 301.5, 412.0, 285.5, 566.0, 291.5, 594.0, 323.5, 610.0, 335.5, 714.0, 366.5, 777.0, 341.5, 848.0, 337.5, 944.0]}, {‘Label’: ‘person’, ‘Points’: [532.0, 1151.0, 397.5, 1151.0, 345.5, 958.0, 345.5, 855.0, 369.5, 776.0, 340.5, 720.0, 344.5, 678.0, 325.5, 647.0, 326.5, 608.0, 296.5, 592.0, 294.5, 540.0, 298.0, 519.5, 341.5, 493.0, 273.5, 329.0, 284.5, 283.0, 332.0, 249.5, 385.0, 260.5, 411.5, 287.0, 431.5, 338.0, 434.0, 411.5, 449.0, 407.5, 486.0, 440.5, 601.0, 461.5, 671.5, 580.0, 698.5, 786.0, 681.5, 1090.0, 663.0, 1137.5, 549.0, 1127.5]}]
</td>
</tr>
</tbody>
</table>
</div>
<p>The lists of point coordinates in the segmentation annotations are the vertices of a polygon for the individual segmentation masks. We can use these to generate images for each segmentation mask.</p>
</section>
<section id="define-a-function-to-convert-segmentation-polygons-to-images" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-convert-segmentation-polygons-to-images">Define a function to convert segmentation polygons to images</h4>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_polygon_mask(image_size, vertices):</span>
<span id="cb27-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Create a grayscale image with a white polygonal area on a black background.</span></span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - image_size (tuple): A tuple representing the dimensions (width, height) of the image.</span></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - vertices (list): A list of tuples, each containing the x, y coordinates of a vertex</span></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        of the polygon. Vertices should be in clockwise or counter-clockwise order.</span></span>
<span id="cb27-9"></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - PIL.Image.Image: A PIL Image object containing the polygonal mask.</span></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb27-13"></span>
<span id="cb27-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new black image with the given dimensions</span></span>
<span id="cb27-15">    mask_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>, image_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb27-16">    </span>
<span id="cb27-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the polygon on the image. The area inside the polygon will be white (255).</span></span>
<span id="cb27-18">    ImageDraw.Draw(mask_img, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>).polygon(vertices, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb27-19"></span>
<span id="cb27-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the image with the drawn polygon</span></span>
<span id="cb27-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mask_img</span></code></pre></div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>We can now generate the segmentation mask images and feed those to the <code>draw_segmentation_mask</code> function.</p>
<p>We can use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.masks_to_boxes.html#torchvision.ops.masks_to_boxes"><code>masks_to_boxes</code></a> function included with torchvision to generate bounding box annotations in the <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format from the segmentation masks. That is the same format the <code>draw_bounding_boxes</code> function expects so we can use the output directly.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb28-2">polygon_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>]</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb28-5">mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(sample_img.size, polygon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Points'</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> polygon <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> polygon_points]</span>
<span id="cb28-6"></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb28-8">masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs])</span>
<span id="cb28-9"></span>
<span id="cb28-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb28-11">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [polygon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> polygon <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>]]</span>
<span id="cb28-12">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.masks_to_boxes(masks)</span>
<span id="cb28-13"></span>
<span id="cb28-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb28-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb28-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb28-17">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>masks, </span>
<span id="cb28-18">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb28-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb28-20">)</span>
<span id="cb28-21"></span>
<span id="cb28-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb28-23">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb28-24">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb28-25">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bboxes,</span>
<span id="cb28-26">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb28-27">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb28-28">)</span>
<span id="cb28-29"></span>
<span id="cb28-30">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_41_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb29-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb30-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb30-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb30-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb30-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb30-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb30-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb30-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb30-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb30-12"></span>
<span id="cb30-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb30-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb31-2">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare mask and bounding box targets</span></span>
<span id="cb31-5">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb31-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: Mask(masks), </span>
<span id="cb31-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bboxes, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb31-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb31-9">}</span>
<span id="cb31-10"></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb31-12">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb31-13"></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb31-15">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb31-16"></span>
<span id="cb31-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb31-18">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb31-19"></span>
<span id="cb31-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb31-21">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-22">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb31-23">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb31-24"></span>
<span id="cb31-25">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb31-26">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb31-27">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb31-28">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb31-29">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb31-30">)</span>
<span id="cb31-31"></span>
<span id="cb31-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb31-33">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb31-34">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb31-35">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb31-36">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb31-37">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb31-38">)</span>
<span id="cb31-39"></span>
<span id="cb31-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb31-41">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb31-42"></span>
<span id="cb31-43">pd.Series({</span>
<span id="cb31-44">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb31-45">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb31-46">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb31-47">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb31-48">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb31-49">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_49_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_45284">
<thead>
</thead>
<tbody>
<tr>
<th id="T_45284_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_45284_row0_col0" class="data row0 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_45284_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_45284_row1_col0" class="data row1 col0">
(434, 751)
</td>
</tr>
<tr>
<th id="T_45284_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_45284_row2_col0" class="data row2 col0">
(221, 382)
</td>
</tr>
<tr>
<th id="T_45284_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_45284_row3_col0" class="data row3 col0">
(382, 382)
</td>
</tr>
<tr>
<th id="T_45284_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_45284_row4_col0" class="data row4 col0">
(384, 384)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CVATInstSegDataset(Dataset):</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class represents a PyTorch Dataset for a collection of images and their annotations.</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The class is designed to load images along with their corresponding bounding box annotations and labels.</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb32-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb32-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Constructor for the CVATInstSegDataset class.</span></span>
<span id="cb32-9"></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_keys (list): List of unique identifiers for images.</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation_df (DataFrame): DataFrame containing the image annotations.</span></span>
<span id="cb32-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_dict (dict): Dictionary mapping image identifiers to image file paths.</span></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        class_to_idx (dict): Dictionary mapping class labels to indices.</span></span>
<span id="cb32-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transforms (callable, optional): Optional transform to be applied on a sample.</span></span>
<span id="cb32-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb32-18">        </span>
<span id="cb32-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of image keys</span></span>
<span id="cb32-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DataFrame containing annotations</span></span>
<span id="cb32-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping image keys to image paths</span></span>
<span id="cb32-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping class names to class indices</span></span>
<span id="cb32-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Image transforms to be applied</span></span>
<span id="cb32-24">        </span>
<span id="cb32-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb32-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the length of the dataset.</span></span>
<span id="cb32-28"></span>
<span id="cb32-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb32-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        int: The number of items in the dataset.</span></span>
<span id="cb32-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb32-33">        </span>
<span id="cb32-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb32-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Fetch an item from the dataset at the specified index.</span></span>
<span id="cb32-37"></span>
<span id="cb32-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb32-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        index (int): Index of the item to fetch from the dataset.</span></span>
<span id="cb32-40"></span>
<span id="cb32-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb32-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the image and its associated target (annotations).</span></span>
<span id="cb32-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the key for the image at the specified index</span></span>
<span id="cb32-45">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb32-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the annotations for this image</span></span>
<span id="cb32-47">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb32-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image and its target (bounding boxes and labels)</span></span>
<span id="cb32-49">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb32-50">        </span>
<span id="cb32-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the transformations, if any</span></span>
<span id="cb32-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb32-53">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb32-54">        </span>
<span id="cb32-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb32-56"></span>
<span id="cb32-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb32-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Load an image and its target (bounding boxes and labels).</span></span>
<span id="cb32-60"></span>
<span id="cb32-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb32-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation (pandas.Series): The annotations for an image.</span></span>
<span id="cb32-63"></span>
<span id="cb32-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb32-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the image and a dictionary with 'boxes' and 'labels' keys.</span></span>
<span id="cb32-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the file path of the image</span></span>
<span id="cb32-68">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb32-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image file and convert it to RGB</span></span>
<span id="cb32-70">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb32-71"></span>
<span id="cb32-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb32-73">        polygon_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>]</span>
<span id="cb32-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb32-75">        mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(image.size, polygon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Points'</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> polygon <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> polygon_points]</span>
<span id="cb32-76">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb32-77">        masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mask(torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs]))</span>
<span id="cb32-78">        </span>
<span id="cb32-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate bounding box annotations from segmentation masks</span></span>
<span id="cb32-80">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.masks_to_boxes(masks)</span>
<span id="cb32-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a BoundingBoxes object with the bounding boxes</span></span>
<span id="cb32-82">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb32-83">        </span>
<span id="cb32-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the class labels to indices</span></span>
<span id="cb32-85">        annotation_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> box <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>]]</span>
<span id="cb32-86">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_labels])</span>
<span id="cb32-87">        </span>
<span id="cb32-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: masks,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb33-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb33-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb33-4">        iou_crop,</span>
<span id="cb33-5">        transforms.ColorJitter(</span>
<span id="cb33-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb33-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb33-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb33-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb33-10">        ),</span>
<span id="cb33-11">        transforms.RandomGrayscale(),</span>
<span id="cb33-12">        transforms.RandomEqualize(),</span>
<span id="cb33-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb33-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb33-15">    ],</span>
<span id="cb33-16">)</span>
<span id="cb33-17"></span>
<span id="cb33-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb33-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-20">    resize_max, </span>
<span id="cb33-21">    pad_square,</span>
<span id="cb33-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-23">])</span>
<span id="cb33-24"></span>
<span id="cb33-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb33-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-27">    transforms.ToImage(), </span>
<span id="cb33-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb33-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb33-30">])</span>
<span id="cb33-31"></span>
<span id="cb33-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb33-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-34">    data_aug_tfms, </span>
<span id="cb33-35">    resize_pad_tfm, </span>
<span id="cb33-36">    final_tfms</span>
<span id="cb33-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb34-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb34-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CVATInstSegDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training dataset</span></span>
<span id="cb34-8">pd.Series({</span>
<span id="cb34-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb34-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_5167f">
<thead>
</thead>
<tbody>
<tr>
<th id="T_5167f_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_5167f_row0_col0" class="data row0 col0">
31
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb35-4">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb35-5"></span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb35-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks( </span>
<span id="cb35-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb35-9">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb35-10">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb35-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb35-12">)</span>
<span id="cb35-13"></span>
<span id="cb35-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with bounding boxes</span></span>
<span id="cb35-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb35-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb35-17">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb35-18">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb35-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb35-20">)</span>
<span id="cb35-21"></span>
<span id="cb35-22">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_60_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom segmentation annotations made with the CVAT annotation tool and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future instance segmentation projects.</p>
<p>As a next step, perhaps try annotating a custom instance segmentation dataset with CVAT and loading it with this tutorial’s code. Once you’re comfortable with that, try adapting the code in the following tutorial to train an instance segmentation model on your custom dataset.</p>
<ul>
<li><a href="../../../posts/pytorch-train-mask-rcnn-tutorial/">Training Mask R-CNN Models with PyTorch</a></li>
</ul>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-cvat-annotation-tutorials/bounding-boxes/"><strong>Working with CVAT Bounding Box Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with CVAT bounding box annotations in torchvision for object detection tasks.</li>
<li><a href="../../../posts/torchvision-cvat-annotation-tutorials/keypoints/"><strong>Working with CVAT Keypoint Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with CVAT keypoint annotations in torchvision for keypoint estimation tasks.</li>
<li><a href="http://localhost:3847/posts/pytorch-train-mask-rcnn-tutorial/"><strong>Training Mask R-CNN Models with PyTorch</strong></a><strong>:</strong> Learn how to train Mask R-CNN models on custom datasets with PyTorch.</li>
</ul>
<p><br></p>
<div class="callout callout-style-default callout-tip callout-titled" title="Next Steps">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Next Steps
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Feel free to post questions or problems related to this tutorial in the comments below. I try to make time to address them on Thursdays and Fridays.</li>
<li>If you would like to explore my <a href="../../../about.html#services">services</a> for your project, you can reach out via email at <a href="mailto:christian@christianjmills.com">christian@christianjmills.com</a></li>
</ul>
</div>
</div>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>instance-segmentation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
</channel>
</rss>
