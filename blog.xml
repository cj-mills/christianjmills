<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Christian Mills</title>
<link>christianjmills.com/blog.html</link>
<atom:link href="christianjmills.com/blog.xml" rel="self" type="application/rss+xml"/>
<description>This is Christian Mills&#39; personal Blog.</description>
<image>
<url>christianjmills.com/images/logo.png</url>
<title>Christian Mills</title>
<link>christianjmills.com/blog.html</link>
<height>142</height>
<width>144</width>
</image>
<generator>quarto-1.4.543</generator>
<lastBuildDate>Tue, 30 Jan 2024 08:00:00 GMT</lastBuildDate>
<item>
  <title>Exporting Keypoint R-CNN Models from PyTorch to ONNX</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/pytorch-train-keypoint-rcnn-series.html"><strong>Training Keypoint R-CNN Models with PyTorch</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading the Checkpoint Data</li>
<li>Exporting the Model to ONNX</li>
<li>Performing Inference with ONNX Runtime</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome back to this series on training Keypoint R-CNN models with PyTorch. Previously, we demonstrated how to fine-tune a Keypoint R-CNN model by training it to identify the locations of human noses and faces. This tutorial builds on that by showing how to export the model to <a href="https://onnx.ai/">ONNX</a> and perform inference using <a href="https://onnxruntime.ai/docs/">ONNX Runtime</a>.</p>
<p>ONNX (Open Neural Network Exchange) is an open format to represent machine learning models and make them portable across various platforms. ONNX Runtime is a cross-platform inference accelerator that provides interfaces to hardware-specific libraries. By exporting our model to ONNX, we can deploy it to multiple devices and leverage hardware acceleration for faster inference. The Keypoint R-CNN model is computationally intensive, so any improvements to inference speed are welcome.</p>
<p>Additionally, we’ll implement the functionality to annotate images with key points without relying on PyTorch as a dependency. By the end of this tutorial, you will have an ONNX version of our Keypoint R-CNN model that you can deploy to servers and edge devices using ONNX Runtime.</p>
<div class="callout callout-style-default callout-important callout-titled" title="This post assumes the reader has completed the previous tutorial linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post assumes the reader has completed the previous tutorial linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../">Training Keypoint R-CNN Models with PyTorch</a></li>
</ul>
</div>
</div>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>As with the previous tutorial, the code is available as a Jupyter Notebook.</p>
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook</th>
<th>Google Colab</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/cj-mills/pytorch-keypoint-rcnn-tutorial-code/blob/main/notebooks/pytorch-keypoint-r-cnn-onnx-export.ipynb">GitHub Repository</a></td>
<td><a href="https://colab.research.google.com/github/cj-mills/pytorch-keypoint-rcnn-tutorial-code/blob/main/notebooks/pytorch-keypoint-r-cnn-onnx-export-colab.ipynb">Open In Colab</a></td>
</tr>
</tbody>
</table>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>We’ll need to add a few new libraries to our <a href="../#setting-up-your-python-environment">Python environment</a> for working with ONNX models.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>onnx</code></td>
<td>This package provides a Python API for working with ONNX models. (<a href="https://pypi.org/project/onnx/">link</a>)</td>
</tr>
<tr class="even">
<td><code>onnxruntime</code></td>
<td>ONNX Runtime is a runtime accelerator for machine learning models. (<a href="https://onnxruntime.ai/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>onnx-simplifier</code></td>
<td>This package helps simplify ONNX models. (<a href="https://pypi.org/project/onnx-simplifier/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following command to install these additional libraries:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install ONNX packages</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install onnx onnxruntime onnx-simplifier</span></code></pre></div>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>With our environment updated, we can dive into the code. First, we will import the necessary Python dependencies into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb2-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb2-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw, ImageFont</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb2-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Keypoint R-CNN</span></span>
<span id="cb2-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keypointrcnn_resnet50_fpn</span>
<span id="cb2-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.keypoint_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KeypointRCNNPredictor</span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import ONNX dependencies</span></span>
<span id="cb2-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnx <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the onnx module</span></span>
<span id="cb2-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> onnxsim <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> simplify <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the method to simplify ONNX models</span></span>
<span id="cb2-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> onnxruntime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ort <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the ONNX Runtime</span></span></code></pre></div>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we’ll set the folder locations for our project and training session with the PyTorch checkpoint. Let’s also ensure we have a font file for annotating images.</p>
<section id="set-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="set-the-directory-paths">Set the Directory Paths</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb3-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-keypoint-r-cnn"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb3-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb3-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path to the checkpoint folder</span></span>
<span id="cb3-11">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"2024-01-30_10-44-52"</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13">pd.Series({</span>
<span id="cb3-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir,</span>
<span id="cb3-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Checkpoint Directory:"</span>: checkpoint_dir,</span>
<span id="cb3-16">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_d7624">
<thead>
</thead>
<tbody>
<tr>
<th id="T_d7624_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_d7624_row0_col0" class="data row0 col0">
pytorch-keypoint-r-cnn
</td>
</tr>
<tr>
<th id="T_d7624_level0_row1" class="row_heading level0 row1">
Checkpoint Directory:
</th>
<td id="T_d7624_row1_col0" class="data row1 col0">
pytorch-keypoint-r-cnn/2024-01-30_10-44-52
</td>
</tr>
</tbody>
</table>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="I made a model checkpoint available on Hugging Face Hub in the repository linked below:">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
I made a model checkpoint available on Hugging Face Hub in the repository linked below:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="https://huggingface.co/cj-mills/keypoint-rcnn-eyes-noses-pytorch/tree/main">cj-mills/keypoint-rcnn-eyes-noses-pytorch</a></li>
</ul>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Those following along on Google Colab can drag the contents of their checkpoint folder into Colab's file browser. Keep in mind the model checkpoint has a large file size. ">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Those following along on Google Colab can drag the contents of their checkpoint folder into Colab’s file browser. Keep in mind the model checkpoint has a large file size.
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
</section>
<section id="download-a-font-file" class="level3">
<h3 class="anchored" data-anchor-id="download-a-font-file">Download a Font File</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb4-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb4-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
</section>
<section id="loading-the-checkpoint-data" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-checkpoint-data">Loading the Checkpoint Data</h2>
<p>Now, we can load the colormap used during training and initialize a Keypoint R-CNN model with the saved checkpoint.</p>
<section id="load-the-colormap" class="level3">
<h3 class="anchored" data-anchor-id="load-the-colormap">Load the Colormap</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The colormap path</span></span>
<span id="cb5-2">colormap_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*colormap.json'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the JSON colormap data</span></span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(colormap_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb5-6">        colormap_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the JSON data to a dictionary        </span></span>
<span id="cb5-9">colormap_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]: item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_json[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'items'</span>]}</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the class names from the colormap</span></span>
<span id="cb5-12">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(colormap_dict.keys())</span>
<span id="cb5-13"></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the colormap in integer format</span></span>
<span id="cb5-15">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colormap_dict.values()]</span></code></pre></div>
</section>
<section id="load-the-model-checkpoint" class="level3">
<h3 class="anchored" data-anchor-id="load-the-model-checkpoint">Load the Model Checkpoint</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb6-2">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(checkpoint_dir.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.pth'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model checkpoint onto the CPU</span></span>
<span id="cb6-5">model_checkpoint <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(checkpoint_path, map_location<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>)</span></code></pre></div>
</section>
<section id="load-the-trained-keypoint-r-cnn-model" class="level3">
<h3 class="anchored" data-anchor-id="load-the-trained-keypoint-r-cnn-model">Load the Trained Keypoint R-CNN Model</h3>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load a pre-trained model</span></span>
<span id="cb7-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keypointrcnn_resnet50_fpn(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEFAULT'</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace the classifier head with the number of keypoints</span></span>
<span id="cb7-5">in_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.keypoint_predictor.kps_score_lowres.in_channels</span>
<span id="cb7-6">model.roi_heads.keypoint_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KeypointRCNNPredictor(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>in_features, num_keypoints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the model with the checkpoint parameters and buffers</span></span>
<span id="cb7-9">model.load_state_dict(model_checkpoint)</span></code></pre></div>
<pre class="text"><code>&lt;All keys matched successfully&gt;</code></pre>
</section>
</section>
<section id="exporting-the-model-to-onnx" class="level2">
<h2 class="anchored" data-anchor-id="exporting-the-model-to-onnx">Exporting the Model to ONNX</h2>
<p>Before exporting the model, let’s ensure the model is in evaluation mode.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<section id="prepare-the-input-tensor" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor">Prepare the Input Tensor</h3>
<p>We need a sample input tensor for the export process.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>)</span></code></pre></div>
</section>
<section id="export-the-model-to-onnx" class="level3">
<h3 class="anchored" data-anchor-id="export-the-model-to-onnx">Export the Model to ONNX</h3>
<p>We can export the model using PyTorch’s <a href="https://pytorch.org/docs/stable/onnx.html#torch.onnx.export"><code>torch.onnx.export()</code></a> function. This function performs a single pass through the model and records all operations to generate a <a href="https://pytorch.org/docs/stable/jit.html">TorchScript graph</a>. It then exports this graph to ONNX by decomposing each graph node (which contains a PyTorch operator) into a series of ONNX operators.</p>
<p>If we want the ONNX model to support different input sizes, we must set the width and height input axes as dynamic.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set a filename for the ONNX model</span></span>
<span id="cb11-2">onnx_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>colormap_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>removesuffix(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-colormap'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>stem<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.onnx"</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export the PyTorch model to ONNX format</span></span>
<span id="cb11-5">torch.onnx.export(model.cpu(),</span>
<span id="cb11-6">                  input_tensor.cpu(),</span>
<span id="cb11-7">                  onnx_file_path,</span>
<span id="cb11-8">                  export_params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-9">                  do_constant_folding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb11-10">                  input_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>],</span>
<span id="cb11-11">                  output_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scores'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keypoints'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keypoints_scores'</span>],</span>
<span id="cb11-12">                  dynamic_axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>: {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> : <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>}}</span>
<span id="cb11-13">                 )</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The export function may return some <code>UserWarning</code> messages when we export the model. We can ignore these warnings as the exported model functions as expected.</p>
</div>
</div>
</section>
<section id="simplify-the-onnx-model" class="level3">
<h3 class="anchored" data-anchor-id="simplify-the-onnx-model">Simplify the ONNX Model</h3>
<p>The ONNX models generated by PyTorch are not always the most concise. We can use the <a href="https://pypi.org/project/onnx-simplifier/"><code>onnx-simplifier</code></a> package to tidy up the exported model.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the ONNX model from the onnx_file_name</span></span>
<span id="cb12-2">onnx_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onnx.load(onnx_file_path)</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simplify the model</span></span>
<span id="cb12-5">model_simp, check <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> simplify(onnx_model)</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save the simplified model to the onnx_file_name</span></span>
<span id="cb12-8">onnx.save(model_simp, onnx_file_path)</span></code></pre></div>
</section>
</section>
<section id="performing-inference-with-onnx-runtime" class="level2">
<h2 class="anchored" data-anchor-id="performing-inference-with-onnx-runtime">Performing Inference with ONNX Runtime</h2>
<p>Now that we have our ONNX model, it’s time to test it with ONNX Runtime.</p>
<section id="create-an-inference-session" class="level3">
<h3 class="anchored" data-anchor-id="create-an-inference-session">Create an Inference Session</h3>
<p>We interact with models in ONNX Runtime through an <a href="https://onnxruntime.ai/docs/api/python/api_summary.html#load-and-run-a-model"><code>InferenceSession</code></a> object. Here we can specify which Execution Providers to use for inference and other configuration information. <a href="https://onnxruntime.ai/docs/execution-providers/">Execution Providers</a> are the interfaces for hardware-specific inference engines like <a href="https://onnxruntime.ai/docs/execution-providers/TensorRT-ExecutionProvider.html">TensorRT</a> for NVIDIA and <a href="https://onnxruntime.ai/docs/execution-providers/OpenVINO-ExecutionProvider.html">OpenVINO</a> for Intel. By default, the <code>InferenceSession</code> uses the generic <code>CPUExecutionProvider</code>.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the model and create an InferenceSession</span></span>
<span id="cb13-2">session <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ort.InferenceSession(onnx_file_path, providers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CPUExecutionProvider'</span>])</span></code></pre></div>
</section>
<section id="define-annotation-function" class="level3">
<h3 class="anchored" data-anchor-id="define-annotation-function">Define Annotation Function</h3>
<p>Next, we need to annotate images with key points. PIL includes functionality to draw circles on images.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> draw_keypoints_pil(image, keypoints, labels, colors, radius:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb14-2"></span>
<span id="cb14-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Annotates an image with keypoints, each marked by a circle and associated with specific labels and colors.</span></span>
<span id="cb14-5"></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function draws circles on the provided image at given keypoint coordinates. Each keypoint is associated </span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with a label and a color. The radius of the circles can be adjusted.</span></span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    image (PIL.Image): The input image on which annotations will be drawn.</span></span>
<span id="cb14-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    keypoints (list of tuples): A list of (x, y) tuples representing the coordinates of each keypoint.</span></span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    labels (list of str): A list of labels corresponding to each keypoint.</span></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    colors (list of tuples): A list of RGB tuples for each keypoint, defining the color of the circle to be drawn.</span></span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    radius (int, optional): The radius of the circles to be drawn for each keypoint. Defaults to 5.</span></span>
<span id="cb14-15"></span>
<span id="cb14-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb14-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    annotated_image (PIL.Image): The image annotated with keypoints, each represented as a colored circle.</span></span>
<span id="cb14-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb14-19">        </span>
<span id="cb14-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a copy of the image</span></span>
<span id="cb14-21">    annotated_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.copy()</span>
<span id="cb14-22"></span>
<span id="cb14-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create an ImageDraw object for drawing on the image</span></span>
<span id="cb14-24">    draw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDraw.Draw(annotated_image)</span>
<span id="cb14-25"></span>
<span id="cb14-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop through the bounding boxes and labels in the 'annotation' DataFrame</span></span>
<span id="cb14-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels)):</span>
<span id="cb14-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the key point coordinates</span></span>
<span id="cb14-29">        x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keypoints[i]</span>
<span id="cb14-30"></span>
<span id="cb14-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw a circle</span></span>
<span id="cb14-32">        draw.ellipse((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> radius, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> radius, x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> radius, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> radius), fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[i])</span>
<span id="cb14-33">        </span>
<span id="cb14-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> annotated_image</span></code></pre></div>
</section>
<section id="select-a-test-image" class="level3">
<h3 class="anchored" data-anchor-id="select-a-test-image">Select a Test Image</h3>
<p>We can download an image from one of my HuggingFace repositories to verify the exported model performs as expected.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">test_img_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pexels-2769554-man-doing-rock-and-roll-sign.jpg"</span></span>
<span id="cb15-2">test_img_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/cj-mills/pexel-hand-gesture-test-images/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_img_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb15-3"></span>
<span id="cb15-4">download_file(test_img_url, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb15-5"></span>
<span id="cb15-6">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_img_name)</span>
<span id="cb15-7">display(test_img)</span>
<span id="cb15-8"></span>
<span id="cb15-9">pd.Series({</span>
<span id="cb15-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test Image Size:"</span>: test_img.size, </span>
<span id="cb15-11">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/images/output_32_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_daf38">
<thead>
</thead>
<tbody>
<tr>
<th id="T_daf38_level0_row0" class="row_heading level0 row0">
Test Image Size:
</th>
<td id="T_daf38_row0_col0" class="data row0 col0">
(640, 960)
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="prepare-the-test-image" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-test-image">Prepare the Test Image</h3>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set test image size</span></span>
<span id="cb16-2">test_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Resize the test image</span></span>
<span id="cb16-5">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the scale between the source image and the resized image</span></span>
<span id="cb16-8">min_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(test_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(input_img.size)</span>
<span id="cb16-9"></span>
<span id="cb16-10">display(input_img)</span>
<span id="cb16-11"></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas DataFrame for easy formatting</span></span>
<span id="cb16-13">pd.Series({</span>
<span id="cb16-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image Size:"</span>: test_img.size,</span>
<span id="cb16-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Dims:"</span>: input_img.size,</span>
<span id="cb16-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min Image Scale:"</span>: min_img_scale,</span>
<span id="cb16-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size</span>
<span id="cb16-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/images/output_34_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_54014">
<thead>
</thead>
<tbody>
<tr>
<th id="T_54014_level0_row0" class="row_heading level0 row0">
Source Image Size:
</th>
<td id="T_54014_row0_col0" class="data row0 col0">
(640, 960)
</td>
</tr>
<tr>
<th id="T_54014_level0_row1" class="row_heading level0 row1">
Input Dims:
</th>
<td id="T_54014_row1_col0" class="data row1 col0">
(512, 768)
</td>
</tr>
<tr>
<th id="T_54014_level0_row2" class="row_heading level0 row2">
Min Image Scale:
</th>
<td id="T_54014_row2_col0" class="data row2 col0">
1.250000
</td>
</tr>
<tr>
<th id="T_54014_level0_row3" class="row_heading level0 row3">
Input Image Size:
</th>
<td id="T_54014_row3_col0" class="data row3 col0">
(512, 768)
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="prepare-the-input-tensor-1" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-input-tensor-1">Prepare the Input Tensor</h3>
<p>When we convert the PIL input image to a NumPy array, we need to reorder the array values to channels-first format, scale the values from <code>[0,255]</code> to <code>[0,1]</code>, and add a batch dimension.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the input image to NumPy format</span></span>
<span id="cb17-2">input_tensor_np <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(input_img, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32).transpose((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span></code></pre></div>
</section>
<section id="compute-the-predictions" class="level3">
<h3 class="anchored" data-anchor-id="compute-the-predictions">Compute the Predictions</h3>
<p>Now, we can finally perform inference with our ONNX model.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run inference</span></span>
<span id="cb18-2">model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> session.run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>: input_tensor_np})</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the confidence threshold</span></span>
<span id="cb18-5">conf_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span></span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the output based on the confidence threshold</span></span>
<span id="cb18-8">scores_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> conf_threshold</span>
<span id="cb18-9"></span>
<span id="cb18-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and scale the predicted keypoints</span></span>
<span id="cb18-11">predicted_keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (model_output[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>][scores_mask])[:,:,:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>min_img_scale</span>
<span id="cb18-12">predicted_keypoints</span>
<span id="cb18-13"></span>
<span id="cb18-14">labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>class_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(scores_mask).item()</span>
<span id="cb18-15"></span>
<span id="cb18-16">draw_keypoints_pil(test_img, </span>
<span id="cb18-17">                predicted_keypoints, </span>
<span id="cb18-18">                labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels,</span>
<span id="cb18-19">                colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]],</span>
<span id="cb18-20">               )</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/images/output_38_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The model appears to work as intended, even on this new image.</p>
<div class="callout callout-style-default callout-caution callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Google Colab Users
</div>
</div>
<div class="callout-body-container callout-body">
<ol type="1">
<li>Don’t forget to download the ONNX model from the Colab Environment’s file browser. (<a href="https://christianjmills.com/posts/google-colab-getting-started-tutorial/#working-with-data">tutorial link</a>)</li>
</ol>
</div>
</div>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on reaching the end of this tutorial! We previously trained a Keypoint R-CNN model in PyTorch, and now we’ve exported that model to ONNX. With this, we can streamline our deployment process and leverage platform-specific hardware optimizations through ONNX Runtime.</p>
<p>As you move forward, consider exploring more about ONNX and its ecosystem. Check out the available <a href="https://onnxruntime.ai/docs/execution-providers/">Execution Providers</a> that provide flexible interfaces to different hardware acceleration libraries.</p>
<p>If you found this guide helpful, consider sharing it with others.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>onnx</category>
  <category>keypoint-rcnn</category>
  <category>keypoint-estimation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/</guid>
  <pubDate>Tue, 30 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Training Keypoint R-CNN Models with PyTorch</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../series/tutorials/pytorch-train-keypoint-rcnn-series.html"><strong>Training Keypoint R-CNN Models with PyTorch</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Setting Up the Project</li>
<li>Loading and Exploring the Dataset</li>
<li>Loading the Keypoint R-CNN Model</li>
<li>Preparing the Data</li>
<li>Fine-tuning the Model</li>
<li>Making Predictions with the Model</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide to training Keypoint R-CNN models in PyTorch. Keypoint estimation models predict the locations of points on a given object or person, allowing us to recognize and interpret poses, gestures, or significant parts of objects.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/pytorch-keypoint-r-cnn-tutorial-hero-image.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw keypoint annotations, annotating and augmenting images, creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model, finetuning a Keypoint R-CNN model, and performing inference.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. Upon completion, you will have a solid foundation for training custom key point estimation models for other projects.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></li>
<li><a href="../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/pytorch-keypoint-rcnn-tutorial-code/blob/main/notebooks/pytorch-keypoint-r-cnn-training-labelme.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/pytorch-keypoint-rcnn-tutorial-code/blob/main/notebooks/pytorch-keypoint-r-cnn-training-labelme.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.11 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.11 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>torchtnt</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>tabulate</code></td>
<td>Pretty-print tabular data in Python. (<a href="https://pypi.org/project/tabulate/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following command to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow torchtnt tabulate tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pandas_utils</code></td>
<td>Some utility functions for working with Pandas. (<a href="https://cj-mills.github.io/cjm-pandas-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following command to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pandas_utils cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python modules into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> contextlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> contextmanager</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> glob <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> glob</span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> multiprocessing</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pandas_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> markdown_to_pandas</span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> resize_img, get_img_files, stack_imgs</span>
<span id="cb9-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> set_seed, pil_to_tensor, tensor_to_pil, get_torch_device, denorm_img_tensor, move_data_to_device</span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop, RandomPixelCopy</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-31"></span>
<span id="cb9-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-33">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-34"></span>
<span id="cb9-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-37"></span>
<span id="cb9-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-39"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-40"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> autocast</span>
<span id="cb9-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.cuda.amp <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GradScaler</span>
<span id="cb9-43"></span>
<span id="cb9-44"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-45"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchtnt.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_module_summary</span>
<span id="cb9-46"></span>
<span id="cb9-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-48"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-49">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-50"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes</span>
<span id="cb9-51"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-52"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-53"></span>
<span id="cb9-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Keypoint R-CNN</span></span>
<span id="cb9-55"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.keypoint_rcnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KeypointRCNNPredictor</span>
<span id="cb9-56"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection.rpn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AnchorGenerator</span>
<span id="cb9-57"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.models.detection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keypointrcnn_resnet50_fpn</span>
<span id="cb9-58"></span>
<span id="cb9-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-60"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. While there is currently no dedicated TVTensor class for keypoint annotations, we can use the one for <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html">bounding boxes</a> instead. Torchvision does include a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_keypoints.html"><code>draw_keypoints</code></a> function, but we might as well stick with the <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function to annotate images.</p>
</section>
<section id="setting-up-the-project" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-the-project">Setting Up the Project</h2>
<p>In this section, we set up some basics for our project, such as initializing random number generators, setting the PyTorch device to run the model, and preparing the folders for our project and datasets.</p>
<section id="setting-a-random-number-seed" class="level3">
<h3 class="anchored" data-anchor-id="setting-a-random-number-seed">Setting a Random Number Seed</h3>
<p>First, we set the seed for generating random numbers using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#set_seed">set_seed</a> function from the <code>cjm_pytorch_utils</code> package.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the seed for generating random numbers in PyTorch, NumPy, and Python's random module.</span></span>
<span id="cb10-2">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span></span>
<span id="cb10-3">set_seed(seed)</span></code></pre></div>
</section>
<section id="setting-the-device-and-data-type" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-device-and-data-type">Setting the Device and Data Type</h3>
<p>Next, we determine the device to use for training using the <a href="https://cj-mills.github.io/cjm-pytorch-utils/core.html#get_torch_device">get_torch_device</a> function from the <code>cjm_pytorch_utils</code> package and set the data type of our tensors.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_torch_device()</span>
<span id="cb11-2">dtype <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.float32</span>
<span id="cb11-3">device, dtype</span></code></pre></div>
<pre class="text"><code>('cuda', torch.float32)</code></pre>
</section>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We can then set up a directory for our project to store our results and other related files. We also need a place to store our dataset. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The name for the project</span></span>
<span id="cb13-2">project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"pytorch-keypoint-r-cnn"</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The path for the project folder</span></span>
<span id="cb13-5">project_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"./</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>project_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/"</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the project directory if it does not already exist</span></span>
<span id="cb13-8">project_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb13-11">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb13-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb13-13">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb13-16">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb13-18">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-19"></span>
<span id="cb13-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb13-21">pd.Series({</span>
<span id="cb13-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Project Directory:"</span>: project_dir,</span>
<span id="cb13-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb13-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb13-25">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_c7875">
<thead>
</thead>
<tbody>
<tr>
<th id="T_c7875_level0_row0" class="row_heading level0 row0">
Project Directory:
</th>
<td id="T_c7875_row0_col0" class="data row0 col0">
pytorch-keypoint-r-cnn
</td>
</tr>
<tr>
<th id="T_c7875_level0_row1" class="row_heading level0 row1">
Dataset Directory:
</th>
<td id="T_c7875_row1_col0" class="data row1 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_c7875_level0_row2" class="row_heading level0 row2">
Archive Directory:
</th>
<td id="T_c7875_row2_col0" class="data row2 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
<p>Double-check the project and dataset directories exist in the specified paths and that you can add files to them before continuing. At this point, our project is set up and ready to go. In the next section, we will download and explore the dataset.</p>
</section>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>I annotated a small dataset with key points for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/labelme-keypoint-eyes-noses-dataset/tree/main">labelme-keypoint-eyes-noses-dataset</a></li>
</ul>
<p>The dataset contains 2D coordinates for eyes and noses on human faces.</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Keypoint Annotation Format">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Keypoint Annotation Format
</div>
</div>
<div class="callout-body-container callout-body">
<p>The keypoints for this dataset use the <a href="https://github.com/labelmeai/labelme">LabelMe</a> annotation format. You can learn more about this format and how to work with such annotations in the tutorial linked below:</p>
<ul>
<li><a href="../../posts/torchvision-labelme-annotation-tutorials/keypoints/">Working with LabelMe Keypoint Annotations in Torchvision</a></li>
</ul>
</div>
</div>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>First, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb14-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labelme-keypoint-eyes-noses-dataset'</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb14-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb14-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb14-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb14-14">pd.Series({</span>
<span id="cb14-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb14-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb14-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb14-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_be76c">
<thead>
</thead>
<tbody>
<tr>
<th id="T_be76c_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_be76c_row0_col0" class="data row0 col0">
cj-mills/labelme-keypoint-eyes-noses-dataset
</td>
</tr>
<tr>
<th id="T_be76c_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_be76c_row1_col0" class="data row1 col0">
Datasets/../Archive/labelme-keypoint-eyes-noses-dataset.zip
</td>
</tr>
<tr>
<th id="T_be76c_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_be76c_row2_col0" class="data row2 col0">
Datasets/labelme-keypoint-eyes-noses-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb15-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-4"></span>
<span id="cb15-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb15-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb15-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb15-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb15-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb15-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb15-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb15-14">    </span>
<span id="cb15-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb15-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb15-17">    </span>
<span id="cb15-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb15-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Next, we will make a dictionary that maps each image’s unique name to its file path, allowing us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the dataset</span></span>
<span id="cb16-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_img_files(dataset_path)</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb16-5">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (img_file_paths)}</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb16-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb16-11">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 200</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
denim-jacket-fashion-fashion-model-1848570
</th>
<td>
Datasets/labelme-keypoint-eyes-noses-dataset/denim-jacket-fashion-fashion-model-1848570.jpg
</td>
</tr>
<tr>
<th>
dried-dry-face-2965690
</th>
<td>
Datasets/labelme-keypoint-eyes-noses-dataset/dried-dry-face-2965690.jpg
</td>
</tr>
<tr>
<th>
elderly-face-old-person-2856346
</th>
<td>
Datasets/labelme-keypoint-eyes-noses-dataset/elderly-face-old-person-2856346.jpg
</td>
</tr>
<tr>
<th>
elderly-hair-man-1319289
</th>
<td>
Datasets/labelme-keypoint-eyes-noses-dataset/elderly-hair-man-1319289.jpg
</td>
</tr>
<tr>
<th>
face-facial-expression-fashion-2592000
</th>
<td>
Datasets/labelme-keypoint-eyes-noses-dataset/face-facial-expression-fashion-2592000.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>We will then read the content of the JSON annotation file associated with each image into a single Pandas DataFrame so we can easily query the annotations.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of JSON files in the dataset</span></span>
<span id="cb18-2">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb18-5">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb18-8">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb18-9"></span>
<span id="cb18-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb18-11">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-12">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb18-13"></span>
<span id="cb18-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb18-15">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb18-16"></span>
<span id="cb18-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb18-18">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
denim-jacket-fashion-fashion-model-1848570
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘left-eye’, ‘points’: [[329.17073170731703, 252.59756097560972]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘nose’, ‘points’: [[323.68292682926835, 291.0121951219512]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘right-eye’, ‘points’: [[260.2682926829268, 234.91463414634143]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
denim-jacket-fashion-fashion-model-1848570.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
512
</td>
</tr>
<tr>
<th>
dried-dry-face-2965690
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘right-eye’, ‘points’: [[201.7317073170732, 351.9878048780488]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘left-eye’, ‘points’: [[333.43902439024396, 342.23170731707313]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘nose’, ‘points’: [[271.2439024390244, 436.1341463414634]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
dried-dry-face-2965690.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
512
</td>
</tr>
<tr>
<th>
elderly-face-old-person-2856346
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘left-eye’, ‘points’: [[302.3414634146342, 286.1341463414634]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘nose’, ‘points’: [[243.80487804878055, 339.79268292682923]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘right-eye’, ‘points’: [[196.2439024390244, 286.7439024390244]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
elderly-face-old-person-2856346.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
512
</td>
</tr>
<tr>
<th>
elderly-hair-man-1319289
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘right-eye’, ‘points’: [[490.910569105691, 175.71544715447155]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘left-eye’, ‘points’: [[548.6341463414634, 167.58536585365852]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘nose’, ‘points’: [[526.6829268292682, 201.73170731707316]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
elderly-hair-man-1319289.jpg
</td>
<td>
None
</td>
<td>
512
</td>
<td>
768
</td>
</tr>
<tr>
<th>
face-facial-expression-fashion-2592000
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘left-eye’, ‘points’: [[301.45454545454544, 106.85561497326205]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘right-eye’, ‘points’: [[250.65240641711233, 115.94652406417114]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}, {‘label’: ‘nose’, ‘points’: [[272.0427807486631, 121.29411764705884]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
face-facial-expression-fashion-2592000.jpg
</td>
<td>
None
</td>
<td>
672
</td>
<td>
512
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>Now that we have the annotation data, we can extract the unique class names and inspect the class distribution. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb19-3">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb19-4"></span>
<span id="cb19-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb19-6">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb19-7"></span>
<span id="cb19-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb19-9">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
left-eye
</td>
</tr>
<tr>
<th>
1
</th>
<td>
nose
</td>
</tr>
<tr>
<th>
2
</th>
<td>
right-eye
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb20-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].value_counts()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb20-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span>
<span id="cb20-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb20-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb20-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb20-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb20-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_26_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its bounding boxes using torchvision’s <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html"><code>BoundingBoxes</code></a> class and <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>First, we will generate a color map for the object classes.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb21-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb21-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb21-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_30_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb22-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb22-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="annotate-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h3>
<p>Finally, we will open a sample image and annotate it with it’s associated bounding boxes.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb24-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb24-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb24-8">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb24-9">keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]])).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb24-10">BBOX_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb24-11">keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((keypoints, torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>BBOX_DIM), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-12"></span>
<span id="cb24-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb24-14">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb24-15">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb24-16">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(keypoints_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>),</span>
<span id="cb24-17">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb24-18">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb24-19">)</span>
<span id="cb24-20"></span>
<span id="cb24-21">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_36_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="loading-the-keypoint-r-cnn-model" class="level2">
<h2 class="anchored" data-anchor-id="loading-the-keypoint-r-cnn-model">Loading the Keypoint R-CNN Model</h2>
<p>TorchVision provides <a href="https://pytorch.org/vision/stable/models.html#table-of-all-available-keypoint-detection-weights">checkpoints</a> for the Keypoint R-CNN model trained on the <a href="https://cocodataset.org/">COCO</a> (Common Objects in Context) dataset. We can initialize a model with these pretrained weights using the <a href="https://pytorch.org/vision/stable/models/generated/torchvision.models.detection.keypointrcnn_resnet50_fpn.html?highlight=keypointrcnn_resnet50_fpn"><code>keypointrcnn_resnet50_fpn</code></a> function. We must then replace the keypoint predictor for the pretrained model with a new one for our dataset.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load a pre-trained model</span></span>
<span id="cb25-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keypointrcnn_resnet50_fpn(weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DEFAULT'</span>)</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace the classifier head with the number of keypoints</span></span>
<span id="cb25-5">in_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.roi_heads.keypoint_predictor.kps_score_lowres.in_channels</span>
<span id="cb25-6">model.roi_heads.keypoint_predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KeypointRCNNPredictor(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>in_features, num_keypoints<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb25-7"></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model's device and data type</span></span>
<span id="cb25-9">model.to(device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb25-10"></span>
<span id="cb25-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add attributes to store the device and model name for later reference</span></span>
<span id="cb25-12">model.device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> device</span>
<span id="cb25-13">model.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keypointrcnn_resnet50_fpn'</span></span></code></pre></div>
<p>The model internally normalizes input using the mean and standard deviation values used during the pretraining process, so we do not need to keep track of them separately.</p>
<section id="summarizing-the-model" class="level3">
<h3 class="anchored" data-anchor-id="summarizing-the-model">Summarizing the Model</h3>
<p>Before moving on, let’s generate a summary of our model to get an overview of its performance characteristics. We can use this to gauge the computational requirements for deploying the model.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the input to the model</span></span>
<span id="cb26-2">test_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>).to(device)</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a summary of the model as a Pandas DataFrame</span></span>
<span id="cb26-5">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> markdown_to_pandas(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>get_module_summary(model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>(), [test_inp])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-6"></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the summary to only the model</span></span>
<span id="cb26-8">summary_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_df[summary_df.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb26-9"></span>
<span id="cb26-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the column "Contains Uninitialized Parameters?"</span></span>
<span id="cb26-11">summary_df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'In size'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Out size'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Contains Uninitialized Parameters?'</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Type
</th>
<th>
# Parameters
</th>
<th>
# Trainable Parameters
</th>
<th>
Size (bytes)
</th>
<th>
Forward FLOPs
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
KeypointRCNN
</td>
<td>
59.0 M
</td>
<td>
58.8 M
</td>
<td>
236 M
</td>
<td>
144 G
</td>
</tr>
</tbody>
</table>
</div>
<p>The above table shows the model has approximately <code>58.8</code> million trainable parameters. It takes up <code>263</code> Megabytes and performs around <code>144</code> billion floating point operations for a single <code>256x256</code> RGB image. This model internally resizes input images and executes the same number of floating point operations for different input resolutions.</p>
<p>That completes the model setup. In the next section, we will prepare our dataset for training.</p>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>The data preparation involves several steps, such as applying data augmentation techniques, setting up the train-validation split for the dataset, resizing and padding the images, defining the training dataset class, and initializing DataLoaders to feed data to the model.</p>
<section id="training-validation-split" class="level3">
<h3 class="anchored" data-anchor-id="training-validation-split">Training-Validation Split</h3>
<p>Let’s begin by defining the training-validation split. We’ll randomly select 90% of the available samples for the training set and use the remaining 10% for the validation set.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the list of image IDs</span></span>
<span id="cb27-2">img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shuffle the image IDs</span></span>
<span id="cb27-5">random.shuffle(img_keys)</span>
<span id="cb27-6"></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the percentage of the images that should be used for training</span></span>
<span id="cb27-8">train_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span></span>
<span id="cb27-9">val_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb27-10"></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the index at which to split the subset of image paths into training and validation sets</span></span>
<span id="cb27-12">train_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_keys)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>train_pct)</span>
<span id="cb27-13">val_split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_keys)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(train_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>val_pct))</span>
<span id="cb27-14"></span>
<span id="cb27-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the subset of image paths into training and validation sets</span></span>
<span id="cb27-16">train_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys[:train_split]</span>
<span id="cb27-17">val_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys[train_split:]</span>
<span id="cb27-18"></span>
<span id="cb27-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of images in the training and validation sets</span></span>
<span id="cb27-20">pd.Series({</span>
<span id="cb27-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Training Samples:"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_keys),</span>
<span id="cb27-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Validation Samples:"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(val_keys)</span>
<span id="cb27-23">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_39a47">
<thead>
</thead>
<tbody>
<tr>
<th id="T_39a47_level0_row0" class="row_heading level0 row0">
Training Samples:
</th>
<td id="T_39a47_row0_col0" class="data row0 col0">
180
</td>
</tr>
<tr>
<th id="T_39a47_level0_row1" class="row_heading level0 row1">
Validation Samples:
</th>
<td id="T_39a47_row1_col0" class="data row1 col0">
20
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>First, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb28-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Next, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb29-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb29-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb29-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb29-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb29-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb29-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb29-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb29-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb29-12"></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb29-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels for the sample</span></span>
<span id="cb30-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb30-5">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torchvision.ops.box_convert(keypoints_bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb30-6">                                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb30-7">                                canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb30-8">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])}</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb30-11">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb30-12"></span>
<span id="cb30-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb30-14">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb30-15"></span>
<span id="cb30-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb30-17">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb30-18"></span>
<span id="cb30-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb30-20">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb30-21">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb30-22">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb30-23"></span>
<span id="cb30-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb30-25">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb30-26"></span>
<span id="cb30-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb30-28">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb30-29">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb30-30">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb30-31">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb30-32">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors,</span>
<span id="cb30-33">)</span>
<span id="cb30-34"></span>
<span id="cb30-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb30-36">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb30-37"></span>
<span id="cb30-38">pd.Series({</span>
<span id="cb30-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb30-40">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb30-41">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb30-42">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb30-43">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb30-44">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_52_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_5be68">
<thead>
</thead>
<tbody>
<tr>
<th id="T_5be68_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_5be68_row0_col0" class="data row0 col0">
(512, 768)
</td>
</tr>
<tr>
<th id="T_5be68_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_5be68_row1_col0" class="data row1 col0">
(512, 768)
</td>
</tr>
<tr>
<th id="T_5be68_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_5be68_row2_col0" class="data row2 col0">
(341, 511)
</td>
</tr>
<tr>
<th id="T_5be68_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_5be68_row3_col0" class="data row3 col0">
(511, 511)
</td>
</tr>
<tr>
<th id="T_5be68_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_5be68_row4_col0" class="data row4 col0">
(512, 512)
</td>
</tr>
</tbody>
</table>
</div>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<p>We will be applying the <code>SanitizeBoundingBoxes</code> transform here as well. This transform can remove key points if a previous transform moves them outside the image dimensions. The Keypoint R-CNN model still expects values for key points even when not visible, so we will fill the target annotations with dummy values as needed.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> LabelMeKeypointDataset(Dataset):</span>
<span id="cb31-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A PyTorch Dataset class for handling LabelMe image keypoints.</span></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class extends PyTorch's Dataset and is designed to work with image data and</span></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    associated keypoints annotations. It supports loading images and corresponding</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    keypoints annotations, and applying transformations.</span></span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_keys (list): List of image keys.</span></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation_df (DataFrame): DataFrame containing annotations for each image.</span></span>
<span id="cb31-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_dict (dict): Dictionary mapping image keys to their file paths.</span></span>
<span id="cb31-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transforms (callable, optional): Transformations to be applied to the images and targets.</span></span>
<span id="cb31-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb31-16"></span>
<span id="cb31-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb31-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the LabelMeKeypointDataset with image keys, annotations, and other relevant information.</span></span>
<span id="cb31-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb31-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_keys (list): List of image keys.</span></span>
<span id="cb31-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation_df (DataFrame): DataFrame containing annotations for each image.</span></span>
<span id="cb31-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_dict (dict): Dictionary mapping image keys to their file paths.</span></span>
<span id="cb31-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb31-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            transforms (callable, optional): Transformations to be applied to the images and targets.</span></span>
<span id="cb31-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb31-29">        </span>
<span id="cb31-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys</span>
<span id="cb31-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df</span>
<span id="cb31-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict</span>
<span id="cb31-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx</span>
<span id="cb31-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms</span>
<span id="cb31-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sanitize_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.transforms.v2.SanitizeBoundingBoxes()</span>
<span id="cb31-36"></span>
<span id="cb31-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.BBOX_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb31-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.DUMMY_VALUE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb31-39"></span>
<span id="cb31-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb31-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the number of items in the dataset.</span></span>
<span id="cb31-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb31-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            int: Number of items in the dataset.</span></span>
<span id="cb31-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb31-48">        </span>
<span id="cb31-49">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb31-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an item from the dataset at the specified index.</span></span>
<span id="cb31-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb31-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            index (int): Index of the item to retrieve.</span></span>
<span id="cb31-55"></span>
<span id="cb31-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its corresponding target (annotations).</span></span>
<span id="cb31-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-59">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb31-60">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb31-61">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb31-62">        </span>
<span id="cb31-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Applying transformations if specified</span></span>
<span id="cb31-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb31-65">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb31-66"></span>
<span id="cb31-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill any missing keypoints with dummy values</span></span>
<span id="cb31-68">        target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._fill_and_order_target(target)</span>
<span id="cb31-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb31-70"></span>
<span id="cb31-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> order_points_by_labels(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data, label_order):</span>
<span id="cb31-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Extracts and orders points from a list of dictionaries based on a given order of labels.</span></span>
<span id="cb31-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param data: List of dictionaries containing labels and points.</span></span>
<span id="cb31-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param label_order: List of labels in the desired order.</span></span>
<span id="cb31-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :return: List of points in the specified label order.</span></span>
<span id="cb31-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-79">        ordered_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb31-80">        label_to_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]: item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data}</span>
<span id="cb31-81">    </span>
<span id="cb31-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> label_order:</span>
<span id="cb31-83">            points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_to_points.get(label)</span>
<span id="cb31-84">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb31-85">                ordered_points.extend(points)</span>
<span id="cb31-86"></span>
<span id="cb31-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ordered_points</span>
<span id="cb31-88"></span>
<span id="cb31-89">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb31-90">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Loads an image and its corresponding target (annotations) based on the provided annotation.</span></span>
<span id="cb31-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb31-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation (DataFrame row): Annotation data for a specific image.</span></span>
<span id="cb31-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Returns:</span></span>
<span id="cb31-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the loaded image and its corresponding target data.</span></span>
<span id="cb31-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-98">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image from the file path specified in the annotations</span></span>
<span id="cb31-99">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb31-100">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb31-101"></span>
<span id="cb31-102">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extracting keypoints from the annotation and converting them to a tensor</span></span>
<span id="cb31-103">        keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.order_points_by_labels(annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>], class_to_idx.keys())</span>
<span id="cb31-104">        keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.array(keypoints, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb31-105">        </span>
<span id="cb31-106">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding an offset to create bounding boxes around keypoints</span></span>
<span id="cb31-107">        keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((keypoints, torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.BBOX_DIM), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-108">                </span>
<span id="cb31-109">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert bounding box format and create a BoundingBoxes object</span></span>
<span id="cb31-110">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.box_convert(keypoints_bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>)</span>
<span id="cb31-111">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb31-112">        </span>
<span id="cb31-113">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create tensor for labels based on the class indices</span></span>
<span id="cb31-114">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> class_to_idx.keys()])</span>
<span id="cb31-115">        </span>
<span id="cb31-116">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span>
<span id="cb31-117"></span>
<span id="cb31-118">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _fill_and_order_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, target):</span>
<span id="cb31-119">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-120"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Fills and orders the target bounding boxes and labels based on the class index.</span></span>
<span id="cb31-121"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-122"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This method ensures that each target has a bounding box and label for each class,</span></span>
<span id="cb31-123"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        even if some classes are not present in the original target. Missing classes</span></span>
<span id="cb31-124"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        are filled with dummy values.</span></span>
<span id="cb31-125"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            target (dict): A dictionary containing 'boxes' and 'labels' keys, where</span></span>
<span id="cb31-128"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           'boxes' is a tensor of bounding boxes and 'labels' is a tensor</span></span>
<span id="cb31-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           of labels corresponding to these boxes.</span></span>
<span id="cb31-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-131"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-132"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dict: The updated target dictionary with boxes and labels ordered and filled</span></span>
<span id="cb31-133"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  according to the class index.</span></span>
<span id="cb31-134"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-135">    </span>
<span id="cb31-136">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize new boxes with dummy values for each class</span></span>
<span id="cb31-137">        new_boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.full((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.DUMMY_VALUE)</span>
<span id="cb31-138">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare labels tensor based on the class indices</span></span>
<span id="cb31-139">        new_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx.values()), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32)</span>
<span id="cb31-140">    </span>
<span id="cb31-141">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over each class label</span></span>
<span id="cb31-142">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(new_labels):</span>
<span id="cb31-143">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the current label exists in the target's labels</span></span>
<span id="cb31-144">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]:</span>
<span id="cb31-145">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the index of the current label in the target's labels</span></span>
<span id="cb31-146">                idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> label).nonzero(as_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb31-147">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the corresponding box to the new boxes tensor</span></span>
<span id="cb31-148">                new_boxes[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>][idx]</span>
<span id="cb31-149">    </span>
<span id="cb31-150">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the target dictionary with the new boxes and labels</span></span>
<span id="cb31-151">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_boxes</span>
<span id="cb31-152">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_labels</span>
<span id="cb31-153">    </span>
<span id="cb31-154">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> target</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb32-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb32-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb32-4">        transforms.ColorJitter(</span>
<span id="cb32-5">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb32-6">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb32-7">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb32-8">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb32-9">        ),</span>
<span id="cb32-10">        transforms.RandomGrayscale(),</span>
<span id="cb32-11">        transforms.RandomEqualize(),</span>
<span id="cb32-12">        RandomPixelCopy(max_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.025</span>),</span>
<span id="cb32-13">        transforms.RandomPerspective(distortion_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">117</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">104</span>)),</span>
<span id="cb32-14">        transforms.RandomRotation(degrees<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">117</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">104</span>)),</span>
<span id="cb32-15">        iou_crop,</span>
<span id="cb32-16">    ],</span>
<span id="cb32-17">)</span>
<span id="cb32-18"></span>
<span id="cb32-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb32-20">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-21">    resize_max, </span>
<span id="cb32-22">    pad_square,</span>
<span id="cb32-23">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb32-24">])</span>
<span id="cb32-25"></span>
<span id="cb32-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb32-27">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-28">    transforms.ToImage(), </span>
<span id="cb32-29">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb32-30">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb32-31">])</span>
<span id="cb32-32"></span>
<span id="cb32-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb32-34">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-35">    data_aug_tfms, </span>
<span id="cb32-36">    resize_pad_tfm, </span>
<span id="cb32-37">    final_tfms</span>
<span id="cb32-38">])</span>
<span id="cb32-39">valid_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([resize_pad_tfm, final_tfms])</span></code></pre></div>
</section>
<section id="initialize-datasets" class="level3">
<h3 class="anchored" data-anchor-id="initialize-datasets">Initialize Datasets</h3>
<p>Now, we can create the dataset objects for the training and validation sets using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb33-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb33-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelMeKeypointDataset(train_keys, annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb33-6">valid_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelMeKeypointDataset(val_keys, annotation_df, img_dict, class_to_idx, valid_tfms)</span>
<span id="cb33-7"></span>
<span id="cb33-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training and validation datasets</span></span>
<span id="cb33-9">pd.Series({</span>
<span id="cb33-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb33-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Validation dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataset)}</span>
<span id="cb33-12">).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_408f0">
<thead>
</thead>
<tbody>
<tr>
<th id="T_408f0_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_408f0_row0_col0" class="data row0 col0">
180
</td>
</tr>
<tr>
<th id="T_408f0_level0_row1" class="row_heading level0 row1">
Validation dataset size:
</th>
<td id="T_408f0_row1_col0" class="data row1 col0">
20
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>Let’s verify the dataset objects work correctly by inspecting the first samples from the training and validation sets.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<p>Since our custom dataset fills missing annotations with dummy values, we will pass the target dictionary through the <code>SanitizeBoundingBoxes</code> function again.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a sample image and its target annotations</span></span>
<span id="cb34-2">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sanitize bounding boxes to remove dummy values</span></span>
<span id="cb34-5">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb34-6">targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb34-7">sanitized_image, sanitized_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], targets)</span>
<span id="cb34-8"></span>
<span id="cb34-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with the sanitized annotations</span></span>
<span id="cb34-10">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb34-11">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(sanitized_image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb34-12">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb34-13">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb34-14">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb34-15">)</span>
<span id="cb34-16"></span>
<span id="cb34-17">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_62_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-validation-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-validation-set-sample">Inspect validation set sample</h4>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb35-2"></span>
<span id="cb35-3">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb35-4">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb35-5">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb35-6">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb35-7">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb35-8">)</span>
<span id="cb35-9"></span>
<span id="cb35-10">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_64_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="initialize-dataloaders" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataloaders">Initialize DataLoaders</h3>
<p>The last step before training is to instantiate the DataLoaders for the training and validation sets. Try decreasing the batch size if you encounter memory limitations.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the training batch size</span></span>
<span id="cb36-2">bs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the number of worker processes for loading data. This should be the number of CPUs available.</span></span>
<span id="cb36-5">num_workers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> multiprocessing.cpu_count()</span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define parameters for DataLoader</span></span>
<span id="cb36-8">data_loader_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb36-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch_size'</span>: bs,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch size for data loading</span></span>
<span id="cb36-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_workers'</span>: num_workers,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of subprocesses to use for data loading</span></span>
<span id="cb36-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'persistent_workers'</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If True, the data loader will not shutdown the worker processes after a dataset has been consumed once. This allows to maintain the worker dataset instances alive.</span></span>
<span id="cb36-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> device,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If True, the data loader will copy Tensors into CUDA pinned memory before returning them. Useful when using GPU.</span></span>
<span id="cb36-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pin_memory_device'</span>: device <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> device <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Specifies the device where the data should be loaded. Commonly set to use the GPU.</span></span>
<span id="cb36-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'collate_fn'</span>: <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> batch: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>batch)),</span>
<span id="cb36-15">}</span>
<span id="cb36-16"></span>
<span id="cb36-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for training data. Data is shuffled for every epoch.</span></span>
<span id="cb36-18">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(train_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb36-19"></span>
<span id="cb36-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create DataLoader for validation data. Shuffling is not necessary for validation data.</span></span>
<span id="cb36-21">valid_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(valid_dataset, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>data_loader_params)</span>
<span id="cb36-22"></span>
<span id="cb36-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of batches in the training and validation DataLoaders</span></span>
<span id="cb36-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of batches in train DataLoader: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb36-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of batches in validation DataLoader: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(valid_dataloader)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<pre><code>Number of batches in train DataLoader: 45
Number of batches in validation DataLoader: 5</code></pre>
</section>
</section>
<section id="fine-tuning-the-model" class="level2">
<h2 class="anchored" data-anchor-id="fine-tuning-the-model">Fine-tuning the Model</h2>
<p>In this section, we will implement the training code and fine-tune our model.</p>
<section id="define-utility-functions" class="level3">
<h3 class="anchored" data-anchor-id="define-utility-functions">Define Utility Functions</h3>
<p>First, we need to define a couple of utility functions.</p>
<section id="define-a-function-to-create-a-bounding-box-that-encapsulates-the-key-points" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-create-a-bounding-box-that-encapsulates-the-key-points">Define a function to create a bounding box that encapsulates the key points</h4>
<p>The Keypoint R-CNN model expects a bounding box encapsulating the points associated with a given person/object. We could include these bounding box annotations in our dataset (e.g., have bounding boxes around each face). However, dynamically making one large enough to contain the key points will suffice.</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> keypoints_to_bbox(keypoints, offset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb38-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Convert a tensor of keypoint coordinates to a bounding box.</span></span>
<span id="cb38-4"></span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb38-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    keypoints (Tensor): A tensor of shape (N, 2), where N is the number of keypoints.</span></span>
<span id="cb38-7"></span>
<span id="cb38-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb38-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Tensor: A tensor representing the bounding box [xmin, ymin, xmax, ymax].</span></span>
<span id="cb38-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb38-11">    x_coordinates, y_coordinates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keypoints[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], keypoints[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb38-12"></span>
<span id="cb38-13">    xmin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(x_coordinates)</span>
<span id="cb38-14">    ymin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(y_coordinates)</span>
<span id="cb38-15">    xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(x_coordinates)</span>
<span id="cb38-16">    ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(y_coordinates)</span>
<span id="cb38-17"></span>
<span id="cb38-18">    bbox <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([xmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>offset, ymin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>offset, xmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset, ymax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset])</span>
<span id="cb38-19"></span>
<span id="cb38-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> bbox</span></code></pre></div>
</section>
<section id="define-a-conditional-autocast-context-manager" class="level4">
<h4 class="anchored" data-anchor-id="define-a-conditional-autocast-context-manager">Define a conditional <code>autocast</code> context manager</h4>
<p>The autocast context manager that handles mixed-precision training on CPUs does not fully support the Keypoint R-CNN model. Therefore, we will only use mixed-precision training when not using the CPU.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@contextmanager</span></span>
<span id="cb39-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> conditional_autocast(device):</span>
<span id="cb39-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A context manager for conditional automatic mixed precision (AMP).</span></span>
<span id="cb39-5"></span>
<span id="cb39-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This context manager applies automatic mixed precision for operations if the</span></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    specified device is not a CPU. It's a no-op (does nothing) if the device is a CPU.</span></span>
<span id="cb39-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Mixed precision can speed up computations and reduce memory usage on compatible</span></span>
<span id="cb39-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    hardware, primarily GPUs.</span></span>
<span id="cb39-10"></span>
<span id="cb39-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb39-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    device (str): The device type, e.g., 'cuda' or 'cpu', which determines whether</span></span>
<span id="cb39-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  autocasting is applied.</span></span>
<span id="cb39-14"></span>
<span id="cb39-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Yields:</span></span>
<span id="cb39-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    None - This function does not return any value but enables the wrapped code</span></span>
<span id="cb39-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           block to execute under the specified precision context.</span></span>
<span id="cb39-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb39-19"></span>
<span id="cb39-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the specified device is not a CPU</span></span>
<span id="cb39-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> device:</span>
<span id="cb39-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the device is not a CPU, enable autocast for the specified device type.</span></span>
<span id="cb39-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Autocast will automatically choose the precision (e.g., float16) for certain</span></span>
<span id="cb39-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># operations to improve performance.</span></span>
<span id="cb39-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> autocast(device_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device):</span>
<span id="cb39-26">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb39-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb39-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the device is a CPU, autocast is not applied.</span></span>
<span id="cb39-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This yields control back to the with-block with no changes.</span></span>
<span id="cb39-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span></code></pre></div>
</section>
</section>
<section id="define-the-training-loop" class="level3">
<h3 class="anchored" data-anchor-id="define-the-training-loop">Define the Training Loop</h3>
<p>The following function performs a single pass through the training or validation set.</p>
<p>As mentioned earlier, the Keypoint R-CNN model expects values for key points even when not visible. We indicate which key points are visible, with a <code>1</code> for visible and a <code>0</code> for not.</p>
<p>The model has different behavior when in <code>training</code> mode versus <code>evaluation</code> mode. In training mode, it calculates the loss internally for the key point estimation task and returns a dictionary with the individual loss values. We can sum up these separate values to get the total loss.</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to run a single training/validation epoch</span></span>
<span id="cb40-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_epoch(model, dataloader, optimizer, lr_scheduler, device, scaler, epoch_id, is_training):</span>
<span id="cb40-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Function to run a single training or evaluation epoch.</span></span>
<span id="cb40-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb40-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A PyTorch model to train or evaluate.</span></span>
<span id="cb40-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dataloader: A PyTorch DataLoader providing the data.</span></span>
<span id="cb40-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: The optimizer to use for training the model.</span></span>
<span id="cb40-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_func: The loss function used for training.</span></span>
<span id="cb40-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        device: The device (CPU or GPU) to run the model on.</span></span>
<span id="cb40-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        scaler: Gradient scaler for mixed-precision training.</span></span>
<span id="cb40-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        is_training: Boolean flag indicating whether the model is in training or evaluation mode.</span></span>
<span id="cb40-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb40-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb40-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The average loss for the epoch.</span></span>
<span id="cb40-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb40-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set model to training mode</span></span>
<span id="cb40-19">    model.train()</span>
<span id="cb40-20">    </span>
<span id="cb40-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the average loss for the current epoch </span></span>
<span id="cb40-22">    epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb40-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize progress bar with total number of batches in the dataloader</span></span>
<span id="cb40-24">    progress_bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tqdm(total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eval"</span>)</span>
<span id="cb40-25">    </span>
<span id="cb40-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over data batches</span></span>
<span id="cb40-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch_id, (inputs, targets) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader):</span>
<span id="cb40-28">        </span>
<span id="cb40-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Move inputs and targets to the specified device</span></span>
<span id="cb40-30">        inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(inputs).to(device)</span>
<span id="cb40-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the ground truth bounding boxes and labels</span></span>
<span id="cb40-32">        gt_bboxes, gt_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>[(d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>].to(device), d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].to(device)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets])</span>
<span id="cb40-33">        </span>
<span id="cb40-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert ground truth bounding boxes from 'xyxy' to 'cxcywh' format and only keep center coordinates</span></span>
<span id="cb40-35">        gt_keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.box_convert(torch.stack(gt_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>)[:,:,:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb40-36">        </span>
<span id="cb40-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a visibility tensor with ones, indicating all keypoints are visible</span></span>
<span id="cb40-38">        visibility <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(inputs),gt_keypoints.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(device)</span>
<span id="cb40-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a visibility mask based on whether the bounding boxes are valid (greater than or equal to 0)</span></span>
<span id="cb40-40">        visibility_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (torch.stack(gt_bboxes) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>)[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].view(visibility.shape).to(device)</span>
<span id="cb40-41">        </span>
<span id="cb40-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the keypoints with the visibility mask, adding a visibility channel to keypoints</span></span>
<span id="cb40-43">        gt_keypoints_with_visibility <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat((</span>
<span id="cb40-44">            gt_keypoints, </span>
<span id="cb40-45">            visibility<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>visibility_mask</span>
<span id="cb40-46">        ), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb40-47">        </span>
<span id="cb40-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert keypoints to bounding boxes for each input and move them to the specified device</span></span>
<span id="cb40-49">        gt_shelf_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.vstack([keypoints_to_bbox(keypoints) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> keypoints <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gt_keypoints]).to(device)</span>
<span id="cb40-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize ground truth labels as tensor of ones and move them to the specified device</span></span>
<span id="cb40-51">        gt_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(inputs), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int64).to(device)</span>
<span id="cb40-52">        </span>
<span id="cb40-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare the targets for the Keypoint R-CNN model</span></span>
<span id="cb40-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This includes bounding boxes, labels, and keypoints with visibility for each input image</span></span>
<span id="cb40-55">        keypoint_rcnn_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb40-56">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span> : boxes[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keypoints'</span>: keypoints[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]}</span>
<span id="cb40-57">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> boxes, labels, keypoints <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(gt_shelf_bboxes, gt_labels, gt_keypoints_with_visibility)</span>
<span id="cb40-58">        ]</span>
<span id="cb40-59"></span>
<span id="cb40-60">        </span>
<span id="cb40-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass with Automatic Mixed Precision (AMP) context manager</span></span>
<span id="cb40-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> conditional_autocast(torch.device(device).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>):</span>
<span id="cb40-63">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb40-64">                losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs.to(device), move_data_to_device(keypoint_rcnn_targets, device))</span>
<span id="cb40-65">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb40-66">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb40-67">                    losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(inputs.to(device), move_data_to_device(keypoint_rcnn_targets, device))</span>
<span id="cb40-68">        </span>
<span id="cb40-69">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the loss</span></span>
<span id="cb40-70">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([loss <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> loss <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> losses.values()])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum up the losses</span></span>
<span id="cb40-71">                </span>
<span id="cb40-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If in training mode</span></span>
<span id="cb40-73">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb40-74">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> scaler:</span>
<span id="cb40-75">                scaler.scale(loss).backward()</span>
<span id="cb40-76">                scaler.step(optimizer)</span>
<span id="cb40-77">                old_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.get_scale()</span>
<span id="cb40-78">                scaler.update()</span>
<span id="cb40-79">                new_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.get_scale()</span>
<span id="cb40-80">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> new_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> old_scaler:</span>
<span id="cb40-81">                    lr_scheduler.step()</span>
<span id="cb40-82">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb40-83">                loss.backward()</span>
<span id="cb40-84">                optimizer.step()</span>
<span id="cb40-85">                lr_scheduler.step()</span>
<span id="cb40-86">                </span>
<span id="cb40-87">            optimizer.zero_grad()</span>
<span id="cb40-88">        </span>
<span id="cb40-89">        loss_item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss.item()</span>
<span id="cb40-90">        epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss_item</span>
<span id="cb40-91">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update progress bar</span></span>
<span id="cb40-92">        progress_bar.set_postfix(loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_item, </span>
<span id="cb40-93">                                 avg_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch_loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(batch_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb40-94">                                 lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb40-95">        progress_bar.update()</span>
<span id="cb40-96">        </span>
<span id="cb40-97">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If loss is NaN or infinity, stop training</span></span>
<span id="cb40-98">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> is_training:</span>
<span id="cb40-99">            stop_training_message <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Loss is NaN or infinite at epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, batch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>batch_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">. Stopping training."</span></span>
<span id="cb40-100">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> math.isnan(loss_item) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> math.isfinite(loss_item), stop_training_message</span>
<span id="cb40-101">        </span>
<span id="cb40-102">    progress_bar.close()</span>
<span id="cb40-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> epoch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (batch_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>Next, we define the <code>train_loop</code> function, which executes the main training loop. It iterates over each epoch, runs through the training and validation sets, and saves the best model based on the validation loss.</p>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_loop(model, </span>
<span id="cb41-2">               train_dataloader, </span>
<span id="cb41-3">               valid_dataloader, </span>
<span id="cb41-4">               optimizer,  </span>
<span id="cb41-5">               lr_scheduler, </span>
<span id="cb41-6">               device, </span>
<span id="cb41-7">               epochs, </span>
<span id="cb41-8">               checkpoint_path, </span>
<span id="cb41-9">               use_scaler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb41-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb41-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Main training loop.</span></span>
<span id="cb41-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb41-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb41-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A PyTorch model to train.</span></span>
<span id="cb41-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        train_dataloader: A PyTorch DataLoader providing the training data.</span></span>
<span id="cb41-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        valid_dataloader: A PyTorch DataLoader providing the validation data.</span></span>
<span id="cb41-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: The optimizer to use for training the model.</span></span>
<span id="cb41-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        lr_scheduler: The learning rate scheduler.</span></span>
<span id="cb41-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        device: The device (CPU or GPU) to run the model on.</span></span>
<span id="cb41-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        epochs: The number of epochs to train for.</span></span>
<span id="cb41-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        checkpoint_path: The path where to save the best model checkpoint.</span></span>
<span id="cb41-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        use_scaler: Whether to scale graidents when using a CUDA device</span></span>
<span id="cb41-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb41-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb41-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        None</span></span>
<span id="cb41-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb41-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a gradient scaler for mixed-precision training if the device is a CUDA GPU</span></span>
<span id="cb41-28">    scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cuda.amp.GradScaler() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> use_scaler <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb41-29">    best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inf'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize the best validation loss</span></span>
<span id="cb41-30"></span>
<span id="cb41-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over the epochs</span></span>
<span id="cb41-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Epochs"</span>):</span>
<span id="cb41-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run a training epoch and get the training loss</span></span>
<span id="cb41-34">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, train_dataloader, optimizer, lr_scheduler, device, scaler, epoch, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run an evaluation epoch and get the validation loss</span></span>
<span id="cb41-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb41-37">            valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_epoch(model, valid_dataloader, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, device, scaler, epoch, is_training<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb41-38"></span>
<span id="cb41-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the validation loss is lower than the best validation loss seen so far, save the model checkpoint</span></span>
<span id="cb41-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> valid_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> best_loss:</span>
<span id="cb41-41">            best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> valid_loss</span>
<span id="cb41-42">            torch.save(model.state_dict(), checkpoint_path)</span>
<span id="cb41-43"></span>
<span id="cb41-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save metadata about the training process</span></span>
<span id="cb41-45">            training_metadata <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb41-46">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epoch'</span>: epoch,</span>
<span id="cb41-47">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>: train_loss,</span>
<span id="cb41-48">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid_loss'</span>: valid_loss, </span>
<span id="cb41-49">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning_rate'</span>: lr_scheduler.get_last_lr()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb41-50">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_architecture'</span>: model.name</span>
<span id="cb41-51">            }</span>
<span id="cb41-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(Path(checkpoint_path.parent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'training_metadata.json'</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb41-53">                json.dump(training_metadata, f)</span>
<span id="cb41-54"></span>
<span id="cb41-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the device is a GPU, empty the cache</span></span>
<span id="cb41-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span>:</span>
<span id="cb41-57">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(torch, device.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>).empty_cache()</span></code></pre></div>
</section>
<section id="set-the-model-checkpoint-path" class="level3">
<h3 class="anchored" data-anchor-id="set-the-model-checkpoint-path">Set the Model Checkpoint Path</h3>
<p>Before we proceed with training, let’s generate a timestamp for the training session and create a directory to save the checkpoints during training.</p>
<div class="sourceCode" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate timestamp for the training session (Year-Month-Day_Hour_Minute_Second)</span></span>
<span id="cb42-2">timestamp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime.datetime.now().strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_%H-%M-%S"</span>)</span>
<span id="cb42-3"></span>
<span id="cb42-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a directory to store the checkpoints if it does not already exist</span></span>
<span id="cb42-5">checkpoint_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(project_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>timestamp<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb42-6"></span>
<span id="cb42-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the checkpoint directory if it does not already exist</span></span>
<span id="cb42-8">checkpoint_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb42-9"></span>
<span id="cb42-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The model checkpoint path</span></span>
<span id="cb42-11">checkpoint_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> checkpoint_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth"</span></span>
<span id="cb42-12"></span>
<span id="cb42-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(checkpoint_path)</span></code></pre></div>
<pre><code>pytorch-keypoint-r-cnn/2024-01-28_17-07-09/keypointrcnn_resnet50_fpn.pth</code></pre>
<p>Let’s also save a copy of the colormap for the current dataset in the training folder for future use.</p>
</section>
<section id="save-the-color-map" class="level3">
<h3 class="anchored" data-anchor-id="save-the-color-map">Save the Color Map</h3>
<div class="sourceCode" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a color map and write it to a JSON file</span></span>
<span id="cb44-2">color_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'items'</span>: [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: label, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'color'</span>: color} <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label, color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(class_names, colors)]}</span>
<span id="cb44-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-colormap.json"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb44-4">    json.dump(color_map, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb44-5"></span>
<span id="cb44-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the name of the file that the color map was written to</span></span>
<span id="cb44-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>checkpoint_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-colormap.json"</span>)</span></code></pre></div>
<pre><code>pytorch-keypoint-r-cnn/2024-01-28_17-07-09/labelme-keypoint-eyes-noses-dataset-colormap.json</code></pre>
</section>
<section id="configure-the-training-parameters" class="level3">
<h3 class="anchored" data-anchor-id="configure-the-training-parameters">Configure the Training Parameters</h3>
<p>Now, we can configure the parameters for training. We must specify the learning rate and number of training epochs. We will also instantiate the optimizer and learning rate scheduler.</p>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate for the model</span></span>
<span id="cb46-2">lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5e-4</span></span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of training epochs</span></span>
<span id="cb46-5">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span></span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AdamW optimizer; includes weight decay for regularization</span></span>
<span id="cb46-8">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.AdamW(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr)</span>
<span id="cb46-9"></span>
<span id="cb46-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Learning rate scheduler; adjusts the learning rate during training</span></span>
<span id="cb46-11">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.OneCycleLR(optimizer, </span>
<span id="cb46-12">                                                   max_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr, </span>
<span id="cb46-13">                                                   total_steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataloader))</span></code></pre></div>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the Model</h3>
<p>Finally, we can train the model using the <code>train_loop</code> function. Training time will depend on the available hardware.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Training usually takes around 30 minutes on the free GPU tier of Google Colab.</p>
</div>
</div>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">train_loop(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, </span>
<span id="cb47-2">           train_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataloader,</span>
<span id="cb47-3">           valid_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_dataloader,</span>
<span id="cb47-4">           optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, </span>
<span id="cb47-5">           lr_scheduler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>lr_scheduler, </span>
<span id="cb47-6">           device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.device(device), </span>
<span id="cb47-7">           epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epochs, </span>
<span id="cb47-8">           checkpoint_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>checkpoint_path,</span>
<span id="cb47-9">           use_scaler<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="callout callout-style-default callout-note callout-titled" title="Training Progress">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Training Progress
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre class="text"><code>Epochs: 100% |██████████| 70/70 [07:29&lt;00:00, 6.55s/it]
Train: 100% |██████████| 45/45 [00:07&lt;00:00, 8.58it/s, avg_loss=6.95, loss=6.07, lr=2.27e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 8.31it/s, avg_loss=5.17, loss=5.31, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.50it/s, avg_loss=5.42, loss=4.87, lr=3.07e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.40it/s, avg_loss=4.3, loss=4.14, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 7.09it/s, avg_loss=4.85, loss=4.88, lr=4.38e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.72it/s, avg_loss=4.54, loss=4.73, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.12it/s, avg_loss=4.55, loss=4.27, lr=6.18e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 13.73it/s, avg_loss=4.16, loss=3.78, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.77it/s, avg_loss=4.37, loss=4.64, lr=8.42e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.63it/s, avg_loss=3.79, loss=3.36, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.46it/s, avg_loss=4.53, loss=6.24, lr=0.000111]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.26it/s, avg_loss=3.81, loss=3.25, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.30it/s, avg_loss=4.39, loss=4.33, lr=0.00014]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.50it/s, avg_loss=3.93, loss=3.63, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.64it/s, avg_loss=4.2, loss=4.98, lr=0.000173]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.93it/s, avg_loss=3.85, loss=3.1, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.43it/s, avg_loss=4.37, loss=4.64, lr=0.000207]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.57it/s, avg_loss=4.49, loss=4.54, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.54it/s, avg_loss=4.26, loss=3.53, lr=0.000242]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.36it/s, avg_loss=4.11, loss=4.03, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.48it/s, avg_loss=4.38, loss=4.53, lr=0.000278]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.60it/s, avg_loss=4.34, loss=3.82, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.51it/s, avg_loss=4.58, loss=4.45, lr=0.000314]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.03it/s, avg_loss=4.42, loss=4.41, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.58it/s, avg_loss=4.47, loss=3.38, lr=0.000348]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.05it/s, avg_loss=4.24, loss=3.27, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.53it/s, avg_loss=4.44, loss=5.01, lr=0.00038]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.75it/s, avg_loss=4.22, loss=4.14, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.58it/s, avg_loss=4.54, loss=4.36, lr=0.00041]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.24it/s, avg_loss=4.02, loss=3.7, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.83it/s, avg_loss=4.55, loss=3.89, lr=0.000436]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.35it/s, avg_loss=4.04, loss=3.33, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.58it/s, avg_loss=4.57, loss=4.49, lr=0.000459]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.79it/s, avg_loss=4.68, loss=4.85, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.84it/s, avg_loss=4.57, loss=4.47, lr=0.000477]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.73it/s, avg_loss=3.98, loss=3.36, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.83it/s, avg_loss=4.4, loss=4.59, lr=0.00049]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.27it/s, avg_loss=4.11, loss=3.59, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.76it/s, avg_loss=4.59, loss=4.98, lr=0.000497]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.49it/s, avg_loss=3.98, loss=3.41, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.85it/s, avg_loss=4.35, loss=4.5, lr=0.0005]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.15it/s, avg_loss=4, loss=3.34, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.05it/s, avg_loss=4.6, loss=5.02, lr=0.000499]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 13.54it/s, avg_loss=4.14, loss=3.99, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.92it/s, avg_loss=4.5, loss=3.75, lr=0.000498]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.00it/s, avg_loss=4.38, loss=4.55, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.39it/s, avg_loss=4.25, loss=3.95, lr=0.000495]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.46it/s, avg_loss=3.72, loss=3.16, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.55it/s, avg_loss=4.26, loss=5.19, lr=0.000492]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.02it/s, avg_loss=4.54, loss=4.14, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.46it/s, avg_loss=4.15, loss=3.68, lr=0.000487]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.73it/s, avg_loss=3.94, loss=3.61, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.77it/s, avg_loss=4.3, loss=3.22, lr=0.000482]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.81it/s, avg_loss=3.71, loss=3.57, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.42it/s, avg_loss=4.08, loss=3.55, lr=0.000475]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.04it/s, avg_loss=3.88, loss=3.6, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.42it/s, avg_loss=4.18, loss=3.19, lr=0.000468]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.78it/s, avg_loss=3.84, loss=3.7, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.52it/s, avg_loss=4.09, loss=3.7, lr=0.000459]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.19it/s, avg_loss=3.91, loss=3.65, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.16it/s, avg_loss=3.93, loss=4.28, lr=0.00045]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.02it/s, avg_loss=3.8, loss=3.52, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.15it/s, avg_loss=4.04, loss=3.38, lr=0.00044]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.09it/s, avg_loss=3.88, loss=4.04, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.36it/s, avg_loss=4.1, loss=3.53, lr=0.000429]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.44it/s, avg_loss=3.7, loss=2.95, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.62it/s, avg_loss=4.05, loss=4.06, lr=0.000418]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.18it/s, avg_loss=3.78, loss=3.28, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.20it/s, avg_loss=3.95, loss=3.53, lr=0.000406]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.48it/s, avg_loss=3.44, loss=3.38, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.27it/s, avg_loss=3.86, loss=2.82, lr=0.000393]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.31it/s, avg_loss=3.63, loss=3, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.35it/s, avg_loss=3.97, loss=3.48, lr=0.000379]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.21it/s, avg_loss=3.62, loss=3.22, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.46it/s, avg_loss=3.72, loss=3.94, lr=0.000365]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.22it/s, avg_loss=3.45, loss=2.83, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.30it/s, avg_loss=3.75, loss=3.34, lr=0.000351]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.41it/s, avg_loss=3.52, loss=3.38, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.63it/s, avg_loss=3.7, loss=4.19, lr=0.000336]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.00it/s, avg_loss=3.56, loss=2.9, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.47it/s, avg_loss=3.65, loss=4.22, lr=0.000321]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.94it/s, avg_loss=3.67, loss=3.11, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.50it/s, avg_loss=3.58, loss=4.13, lr=0.000305]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.86it/s, avg_loss=3.55, loss=2.98, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.55it/s, avg_loss=3.54, loss=3.29, lr=0.00029]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.17it/s, avg_loss=3.42, loss=2.62, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.25it/s, avg_loss=3.51, loss=3.97, lr=0.000274]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.54it/s, avg_loss=3.33, loss=2.68, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.39it/s, avg_loss=3.5, loss=2.83, lr=0.000258]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.36it/s, avg_loss=3.27, loss=2.94, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.22it/s, avg_loss=3.45, loss=4.09, lr=0.000242]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.64it/s, avg_loss=3.63, loss=3.29, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.37it/s, avg_loss=3.44, loss=2.97, lr=0.000226]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 13.97it/s, avg_loss=3.44, loss=2.87, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.26it/s, avg_loss=3.35, loss=2.87, lr=0.00021]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.52it/s, avg_loss=3.35, loss=2.94, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.29it/s, avg_loss=3.32, loss=3.1, lr=0.000194]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.92it/s, avg_loss=3.58, loss=3.28, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.67it/s, avg_loss=3.21, loss=3.25, lr=0.000179]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.04it/s, avg_loss=3.36, loss=2.86, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.12it/s, avg_loss=3.29, loss=2.95, lr=0.000163]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.03it/s, avg_loss=3.36, loss=2.87, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.07it/s, avg_loss=3.21, loss=3.99, lr=0.000148]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.45it/s, avg_loss=3.32, loss=2.96, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.23it/s, avg_loss=3.21, loss=2.92, lr=0.000134]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.38it/s, avg_loss=3.15, loss=2.81, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.05it/s, avg_loss=3.13, loss=2.58, lr=0.00012]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.48it/s, avg_loss=3.39, loss=2.86, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.27it/s, avg_loss=3.07, loss=2.13, lr=0.000107]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.16it/s, avg_loss=3.15, loss=2.68, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 7.66it/s, avg_loss=3.12, loss=3.1, lr=9.39e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.06it/s, avg_loss=3.27, loss=2.85, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 7.56it/s, avg_loss=3.02, loss=3.05, lr=8.17e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.53it/s, avg_loss=3.24, loss=2.74, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.42it/s, avg_loss=2.99, loss=2.36, lr=7.02e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.08it/s, avg_loss=3.1, loss=2.56, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.24it/s, avg_loss=2.93, loss=2.53, lr=5.94e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.33it/s, avg_loss=3.21, loss=2.85, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.11it/s, avg_loss=2.98, loss=2.77, lr=4.94e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.40it/s, avg_loss=3.31, loss=2.95, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.16it/s, avg_loss=3.04, loss=3.37, lr=4.03e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.74it/s, avg_loss=3.15, loss=2.93, lr=]
Train: 100% |██████████| 45/45 [00:05&lt;00:00, 8.33it/s, avg_loss=3, loss=3.06, lr=3.2e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.16it/s, avg_loss=3.1, loss=2.8, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.36it/s, avg_loss=2.92, loss=2.94, lr=2.46e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.99it/s, avg_loss=3.23, loss=2.85, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.45it/s, avg_loss=2.86, loss=2.2, lr=1.81e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 15.14it/s, avg_loss=3.06, loss=2.78, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.53it/s, avg_loss=2.94, loss=2.69, lr=1.26e-5]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.66it/s, avg_loss=3.07, loss=2.53, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.29it/s, avg_loss=2.86, loss=2.94, lr=8.09e-6]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.19it/s, avg_loss=3.04, loss=2.48, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.56it/s, avg_loss=2.79, loss=2.45, lr=4.54e-6]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 13.92it/s, avg_loss=3.15, loss=2.65, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 7.95it/s, avg_loss=2.87, loss=2.57, lr=2.01e-6]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.27it/s, avg_loss=3.02, loss=2.29, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.31it/s, avg_loss=2.93, loss=2.63, lr=4.93e-7]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.89it/s, avg_loss=2.96, loss=2.65, lr=]
Train: 100% |██████████| 45/45 [00:06&lt;00:00, 8.32it/s, avg_loss=2.87, loss=2.75, lr=2.25e-9]
Eval: 100% |██████████| 5/5 [00:00&lt;00:00, 14.32it/s, avg_loss=3.07, loss=2.65, lr=]</code></pre>
</div>
</div>
</div>
<p>At last, we have our fine-tuned Keypoint R-CNN model. To wrap up the tutorial, we can test our model by performing inference on individual images.</p>
</section>
</section>
<section id="making-predictions-with-the-model" class="level2">
<h2 class="anchored" data-anchor-id="making-predictions-with-the-model">Making Predictions with the Model</h2>
<p>In this final part of the tutorial, we will cover how to perform inference on individual images with our Mask R-CNN model and filter the predictions.</p>
<section id="prepare-input-data" class="level3">
<h3 class="anchored" data-anchor-id="prepare-input-data">Prepare Input Data</h3>
<p>Let’s use an image from the validation set. That way, we have some ground truth annotation data to compare against. Unlike during training, we won’t stick to square input dimensions for inference.</p>
<div class="sourceCode" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Choose a random item from the validation set</span></span>
<span id="cb49-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> val_keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb49-3"></span>
<span id="cb49-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the image file path associated with the file ID</span></span>
<span id="cb49-5">test_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict[file_id]</span>
<span id="cb49-6"></span>
<span id="cb49-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the test file</span></span>
<span id="cb49-8">test_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(test_file).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb49-9"></span>
<span id="cb49-10">input_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_img(test_img, target_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz, divisor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb49-11"></span>
<span id="cb49-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the scale between the source image and the resized image</span></span>
<span id="cb49-13">min_img_scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(test_img.size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(input_img.size)</span>
<span id="cb49-14"></span>
<span id="cb49-15">display(test_img)</span>
<span id="cb49-16"></span>
<span id="cb49-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the prediction data as a Pandas DataFrame for easy formatting</span></span>
<span id="cb49-18">pd.Series({</span>
<span id="cb49-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image Size:"</span>: test_img.size,</span>
<span id="cb49-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Dims:"</span>: input_img.size,</span>
<span id="cb49-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min Image Scale:"</span>: min_img_scale,</span>
<span id="cb49-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Input Image Size:"</span>: input_img.size</span>
<span id="cb49-23">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_87_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_0ac3f">
<thead>
</thead>
<tbody>
<tr>
<th id="T_0ac3f_level0_row0" class="row_heading level0 row0">
Source Image Size:
</th>
<td id="T_0ac3f_row0_col0" class="data row0 col0">
(512, 768)
</td>
</tr>
<tr>
<th id="T_0ac3f_level0_row1" class="row_heading level0 row1">
Input Dims:
</th>
<td id="T_0ac3f_row1_col0" class="data row1 col0">
(512, 768)
</td>
</tr>
<tr>
<th id="T_0ac3f_level0_row2" class="row_heading level0 row2">
Min Image Scale:
</th>
<td id="T_0ac3f_row2_col0" class="data row2 col0">
1.000000
</td>
</tr>
<tr>
<th id="T_0ac3f_level0_row3" class="row_heading level0 row3">
Input Image Size:
</th>
<td id="T_0ac3f_row3_col0" class="data row3 col0">
(512, 768)
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-target-annotation-data" class="level3">
<h3 class="anchored" data-anchor-id="get-target-annotation-data">Get Target Annotation Data</h3>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the source annotations for the test image</span></span>
<span id="cb50-2">gt_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb50-3">gt_keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]])).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb50-4">gt_keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((gt_keypoints, torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gt_keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>BBOX_DIM), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</section>
<section id="pass-input-data-to-the-model" class="level3">
<h3 class="anchored" data-anchor-id="pass-input-data-to-the-model">Pass Input Data to the Model</h3>
<p>Now, we can convert the test image to a tensor and pass it to the model. Ensure the model is set to evaluation mode to get predictions instead of loss values.</p>
<div class="sourceCode" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the model to evaluation mode</span></span>
<span id="cb51-2">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb51-3"></span>
<span id="cb51-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the model and input data are on the same device</span></span>
<span id="cb51-5">model.to(device)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb51-6">input_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([transforms.ToImage(), </span>
<span id="cb51-7">                                   transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)])(input_img)[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>].to(device)</span>
<span id="cb51-8"></span>
<span id="cb51-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a prediction with the model</span></span>
<span id="cb51-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb51-11">    model_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(input_tensor)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
</section>
<section id="filter-the-model-output" class="level3">
<h3 class="anchored" data-anchor-id="filter-the-model-output">Filter the Model Output</h3>
<p>The model performs most post-processing steps internally, so we only need to filter the output based on the desired confidence threshold. The model returns predictions as a list of dictionaries. Each dictionary stores bounding boxes, label indices, confidence scores, and key points for a single sample in the input batch.</p>
<p>Since we resized the test image, we must scale the key points to the source resolution.</p>
<div class="sourceCode" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the confidence threshold</span></span>
<span id="cb52-2">conf_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span></span>
<span id="cb52-3"></span>
<span id="cb52-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter the output based on the confidence threshold</span></span>
<span id="cb52-5">scores_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scores'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> conf_threshold</span>
<span id="cb52-6"></span>
<span id="cb52-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and scale the predicted keypoints</span></span>
<span id="cb52-8">predicted_keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (model_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'keypoints'</span>][scores_mask])[:,:,:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>min_img_scale</span></code></pre></div>
</section>
<section id="compare-model-predictions-with-the-source-annotations" class="level3">
<h3 class="anchored" data-anchor-id="compare-model-predictions-with-the-source-annotations">Compare Model Predictions with the Source Annotations</h3>
<p>Finally, we can compare the model predictions with the ground-truth annotations.</p>
<div class="sourceCode" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the test image with the ground-truth annotations</span></span>
<span id="cb53-2">gt_annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb53-3">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(test_img), </span>
<span id="cb53-4">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(gt_keypoints_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>),</span>
<span id="cb53-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># labels=gt_labels, </span></span>
<span id="cb53-6">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> gt_labels]]</span>
<span id="cb53-7">)</span>
<span id="cb53-8"></span>
<span id="cb53-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare the labels and bounding box annotations for the test image</span></span>
<span id="cb53-10">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(scores_mask).item()</span>
<span id="cb53-11">keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((predicted_keypoints.cpu(), torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(predicted_keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb53-12"></span>
<span id="cb53-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the test image with the model predictions</span></span>
<span id="cb53-14">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb53-15">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(test_img), </span>
<span id="cb53-16">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(keypoints_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb53-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># labels=labels, </span></span>
<span id="cb53-18">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb53-19">)</span>
<span id="cb53-20"></span>
<span id="cb53-21">stack_imgs([tensor_to_pil(gt_annotated_tensor), tensor_to_pil(annotated_tensor)])</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/images/output_95_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The model appears to have learned to detect eyes and noses as desired.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Congratulations on completing this tutorial for training Keypoint R-CNN models in PyTorch! The skills and knowledge you acquired here provide a solid foundation for future projects.</p>
<p>As a next step, perhaps try annotating a keypoint dataset with <a href="https://github.com/labelmeai/labelme">LabelMe</a> for your own Keypoint R-CNN model or experiment with the data augmentations to see how they impact model accuracy.</p>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../posts/pytorch-train-keypoint-rcnn-tutorial/onnx-export/"><strong>Exporting Keypoint R-CNN Models from PyTorch to ONNX</strong></a><strong>:</strong> Learn how to export Keypoint R-CNN models from PyTorch to ONNX and perform inference using ONNX Runtime.</li>
<li><a href="../../posts/pytorch-train-mask-rcnn-tutorial/"><strong>Training Mask R-CNN Models with PyTorch</strong></a><strong>:</strong> Learn how to train Mask R-CNN models on custom datasets with PyTorch.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>keypoint-rcnn</category>
  <category>keypoint-estimation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/pytorch-train-keypoint-rcnn-tutorial/</guid>
  <pubDate>Mon, 29 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>How to Create Custom Torchvision V2 Transforms</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/</link>
  <description><![CDATA[ 




<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Examining the Transforms V2 Class</li>
<li>Creating a Random Pixel Copy Transform</li>
<li>Creating a Random Patch Copy Transform</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide to creating custom <a href="https://pytorch.org/vision/stable/transforms.html#v1-or-v2-which-one-should-i-use">V2 transforms</a> in torchvision. Torchvision’s V2 <a href="https://pytorch.org/vision/stable/transforms.html#v2-api-reference-recommended">image transforms</a> support annotations for various tasks, such as <a href="../../posts/torchvision-labelme-annotation-tutorials/bounding-boxes/">bounding boxes</a> for object detection and <a href="../../posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/">segmentation masks</a> for image segmentation.</p>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, and creating custom data augmentations that support bounding box annotations.</p>
<p>Data augmentation is a technique that creates variations of existing training samples to prevent a model from seeing the same sample twice. The goal is to help the model learn general features versus memorizing specific examples.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. Upon completion, you will have a solid foundation for creating custom V2 image transforms in torchvision for object detection tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></li>
<li><a href="../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-custom-v2-transform-tutorial.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-custom-v2-transform-tutorial.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.11 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.11 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.11 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any, Dict, Optional, List, Tuple, Union</span>
<span id="cb9-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> singledispatchmethod</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-15"></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-18"></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-21"></span>
<span id="cb9-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-24"></span>
<span id="cb9-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-26">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-27"></span>
<span id="cb9-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-30"></span>
<span id="cb9-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-32"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-33"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-34"></span>
<span id="cb9-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-37">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes, Mask</span>
<span id="cb9-39"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tv_tensors</span>
<span id="cb9-40"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wrap <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tv_wrap</span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-43"></span>
<span id="cb9-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-45"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>After importing the dependencies, we can load our dataset.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>We will use the following toy dataset containing images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a> and its bounding box annotations:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/labelme-bounding-box-toy-dataset/tree/main">labelme-bounding-box-toy-dataset</a></li>
</ul>
<div class="callout callout-style-default callout-tip callout-titled" title="Bounding Box Annotation Format">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Bounding Box Annotation Format
</div>
</div>
<div class="callout-body-container callout-body">
<p>The bounding boxes for this dataset use the <a href="https://github.com/labelmeai/labelme">LabelMe</a> annotation format. You can learn more about this format and how to work with such annotations in the tutorial linked below:</p>
<ul>
<li><a href="../../posts/torchvision-labelme-annotation-tutorials/bounding-boxes/">Working with LabelMe Bounding Box Annotations in Torchvision</a></li>
</ul>
</div>
</div>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_4e87e">
<thead>
</thead>
<tbody>
<tr>
<th id="T_4e87e_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_4e87e_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_4e87e_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_4e87e_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labelme-bounding-box-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_e1208">
<thead>
</thead>
<tbody>
<tr>
<th id="T_e1208_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_e1208_row0_col0" class="data row0 col0">
cj-mills/labelme-bounding-box-toy-dataset
</td>
</tr>
<tr>
<th id="T_e1208_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_e1208_row1_col0" class="data row1 col0">
Datasets/../Archive/labelme-bounding-box-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_e1208_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_e1208_row2_col0" class="data row2 col0">
Datasets/labelme-bounding-box-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Next, we will make a dictionary that maps each image’s unique name to its file path, allowing us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the dataset</span></span>
<span id="cb13-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_img_files(dataset_path)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb13-5">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> (img_file_paths)}</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb13-11">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 28</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
adults-attractive-beautiful-1727660
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/adults-attractive-beautiful-1727660.jpg
</td>
</tr>
<tr>
<th>
balloon-launch-festival-flame-1426050
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/balloon-launch-festival-flame-1426050.jpg
</td>
</tr>
<tr>
<th>
bar-beer-celebration-3009788
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/bar-beer-celebration-3009788.jpg
</td>
</tr>
<tr>
<th>
beach-child-daughter-1438511
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/beach-child-daughter-1438511.jpg
</td>
</tr>
<tr>
<th>
cellphone-festival-girl-1408983
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/cellphone-festival-girl-1408983.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>We will then read the content of the JSON annotation file associated with each image into a single Pandas DataFrame so we can easily query the annotations.</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of JSON files in the dataset</span></span>
<span id="cb15-2">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb15-5">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb15-8">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb15-11">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-12">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb15-15">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb15-16"></span>
<span id="cb15-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb15-18">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
adults-attractive-beautiful-1727660
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[450.1688537597656, 174.04931640625], [925.5413818359375, 765.6500244140625]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[1.195121951219533, 169.67073170731703], [448.7560975609756, 766.6219512195121]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
adults-attractive-beautiful-1727660.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
928
</td>
</tr>
<tr>
<th>
balloon-launch-festival-flame-1426050
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[740.9563598632812, 368.4273681640625], [1088.41552734375, 764.3656005859375]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
balloon-launch-festival-flame-1426050.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
<tr>
<th>
bar-beer-celebration-3009788
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[670.41650390625, 147.376953125], [1088.8197021484375, 760.0108642578125]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[116.53658536585372, 207.47560975609753], [629.3414634146342, 766.6219512195121]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[250.68292682926835, 1.378048780487799], [455.5609756097561, 225.15853658536582]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[427.51219512195127, 2.59756097560975], [593.9756097560976, 219.67073170731703]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[647.6341463414634, 2.59756097560975], [817.7560975609756, 137.96341463414632]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[731.170731707317, 0.7682926829268231], [917.1463414634146, 221.49999999999997]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[1009.2195121951219, 19.670731707317067], [1116.5365853658536, 262.3536585365854]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
bar-beer-celebration-3009788.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1216
</td>
</tr>
<tr>
<th>
beach-child-daughter-1438511
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[393.214111328125, 317.10064697265625], [588.5502319335938, 723.3473510742188]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[578.9024390243902, 351.3780487804878], [692.9268292682926, 697.1097560975609]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
beach-child-daughter-1438511.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1120
</td>
</tr>
<tr>
<th>
cellphone-festival-girl-1408983
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[119.5823974609375, 97.06643676757812], [886.0499877929688, 763.5545654296875]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
cellphone-festival-girl-1408983.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its bounding boxes using torchvision’s <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html"><code>BoundingBoxes</code></a> class and <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<p>First, we get the names of all the classes in our dataset.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb16-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe and rename the 'shapes' column to 'shapes'</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb16-4">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb16-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb16-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
person
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>Next, we will generate a color map for the object classes.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb17-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb17-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb17-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_20_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb18-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb18-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
<section id="define-function-that-ensures-bounding-boxes-are-in-a-consistent-format" class="level4">
<h4 class="anchored" data-anchor-id="define-function-that-ensures-bounding-boxes-are-in-a-consistent-format">Define function that ensures bounding boxes are in a consistent format</h4>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> correct_bounding_boxes(bboxes):</span>
<span id="cb20-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure input is a NumPy array</span></span>
<span id="cb20-3">    bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(bboxes)</span>
<span id="cb20-4">    </span>
<span id="cb20-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correct x coordinates</span></span>
<span id="cb20-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the x coordinates if the top-left x is greater than the bottom-right x</span></span>
<span id="cb20-7">    x_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb20-8">    x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb20-9">    </span>
<span id="cb20-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correct y coordinates</span></span>
<span id="cb20-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the y coordinates if the top-left y is greater than the bottom-right y</span></span>
<span id="cb20-12">    y_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb20-13">    y_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb20-14">    </span>
<span id="cb20-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the corrected bounding boxes array</span></span>
<span id="cb20-16">    corrected_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack([x_min, y_min, x_max, y_max], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-17">    </span>
<span id="cb20-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> corrected_bboxes</span></code></pre></div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>Finally, we will open a sample image and annotate it with it’s associated bounding boxes.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb21-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>]</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb21-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb21-8">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb21-9">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32).reshape(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb21-12">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb21-13">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb21-14">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BoundingBoxes(torchvision.ops.box_convert(torch.Tensor(bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]),</span>
<span id="cb21-15">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb21-16">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb21-17">)</span>
<span id="cb21-18"></span>
<span id="cb21-19">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_26_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset and visualized the annotations for a sample image. In the next section, we will explore the V2 Transforms class.</p>
</section>
</section>
</section>
<section id="examining-the-transforms-v2-class" class="level2">
<h2 class="anchored" data-anchor-id="examining-the-transforms-v2-class">Examining the Transforms V2 Class</h2>
<p>Our custom transforms will inherit from the <a href="https://github.com/pytorch/vision/blob/315f31527e720999eecbb986679b3177d4ed5e37/torchvision/transforms/v2/_transform.py#L17"><code>transforms.v2.Transform</code></a> class, so let’s look at the source code for that class first.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Transforms V2 Class Source Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Transforms V2 Class Source Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Transform(nn.Module):</span>
<span id="cb22-2"></span>
<span id="cb22-3"></span>
<span id="cb22-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Class attribute defining transformed types. Other types are passed-through without any transformation</span></span>
<span id="cb22-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We support both Types and callables that are able to do further checks on the type of the input.</span></span>
<span id="cb22-6">    _transformed_types: Tuple[Union[Type, Callable[[Any], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>]], ...] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (torch.Tensor, PIL.Image.Image)</span>
<span id="cb22-7">    </span>
<span id="cb22-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb22-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb22-10">        _log_api_usage_once(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb22-11">    </span>
<span id="cb22-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _check_inputs(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, flat_inputs: List[Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb22-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb22-14">    </span>
<span id="cb22-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _get_params(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, flat_inputs: List[Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]:</span>
<span id="cb22-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb22-17">    </span>
<span id="cb22-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _call_kernel(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, functional: Callable, inpt: Any, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args: Any, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs: Any) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb22-19">        kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _get_kernel(functional, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(inpt), allow_passthrough<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb22-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> kernel(inpt, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb22-21">    </span>
<span id="cb22-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _transform(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Any, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb22-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NotImplementedError</span></span>
<span id="cb22-24">    </span>
<span id="cb22-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>inputs: Any) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb22-26">        flat_inputs, spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tree_flatten(inputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(inputs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> inputs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb22-27">    </span>
<span id="cb22-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._check_inputs(flat_inputs)</span>
<span id="cb22-29">    </span>
<span id="cb22-30">        needs_transform_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._needs_transform_list(flat_inputs)</span>
<span id="cb22-31">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._get_params(</span>
<span id="cb22-32">            [inpt <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (inpt, needs_transform) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(flat_inputs, needs_transform_list) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> needs_transform]</span>
<span id="cb22-33">        )</span>
<span id="cb22-34">    </span>
<span id="cb22-35">        flat_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb22-36">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform(inpt, params) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> needs_transform <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> inpt</span>
<span id="cb22-37">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (inpt, needs_transform) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(flat_inputs, needs_transform_list)</span>
<span id="cb22-38">        ]</span>
<span id="cb22-39">    </span>
<span id="cb22-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tree_unflatten(flat_outputs, spec)</span>
<span id="cb22-41">    </span>
<span id="cb22-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _needs_transform_list(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, flat_inputs: List[Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>]:</span>
<span id="cb22-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Below is a heuristic on how to deal with pure tensor inputs:</span></span>
<span id="cb22-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Pure tensors, i.e. tensors that are not a tv_tensor, are passed through if there is an explicit image</span></span>
<span id="cb22-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    (`tv_tensors.Image` or `PIL.Image.Image`) or video (`tv_tensors.Video`) in the sample.</span></span>
<span id="cb22-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. If there is no explicit image or video in the sample, only the first encountered pure tensor is</span></span>
<span id="cb22-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    transformed as image, while the rest is passed through. The order is defined by the returned `flat_inputs`</span></span>
<span id="cb22-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    of `tree_flatten`, which recurses depth-first through the input.</span></span>
<span id="cb22-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb22-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This heuristic stems from two requirements:</span></span>
<span id="cb22-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. We need to keep BC for single input pure tensors and treat them as images.</span></span>
<span id="cb22-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. We don't want to treat all pure tensors as images, because some datasets like `CelebA` or `Widerface`</span></span>
<span id="cb22-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    return supplemental numerical data as tensors that cannot be transformed as images.</span></span>
<span id="cb22-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb22-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The heuristic should work well for most people in practice. The only case where it doesn't is if someone</span></span>
<span id="cb22-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tries to transform multiple pure tensors at the same time, expecting them all to be treated as images.</span></span>
<span id="cb22-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># However, this case wasn't supported by transforms v1 either, so there is no BC concern.</span></span>
<span id="cb22-58">    </span>
<span id="cb22-59">        needs_transform_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb22-60">        transform_pure_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> has_any(flat_inputs, tv_tensors.Image, tv_tensors.Video, PIL.Image.Image)</span>
<span id="cb22-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> inpt <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> flat_inputs:</span>
<span id="cb22-62">            needs_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb22-63">    </span>
<span id="cb22-64">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> check_type(inpt, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transformed_types):</span>
<span id="cb22-65">                needs_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb22-66">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> is_pure_tensor(inpt):</span>
<span id="cb22-67">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> transform_pure_tensor:</span>
<span id="cb22-68">                    transform_pure_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb22-69">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb22-70">                    needs_transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb22-71">            needs_transform_list.append(needs_transform)</span>
<span id="cb22-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> needs_transform_list</span>
<span id="cb22-73">    </span>
<span id="cb22-74">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> extra_repr(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb22-75">        extra <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb22-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__dict__.items():</span>
<span id="cb22-77">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"training"</span>:</span>
<span id="cb22-78">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb22-79">    </span>
<span id="cb22-80">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(value, (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>, enum.Enum)):</span>
<span id="cb22-81">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span>
<span id="cb22-82">    </span>
<span id="cb22-83">            extra.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb22-84">    </span>
<span id="cb22-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span>.join(extra)</span>
<span id="cb22-86">    </span>
<span id="cb22-87">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This attribute should be set on all transforms that have a v1 equivalent. Doing so enables two things:</span></span>
<span id="cb22-88">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. In case the v1 transform has a static `get_params` method, it will also be available under the same name on</span></span>
<span id="cb22-89">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    the v2 transform. See `__init_subclass__` for details.</span></span>
<span id="cb22-90">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. The v2 transform will be JIT scriptable. See `_extract_params_for_v1_transform` and `__prepare_scriptable__`</span></span>
<span id="cb22-91">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#    for details.</span></span>
<span id="cb22-92">    _v1_transform_cls: Optional[Type[nn.Module]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb22-93">    </span>
<span id="cb22-94">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init_subclass__</span>(cls) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb22-95">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Since `get_params` is a `@staticmethod`, we have to bind it to the class itself rather than to an instance.</span></span>
<span id="cb22-96">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This method is called after subclassing has happened, i.e. `cls` is the subclass, e.g. `Resize`.</span></span>
<span id="cb22-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> cls._v1_transform_cls <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hasattr</span>(cls._v1_transform_cls, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"get_params"</span>):</span>
<span id="cb22-98">            cls.get_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">staticmethod</span>(cls._v1_transform_cls.get_params)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># type: ignore[attr-defined]</span></span>
<span id="cb22-99">    </span>
<span id="cb22-100">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _extract_params_for_v1_transform(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]:</span>
<span id="cb22-101">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This method is called by `__prepare_scriptable__` to instantiate the equivalent v1 transform from the current</span></span>
<span id="cb22-102">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># v2 transform instance. It extracts all available public attributes that are specific to that transform and</span></span>
<span id="cb22-103">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># not `nn.Module` in general.</span></span>
<span id="cb22-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Overwrite this method on the v2 transform class if the above is not sufficient. For example, this might happen</span></span>
<span id="cb22-105">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># if the v2 transform introduced new parameters that are not support by the v1 transform.</span></span>
<span id="cb22-106">        common_attrs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Module().__dict__.keys()</span>
<span id="cb22-107">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb22-108">            attr: value</span>
<span id="cb22-109">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> attr, value <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.__dict__.items()</span>
<span id="cb22-110">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> attr.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> attr <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> common_attrs</span>
<span id="cb22-111">        }</span>
<span id="cb22-112">    </span>
<span id="cb22-113">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> __prepare_scriptable__(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> nn.Module:</span>
<span id="cb22-114">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This method is called early on when `torch.jit.script`'ing an `nn.Module` instance. If it succeeds, the return</span></span>
<span id="cb22-115">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># value is used for scripting over the original object that should have been scripted. Since the v1 transforms</span></span>
<span id="cb22-116">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># are JIT scriptable, and we made sure that for single image inputs v1 and v2 are equivalent, we just return the</span></span>
<span id="cb22-117">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># equivalent v1 transform here. This of course only makes transforms v2 JIT scriptable as long as transforms v1</span></span>
<span id="cb22-118">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is around.</span></span>
<span id="cb22-119">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._v1_transform_cls <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb22-120">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(</span>
<span id="cb22-121">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Transform </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> cannot be JIT scripted. "</span></span>
<span id="cb22-122">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"torchscript is only supported for backward compatibility with transforms "</span></span>
<span id="cb22-123">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which are already in torchvision.transforms. "</span></span>
<span id="cb22-124">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"For torchscript support (on tensors only), you can use the functional API instead."</span></span>
<span id="cb22-125">            )</span>
<span id="cb22-126">    </span>
<span id="cb22-127">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._v1_transform_cls(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._extract_params_for_v1_transform())</span></code></pre></div>
</div>
</div>
</div>
<p>The above source code indicates that our custom transforms must implement the <code>_transform</code> method, which handles images and annotations.</p>
</section>
<section id="creating-a-random-pixel-copy-transform" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-random-pixel-copy-transform">Creating a Random Pixel Copy Transform</h2>
<p>Our first custom transform will randomly copy and paste pixels in random locations. This one will not require updating the associated image annotations.</p>
<section id="define-the-custom-transform-class" class="level3">
<h3 class="anchored" data-anchor-id="define-the-custom-transform-class">Define the Custom Transform Class</h3>
<p>We can use Python’s <a href="https://docs.python.org/3/library/functools.html#functools.singledispatchmethod"><code>singledispatchmethod</code></a> decorator to overload the <code>_transform</code> method based on the first (non-<em>self</em> or non-<em>cls)</em> argument’s type.</p>
<p>We will implement different versions to handle PIL Images, PyTorch Tensors, and torchvision’s <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.Image.html"><code>tv_tensor.Image</code></a> class as image input types and to return annotations such as BoundingBoxes and Mask instances unaltered.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RandomPixelCopy(transforms.Transform):</span>
<span id="cb23-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A torchvision V2 transform that copies data from a randomly selected set of pixels to another </span></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    randomly selected set of pixels of a image tensor.</span></span>
<span id="cb23-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb23-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb23-7">                 min_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0025</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The minimum percentage of the tensor's pixels to be copied.</span></span>
<span id="cb23-8">                 max_pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The maximum percentage of the tensor's pixels to be copied.</span></span>
<span id="cb23-9">                ):</span>
<span id="cb23-10">        </span>
<span id="cb23-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb23-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_pct</span>
<span id="cb23-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_pct</span>
<span id="cb23-14"></span>
<span id="cb23-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rand_pixel_copy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, </span>
<span id="cb23-16">                        img_tensor:torch.Tensor, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The input image tensor.</span></span>
<span id="cb23-17">                        pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The percentage of the total number of pixels to be selected as the source and target sets of pixels.</span></span>
<span id="cb23-18">                       ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor : <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The modified input image tensor.</span></span>
<span id="cb23-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb23-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Copy data from a randomly selected set of pixels to another randomly selected set of pixels of a image tensor.</span></span>
<span id="cb23-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb23-22">        </span>
<span id="cb23-23">        src_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.dim()</span>
<span id="cb23-24">        </span>
<span id="cb23-25">        img_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> src_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> img_tensor</span>
<span id="cb23-26">        </span>
<span id="cb23-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the shape of the img_tensor</span></span>
<span id="cb23-28">        b, c, h, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.shape</span>
<span id="cb23-29">        </span>
<span id="cb23-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the number of pixels to be selected</span></span>
<span id="cb23-31">        num_pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(img_tensor[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:].numel() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pct)</span>
<span id="cb23-32">        </span>
<span id="cb23-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the source pixel indices</span></span>
<span id="cb23-34">        source_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.LongTensor(num_pixels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).random_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb23-35">        source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> w</span>
<span id="cb23-36">        source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> w</span>
<span id="cb23-37">        </span>
<span id="cb23-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select the target pixel indices</span></span>
<span id="cb23-39">        target_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.LongTensor(num_pixels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).random_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb23-40">        target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> w</span>
<span id="cb23-41">        target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> w</span>
<span id="cb23-42">        </span>
<span id="cb23-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the indices of the channels</span></span>
<span id="cb23-44">        c_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(c).repeat(num_pixels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).t()</span>
<span id="cb23-45">        </span>
<span id="cb23-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy the pixels</span></span>
<span id="cb23-47">        source_pixels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor[:, c_indices, source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], source_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]</span>
<span id="cb23-48">        img_tensor[:, c_indices, target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], target_indices[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> source_pixels</span>
<span id="cb23-49">        </span>
<span id="cb23-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> img_tensor.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> src_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> img_tensor</span>
<span id="cb23-51"></span>
<span id="cb23-52">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@singledispatchmethod</span></span>
<span id="cb23-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _transform(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Any, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb23-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Default Behavior: Don't modify the input"""</span></span>
<span id="cb23-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span>
<span id="cb23-56"></span>
<span id="cb23-57">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(torch.Tensor)</span>
<span id="cb23-58">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(tv_tensors.Image)</span>
<span id="cb23-59">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Union[torch.Tensor, tv_tensors.Image], params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb23-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Apply the `rand_pixel_copy` method to the input tensor"""</span></span>
<span id="cb23-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rand_pixel_copy(inpt, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_pct, random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_pct))</span>
<span id="cb23-62"></span>
<span id="cb23-63">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(Image.Image)</span>
<span id="cb23-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Image.Image, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb23-65">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Convert the PIL Image to a torch.Tensor to apply the transform"""</span></span>
<span id="cb23-66">        inpt_torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(inpt)</span>
<span id="cb23-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> transforms.ToPILImage()(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform(inpt_torch, params))</span>
<span id="cb23-68"></span>
<span id="cb23-69">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(BoundingBoxes)</span>
<span id="cb23-70">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(Mask)</span>
<span id="cb23-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Union[BoundingBoxes, Mask], params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb23-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Don't modify image annotations"""</span></span>
<span id="cb23-73">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span></code></pre></div>
<p>With our custom transform defined, we can create an instance of it and try it out.</p>
</section>
<section id="initialize-the-transform" class="level3">
<h3 class="anchored" data-anchor-id="initialize-the-transform">Initialize the Transform</h3>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomPixelCopy object</span></span>
<span id="cb24-2">rand_pixel_copy_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomPixelCopy(max_pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span></code></pre></div>
</section>
<section id="prepare-the-annotation-targets" class="level3">
<h3 class="anchored" data-anchor-id="prepare-the-annotation-targets">Prepare the Annotation Targets</h3>
<p>The V2 image transforms take an image and a <code>targets</code> dictionary as input. The dictionary contains the annotations and labels for the image.</p>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb25-2">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb25-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torch.Tensor(bboxes), </span>
<span id="cb25-4">                           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb25-5">                           canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb25-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb25-7">}</span></code></pre></div>
</section>
<section id="apply-the-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="apply-the-augmentation">Apply the Augmentation</h3>
<p>Now, we can see how our sample image looks after applying the augmentation.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-3-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-1" aria-controls="tabset-3-1" aria-selected="true">PIL.Image</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-2" aria-controls="tabset-3-2" aria-selected="false">torch.Tensor</a></li><li class="nav-item"><a class="nav-link" id="tabset-3-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-3-3" aria-controls="tabset-3-3" aria-selected="false">tv_tensor.Image</a></li></ul>
<div class="tab-content">
<div id="tabset-3-1" class="tab-pane active" aria-labelledby="tabset-3-1-tab">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb26-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_pixel_copy_tfm(sample_img, targets)</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb26-5">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb26-6">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(augmented_img), </span>
<span id="cb26-7">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb26-8">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb26-9">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb26-10">)</span>
<span id="cb26-11"></span>
<span id="cb26-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb26-13">transforms.ToPILImage()(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_37_0.png" class="img-fluid"></p>
</div>
<div id="tabset-3-2" class="tab-pane" aria-labelledby="tabset-3-2-tab">
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb27-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_pixel_copy_tfm(transforms.PILToTensor()(sample_img), targets)</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb27-5">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb27-6">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_img, </span>
<span id="cb27-7">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb27-8">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb27-9">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb27-10">)</span>
<span id="cb27-11"></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb27-13">transforms.ToPILImage()(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_39_0.png" class="img-fluid"></p>
</div>
<div id="tabset-3-3" class="tab-pane" aria-labelledby="tabset-3-3-tab">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb28-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_pixel_copy_tfm(transforms.ToImage()(sample_img), targets)</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb28-5">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb28-6">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_img, </span>
<span id="cb28-7">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb28-8">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb28-9">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> augmented_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb28-10">)</span>
<span id="cb28-11"></span>
<span id="cb28-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb28-13">transforms.ToPILImage()(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_41_0.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>As intended, the transform randomly copy-pasted pixel values while leaving the bounding box annotations unchanged. In the next section, we will create a transform that requires us to update the bounding box annotations with the image.</p>
</section>
</section>
<section id="creating-a-random-patch-copy-transform" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-random-patch-copy-transform">Creating a Random Patch Copy Transform</h2>
<p>Our second transform will randomly copy rectangular patches from the image and paste them in random locations. This transform may potentially occlude annotated areas, so we need to manage the associated bounding box annotations accordingly.</p>
<section id="define-the-custom-transform-class-1" class="level3">
<h3 class="anchored" data-anchor-id="define-the-custom-transform-class-1">Define the Custom Transform Class</h3>
<p>To determine if any copy-pasted patches occlude an annotated area, we will keep track of the patches for the current image and check how much they overlap with the bounding box annotations.</p>
<p>If the patches overlap a given bounding box by a certain threshold, we will set the dimensions for that bounding box to <code>0</code> so the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform removes it. The <code>SanitizeBoundingBoxes</code> transform would also remove a segmentation mask associated with the bounding box.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RandomPatchCopy(transforms.Transform):</span>
<span id="cb29-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A torchvision V2 transform that copies data from a randomly selected rectangular patch</span></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to another randomly selected rectangular region of an image tensor multiple times.</span></span>
<span id="cb29-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb29-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, </span>
<span id="cb29-7">                 pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The percentage of the tensor's size to be used as the side length of the square regions.</span></span>
<span id="cb29-8">                 min_num:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The minimum number of times to apply the `rand_square_copy` function.</span></span>
<span id="cb29-9">                 max_num:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The maximum number of times to apply the `rand_square_copy` function.</span></span>
<span id="cb29-10">                 iou_thresh:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The IoU threshold for bounding box suppression.</span></span>
<span id="cb29-11">                ):</span>
<span id="cb29-12">        </span>
<span id="cb29-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb29-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pct</span>
<span id="cb29-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_num</span>
<span id="cb29-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_num</span>
<span id="cb29-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.iou_thresh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_thresh</span>
<span id="cb29-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.patches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb29-19"></span>
<span id="cb29-20"></span>
<span id="cb29-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> calculate_iou_multi(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb29-22">                            boxes1:torch.Tensor, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># An array of bounding boxes in [x1, y1, x2, y2] format.</span></span>
<span id="cb29-23">                            boxes2:torch.Tensor <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Another array of bounding boxes in [x1, y1, x2, y2] format.</span></span>
<span id="cb29-24">                           ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A 2D array where element (i, j) is the IoU of boxes1[i] and boxes2[j].</span></span>
<span id="cb29-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb29-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Calculate the Intersection over Union (IoU) for each combination of bounding boxes in two arrays</span></span>
<span id="cb29-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        using PyTorch broadcasting.</span></span>
<span id="cb29-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb29-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expand boxes1 and boxes2 for broadcasting</span></span>
<span id="cb29-30">        boxes1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxes1[:, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :]</span>
<span id="cb29-31">        boxes2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxes2[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, :, :]</span>
<span id="cb29-32">    </span>
<span id="cb29-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate intersection coordinates</span></span>
<span id="cb29-34">        int_x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb29-35">        int_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb29-36">        int_x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb29-37">        int_y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb29-38">    </span>
<span id="cb29-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate intersection and union areas</span></span>
<span id="cb29-40">        int_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.clamp(int_x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> int_x1, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.clamp(int_y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> int_y1, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb29-41">        box1_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> boxes1[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb29-42">        box2_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> boxes2[..., <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb29-43">        union_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> box1_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> box2_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> int_area</span>
<span id="cb29-44">    </span>
<span id="cb29-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate IoU</span></span>
<span id="cb29-46">        iou <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> int_area <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> torch.clamp(union_area, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span>)</span>
<span id="cb29-47">    </span>
<span id="cb29-48">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> iou</span>
<span id="cb29-49">    </span>
<span id="cb29-50"></span>
<span id="cb29-51">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rand_patch_copy(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, </span>
<span id="cb29-52">                        img_tensor:torch.Tensor, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The input image tensor.</span></span>
<span id="cb29-53">                        pct:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # The percentage of the image tensor's size to be used as the side length of the patch.</span></span>
<span id="cb29-54">                       ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> (torch.Tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The modified input image tensor and coordinates of the target patch in the format [x, y, w, h].</span></span>
<span id="cb29-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb29-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Copy data from a randomly selected rectangular patch to another randomly selected </span></span>
<span id="cb29-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        rectangular region of an image tensor, and return the coordinates of the target patch.</span></span>
<span id="cb29-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Assumes the tensor is in 'channels-first' format.</span></span>
<span id="cb29-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb29-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb29-61">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pct must be between 0 and 1"</span>)</span>
<span id="cb29-62">    </span>
<span id="cb29-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the shape of the tensor</span></span>
<span id="cb29-64">        _, h, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor.shape</span>
<span id="cb29-65">    </span>
<span id="cb29-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the size of the rectangle</span></span>
<span id="cb29-67">        szx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> w)</span>
<span id="cb29-68">        szy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(pct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> h)</span>
<span id="cb29-69">    </span>
<span id="cb29-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the top-left coordinate of the source rectangle</span></span>
<span id="cb29-71">        sty1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> szx)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-coordinate</span></span>
<span id="cb29-72">        stx1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> szy)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y-coordinate</span></span>
<span id="cb29-73">    </span>
<span id="cb29-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the top-left coordinate of the target rectangle</span></span>
<span id="cb29-75">        sty2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> szx)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x-coordinate</span></span>
<span id="cb29-76">        stx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, h <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> szy)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y-coordinate</span></span>
<span id="cb29-77">    </span>
<span id="cb29-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy the data from the source square to the target rectangle</span></span>
<span id="cb29-79">        img_tensor[:, stx2:stx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szy, sty2:sty2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_tensor[:, stx1:stx1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szy, sty1:sty1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szx]</span>
<span id="cb29-80">    </span>
<span id="cb29-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The coordinates of the target patch</span></span>
<span id="cb29-82">        target_patch_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sty2, stx2, sty2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szx, stx2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> szy]</span>
<span id="cb29-83">    </span>
<span id="cb29-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> img_tensor, target_patch_coords</span>
<span id="cb29-85"></span>
<span id="cb29-86"></span>
<span id="cb29-87">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@singledispatchmethod</span></span>
<span id="cb29-88">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _transform(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Any, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb29-89">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Default Behavior: Don't modify the input"""</span></span>
<span id="cb29-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span>
<span id="cb29-91"></span>
<span id="cb29-92">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(torch.Tensor)</span>
<span id="cb29-93">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(tv_tensors.Image)</span>
<span id="cb29-94">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Union[torch.Tensor, tv_tensors.Image], params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb29-95">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.patches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb29-96">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Apply the `rand_square_copy` function to the input tensor multiple times"""</span></span>
<span id="cb29-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(random.randint(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.min_num, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_num)):</span>
<span id="cb29-98">            inpt, patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rand_patch_copy(inpt, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,random.random()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pct))</span>
<span id="cb29-99">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.patches.append(patch)</span>
<span id="cb29-100">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span>
<span id="cb29-101"></span>
<span id="cb29-102">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(Image.Image)</span>
<span id="cb29-103">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Image.Image, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb29-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Convert the PIL Image to a torch.Tensor to apply the transform"""</span></span>
<span id="cb29-105">        inpt_torch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.PILToTensor()(inpt)    </span>
<span id="cb29-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> transforms.ToPILImage()(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transform(inpt_torch, params))</span>
<span id="cb29-107">    </span>
<span id="cb29-108">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(BoundingBoxes)</span>
<span id="cb29-109">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: BoundingBoxes, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb29-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Update the bounding box annotations based on the list of patches"""</span></span>
<span id="cb29-111">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.patches) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb29-112">            iou_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.calculate_iou_multi(inpt, torch.tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.patches, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32))</span>
<span id="cb29-113">            </span>
<span id="cb29-114">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sum the IoU values for each box in boxes1</span></span>
<span id="cb29-115">            cumulative_iou <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(iou_matrix, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-116">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mask based on the cumulative IoU threshold</span></span>
<span id="cb29-117">            mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cumulative_iou <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.iou_thresh</span>
<span id="cb29-118">            inpt_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.clone(inpt)</span>
<span id="cb29-119">            inpt_copy[mask] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb29-120">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> tv_wrap(inpt_copy, like<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>inpt)</span>
<span id="cb29-121">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span>
<span id="cb29-122"></span>
<span id="cb29-123">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@_transform.register</span>(Mask)</span>
<span id="cb29-124">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inpt: Mask, params: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Any:</span>
<span id="cb29-125">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Don't modify segmentation annotations"""</span></span>
<span id="cb29-126">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inpt</span></code></pre></div>
<p>Now, let’s see how our sample image and its bounding box annotations look with this transform.</p>
</section>
<section id="initialize-the-transform-1" class="level3">
<h3 class="anchored" data-anchor-id="initialize-the-transform-1">Initialize the Transform</h3>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomPatchCopy object</span></span>
<span id="cb30-2">rand_patch_copy_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomPatchCopy(pct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, min_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, max_num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</section>
<section id="apply-the-augmentation-1" class="level3">
<h3 class="anchored" data-anchor-id="apply-the-augmentation-1">Apply the Augmentation</h3>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-4-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-1" aria-controls="tabset-4-1" aria-selected="true">PIL.Image</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-2" aria-controls="tabset-4-2" aria-selected="false">torch.Tensor</a></li><li class="nav-item"><a class="nav-link" id="tabset-4-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-4-3" aria-controls="tabset-4-3" aria-selected="false">tv_tensor.Image</a></li></ul>
<div class="tab-content">
<div id="tabset-4-1" class="tab-pane active" aria-labelledby="tabset-4-1-tab">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb31-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_patch_copy_tfm(sample_img, targets)</span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove degenerate/invalid bounding boxes and their corresponding labels and masks.</span></span>
<span id="cb31-4">sanitized_img, sanitized_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(augmented_img, augmented_targets)</span>
<span id="cb31-5"></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb31-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb31-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb31-9">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb31-10">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb31-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb31-12">)</span>
<span id="cb31-13"></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb31-15">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_53_0.png" class="img-fluid"></p>
</div>
<div id="tabset-4-2" class="tab-pane" aria-labelledby="tabset-4-2-tab">
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb32-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_patch_copy_tfm(transforms.PILToTensor()(sample_img), targets)</span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove degenerate/invalid bounding boxes and their corresponding labels and masks.</span></span>
<span id="cb32-4">sanitized_img, sanitized_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(augmented_img, augmented_targets)</span>
<span id="cb32-5"></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb32-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb32-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_img, </span>
<span id="cb32-9">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb32-10">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb32-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb32-12">)</span>
<span id="cb32-13"></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb32-15">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_55_0.png" class="img-fluid"></p>
</div>
<div id="tabset-4-3" class="tab-pane" aria-labelledby="tabset-4-3-tab">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feed sample image and targets through the image transform</span></span>
<span id="cb33-2">augmented_img, augmented_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rand_patch_copy_tfm(transforms.ToImage()(sample_img), targets)</span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove degenerate/invalid bounding boxes and their corresponding labels and masks.</span></span>
<span id="cb33-4">sanitized_img, sanitized_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(augmented_img, augmented_targets)</span>
<span id="cb33-5"></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb33-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb33-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_img, </span>
<span id="cb33-9">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb33-10">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb33-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i)] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb33-12">)</span>
<span id="cb33-13"></span>
<span id="cb33-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the augmented image</span></span>
<span id="cb33-15">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<p><img src="christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/images/output_57_0.png" class="img-fluid"></p>
</div>
</div>
</div>
<p>Here, we can see some of the patches overlapped with one of the annotated areas too much, and the <code>SanitizeBoundingBoxes</code> transform removed the relevant bounding box.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we created custom V2 image transforms in torchvision that support bounding box annotations. The knowledge acquired here provides a solid foundation for making other custom transforms.</p>
<p>As a next step, perhaps try experimenting with the transforms created here to see how they impact training performance in one of the following tutorials:</p>
<ul>
<li><a href="../../posts/pytorch-train-image-classifier-timm-hf-tutorial/">Fine-Tuning Image Classifiers with PyTorch and the timm library for Beginners</a></li>
<li><a href="../../posts/pytorch-train-object-detector-yolox-tutorial/">Training YOLOX Models for Real-Time Object Detection in PyTorch</a></li>
<li><a href="../../posts/pytorch-train-mask-rcnn-tutorial/">Training Mask R-CNN Models with PyTorch</a></li>
</ul>
<p>See how adjusting the intensity of the data augmentations impacts the model accuracy on new data.</p>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>object-detection</category>
  <category>instance-segmentation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-custom-v2-transform-tutorial/</guid>
  <pubDate>Tue, 23 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with LabelMe Segmentation Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with segmentation annotations created with the <a href="https://github.com/labelmeai/labelme">LabelMe annotation tool</a> in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Segmentation annotations indicate the pixels occupied by specific objects or areas of interest in images for training models to recognize and delineate these objects at a pixel level.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/segmentation-mask-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with bounding box annotations made with LabelMe for instance segmentation tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-segmentation-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-segmentation-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-24">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-32"></span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-34"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-35">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes, Mask</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes, draw_segmentation_masks</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. The TVTensor class for segmentation annotations is called <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.Mask.html">Mask</a>. Torchvision also includes a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_segmentation_masks.html">draw_segmentation_masks</a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with segmentation masks for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/labelme-instance-segmentation-toy-dataset/tree/main">labelme-instance-segmentation-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_ee114">
<thead>
</thead>
<tbody>
<tr>
<th id="T_ee114_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_ee114_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_ee114_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_ee114_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labelme-instance-segmentation-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_a4f39">
<thead>
</thead>
<tbody>
<tr>
<th id="T_a4f39_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_a4f39_row0_col0" class="data row0 col0">
cj-mills/labelme-instance-segmentation-toy-dataset
</td>
</tr>
<tr>
<th id="T_a4f39_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_a4f39_row1_col0" class="data row1 col0">
Datasets/../Archive/labelme-instance-segmentation-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_a4f39_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_a4f39_row2_col0" class="data row2 col0">
Datasets/labelme-instance-segmentation-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-image-and-annotation-files" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-image-and-annotation-files">Getting the Image and Annotation Files</h3>
<p>The dataset folder contains sample images and annotation files. Each sample image has its own JSON annotation file.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the dataset</span></span>
<span id="cb13-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_img_files(dataset_path)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of JSON files in the dataset</span></span>
<span id="cb13-5">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the names of the folders using a Pandas DataFrame</span></span>
<span id="cb13-8">pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image File"</span>: [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths], </span>
<span id="cb13-9">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>:[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_file_paths]}).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image File
</th>
<th>
Annotation File
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
258421.jpg
</td>
<td>
258421.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
3075367.jpg
</td>
<td>
3075367.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3076319.jpg
</td>
<td>
3076319.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3145551.jpg
</td>
<td>
3145551.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3176048.jpg
</td>
<td>
3176048.json
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths}</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-8">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre><code>Number of Images: 31</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
Datasets/labelme-instance-segmentation-toy-dataset/258421.jpg
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
Datasets/labelme-instance-segmentation-toy-dataset/3075367.jpg
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
Datasets/labelme-instance-segmentation-toy-dataset/3076319.jpg
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
Datasets/labelme-instance-segmentation-toy-dataset/3145551.jpg
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
Datasets/labelme-instance-segmentation-toy-dataset/3176048.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of each JSON annotation file into a single Pandas DataFrame so we can easily query the annotations.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb16-2">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb16-5">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb16-8">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-9">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb16-10"></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb16-12">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb16-15">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[404.0, 775.5], [396.5, 766.0], [411.5, 753.0], [411.5, 738.0], [416.5, 731.0], [412.5, 598.0], [419.5, 559.0], [416.0, 554.5], [404.0, 566.5], [387.0, 572.5], [375.5, 566.0], [377.5, 554.0], [405.5, 529.0], [413.5, 504.0], [414.5, 493.0], [386.5, 463.0], [388.5, 453.0], [399.0, 443.5], [413.0, 444.5], [423.5, 453.0], [457.5, 506.0], [452.5, 575.0], [458.5, 607.0], [447.5, 635.0], [444.5, 676.0], [452.5, 764.0], [443.0, 770.5]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[377.0, 775.5], [368.0, 774.5], [346.5, 764.0], [349.5, 751.0], [348.5, 707.0], [358.5, 668.0], [343.5, 651.0], [359.5, 605.0], [379.5, 583.0], [366.00692041522484, 583.3910034602076], [362.5467128027681, 575.7785467128027], [361.85467128027676, 565.3979238754325], [353.2041522491349, 557.0934256055363], [357.7024221453287, 547.4048442906574], [350.7820069204152, 532.5259515570934], [356.31833910034595, 520.7612456747405], [359.7785467128027, 481.31487889273353], [376.3875432525951, 467.47404844290656], [387.4602076124567, 469.5501730103806], [401.3010380622837, 484.08304498269894], [405.79930795847747, 501.038062283737], [394.03460207612454, 505.88235294117646], [394.72664359861585, 519.0311418685121], [399.916955017301, 531.1418685121107], [374.6574394463667, 554.3252595155709], [369.81314878892726, 571.280276816609], [374.31141868512105, 574.0484429065743], [388.152249134948, 574.39446366782], [397.49480968858126, 569.8961937716263], [402.5, 578.0], [410.5, 594.0], [412.5, 668.0], [387.0, 667.5], [375.5, 692.0], [376.5, 738.0], [380.5, 753.0], [388.5, 764.0], [386.5, 772.0]], ‘group_id’: None, ‘description’: None, ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
258421.jpg
</td>
<td>
None
</td>
<td>
1152
</td>
<td>
768
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[714.0, 766.5], [664.0, 765.5], [654.0, 716.5], [640.0, 765.5], [578.5, 764.0], [578.5, 599.0], [570.5, 587.0], [592.5, 403.0], [583.5, 339.0], [525.5, 278.0], [463.5, 187.0], [423.5, 98.0], [422.5, 72.0], [444.0, 52.5], [460.5, 62.0], [458.5, 104.0], [485.5, 166.0], [581.0, 270.5], [623.0, 295.5], [644.5, 293.0], [630.5, 261.0], [642.5, 193.0], [667.0, 182.5], [707.0, 191.5], [719.5, 249.0], [709.0, 307.5], [774.0, 271.5], [848.5, 176.0], [875.5, 108.0], [867.5, 55.0], [902.0, 63.5], [908.5, 76.0], [902.5, 134.0], [858.5, 233.0], [759.5, 350.0], [736.5, 495.0], [752.5, 614.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[829.0, 466.5], [825.5, 464.0], [824.5, 455.0], [825.5, 425.0], [828.0, 419.5], [833.5, 418.0], [827.5, 417.0], [822.5, 396.0], [825.5, 327.0], [843.5, 313.0], [842.5, 296.0], [833.5, 291.0], [832.5, 270.0], [837.0, 265.5], [856.0, 264.5], [868.5, 277.0], [870.5, 306.0], [881.5, 318.0], [883.5, 329.0], [893.0, 332.5], [899.5, 340.0], [901.5, 367.0], [883.5, 382.0], [849.5, 443.0], [842.5, 448.0], [838.5, 460.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[359.0, 509.5], [355.0, 509.5], [350.5, 502.0], [353.5, 486.0], [349.5, 475.0], [349.5, 449.0], [345.5, 430.0], [339.5, 419.0], [337.5, 394.0], [327.5, 378.0], [331.5, 371.0], [332.5, 357.0], [342.5, 345.0], [345.5, 327.0], [354.0, 313.5], [365.5, 317.0], [366.5, 339.0], [385.0, 350.5], [399.5, 371.0], [398.5, 383.0], [390.0, 391.5], [390.5, 378.0], [383.0, 369.5], [379.5, 370.0], [380.5, 441.0], [376.5, 471.0], [370.0, 464.5], [364.5, 472.0], [362.5, 482.0], [364.5, 504.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘car’, ‘points’: [[1343.0, 764.5], [964.0, 745.5], [930.0, 764.5], [914.5, 759.0], [904.0, 722.5], [865.0, 706.5], [848.0, 735.5], [801.0, 735.5], [788.5, 699.0], [792.5, 577.0], [821.5, 476.0], [849.5, 454.0], [890.5, 382.0], [930.0, 355.5], [1021.0, 347.5], [1195.0, 358.5], [1287.0, 378.5], [1343.0, 436.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
3075367.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1344
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[590.0, 1119.0], [508.5, 1119.0], [393.5, 881.0], [363.5, 778.0], [359.5, 738.0], [377.5, 685.0], [420.5, 660.0], [388.5, 650.0], [410.5, 606.0], [412.5, 477.0], [349.5, 383.0], [364.5, 338.0], [341.5, 303.0], [369.5, 313.0], [396.5, 191.0], [449.0, 157.5], [496.0, 169.5], [524.5, 203.0], [534.5, 320.0], [577.5, 380.0], [588.5, 493.0], [635.5, 554.0], [631.5, 567.0], [687.5, 625.0], [704.5, 673.0], [698.5, 743.0], [632.5, 833.0], [618.5, 955.0], [573.5, 1096.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[262.0, 1119.0], [128.5, 1119.0], [131.5, 1089.0], [35.5, 901.0], [11.5, 772.0], [33.5, 686.0], [70.5, 663.0], [34.5, 612.0], [25.5, 569.0], [52.5, 375.0], [97.0, 332.5], [195.5, 306.0], [205.5, 255.0], [192.5, 220.0], [240.0, 154.5], [290.0, 133.5], [323.5, 153.0], [341.5, 209.0], [332.5, 279.0], [294.5, 326.0], [347.5, 357.0], [352.5, 399.0], [400.5, 459.0], [404.5, 517.0], [391.5, 631.0], [344.5, 679.0], [359.5, 719.0], [323.5, 907.0], [224.5, 1082.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
3076319.jpg
</td>
<td>
None
</td>
<td>
1120
</td>
<td>
768
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[683.0, 398.5], [675.0, 398.5], [671.5, 396.0], [673.5, 378.0], [669.5, 366.0], [669.5, 359.0], [664.5, 346.0], [663.5, 326.0], [661.5, 320.0], [661.5, 312.0], [666.5, 304.0], [662.5, 295.0], [666.0, 283.5], [673.0, 283.5], [674.5, 285.0], [676.5, 289.0], [676.5, 297.0], [681.5, 302.0], [685.5, 313.0], [686.5, 336.0], [683.5, 344.0], [685.5, 395.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[649.0, 398.5], [644.0, 398.5], [641.5, 396.0], [640.5, 387.0], [644.5, 379.0], [650.5, 358.0], [650.5, 351.0], [644.5, 335.0], [644.5, 323.0], [646.5, 316.0], [644.5, 300.0], [648.5, 291.0], [654.0, 288.5], [661.5, 295.0], [662.5, 298.0], [658.5, 309.0], [662.5, 316.0], [664.5, 324.0], [665.5, 349.0], [669.5, 364.0], [665.5, 383.0], [666.5, 396.0], [663.0, 397.5], [659.5, 392.0], [662.5, 375.0], [662.5, 364.0], [660.0, 361.5], [649.5, 383.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
3145551.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1184
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[661.0, 436.5], [659.5, 436.0], [660.5, 432.0], [660.5, 396.0], [659.5, 392.0], [663.5, 376.0], [661.0, 373.5], [658.0, 373.5], [650.0, 377.5], [641.0, 377.5], [640.5, 376.0], [647.0, 372.5], [651.0, 372.5], [656.0, 370.5], [666.0, 365.5], [667.5, 364.0], [667.5, 359.0], [670.0, 356.5], [674.0, 356.5], [677.5, 360.0], [676.5, 367.0], [682.5, 374.0], [683.5, 389.0], [681.0, 390.5], [678.5, 388.0], [678.5, 385.0], [677.5, 385.0], [677.5, 390.0], [673.5, 395.0], [673.5, 408.0], [671.5, 411.0], [670.5, 420.0], [668.5, 425.0], [668.5, 433.0], [669.5, 434.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[562.0, 464.5], [552.0, 464.5], [550.5, 462.0], [553.5, 454.0], [550.5, 433.0], [558.5, 402.0], [558.5, 389.0], [561.5, 380.0], [557.0, 372.5], [549.0, 374.5], [537.0, 372.5], [533.0, 377.5], [532.5, 371.0], [529.5, 368.0], [542.0, 365.5], [551.0, 366.5], [562.0, 361.5], [567.0, 361.5], [568.5, 360.0], [567.5, 346.0], [572.0, 342.5], [577.0, 342.5], [582.5, 348.0], [581.5, 360.0], [591.5, 372.0], [593.5, 386.0], [592.0, 388.5], [587.0, 388.5], [585.5, 391.0], [578.5, 419.0], [572.5, 434.0], [571.5, 445.0], [566.5, 454.0], [565.5, 462.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
<td>
3176048.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The source JSON content corresponding to the first row in the DataFrame is available below:</p>
<div style="overflow-x:auto; max-height:500px">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5.3.1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{},</span></span>
<span id="cb17-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shapes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"points"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-8">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-9">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">404.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-10">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">775.5</span></span>
<span id="cb17-11">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-12">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-13">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">396.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-14">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">766.0</span></span>
<span id="cb17-15">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-16">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-17">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">411.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-18">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">753.0</span></span>
<span id="cb17-19">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-20">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-21">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">411.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-22">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">738.0</span></span>
<span id="cb17-23">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-24">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-25">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">416.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-26">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">731.0</span></span>
<span id="cb17-27">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-28">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-29">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">412.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-30">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">598.0</span></span>
<span id="cb17-31">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-32">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-33">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">419.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-34">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">559.0</span></span>
<span id="cb17-35">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-36">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-37">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">416.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-38">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">554.5</span></span>
<span id="cb17-39">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-40">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-41">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">404.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-42">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">566.5</span></span>
<span id="cb17-43">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-44">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-45">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">387.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-46">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">572.5</span></span>
<span id="cb17-47">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-48">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-49">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">375.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-50">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">566.0</span></span>
<span id="cb17-51">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-52">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-53">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">377.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-54">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">554.0</span></span>
<span id="cb17-55">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-56">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-57">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">405.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-58">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">529.0</span></span>
<span id="cb17-59">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-60">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-61">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">413.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-62">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">504.0</span></span>
<span id="cb17-63">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-64">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-65">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">414.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-66">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">493.0</span></span>
<span id="cb17-67">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-68">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-69">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">386.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-70">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">463.0</span></span>
<span id="cb17-71">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-72">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-73">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">388.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-74">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">453.0</span></span>
<span id="cb17-75">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-76">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-77">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">399.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-78">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">443.5</span></span>
<span id="cb17-79">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-80">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-81">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">413.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-82">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">444.5</span></span>
<span id="cb17-83">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-84">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-85">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">423.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-86">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">453.0</span></span>
<span id="cb17-87">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-88">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-89">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">457.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-90">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">506.0</span></span>
<span id="cb17-91">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-92">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-93">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">452.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-94">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">575.0</span></span>
<span id="cb17-95">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-96">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-97">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">458.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-98">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">607.0</span></span>
<span id="cb17-99">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-100">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-101">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">447.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-102">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">635.0</span></span>
<span id="cb17-103">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-104">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-105">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">444.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-106">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">676.0</span></span>
<span id="cb17-107">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-108">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-109">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">452.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-110">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">764.0</span></span>
<span id="cb17-111">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-112">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-113">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">443.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-114">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">770.5</span></span>
<span id="cb17-115">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-116">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-117">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"group_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-118">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-119">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shape_type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polygon"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-120">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb17-121">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-122">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-123">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-124">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"points"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-125">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-126">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">377.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-127">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">775.5</span></span>
<span id="cb17-128">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-129">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-130">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">368.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-131">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">774.5</span></span>
<span id="cb17-132">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-133">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-134">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">346.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-135">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">764.0</span></span>
<span id="cb17-136">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-137">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-138">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">349.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-139">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">751.0</span></span>
<span id="cb17-140">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-141">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-142">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">348.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-143">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">707.0</span></span>
<span id="cb17-144">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-145">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-146">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">358.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-147">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">668.0</span></span>
<span id="cb17-148">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-149">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-150">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">343.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-151">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">651.0</span></span>
<span id="cb17-152">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-153">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-154">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">359.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-155">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">605.0</span></span>
<span id="cb17-156">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-157">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-158">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">379.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-159">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">583.0</span></span>
<span id="cb17-160">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-161">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-162">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">366.00692041522484</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-163">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">583.3910034602076</span></span>
<span id="cb17-164">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-165">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-166">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">362.5467128027681</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-167">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">575.7785467128027</span></span>
<span id="cb17-168">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-169">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-170">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">361.85467128027676</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-171">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">565.3979238754325</span></span>
<span id="cb17-172">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-173">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-174">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">353.2041522491349</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-175">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">557.0934256055363</span></span>
<span id="cb17-176">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-177">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-178">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">357.7024221453287</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-179">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">547.4048442906574</span></span>
<span id="cb17-180">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-181">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-182">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">350.7820069204152</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-183">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">532.5259515570934</span></span>
<span id="cb17-184">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-185">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-186">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">356.31833910034595</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-187">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">520.7612456747405</span></span>
<span id="cb17-188">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-189">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-190">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">359.7785467128027</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-191">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">481.31487889273353</span></span>
<span id="cb17-192">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-193">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-194">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">376.3875432525951</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-195">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">467.47404844290656</span></span>
<span id="cb17-196">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-197">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-198">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">387.4602076124567</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-199">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">469.5501730103806</span></span>
<span id="cb17-200">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-201">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-202">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">401.3010380622837</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-203">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">484.08304498269894</span></span>
<span id="cb17-204">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-205">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-206">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">405.79930795847747</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-207">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">501.038062283737</span></span>
<span id="cb17-208">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-209">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-210">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">394.03460207612454</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-211">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">505.88235294117646</span></span>
<span id="cb17-212">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-213">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-214">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">394.72664359861585</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-215">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">519.0311418685121</span></span>
<span id="cb17-216">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-217">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-218">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">399.916955017301</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-219">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">531.1418685121107</span></span>
<span id="cb17-220">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-221">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-222">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">374.6574394463667</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-223">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">554.3252595155709</span></span>
<span id="cb17-224">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-225">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-226">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">369.81314878892726</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-227">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">571.280276816609</span></span>
<span id="cb17-228">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-229">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-230">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">374.31141868512105</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-231">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">574.0484429065743</span></span>
<span id="cb17-232">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-233">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-234">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">388.152249134948</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-235">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">574.39446366782</span></span>
<span id="cb17-236">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-237">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-238">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">397.49480968858126</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-239">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">569.8961937716263</span></span>
<span id="cb17-240">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-241">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-242">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">402.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-243">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">578.0</span></span>
<span id="cb17-244">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-245">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-246">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">410.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-247">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">594.0</span></span>
<span id="cb17-248">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-249">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-250">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">412.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-251">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">668.0</span></span>
<span id="cb17-252">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-253">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-254">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">387.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-255">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">667.5</span></span>
<span id="cb17-256">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-257">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-258">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">375.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-259">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">692.0</span></span>
<span id="cb17-260">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-261">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-262">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">376.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-263">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">738.0</span></span>
<span id="cb17-264">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-265">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-266">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">380.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-267">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">753.0</span></span>
<span id="cb17-268">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-269">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-270">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">388.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-271">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">764.0</span></span>
<span id="cb17-272">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-273">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-274">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">386.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-275">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">772.0</span></span>
<span id="cb17-276">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-277">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-278">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"group_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-279">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-280">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shape_type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"polygon"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-281">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb17-282">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-283">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-284">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imagePath"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"258421.jpg"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-285">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageData"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-286">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageHeight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1152</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-287">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageWidth"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span></span>
<span id="cb17-288"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<hr>
<p>The segmentation polygon annotation are in <code>[[x1,y1], [x2,y2], ..., [xn,yn]]</code> format.</p>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step is not strictly necessary for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb18-4">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb18-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb18-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
person
</td>
</tr>
<tr>
<th>
1
</th>
<td>
car
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb19-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].value_counts()</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb19-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span>
<span id="cb19-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb19-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb19-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb19-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb19-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_21_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Note the class distribution is quite imbalanced between the <code>person</code> and <code>car</code> classes. For a real dataset, you would want these to be much closer.</p>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its segmentation masks and bounding boxes using torchvision’s <code>BoundingBoxes</code> and <code>Mask</code> classes and <code>draw_bounding_boxes</code> and <code>draw_segmentation_masks</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to bounding boxes and segmentation masks for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb20-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb20-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb20-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_24_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb21-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb21-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
<pre><code>The file ./KFOlCnqEu92Fr1MmEU9vAw.ttf already exists and overwrite is set to False.</code></pre>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb24-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb24-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb24-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb24-11">sample_img</span></code></pre></div>
<pre><code>Image Dims: (768, 1152)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_31_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb26-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
258421
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
version
</th>
<td>
5.3.1
</td>
</tr>
<tr>
<th>
flags
</th>
<td>
{}
</td>
</tr>
<tr>
<th>
shapes
</th>
<td>
[{‘label’: ‘person’, ‘points’: [[404.0, 775.5], [396.5, 766.0], [411.5, 753.0], [411.5, 738.0], [416.5, 731.0], [412.5, 598.0], [419.5, 559.0], [416.0, 554.5], [404.0, 566.5], [387.0, 572.5], [375.5, 566.0], [377.5, 554.0], [405.5, 529.0], [413.5, 504.0], [414.5, 493.0], [386.5, 463.0], [388.5, 453.0], [399.0, 443.5], [413.0, 444.5], [423.5, 453.0], [457.5, 506.0], [452.5, 575.0], [458.5, 607.0], [447.5, 635.0], [444.5, 676.0], [452.5, 764.0], [443.0, 770.5]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘polygon’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[377.0, 775.5], [368.0, 774.5], [346.5, 764.0], [349.5, 751.0], [348.5, 707.0], [358.5, 668.0], [343.5, 651.0], [359.5, 605.0], [379.5, 583.0], [366.00692041522484, 583.3910034602076], [362.5467128027681, 575.7785467128027], [361.85467128027676, 565.3979238754325], [353.2041522491349, 557.0934256055363], [357.7024221453287, 547.4048442906574], [350.7820069204152, 532.5259515570934], [356.31833910034595, 520.7612456747405], [359.7785467128027, 481.31487889273353], [376.3875432525951, 467.47404844290656], [387.4602076124567, 469.5501730103806], [401.3010380622837, 484.08304498269894], [405.79930795847747, 501.038062283737], [394.03460207612454, 505.88235294117646], [394.72664359861585, 519.0311418685121], [399.916955017301, 531.1418685121107], [374.6574394463667, 554.3252595155709], [369.81314878892726, 571.280276816609], [374.31141868512105, 574.0484429065743], [388.152249134948, 574.39446366782], [397.49480968858126, 569.8961937716263], [402.5, 578.0], [410.5, 594.0], [412.5, 668.0], [387.0, 667.5], [375.5, 692.0], [376.5, 738.0], [380.5, 753.0], [388.5, 764.0], [386.5, 772.0]], ‘group_id’: None, ‘description’: None, ‘shape_type’: ‘polygon’, ‘flags’: {}}]
</td>
</tr>
<tr>
<th>
imagePath
</th>
<td>
258421.jpg
</td>
</tr>
<tr>
<th>
imageData
</th>
<td>
None
</td>
</tr>
<tr>
<th>
imageHeight
</th>
<td>
1152
</td>
</tr>
<tr>
<th>
imageWidth
</th>
<td>
768
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The lists of point coordinates in the segmentation annotations are the vertices of a polygon for the individual segmentation masks. We can use these to generate images for each segmentation mask.</p>
</section>
<section id="define-a-function-to-convert-segmentation-polygons-to-images" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-convert-segmentation-polygons-to-images">Define a function to convert segmentation polygons to images</h4>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_polygon_mask(image_size, vertices):</span>
<span id="cb27-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Create a grayscale image with a white polygonal area on a black background.</span></span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - image_size (tuple): A tuple representing the dimensions (width, height) of the image.</span></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - vertices (list): A list of tuples, each containing the x, y coordinates of a vertex</span></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        of the polygon. Vertices should be in clockwise or counter-clockwise order.</span></span>
<span id="cb27-9"></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - PIL.Image.Image: A PIL Image object containing the polygonal mask.</span></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb27-13"></span>
<span id="cb27-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new black image with the given dimensions</span></span>
<span id="cb27-15">    mask_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>, image_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb27-16">    </span>
<span id="cb27-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the polygon on the image. The area inside the polygon will be white (255).</span></span>
<span id="cb27-18">    ImageDraw.Draw(mask_img, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>).polygon(vertices, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb27-19"></span>
<span id="cb27-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the image with the drawn polygon</span></span>
<span id="cb27-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mask_img</span></code></pre></div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>We can now generate the segmentation mask images and feed those to the <code>draw_segmentation_mask</code> function.</p>
<p>We can use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.masks_to_boxes.html#torchvision.ops.masks_to_boxes"><code>masks_to_boxes</code></a> function included with torchvision to generate bounding box annotations in the <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format from the segmentation masks. That is the same format the <code>draw_bounding_boxes</code> function expects so we can use the output directly.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels for the sample</span></span>
<span id="cb28-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb28-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb28-4">shape_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb28-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format polygon points for PIL</span></span>
<span id="cb28-6">xy_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shape_points]</span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb28-8">mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(sample_img.size, xy) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xy <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xy_coords]</span>
<span id="cb28-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb28-10">masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs])</span>
<span id="cb28-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate bounding box annotations from segmentation masks</span></span>
<span id="cb28-12">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.masks_to_boxes(masks)</span>
<span id="cb28-13"></span>
<span id="cb28-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb28-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb28-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb28-17">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>masks, </span>
<span id="cb28-18">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb28-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb28-20">)</span>
<span id="cb28-21"></span>
<span id="cb28-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb28-23">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb28-24">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb28-25">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bboxes, </span>
<span id="cb28-26">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb28-27">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb28-28">)</span>
<span id="cb28-29"></span>
<span id="cb28-30">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_37_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb29-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb30-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb30-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb30-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb30-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb30-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb30-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb30-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb30-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb30-12"></span>
<span id="cb30-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb30-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels for the sample</span></span>
<span id="cb31-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb31-4">shape_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Format polygon points for PIL</span></span>
<span id="cb31-6">xy_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shape_points]</span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb31-8">mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(sample_img.size, xy) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xy <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xy_coords]</span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb31-10">masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs])</span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate bounding box annotations from segmentation masks</span></span>
<span id="cb31-12">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.masks_to_boxes(masks), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb31-13"></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb31-15">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb31-16"></span>
<span id="cb31-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare mask and bounding box targets</span></span>
<span id="cb31-18">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb31-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: Mask(masks), </span>
<span id="cb31-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: bboxes, </span>
<span id="cb31-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb31-22">}</span>
<span id="cb31-23"></span>
<span id="cb31-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb31-25">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb31-26"></span>
<span id="cb31-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb31-28">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb31-29"></span>
<span id="cb31-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb31-31">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb31-32"></span>
<span id="cb31-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb31-34">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-35">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb31-36">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb31-37"></span>
<span id="cb31-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb31-39">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb31-40">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb31-41">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb31-42">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb31-43">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb31-44">)</span>
<span id="cb31-45"></span>
<span id="cb31-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb31-47">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb31-48">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb31-49">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb31-50">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb31-51">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb31-52">)</span>
<span id="cb31-53"></span>
<span id="cb31-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # Display the annotated image</span></span>
<span id="cb31-55">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb31-56"></span>
<span id="cb31-57">pd.Series({</span>
<span id="cb31-58">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb31-59">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb31-60">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb31-61">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb31-62">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb31-63">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_45_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_6ce5b">
<thead>
</thead>
<tbody>
<tr>
<th id="T_6ce5b_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_6ce5b_row0_col0" class="data row0 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_6ce5b_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_6ce5b_row1_col0" class="data row1 col0">
(403, 484)
</td>
</tr>
<tr>
<th id="T_6ce5b_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_6ce5b_row2_col0" class="data row2 col0">
(426, 511)
</td>
</tr>
<tr>
<th id="T_6ce5b_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_6ce5b_row3_col0" class="data row3 col0">
(511, 511)
</td>
</tr>
<tr>
<th id="T_6ce5b_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_6ce5b_row4_col0" class="data row4 col0">
(512, 512)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> LabelMeInstSegDataset(Dataset):</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A PyTorch Dataset class for handling LabelMe instance segmentation data.</span></span>
<span id="cb32-4"></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_keys (list): A list of image keys identifying the images.</span></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _annotation_df (DataFrame): A pandas DataFrame containing the annotations for each image.</span></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_dict (dict): A dictionary mapping image keys to their corresponding file paths.</span></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _class_to_idx (dict): A dictionary mapping class names to their respective indices.</span></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _transforms (callable, optional): A function/transform that takes in an image and its target</span></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                           and returns a transformed version.</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb32-13"></span>
<span id="cb32-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb32-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the LabelMeInstSegDataset object with images, annotations, and optional transforms.</span></span>
<span id="cb32-17"></span>
<span id="cb32-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb32-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_keys (list): List of image keys.</span></span>
<span id="cb32-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation_df (DataFrame): DataFrame with annotations for each image.</span></span>
<span id="cb32-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_dict (dict): Dictionary mapping image keys to image file paths.</span></span>
<span id="cb32-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb32-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            transforms (callable, optional): Optional transforms to be applied on the images.</span></span>
<span id="cb32-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb32-26">        </span>
<span id="cb32-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys</span>
<span id="cb32-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df</span>
<span id="cb32-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict</span>
<span id="cb32-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx</span>
<span id="cb32-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms</span>
<span id="cb32-32">        </span>
<span id="cb32-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb32-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Returns the total number of items in the dataset."""</span></span>
<span id="cb32-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb32-36">        </span>
<span id="cb32-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb32-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an image and its corresponding target (annotations) by index.</span></span>
<span id="cb32-40"></span>
<span id="cb32-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb32-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            index (int): The index of the item.</span></span>
<span id="cb32-43"></span>
<span id="cb32-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb32-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its target (a dictionary with keys 'masks', 'boxes', 'labels').</span></span>
<span id="cb32-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-47">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb32-48">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb32-49">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb32-50">        </span>
<span id="cb32-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb32-52">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb32-53">        </span>
<span id="cb32-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb32-55"></span>
<span id="cb32-56">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb32-57">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Loads an image and its corresponding target data based on the given annotation.</span></span>
<span id="cb32-59"></span>
<span id="cb32-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb32-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation (DataFrame row): The annotation row corresponding to an image.</span></span>
<span id="cb32-62"></span>
<span id="cb32-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb32-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its target (a dictionary with keys 'masks', 'boxes', 'labels').</span></span>
<span id="cb32-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-66">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb32-67">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb32-68">        </span>
<span id="cb32-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract labels for each shape in the annotation and convert them to tensor</span></span>
<span id="cb32-70">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb32-71">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb32-72">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels.to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.int64)</span>
<span id="cb32-73"></span>
<span id="cb32-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process shape points to create masks</span></span>
<span id="cb32-75">        shape_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb32-76">        xy_coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shape_points]</span>
<span id="cb32-77">        mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(image.size, xy) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xy <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> xy_coords]</span>
<span id="cb32-78">        masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mask(torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs]))</span>
<span id="cb32-79"></span>
<span id="cb32-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create bounding boxes from masks</span></span>
<span id="cb32-81">        bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.masks_to_boxes(masks), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb32-82"></span>
<span id="cb32-83">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: masks, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb33-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb33-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb33-4">        iou_crop,</span>
<span id="cb33-5">        transforms.ColorJitter(</span>
<span id="cb33-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb33-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb33-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb33-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb33-10">        ),</span>
<span id="cb33-11">        transforms.RandomGrayscale(),</span>
<span id="cb33-12">        transforms.RandomEqualize(),</span>
<span id="cb33-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb33-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb33-15">    ],</span>
<span id="cb33-16">)</span>
<span id="cb33-17"></span>
<span id="cb33-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb33-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-20">    resize_max, </span>
<span id="cb33-21">    pad_square,</span>
<span id="cb33-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-23">])</span>
<span id="cb33-24"></span>
<span id="cb33-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb33-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-27">    transforms.ToImage(), </span>
<span id="cb33-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb33-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb33-30">])</span>
<span id="cb33-31"></span>
<span id="cb33-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb33-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-34">    data_aug_tfms, </span>
<span id="cb33-35">    resize_pad_tfm, </span>
<span id="cb33-36">    final_tfms</span>
<span id="cb33-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb34-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb34-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelMeInstSegDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training and validation datasets</span></span>
<span id="cb34-8">pd.Series({</span>
<span id="cb34-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb34-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_bc8cc">
<thead>
</thead>
<tbody>
<tr>
<th id="T_bc8cc_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_bc8cc_row0_col0" class="data row0 col0">
31
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb35-4">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb35-5"></span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb35-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks( </span>
<span id="cb35-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb35-9">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb35-10">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb35-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb35-12">)</span>
<span id="cb35-13"></span>
<span id="cb35-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with bounding boxes</span></span>
<span id="cb35-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb35-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb35-17">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb35-18">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb35-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb35-20">)</span>
<span id="cb35-21"></span>
<span id="cb35-22">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/images/output_54_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom segmentation annotations made with the LabelMe annotation tool and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future instance segmentation projects.</p>
<p>As a next step, perhaps try annotating a custom instance segmentation dataset with LabelMe and loading it with this tutorial’s code. Once you’re comfortable with that, try adapting the code in the following tutorial to train an instance segmentation model on your custom dataset.</p>
<ul>
<li><a href="../../../posts/pytorch-train-mask-rcnn-tutorial/">Training Mask R-CNN Models with PyTorch</a></li>
</ul>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-labelme-annotation-tutorials/bounding-boxes/"><strong>Working with LabelMe Bounding Box Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe bounding box annotations in torchvision for object detection tasks.</li>
<li><a href="http://localhost:3847/posts/torchvision-labelme-annotation-tutorials/keypoints/"><strong>Working with LabelMe Keypoint Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe keypoint annotations in torchvision for keypoint estimation tasks.</li>
<li><a href="http://localhost:3847/posts/pytorch-train-mask-rcnn-tutorial/"><strong>Training Mask R-CNN Models with PyTorch</strong></a><strong>:</strong> Learn how to train Mask R-CNN models on custom datasets with PyTorch.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>object-detection</category>
  <category>instance-segmentation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with LabelMe Keypoint Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with keypoint annotations created with the <a href="https://github.com/labelmeai/labelme">LabelMe annotation tool</a> in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Keypoint annotations mark specific points of interest on an object in an image for training models to recognize and interpret poses, gestures, or significant parts of objects.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/keypoint-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with keypoint annotations made with LabelMe for keypoint estimation tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-keypoint-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-keypoint-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-24">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-32"></span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-34"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-35">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. While there is currently no dedicated TVTensor class for keypoint annotations, we can use the one for <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html">bounding boxes</a> instead. Torchvision does include a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_keypoints.html"><code>draw_keypoints</code></a> function, but we might as well stick with the <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with keypoints for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/labelme-keypoint-toy-dataset/tree/main">labelme-keypoint-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_792fe">
<thead>
</thead>
<tbody>
<tr>
<th id="T_792fe_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_792fe_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_792fe_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_792fe_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labelme-keypoint-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_5c071">
<thead>
</thead>
<tbody>
<tr>
<th id="T_5c071_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_5c071_row0_col0" class="data row0 col0">
cj-mills/labelme-keypoint-toy-dataset
</td>
</tr>
<tr>
<th id="T_5c071_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_5c071_row1_col0" class="data row1 col0">
Datasets/../Archive/labelme-keypoint-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_5c071_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_5c071_row2_col0" class="data row2 col0">
Datasets/labelme-keypoint-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-image-and-annotation-files" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-image-and-annotation-files">Getting the Image and Annotation Files</h3>
<p>The dataset folder contains sample images and annotation files. Each sample image has its own JSON annotation file.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the dataset</span></span>
<span id="cb13-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_img_files(dataset_path)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of JSON files in the dataset</span></span>
<span id="cb13-5">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the names of the folders using a Pandas DataFrame</span></span>
<span id="cb13-8">pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image File"</span>: [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths], </span>
<span id="cb13-9">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>:[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_file_paths]}).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image File
</th>
<th>
Annotation File
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
133196.jpg
</td>
<td>
133196.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
245035.jpg
</td>
<td>
245035.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
245036.jpg
</td>
<td>
245036.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
247937.jpg
</td>
<td>
247937.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3172614.jpg
</td>
<td>
3172614.json
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths}</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-8">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 38</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
133196
</th>
<td>
Datasets/labelme-keypoint-toy-dataset/133196.jpg
</td>
</tr>
<tr>
<th>
245035
</th>
<td>
Datasets/labelme-keypoint-toy-dataset/245035.jpg
</td>
</tr>
<tr>
<th>
245036
</th>
<td>
Datasets/labelme-keypoint-toy-dataset/245036.jpg
</td>
</tr>
<tr>
<th>
247937
</th>
<td>
Datasets/labelme-keypoint-toy-dataset/247937.jpg
</td>
</tr>
<tr>
<th>
3172614
</th>
<td>
Datasets/labelme-keypoint-toy-dataset/3172614.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of each JSON annotation file into a single Pandas DataFrame so we can easily query the annotations.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb16-2">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb16-5">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb16-8">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-9">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb16-10"></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb16-12">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb16-15">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
133196
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘nose’, ‘points’: [[386.70731707317077, 297.109756097561]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
133196.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
960
</td>
</tr>
<tr>
<th>
245035
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘nose’, ‘points’: [[334.4587155963303, 319.57798165137615]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
245035.jpg
</td>
<td>
None
</td>
<td>
1152
</td>
<td>
768
</td>
</tr>
<tr>
<th>
245036
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘nose’, ‘points’: [[226.8571428571429, 240.80357142857144]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
245036.jpg
</td>
<td>
None
</td>
<td>
1120
</td>
<td>
768
</td>
</tr>
<tr>
<th>
247937
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘nose’, ‘points’: [[454.6585365853659, 230.03658536585363]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
247937.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
<tr>
<th>
3172614
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘nose’, ‘points’: [[539.4146341463414, 608.0853658536585]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
<td>
3172614.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The source JSON content corresponding to the first row in the DataFrame is available below:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5.3.1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{},</span></span>
<span id="cb17-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shapes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nose"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"points"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-8">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-9">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">386.70731707317077</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-10">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">297.109756097561</span></span>
<span id="cb17-11">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-12">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-13">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"group_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-15">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shape_type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"point"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-16">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb17-17">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-18">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-19">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imagePath"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"133196.jpg"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-20">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageData"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-21">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageHeight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-22">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageWidth"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">960</span></span>
<span id="cb17-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step won’t yield any insights for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe and rename the 'shapes' column to 'shapes'</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb18-4">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb18-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb18-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
nose
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb19-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].value_counts()</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb19-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span>
<span id="cb19-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb19-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb19-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb19-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb19-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_21_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its keypoints using torchvision’s <code>BoundingBoxes</code> class and <code>draw_bounding_boxes</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to keypoints for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb20-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb20-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb20-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_25_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb21-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb21-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb23-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb23-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb23-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-9"></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb23-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (960, 768)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_33_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb25-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
133196
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
version
</th>
<td>
5.3.1
</td>
</tr>
<tr>
<th>
flags
</th>
<td>
{}
</td>
</tr>
<tr>
<th>
shapes
</th>
<td>
[{‘label’: ‘nose’, ‘points’: [[386.70731707317077, 297.109756097561]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘point’, ‘flags’: {}}]
</td>
</tr>
<tr>
<th>
imagePath
</th>
<td>
133196.jpg
</td>
</tr>
<tr>
<th>
imageData
</th>
<td>
None
</td>
</tr>
<tr>
<th>
imageHeight
</th>
<td>
768
</td>
</tr>
<tr>
<th>
imageWidth
</th>
<td>
960
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>We can convert our keypoint annotations to bounding boxes by adding values for box width and height, making it <code>[center-x, center-y, width, height]</code> format</p>
<p>The <code>draw_bounding_boxes</code> function expects bounding box annotations in <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format, so we’ll use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.box_convert.html#torchvision.ops.box_convert"><code>box_convert</code></a> function included with torchvision to convert the bounding box annotations from <code>[cx,cy,w,h]</code> to <code>[x,y,x,y]</code> format.</p>
<p>We can reverse this process during training to extract the target keypoints for calculating the loss.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and keypoint annotations for the sample image</span></span>
<span id="cb26-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb26-3">keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]])).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-4">keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((keypoints, torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb26-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb26-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb26-9">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(keypoints_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>),</span>
<span id="cb26-10">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb26-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb26-12">)</span>
<span id="cb26-13"></span>
<span id="cb26-14">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_37_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb27-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb28-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb28-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb28-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb28-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb28-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb28-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb28-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb28-9"></span>
<span id="cb28-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb28-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb28-12"></span>
<span id="cb28-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb28-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb29-2">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb29-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torchvision.ops.box_convert(keypoints_bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb29-4">                           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb29-5">                           canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb29-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb29-7">}</span>
<span id="cb29-8"></span>
<span id="cb29-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb29-10">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb29-11"></span>
<span id="cb29-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb29-13">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb29-14"></span>
<span id="cb29-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb29-16">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb29-17"></span>
<span id="cb29-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb29-19">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-20">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb29-21">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb29-22"></span>
<span id="cb29-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb29-24">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb29-25">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb29-26">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb29-27">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb29-28">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb29-29">)</span>
<span id="cb29-30"></span>
<span id="cb29-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb29-32">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb29-33"></span>
<span id="cb29-34">pd.Series({</span>
<span id="cb29-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb29-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb29-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb29-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb29-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb29-40">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_45_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_f49db">
<thead>
</thead>
<tbody>
<tr>
<th id="T_f49db_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_f49db_row0_col0" class="data row0 col0">
(960, 768)
</td>
</tr>
<tr>
<th id="T_f49db_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_f49db_row1_col0" class="data row1 col0">
(960, 768)
</td>
</tr>
<tr>
<th id="T_f49db_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_f49db_row2_col0" class="data row2 col0">
(383, 307)
</td>
</tr>
<tr>
<th id="T_f49db_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_f49db_row3_col0" class="data row3 col0">
(383, 383)
</td>
</tr>
<tr>
<th id="T_f49db_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_f49db_row4_col0" class="data row4 col0">
(384, 384)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> LabelMeKeypointDataset(Dataset):</span>
<span id="cb30-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A PyTorch Dataset class for handling LabelMe image keypoints.</span></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class extends PyTorch's Dataset and is designed to work with image data and</span></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    associated keypoints annotations. It supports loading images and corresponding</span></span>
<span id="cb30-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    keypoints annotations, and applying transformations.</span></span>
<span id="cb30-8"></span>
<span id="cb30-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_keys (list): List of image keys.</span></span>
<span id="cb30-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation_df (DataFrame): DataFrame containing annotations for each image.</span></span>
<span id="cb30-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_dict (dict): Dictionary mapping image keys to their file paths.</span></span>
<span id="cb30-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb30-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transforms (callable, optional): Transformations to be applied to the images and targets.</span></span>
<span id="cb30-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb30-16"></span>
<span id="cb30-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb30-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the LabelMeKeypointDataset with image keys, annotations, and other relevant information.</span></span>
<span id="cb30-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb30-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb30-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_keys (list): List of image keys.</span></span>
<span id="cb30-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation_df (DataFrame): DataFrame containing annotations for each image.</span></span>
<span id="cb30-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_dict (dict): Dictionary mapping image keys to their file paths.</span></span>
<span id="cb30-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb30-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            transforms (callable, optional): Transformations to be applied to the images and targets.</span></span>
<span id="cb30-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb30-29">        </span>
<span id="cb30-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys</span>
<span id="cb30-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df</span>
<span id="cb30-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict</span>
<span id="cb30-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx</span>
<span id="cb30-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms</span>
<span id="cb30-35"></span>
<span id="cb30-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.BBOX_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb30-37"></span>
<span id="cb30-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb30-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the number of items in the dataset.</span></span>
<span id="cb30-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb30-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb30-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            int: Number of items in the dataset.</span></span>
<span id="cb30-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb30-46">        </span>
<span id="cb30-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb30-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an item from the dataset at the specified index.</span></span>
<span id="cb30-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb30-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb30-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            index (int): Index of the item to retrieve.</span></span>
<span id="cb30-53"></span>
<span id="cb30-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb30-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its corresponding target (annotations).</span></span>
<span id="cb30-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-57">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb30-58">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb30-59">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb30-60">        </span>
<span id="cb30-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Applying transformations if specified</span></span>
<span id="cb30-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb30-63">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb30-64"></span>
<span id="cb30-65">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill any missing keypoints with dummy values</span></span>
<span id="cb30-66">        target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._fill_and_order_target(target)</span>
<span id="cb30-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb30-68"></span>
<span id="cb30-69">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> order_points_by_labels(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data, label_order):</span>
<span id="cb30-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Extracts and orders points from a list of dictionaries based on a given order of labels.</span></span>
<span id="cb30-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb30-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param data: List of dictionaries containing labels and points.</span></span>
<span id="cb30-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :param label_order: List of labels in the desired order.</span></span>
<span id="cb30-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        :return: List of points in the specified label order.</span></span>
<span id="cb30-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-77">        ordered_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb30-78">        label_to_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>]: item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data}</span>
<span id="cb30-79">    </span>
<span id="cb30-80">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> label_order:</span>
<span id="cb30-81">            points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_to_points.get(label)</span>
<span id="cb30-82">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb30-83">                ordered_points.extend(points)</span>
<span id="cb30-84"></span>
<span id="cb30-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ordered_points</span>
<span id="cb30-86"></span>
<span id="cb30-87">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb30-88">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Loads an image and its corresponding target (annotations) based on the provided annotation.</span></span>
<span id="cb30-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb30-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb30-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation (DataFrame row): Annotation data for a specific image.</span></span>
<span id="cb30-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Returns:</span></span>
<span id="cb30-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the loaded image and its corresponding target data.</span></span>
<span id="cb30-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-96">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image from the file path specified in the annotations</span></span>
<span id="cb30-97">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb30-98">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb30-99"></span>
<span id="cb30-100">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extracting keypoints from the annotation and converting them to a tensor</span></span>
<span id="cb30-101">        keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.order_points_by_labels(annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>], class_to_idx.keys())</span>
<span id="cb30-102">        keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.array(keypoints, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb30-103">        </span>
<span id="cb30-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding an offset to create bounding boxes around keypoints</span></span>
<span id="cb30-105">        keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((keypoints, torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.BBOX_DIM), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb30-106">                </span>
<span id="cb30-107">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert bounding box format and create a BoundingBoxes object</span></span>
<span id="cb30-108">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.box_convert(keypoints_bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>)</span>
<span id="cb30-109">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb30-110">        </span>
<span id="cb30-111">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create tensor for labels based on the class indices</span></span>
<span id="cb30-112">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> class_to_idx.keys()])</span>
<span id="cb30-113">        </span>
<span id="cb30-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span>
<span id="cb30-115"></span>
<span id="cb30-116">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _fill_and_order_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, target):</span>
<span id="cb30-117">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb30-118"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Fills and orders the target bounding boxes and labels based on the class index.</span></span>
<span id="cb30-119"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb30-120"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This method ensures that each target has a bounding box and label for each class,</span></span>
<span id="cb30-121"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        even if some classes are not present in the original target. Missing classes</span></span>
<span id="cb30-122"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        are filled with dummy values.</span></span>
<span id="cb30-123"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb30-124"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb30-125"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            target (dict): A dictionary containing 'boxes' and 'labels' keys, where</span></span>
<span id="cb30-126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           'boxes' is a tensor of bounding boxes and 'labels' is a tensor</span></span>
<span id="cb30-127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           of labels corresponding to these boxes.</span></span>
<span id="cb30-128"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb30-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb30-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dict: The updated target dictionary with boxes and labels ordered and filled</span></span>
<span id="cb30-131"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  according to the class index.</span></span>
<span id="cb30-132"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb30-133">    </span>
<span id="cb30-134">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize new boxes with dummy values (-1.0) for each class</span></span>
<span id="cb30-135">        new_boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.full((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb30-136">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare labels tensor based on the class indices</span></span>
<span id="cb30-137">        new_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx.values()), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32)</span>
<span id="cb30-138">    </span>
<span id="cb30-139">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over each class label</span></span>
<span id="cb30-140">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(new_labels):</span>
<span id="cb30-141">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the current label exists in the target's labels</span></span>
<span id="cb30-142">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]:</span>
<span id="cb30-143">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the index of the current label in the target's labels</span></span>
<span id="cb30-144">                idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> label).nonzero(as_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb30-145">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the corresponding box to the new boxes tensor</span></span>
<span id="cb30-146">                new_boxes[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>][idx]</span>
<span id="cb30-147">    </span>
<span id="cb30-148">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the target dictionary with the new boxes and labels</span></span>
<span id="cb30-149">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_boxes</span>
<span id="cb30-150">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_labels</span>
<span id="cb30-151">    </span>
<span id="cb30-152">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> target</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb31-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb31-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb31-4">        iou_crop,</span>
<span id="cb31-5">        transforms.ColorJitter(</span>
<span id="cb31-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb31-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb31-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb31-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb31-10">        ),</span>
<span id="cb31-11">        transforms.RandomGrayscale(),</span>
<span id="cb31-12">        transforms.RandomEqualize(),</span>
<span id="cb31-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb31-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb31-15">    ],</span>
<span id="cb31-16">)</span>
<span id="cb31-17"></span>
<span id="cb31-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb31-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb31-20">    resize_max, </span>
<span id="cb31-21">    pad_square,</span>
<span id="cb31-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-23">])</span>
<span id="cb31-24"></span>
<span id="cb31-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb31-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb31-27">    transforms.ToImage(), </span>
<span id="cb31-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb31-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb31-30">])</span>
<span id="cb31-31"></span>
<span id="cb31-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb31-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb31-34">    data_aug_tfms, </span>
<span id="cb31-35">    resize_pad_tfm, </span>
<span id="cb31-36">    final_tfms</span>
<span id="cb31-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb32-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb32-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelMeKeypointDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb32-6"></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training dataset</span></span>
<span id="cb32-8">pd.Series({</span>
<span id="cb32-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb32-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_1c8b9">
<thead>
</thead>
<tbody>
<tr>
<th id="T_1c8b9_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_1c8b9_row0_col0" class="data row0 col0">
38
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a sample image and its target annotations</span></span>
<span id="cb33-2">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sanitize bounding boxes to remove dummy values</span></span>
<span id="cb33-5">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb33-6">targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb33-7">sanitized_image, sanitized_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], targets)</span>
<span id="cb33-8"></span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with the sanitized annotations</span></span>
<span id="cb33-10">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb33-11">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(sanitized_image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb33-12">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb33-13">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb33-14">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb33-15">)</span>
<span id="cb33-16"></span>
<span id="cb33-17">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/images/output_54_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom keypoint annotations made with the LabelMe annotation tool and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future keypoint estimation projects.</p>
<p>As a next step, perhaps try annotating a custom keypoint estimation dataset with LabelMe and loading it with this tutorial’s code. Once you’re comfortable with that, try adapting the code in the following tutorial to train a keypoint estimation model on your custom dataset.</p>
<ul>
<li><a href="../../../posts/pytorch-train-keypoint-rcnn-tutorial">Training Keypoint R-CNN Models with PyTorch</a></li>
</ul>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-labelme-annotation-tutorials/bounding-boxes/"><strong>Working with LabelMe Bounding Box Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe bounding box annotations in torchvision for object detection tasks.</li>
<li><a href="http://localhost:3847/posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/"><strong>Working with LabelMe Segmentation Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe segmentation annotations in torchvision for instance segmentation tasks.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>keypoint-estimation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/keypoints/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with LabelMe Bounding Box Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with bounding box annotations created with the <a href="https://github.com/labelmeai/labelme">LabelMe annotation tool</a> in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Bounding box annotations specify rectangular frames around objects in images to identify and locate them for training object detection models.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/bounding-box-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with bounding box annotations made with LabelMe for object detection tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-bounding-box-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/labelme/torchvision-labelme-bounding-box-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-24">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-32"></span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-34"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-35">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. The TVTensor class for bounding box annotations is called <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html"><code>BoundingBoxes</code></a>. Torchvision also includes a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with bounding boxes for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/labelme-bounding-box-toy-dataset/tree/main">labelme-bounding-box-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_4e87e">
<thead>
</thead>
<tbody>
<tr>
<th id="T_4e87e_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_4e87e_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_4e87e_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_4e87e_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labelme-bounding-box-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_e1208">
<thead>
</thead>
<tbody>
<tr>
<th id="T_e1208_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_e1208_row0_col0" class="data row0 col0">
cj-mills/labelme-bounding-box-toy-dataset
</td>
</tr>
<tr>
<th id="T_e1208_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_e1208_row1_col0" class="data row1 col0">
Datasets/../Archive/labelme-bounding-box-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_e1208_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_e1208_row2_col0" class="data row2 col0">
Datasets/labelme-bounding-box-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-image-and-annotation-files" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-image-and-annotation-files">Getting the Image and Annotation Files</h3>
<p>The dataset folder contains sample images and annotation files. Each sample image has its own JSON annotation file.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the dataset</span></span>
<span id="cb13-2">img_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_img_files(dataset_path)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of JSON files in the dataset</span></span>
<span id="cb13-5">annotation_file_paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*.json'</span>))</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the names of the folders using a Pandas DataFrame</span></span>
<span id="cb13-8">pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image File"</span>: [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths], </span>
<span id="cb13-9">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>:[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_file_paths]}).head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image File
</th>
<th>
Annotation File
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
258421.jpg
</td>
<td>
258421.json
</td>
</tr>
<tr>
<th>
1
</th>
<td>
3075367.jpg
</td>
<td>
3075367.json
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3076319.jpg
</td>
<td>
3076319.json
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3145551.jpg
</td>
<td>
3145551.json
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3176048.jpg
</td>
<td>
3176048.json
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> img_file_paths}</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-8">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 28</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/258421.jpg
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/3075367.jpg
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/3076319.jpg
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/3145551.jpg
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
Datasets/labelme-bounding-box-toy-dataset/3176048.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of each JSON annotation file into a single Pandas DataFrame so we can easily query the annotations.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a generator that yields Pandas DataFrames containing the data from each JSON file</span></span>
<span id="cb16-2">cls_dataframes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (pd.read_json(f, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(annotation_file_paths))</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate the DataFrames into a single DataFrame</span></span>
<span id="cb16-5">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(cls_dataframes, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb16-6"></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the image file name as the index for each row</span></span>
<span id="cb16-8">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> row: row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'imagePath'</span>].split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-9">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span>
<span id="cb16-10"></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the rows that correspond to the filenames in the 'img_dict' dictionary</span></span>
<span id="cb16-12">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())]</span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the first 5 rows of the DataFrame</span></span>
<span id="cb16-15">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
version
</th>
<th>
flags
</th>
<th>
shapes
</th>
<th>
imagePath
</th>
<th>
imageData
</th>
<th>
imageHeight
</th>
<th>
imageWidth
</th>
</tr>
<tr>
<th>
index
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[340.2519836425781, 466.943359375], [418.9939880371094, 777.34423828125]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[386.076124567474, 443.94463667820065], [460.81660899653974, 777.1626297577855]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
258421.jpg
</td>
<td>
None
</td>
<td>
1152
</td>
<td>
768
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[413.31866455078125, 41.2171630859375], [919.8128051757812, 763.16552734375]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
3075367.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1344
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[335.30731201171875, 151.749755859375], [711.2194213867188, 1117.489013671875]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[8.10714285714289, 131.87500000000003], [404.2032880329769, 1119.0]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
3076319.jpg
</td>
<td>
None
</td>
<td>
1120
</td>
<td>
768
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[658.6324462890625, 281.2455139160156], [687.085693359375, 398.6059265136719]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[642.0, 289.8510638297872], [669.6595744680851, 398.8936170212766]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
3145551.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1184
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
5.3.1
</td>
<td>
{}
</td>
<td>
[{‘label’: ‘person’, ‘points’: [[518.2313232421875, 338.9653015136719], [594.632080078125, 466.0799865722656]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[683.419689119171, 356.47668393782385], [638.860103626943, 437.8238341968912]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
<td>
3176048.jpg
</td>
<td>
None
</td>
<td>
768
</td>
<td>
1152
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Let’s examine the source JSON content corresponding to the first row in the DataFrame:</p>
<div style="overflow-x:auto; max-height:500px">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5.3.1"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{},</span></span>
<span id="cb17-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shapes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"points"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-8">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-9">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">340.2519836425781</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-10">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">466.943359375</span></span>
<span id="cb17-11">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-12">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-13">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">418.9939880371094</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-14">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">777.34423828125</span></span>
<span id="cb17-15">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-16">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-17">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"group_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-18">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-19">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shape_type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rectangle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-20">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb17-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-22">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-23">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"label"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-24">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"points"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-25">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-26">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">386.076124567474</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-27">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">443.94463667820065</span></span>
<span id="cb17-28">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">],</span></span>
<span id="cb17-29">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-30">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">460.81660899653974</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-31">          <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">777.1626297577855</span></span>
<span id="cb17-32">        <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-33">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-34">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"group_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-35">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-36">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"shape_type"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rectangle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-37">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flags"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb17-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-39">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-40">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imagePath"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"258421.jpg"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-41">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageData"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">null</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-42">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageHeight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1152</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-43">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"imageWidth"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span></span>
<span id="cb17-44"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<hr>
<p>The bounding box annotations are in <code>[[Top-Left X, Top-Left Y],[Bottom-Right X, Bottom-Right Y]]</code> format.</p>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step won’t yield any insights for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'shapes' column in the annotation_df dataframe</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe</span></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'shapes' column of the dataframe</span></span>
<span id="cb18-4">shapes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>].explode().to_frame().shapes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb18-5"></span>
<span id="cb18-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb18-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].unique().tolist()</span>
<span id="cb18-8"></span>
<span id="cb18-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb18-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
person
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb19-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shapes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>].value_counts()</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb19-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb19-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb19-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb19-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb19-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb19-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_22_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its bounding boxes using torchvision’s <code>BoundingBoxes</code> class and <code>draw_bounding_boxes</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to bounding boxes for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb20-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb20-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb20-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_26_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb21-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb21-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb23-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb23-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb23-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-9"></span>
<span id="cb23-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb23-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (768, 1152)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_33_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb25-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
258421
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
version
</th>
<td>
5.3.1
</td>
</tr>
<tr>
<th>
flags
</th>
<td>
{}
</td>
</tr>
<tr>
<th>
shapes
</th>
<td>
[{‘label’: ‘person’, ‘points’: [[340.2519836425781, 466.943359375], [418.9939880371094, 777.34423828125]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}, {‘label’: ‘person’, ‘points’: [[386.076124567474, 443.94463667820065], [460.81660899653974, 777.1626297577855]], ‘group_id’: None, ‘description’: ’‘, ’shape_type’: ‘rectangle’, ‘flags’: {}}]
</td>
</tr>
<tr>
<th>
imagePath
</th>
<td>
258421.jpg
</td>
</tr>
<tr>
<th>
imageData
</th>
<td>
None
</td>
</tr>
<tr>
<th>
imageHeight
</th>
<td>
1152
</td>
</tr>
<tr>
<th>
imageWidth
</th>
<td>
768
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="define-function-that-ensures-bounding-boxes-are-in-a-consistent-format" class="level4">
<h4 class="anchored" data-anchor-id="define-function-that-ensures-bounding-boxes-are-in-a-consistent-format">Define function that ensures bounding boxes are in a consistent format</h4>
<p>LabelMe does not enforce a consistent order for storing the (x,y) coordinates for bounding box annotations. The order depends on how you initiate the bounding box annotation. Therefore, we will create a function that ensures the order is in [top-left x, top-left y, bottom-right x, bottom-right y] format.</p>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> correct_bounding_boxes(bboxes):</span>
<span id="cb26-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure input is a NumPy array</span></span>
<span id="cb26-3">    bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.asarray(bboxes)</span>
<span id="cb26-4">    </span>
<span id="cb26-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correct x coordinates</span></span>
<span id="cb26-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the x coordinates if the top-left x is greater than the bottom-right x</span></span>
<span id="cb26-7">    x_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb26-8">    x_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb26-9">    </span>
<span id="cb26-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Correct y coordinates</span></span>
<span id="cb26-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Swap the y coordinates if the top-left y is greater than the bottom-right y</span></span>
<span id="cb26-12">    y_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.minimum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb26-13">    y_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], bboxes[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb26-14">    </span>
<span id="cb26-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the corrected bounding boxes array</span></span>
<span id="cb26-16">    corrected_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.stack([x_min, y_min, x_max, y_max], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb26-17">    </span>
<span id="cb26-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> corrected_bboxes</span></code></pre></div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>The <code>draw_bounding_boxes</code> function expects bounding box annotations in <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format, so we don’t need to convert the annotation values.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb27-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb27-3">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]).reshape(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb27-6">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb27-7">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb27-8">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BoundingBoxes(torch.Tensor(bboxes), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]),</span>
<span id="cb27-9">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb27-10">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb27-11">)</span>
<span id="cb27-12"></span>
<span id="cb27-13">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_37_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb28-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb29-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb29-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb29-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb29-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb29-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb29-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb29-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb29-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb29-12"></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb29-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb30-2">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb30-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torch.Tensor(bboxes), </span>
<span id="cb30-4">                           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb30-5">                           canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb30-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb30-7">}</span>
<span id="cb30-8"></span>
<span id="cb30-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb30-10">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb30-11"></span>
<span id="cb30-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb30-13">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb30-14"></span>
<span id="cb30-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb30-16">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb30-17"></span>
<span id="cb30-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb30-19">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb30-20">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb30-21">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb30-22"></span>
<span id="cb30-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb30-24">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb30-25">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb30-26">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb30-27">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb30-28">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb30-29">)</span>
<span id="cb30-30"></span>
<span id="cb30-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb30-32">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb30-33"></span>
<span id="cb30-34">pd.Series({</span>
<span id="cb30-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb30-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb30-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb30-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb30-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb30-40">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_45_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_c2ef8">
<thead>
</thead>
<tbody>
<tr>
<th id="T_c2ef8_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_c2ef8_row0_col0" class="data row0 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_c2ef8_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_c2ef8_row1_col0" class="data row1 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_c2ef8_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_c2ef8_row2_col0" class="data row2 col0">
(256, 384)
</td>
</tr>
<tr>
<th id="T_c2ef8_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_c2ef8_row3_col0" class="data row3 col0">
(384, 384)
</td>
</tr>
<tr>
<th id="T_c2ef8_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_c2ef8_row4_col0" class="data row4 col0">
(384, 384)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> LabelMeBBoxDataset(Dataset):</span>
<span id="cb31-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A custom dataset class for handling LabelMe bounding box datasets.</span></span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class is designed to work with datasets where annotations are</span></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    provided in a DataFrame and images are referenced by keys.</span></span>
<span id="cb31-7"></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_keys (list): A list of image keys identifying each image.</span></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _annotation_df (DataFrame): A DataFrame containing image annotations.</span></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_dict (dict): A dictionary mapping image keys to image file paths.</span></span>
<span id="cb31-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _class_to_idx (dict): A dictionary mapping class names to class indices.</span></span>
<span id="cb31-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _transforms (function): A function or series of functions to apply transformations to the images and targets.</span></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb31-15"></span>
<span id="cb31-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb31-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the dataset with image keys, annotation data, image dictionary, class indices, and transforms.</span></span>
<span id="cb31-19"></span>
<span id="cb31-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_keys (list): A list of image keys.</span></span>
<span id="cb31-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation_df (DataFrame): A DataFrame containing image annotations.</span></span>
<span id="cb31-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_dict (dict): A dictionary mapping image keys to image file paths.</span></span>
<span id="cb31-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            class_to_idx (dict): A dictionary mapping class names to class indices.</span></span>
<span id="cb31-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            transforms (function, optional): A function for transforming images and targets. Defaults to None.</span></span>
<span id="cb31-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-27">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb31-28">        </span>
<span id="cb31-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys</span>
<span id="cb31-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df</span>
<span id="cb31-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict</span>
<span id="cb31-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx</span>
<span id="cb31-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms</span>
<span id="cb31-34"></span>
<span id="cb31-35">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb31-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the total number of items in the dataset.</span></span>
<span id="cb31-38"></span>
<span id="cb31-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            int: The total number of images in the dataset.</span></span>
<span id="cb31-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb31-43">        </span>
<span id="cb31-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb31-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an image and its corresponding target (annotations) at the specified index.</span></span>
<span id="cb31-47"></span>
<span id="cb31-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            index (int): The index of the item to retrieve.</span></span>
<span id="cb31-50"></span>
<span id="cb31-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its corresponding target (annotations).</span></span>
<span id="cb31-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-54">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb31-55">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb31-56">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb31-57">        </span>
<span id="cb31-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply transformations if any</span></span>
<span id="cb31-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb31-60">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb31-61">        </span>
<span id="cb31-62">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb31-63"></span>
<span id="cb31-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb31-65">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Loads an image and its corresponding target (annotations) based on the given annotation.</span></span>
<span id="cb31-67"></span>
<span id="cb31-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation (Series): A pandas Series containing the annotation data for a single image.</span></span>
<span id="cb31-70"></span>
<span id="cb31-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its corresponding target (annotations).</span></span>
<span id="cb31-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image from the filepath</span></span>
<span id="cb31-75">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb31-76">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb31-77"></span>
<span id="cb31-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process bounding box annotations</span></span>
<span id="cb31-79">        bbox_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]).reshape(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb31-80">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor(bbox_list)</span>
<span id="cb31-81">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb31-82"></span>
<span id="cb31-83">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process label annotations</span></span>
<span id="cb31-84">        annotation_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [shape[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'shapes'</span>]]</span>
<span id="cb31-85">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_labels])</span>
<span id="cb31-86"></span>
<span id="cb31-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb32-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb32-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb32-4">        iou_crop,</span>
<span id="cb32-5">        transforms.ColorJitter(</span>
<span id="cb32-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb32-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb32-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb32-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb32-10">        ),</span>
<span id="cb32-11">        transforms.RandomGrayscale(),</span>
<span id="cb32-12">        transforms.RandomEqualize(),</span>
<span id="cb32-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb32-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb32-15">    ],</span>
<span id="cb32-16">)</span>
<span id="cb32-17"></span>
<span id="cb32-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb32-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-20">    resize_max, </span>
<span id="cb32-21">    pad_square,</span>
<span id="cb32-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb32-23">])</span>
<span id="cb32-24"></span>
<span id="cb32-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb32-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-27">    transforms.ToImage(), </span>
<span id="cb32-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb32-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb32-30">])</span>
<span id="cb32-31"></span>
<span id="cb32-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb32-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-34">    data_aug_tfms, </span>
<span id="cb32-35">    resize_pad_tfm, </span>
<span id="cb32-36">    final_tfms</span>
<span id="cb32-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb33-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb33-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelMeBBoxDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb33-6"></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training dataset</span></span>
<span id="cb33-8">pd.Series({</span>
<span id="cb33-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb33-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_b3d5b">
<thead>
</thead>
<tbody>
<tr>
<th id="T_b3d5b_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_b3d5b_row0_col0" class="data row0 col0">
28
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb34-2"></span>
<span id="cb34-3">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb34-4">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb34-5">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb34-6">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb34-7">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb34-8">)</span>
<span id="cb34-9"></span>
<span id="cb34-10">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/images/output_54_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom bounding box annotations made with the LabelMe annotation tool and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future object detection projects.</p>
<p>As a next step, perhaps try annotating a custom object detection dataset with LabelMe and loading it with this tutorial’s code. Once you’re comfortable with that, try adapting the code in the following tutorial to train an object detection model on your custom dataset.</p>
<ul>
<li><a href="../../../posts/pytorch-train-object-detector-yolox-tutorial">Training YOLOX Models for Real-Time Object Detection in PyTorch</a></li>
</ul>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-labelme-annotation-tutorials/keypoints/"><strong>Working with LabelMe Keypoint Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe keypoint annotations in torchvision for keypoint estimation tasks.</li>
<li><a href="../../../posts/torchvision-labelme-annotation-tutorials/segmentation-polygons/"><strong>Working with LabelMe Segmentation Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with LabelMe segmentation annotations in torchvision for instance segmentation tasks.</li>
<li><a href="http://localhost:3847/posts/pytorch-train-object-detector-yolox-tutorial"><strong>Training YOLOX Models for Real-Time Object Detection in PyTorch</strong></a><strong>:</strong> Learn how to train YOLOX models for real-time object detection in PyTorch by creating a hand gesture detection model.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>object-detection</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-labelme-annotation-tutorials/bounding-boxes/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with CVAT Segmentation Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with segmentation annotations created with the <a href="https://github.com/opencv/cvat">CVAT annotation tool</a> in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Segmentation annotations indicate the pixels occupied by specific objects or areas of interest in images for training models to recognize and delineate these objects at a pixel level.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/segmentation-mask-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with segmentation annotations made with CVAT for instance segmentation tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/cvat/torchvision-cvat-segmentation-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/cvat/torchvision-cvat-segmentation-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> xml.etree.ElementTree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ET</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-17"></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-25">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-26"></span>
<span id="cb9-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw</span>
<span id="cb9-29"></span>
<span id="cb9-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-32"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-33"></span>
<span id="cb9-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-35"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-36">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes, Mask</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes, draw_segmentation_masks</span>
<span id="cb9-39"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-40"></span>
<span id="cb9-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. The TVTensor class for segmentation annotations is called <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.Mask.html">Mask</a>. Torchvision also includes a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_segmentation_masks.html">draw_segmentation_masks</a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with segmentation masks for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/cvat-instance-segmentation-toy-dataset/tree/main">cvat-instance-segmentation-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_f4094">
<thead>
</thead>
<tbody>
<tr>
<th id="T_f4094_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_f4094_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_f4094_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_f4094_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cvat-instance-segmentation-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_38429">
<thead>
</thead>
<tbody>
<tr>
<th id="T_38429_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_38429_row0_col0" class="data row0 col0">
cj-mills/cvat-instance-segmentation-toy-dataset
</td>
</tr>
<tr>
<th id="T_38429_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_38429_row1_col0" class="data row1 col0">
Datasets/../Archive/cvat-instance-segmentation-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_38429_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_38429_row2_col0" class="data row2 col0">
Datasets/cvat-instance-segmentation-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-images-and-annotations" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-images-and-annotations">Getting the Images and Annotations</h3>
<p>The dataset has a folder containing the sample images and an XML file containing the annotations.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming the images are stored in a subfolder named 'default'</span></span>
<span id="cb13-2">img_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images/default'</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming annotation file is in XML format and located in any subdirectory of the dataset</span></span>
<span id="cb13-5">annotation_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'annotations.xml'</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb13-8">pd.Series({</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image Folder"</span>: img_dir, </span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>: annotation_file_path}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_c53a2">
<thead>
</thead>
<tbody>
<tr>
<th id="T_c53a2_level0_row0" class="row_heading level0 row0">
Image Folder
</th>
<td id="T_c53a2_row0_col0" class="data row0 col0">
Datasets/cvat-instance-segmentation-toy-dataset/images/default
</td>
</tr>
<tr>
<th id="T_c53a2_level0_row1" class="row_heading level0 row1">
Annotation File
</th>
<td id="T_c53a2_row1_col0" class="data row1 col0">
Datasets/cvat-instance-segmentation-toy-dataset/annotations.xml
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all image files in the 'img_dir' directory</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> get_img_files(img_dir) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in each image folder</span></span>
<span id="cb14-5">}</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-11">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 31</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
adults-affection-attractive-2760688
</th>
<td>
Datasets/cvat-instance-segmentation-toy-dataset/images/default/adults-affection-attractive-2760688.jpg
</td>
</tr>
<tr>
<th>
258421
</th>
<td>
Datasets/cvat-instance-segmentation-toy-dataset/images/default/258421.jpg
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
Datasets/cvat-instance-segmentation-toy-dataset/images/default/3075367.jpg
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
Datasets/cvat-instance-segmentation-toy-dataset/images/default/3076319.jpg
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
Datasets/cvat-instance-segmentation-toy-dataset/images/default/3145551.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of the XML annotation file into a Pandas DataFrame so we can easily query the annotations.</p>
<section id="define-a-function-to-parse-the-cvat-xml-annotations" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-parse-the-cvat-xml-annotations">Define a function to parse the CVAT XML annotations</h4>
<p>The following helper function parses the raw XML content into a Pandas DataFrame.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parse_cvat_segmentation_xml(xml_content):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parses an XML string representing image segmentation data from CVAT and converts it into a pandas DataFrame.</span></span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The function expects an XML string with a structure containing 'image' elements, each with 'id', 'name', 'width', </span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and 'height' attributes, and nested 'polygon' elements with 'label' and 'points' attributes. It processes this </span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    XML content to extract relevant data and organizes it into a structured DataFrame.</span></span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    xml_content (str): A string containing the XML data to be parsed.</span></span>
<span id="cb16-11"></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pandas.DataFrame: A DataFrame where each row represents an image and contains the following columns:</span></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      'Image ID', 'Image Name', 'Width', 'Height', and 'Polygons'.</span></span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      'Polygons' is a list of dictionaries, each representing a polygon with 'Label' and 'Points'.</span></span>
<span id="cb16-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb16-17"></span>
<span id="cb16-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the XML content from the provided string.</span></span>
<span id="cb16-19">    root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ET.fromstring(xml_content)</span>
<span id="cb16-20">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb16-21"></span>
<span id="cb16-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> root.findall(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>):</span>
<span id="cb16-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract attributes for each image.</span></span>
<span id="cb16-24">        image_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb16-25">        image_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>)</span>
<span id="cb16-26">        width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>)</span>
<span id="cb16-27">        height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>)</span>
<span id="cb16-28"></span>
<span id="cb16-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a dictionary to store image data.</span></span>
<span id="cb16-30">        image_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-31">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(image_id),</span>
<span id="cb16-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image Name'</span>: image_name,</span>
<span id="cb16-33">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Width'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(width),</span>
<span id="cb16-34">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Height'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(height),</span>
<span id="cb16-35">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>: []</span>
<span id="cb16-36">        }</span>
<span id="cb16-37"></span>
<span id="cb16-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over each polygon element within the current image.</span></span>
<span id="cb16-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> polygon <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> image.findall(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'polygon'</span>):</span>
<span id="cb16-40">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the label and points of the polygon.</span></span>
<span id="cb16-41">            label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> polygon.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>)</span>
<span id="cb16-42">            </span>
<span id="cb16-43">            points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>.join(polygon.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>).split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span>))</span>
<span id="cb16-44">            points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(point) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> point <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> points.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)]</span>
<span id="cb16-45">            </span>
<span id="cb16-46">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary to store the polygon data.</span></span>
<span id="cb16-47">            points_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-48">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>: label,</span>
<span id="cb16-49">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Points'</span>: points</span>
<span id="cb16-50">            }</span>
<span id="cb16-51">            image_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>].append(points_data)</span>
<span id="cb16-52"></span>
<span id="cb16-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add the processed image data to the main data dictionary.</span></span>
<span id="cb16-54">        data[image_id] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_data</span>
<span id="cb16-55"></span>
<span id="cb16-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the data dictionary into a pandas DataFrame and return it.</span></span>
<span id="cb16-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pd.DataFrame.from_dict(data, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span></code></pre></div>
</section>
<section id="load-cvat-xml-annotations-into-a-dataframe" class="level4">
<h4 class="anchored" data-anchor-id="load-cvat-xml-annotations-into-a-dataframe">Load CVAT XML annotations into a DataFrame</h4>
<p>After parsing the XML content, we will change the index for the <code>annotation_df</code> DataFrame to match the keys in the <code>img_dict</code> dictionary, allowing us to retrieve both the image paths and annotation data using the same index key.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the XML file</span></span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(annotation_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb17-3">    xml_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the XML content</span></span>
<span id="cb17-6">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse_cvat_segmentation_xml(xml_content)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a new column 'Image ID' by extracting it from 'Image Name'</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This assumes that the 'Image ID' is the part of the 'Image Name' before the first period</span></span>
<span id="cb17-10">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image Name'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the new 'Image ID' column as the index of the DataFrame</span></span>
<span id="cb17-13">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>)</span>
<span id="cb17-14"></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first few rows of the DataFrame</span></span>
<span id="cb17-16">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image Name
</th>
<th>
Width
</th>
<th>
Height
</th>
<th>
Polygons
</th>
</tr>
<tr>
<th>
Image ID
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
258421.jpg
</td>
<td>
768
</td>
<td>
1152
</td>
<td>
[{‘Label’: ‘person’, ‘Points’: [377.0, 775.5, 368.0, 774.5, 346.5, 764.0, 349.5, 751.0, 348.5, 707.0, 358.5, 668.0, 343.5, 651.0, 359.5, 605.0, 379.5, 583.0, 366.01, 583.39, 362.55, 575.78, 361.85, 565.4, 353.2, 557.09, 357.7, 547.4, 350.78, 532.53, 356.32, 520.76, 359.78, 481.31, 376.39, 467.47, 387.46, 469.55, 401.3, 484.08, 405.8, 501.04, 394.03, 505.88, 394.73, 519.03, 399.92, 531.14, 374.66, 554.33, 369.81, 571.28, 374.31, 574.05, 388.15, 574.39, 397.49, 569.9, 402.5, 578.0, 410.5, 594.0, 412.5, 668.0, 387.0, 667.5, 375.5, 692.0, 376.5, 738.0, 380.5, 753.0, 388.5, 764.0, 386.5, 772.0]}, {‘Label’: ‘person’, ‘Points’: [404.0, 775.5, 396.5, 766.0, 411.5, 753.0, 411.5, 738.0, 416.5, 731.0, 412.5, 598.0, 419.5, 559.0, 416.0, 554.5, 404.0, 566.5, 387.0, 572.5, 375.5, 566.0, 377.5, 554.0, 405.5, 529.0, 413.5, 504.0, 414.5, 493.0, 386.5, 463.0, 388.5, 453.0, 399.0, 443.5, 413.0, 444.5, 423.5, 453.0, 457.5, 506.0, 452.5, 575.0, 458.5, 607.0, 447.5, 635.0, 444.5, 676.0, 452.5, 764.0, 443.0, 770.5]}]
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
3075367.jpg
</td>
<td>
1344
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘person’, ‘Points’: [829.0, 466.5, 825.5, 464.0, 824.5, 455.0, 825.5, 425.0, 828.0, 419.5, 833.5, 418.0, 827.5, 417.0, 822.5, 396.0, 825.5, 327.0, 843.5, 313.0, 842.5, 296.0, 833.5, 291.0, 832.5, 270.0, 837.0, 265.5, 856.0, 264.5, 868.5, 277.0, 870.5, 306.0, 881.5, 318.0, 883.5, 329.0, 893.0, 332.5, 899.5, 340.0, 901.5, 367.0, 883.5, 382.0, 849.5, 443.0, 842.5, 448.0, 838.5, 460.0]}, {‘Label’: ‘person’, ‘Points’: [714.0, 766.5, 664.0, 765.5, 654.0, 716.5, 640.0, 765.5, 578.5, 764.0, 578.5, 599.0, 570.5, 587.0, 592.5, 403.0, 583.5, 339.0, 525.5, 278.0, 463.5, 187.0, 423.5, 98.0, 422.5, 72.0, 444.0, 52.5, 460.5, 62.0, 458.5, 104.0, 485.5, 166.0, 581.0, 270.5, 623.0, 295.5, 644.5, 293.0, 630.5, 261.0, 642.5, 193.0, 667.0, 182.5, 707.0, 191.5, 719.5, 249.0, 709.0, 307.5, 774.0, 271.5, 848.5, 176.0, 875.5, 108.0, 867.5, 55.0, 902.0, 63.5, 908.5, 76.0, 902.5, 134.0, 858.5, 233.0, 759.5, 350.0, 736.5, 495.0, 752.5, 614.0]}, {‘Label’: ‘person’, ‘Points’: [359.0, 509.5, 355.0, 509.5, 350.5, 502.0, 353.5, 486.0, 349.5, 475.0, 349.5, 449.0, 345.5, 430.0, 339.5, 419.0, 337.5, 394.0, 327.5, 378.0, 331.5, 371.0, 332.5, 357.0, 342.5, 345.0, 345.5, 327.0, 354.0, 313.5, 365.5, 317.0, 366.5, 339.0, 385.0, 350.5, 399.5, 371.0, 398.5, 383.0, 390.0, 391.5, 390.5, 378.0, 383.0, 369.5, 379.5, 370.0, 380.5, 441.0, 376.5, 471.0, 370.0, 464.5, 364.5, 472.0, 362.5, 482.0, 364.5, 504.0]}, {‘Label’: ‘car’, ‘Points’: [1343.0, 764.5, 964.0, 745.5, 930.0, 764.5, 914.5, 759.0, 904.0, 722.5, 865.0, 706.5, 848.0, 735.5, 801.0, 735.5, 788.5, 699.0, 792.5, 577.0, 821.5, 476.0, 849.5, 454.0, 890.5, 382.0, 930.0, 355.5, 1021.0, 347.5, 1195.0, 358.5, 1287.0, 378.5, 1343.0, 436.0]}]
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
3076319.jpg
</td>
<td>
768
</td>
<td>
1120
</td>
<td>
[{‘Label’: ‘person’, ‘Points’: [590.0, 1119.0, 508.5, 1119.0, 393.5, 881.0, 363.5, 778.0, 359.5, 738.0, 377.5, 685.0, 420.5, 660.0, 388.5, 650.0, 410.5, 606.0, 412.5, 477.0, 349.5, 383.0, 364.5, 338.0, 341.5, 303.0, 369.5, 313.0, 396.5, 191.0, 449.0, 157.5, 496.0, 169.5, 524.5, 203.0, 534.5, 320.0, 577.5, 380.0, 588.5, 493.0, 635.5, 554.0, 631.5, 567.0, 687.5, 625.0, 704.5, 673.0, 698.5, 743.0, 632.5, 833.0, 618.5, 955.0, 573.5, 1096.0]}, {‘Label’: ‘person’, ‘Points’: [262.0, 1119.0, 128.5, 1119.0, 131.5, 1089.0, 35.5, 901.0, 11.5, 772.0, 33.5, 686.0, 70.5, 663.0, 34.5, 612.0, 25.5, 569.0, 52.5, 375.0, 97.0, 332.5, 195.5, 306.0, 205.5, 255.0, 192.5, 220.0, 240.0, 154.5, 290.0, 133.5, 323.5, 153.0, 341.5, 209.0, 332.5, 279.0, 294.5, 326.0, 347.5, 357.0, 352.5, 399.0, 400.5, 459.0, 404.5, 517.0, 391.5, 631.0, 344.5, 679.0, 359.5, 719.0, 323.5, 907.0, 224.5, 1082.0]}]
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
3145551.jpg
</td>
<td>
1184
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘person’, ‘Points’: [683.0, 398.5, 675.0, 398.5, 671.5, 396.0, 673.5, 378.0, 669.5, 366.0, 669.5, 359.0, 664.5, 346.0, 663.5, 326.0, 661.5, 320.0, 661.5, 312.0, 666.5, 304.0, 662.5, 295.0, 666.0, 283.5, 673.0, 283.5, 674.5, 285.0, 676.5, 289.0, 676.5, 297.0, 681.5, 302.0, 685.5, 313.0, 686.5, 336.0, 683.5, 344.0, 685.5, 395.0]}, {‘Label’: ‘person’, ‘Points’: [649.0, 398.5, 644.0, 398.5, 641.5, 396.0, 640.5, 387.0, 644.5, 379.0, 650.5, 358.0, 650.5, 351.0, 644.5, 335.0, 644.5, 323.0, 646.5, 316.0, 644.5, 300.0, 648.5, 291.0, 654.0, 288.5, 661.5, 295.0, 662.5, 298.0, 658.5, 309.0, 662.5, 316.0, 664.5, 324.0, 665.5, 349.0, 669.5, 364.0, 665.5, 383.0, 666.5, 396.0, 663.0, 397.5, 659.5, 392.0, 662.5, 375.0, 662.5, 364.0, 660.0, 361.5, 649.5, 383.0]}]
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
3176048.jpg
</td>
<td>
1152
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘person’, ‘Points’: [562.0, 464.5, 552.0, 464.5, 550.5, 462.0, 553.5, 454.0, 550.5, 433.0, 558.5, 402.0, 558.5, 389.0, 561.5, 380.0, 557.0, 372.5, 549.0, 374.5, 537.0, 372.5, 533.0, 377.5, 532.5, 371.0, 529.5, 368.0, 542.0, 365.5, 551.0, 366.5, 562.0, 361.5, 567.0, 361.5, 568.5, 360.0, 567.5, 346.0, 572.0, 342.5, 577.0, 342.5, 582.5, 348.0, 581.5, 360.0, 591.5, 372.0, 593.5, 386.0, 592.0, 388.5, 587.0, 388.5, 585.5, 391.0, 578.5, 419.0, 572.5, 434.0, 571.5, 445.0, 566.5, 454.0, 565.5, 462.0]}, {‘Label’: ‘person’, ‘Points’: [661.0, 436.5, 659.5, 436.0, 660.5, 432.0, 660.5, 396.0, 659.5, 392.0, 663.5, 376.0, 661.0, 373.5, 658.0, 373.5, 650.0, 377.5, 641.0, 377.5, 640.5, 376.0, 647.0, 372.5, 651.0, 372.5, 656.0, 370.5, 666.0, 365.5, 667.5, 364.0, 667.5, 359.0, 670.0, 356.5, 674.0, 356.5, 677.5, 360.0, 676.5, 367.0, 682.5, 374.0, 683.5, 389.0, 681.0, 390.5, 678.5, 388.0, 678.5, 385.0, 677.5, 385.0, 677.5, 390.0, 673.5, 395.0, 673.5, 408.0, 671.5, 411.0, 670.5, 420.0, 668.5, 425.0, 668.5, 433.0, 669.5, 434.0]}]
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The source XML content corresponding to the first row in the DataFrame is available below:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">&lt;?xml</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> version=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> encoding=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">?&gt;</span></span>
<span id="cb18-2">&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">annotations</span>&gt;</span>
<span id="cb18-3">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">version</span>&gt;1.1&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">version</span>&gt;</span>
<span id="cb18-4">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span>&gt;</span>
<span id="cb18-5">  &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span>&gt;</span>
<span id="cb18-6">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">image</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"258421.jpg"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> subset=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> task_id=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"9"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> width=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"768"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> height=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1152"</span>&gt;</span>
<span id="cb18-7">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">polygon</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> label=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> source=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> occluded=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> points=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"377.00,775.50;368.00,774.50;346.50,764.00;349.50,751.00;348.50,707.00;358.50,668.00;343.50,651.00;359.50,605.00;379.50,583.00;366.01,583.39;362.55,575.78;361.85,565.40;353.20,557.09;357.70,547.40;350.78,532.53;356.32,520.76;359.78,481.31;376.39,467.47;387.46,469.55;401.30,484.08;405.80,501.04;394.03,505.88;394.73,519.03;399.92,531.14;374.66,554.33;369.81,571.28;374.31,574.05;388.15,574.39;397.49,569.90;402.50,578.00;410.50,594.00;412.50,668.00;387.00,667.50;375.50,692.00;376.50,738.00;380.50,753.00;388.50,764.00;386.50,772.00"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> z_order=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>&gt;</span>
<span id="cb18-8">    &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">polygon</span>&gt;</span>
<span id="cb18-9">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">polygon</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> label=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> source=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> occluded=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> points=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"404.00,775.50;396.50,766.00;411.50,753.00;411.50,738.00;416.50,731.00;412.50,598.00;419.50,559.00;416.00,554.50;404.00,566.50;387.00,572.50;375.50,566.00;377.50,554.00;405.50,529.00;413.50,504.00;414.50,493.00;386.50,463.00;388.50,453.00;399.00,443.50;413.00,444.50;423.50,453.00;457.50,506.00;452.50,575.00;458.50,607.00;447.50,635.00;444.50,676.00;452.50,764.00;443.00,770.50"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> z_order=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>&gt;</span>
<span id="cb18-10">    &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">polygon</span>&gt;</span>
<span id="cb18-11">  &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">image</span>&gt;</span>
<span id="cb18-12">&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">annotations</span>&gt;</span></code></pre></div>
<p>The segmentation polygon annotations in <code>[x1,y1, x2,y2, ..., xn,yn]</code> format.</p>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step is not strictly necessary for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'boxes_df' column in the annotation_df dataframe</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe and rename the 'boxes_df' column to 'boxes_df'</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'boxes_df' column of the dataframe</span></span>
<span id="cb19-4">polygon_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>].explode().to_frame().Polygons.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb19-5"></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb19-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> polygon_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>].unique().tolist()</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb19-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
person
</td>
</tr>
<tr>
<th>
1
</th>
<td>
car
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb20-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> polygon_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>].value_counts()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb20-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb20-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb20-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb20-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb20-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb20-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_24_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Note the class distribution is quite imbalanced between the <code>person</code> and <code>car</code> classes. For a real dataset, you would want these to be much closer.</p>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its segmentation masks and bounding boxes using torchvision’s <code>BoundingBoxes</code> and <code>Mask</code> classes and <code>draw_bounding_boxes</code> and <code>draw_segmentation_masks</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to bounding boxes for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb21-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb21-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb21-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_28_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb22-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb22-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb24-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb24-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb24-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb24-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (768, 1152)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_35_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb26-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
adults-affection-attractive-2760688
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
Image Name
</th>
<td>
adults-affection-attractive-2760688.jpg
</td>
</tr>
<tr>
<th>
Width
</th>
<td>
768
</td>
</tr>
<tr>
<th>
Height
</th>
<td>
1152
</td>
</tr>
<tr>
<th>
Polygons
</th>
<td>
[{‘Label’: ‘person’, ‘Points’: [389.0, 1151.0, 34.5, 1151.0, 82.5, 992.0, 103.0, 965.5, 147.5, 953.0, 135.5, 848.0, 104.5, 763.0, 97.5, 672.0, 129.5, 581.0, 186.5, 519.0, 127.5, 466.0, 106.5, 422.0, 118.5, 369.0, 181.0, 306.5, 258.0, 325.5, 301.5, 412.0, 285.5, 566.0, 291.5, 594.0, 323.5, 610.0, 335.5, 714.0, 366.5, 777.0, 341.5, 848.0, 337.5, 944.0]}, {‘Label’: ‘person’, ‘Points’: [532.0, 1151.0, 397.5, 1151.0, 345.5, 958.0, 345.5, 855.0, 369.5, 776.0, 340.5, 720.0, 344.5, 678.0, 325.5, 647.0, 326.5, 608.0, 296.5, 592.0, 294.5, 540.0, 298.0, 519.5, 341.5, 493.0, 273.5, 329.0, 284.5, 283.0, 332.0, 249.5, 385.0, 260.5, 411.5, 287.0, 431.5, 338.0, 434.0, 411.5, 449.0, 407.5, 486.0, 440.5, 601.0, 461.5, 671.5, 580.0, 698.5, 786.0, 681.5, 1090.0, 663.0, 1137.5, 549.0, 1127.5]}]
</td>
</tr>
</tbody>
</table>
</div>
<p>The lists of point coordinates in the segmentation annotations are the vertices of a polygon for the individual segmentation masks. We can use these to generate images for each segmentation mask.</p>
</section>
<section id="define-a-function-to-convert-segmentation-polygons-to-images" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-convert-segmentation-polygons-to-images">Define a function to convert segmentation polygons to images</h4>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_polygon_mask(image_size, vertices):</span>
<span id="cb27-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Create a grayscale image with a white polygonal area on a black background.</span></span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - image_size (tuple): A tuple representing the dimensions (width, height) of the image.</span></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - vertices (list): A list of tuples, each containing the x, y coordinates of a vertex</span></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        of the polygon. Vertices should be in clockwise or counter-clockwise order.</span></span>
<span id="cb27-9"></span>
<span id="cb27-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb27-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - PIL.Image.Image: A PIL Image object containing the polygonal mask.</span></span>
<span id="cb27-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb27-13"></span>
<span id="cb27-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new black image with the given dimensions</span></span>
<span id="cb27-15">    mask_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>, image_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb27-16">    </span>
<span id="cb27-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the polygon on the image. The area inside the polygon will be white (255).</span></span>
<span id="cb27-18">    ImageDraw.Draw(mask_img, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>).polygon(vertices, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb27-19"></span>
<span id="cb27-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the image with the drawn polygon</span></span>
<span id="cb27-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mask_img</span></code></pre></div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>We can now generate the segmentation mask images and feed those to the <code>draw_segmentation_mask</code> function.</p>
<p>We can use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.masks_to_boxes.html#torchvision.ops.masks_to_boxes"><code>masks_to_boxes</code></a> function included with torchvision to generate bounding box annotations in the <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format from the segmentation masks. That is the same format the <code>draw_bounding_boxes</code> function expects so we can use the output directly.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb28-2">polygon_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>]</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb28-5">mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(sample_img.size, polygon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Points'</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> polygon <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> polygon_points]</span>
<span id="cb28-6"></span>
<span id="cb28-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb28-8">masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs])</span>
<span id="cb28-9"></span>
<span id="cb28-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb28-11">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [polygon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> polygon <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>]]</span>
<span id="cb28-12">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.masks_to_boxes(masks)</span>
<span id="cb28-13"></span>
<span id="cb28-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb28-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb28-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb28-17">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>masks, </span>
<span id="cb28-18">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb28-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb28-20">)</span>
<span id="cb28-21"></span>
<span id="cb28-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb28-23">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb28-24">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb28-25">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bboxes,</span>
<span id="cb28-26">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb28-27">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb28-28">)</span>
<span id="cb28-29"></span>
<span id="cb28-30">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_41_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb29-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb30-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb30-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb30-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb30-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb30-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb30-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb30-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb30-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb30-12"></span>
<span id="cb30-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb30-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb31-2">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare mask and bounding box targets</span></span>
<span id="cb31-5">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb31-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: Mask(masks), </span>
<span id="cb31-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bboxes, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb31-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb31-9">}</span>
<span id="cb31-10"></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb31-12">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb31-13"></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb31-15">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb31-16"></span>
<span id="cb31-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb31-18">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb31-19"></span>
<span id="cb31-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb31-21">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-22">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb31-23">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb31-24"></span>
<span id="cb31-25">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb31-26">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb31-27">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb31-28">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb31-29">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb31-30">)</span>
<span id="cb31-31"></span>
<span id="cb31-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb31-33">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb31-34">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb31-35">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb31-36">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb31-37">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb31-38">)</span>
<span id="cb31-39"></span>
<span id="cb31-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb31-41">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb31-42"></span>
<span id="cb31-43">pd.Series({</span>
<span id="cb31-44">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb31-45">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb31-46">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb31-47">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb31-48">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb31-49">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_49_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_45284">
<thead>
</thead>
<tbody>
<tr>
<th id="T_45284_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_45284_row0_col0" class="data row0 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_45284_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_45284_row1_col0" class="data row1 col0">
(434, 751)
</td>
</tr>
<tr>
<th id="T_45284_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_45284_row2_col0" class="data row2 col0">
(221, 382)
</td>
</tr>
<tr>
<th id="T_45284_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_45284_row3_col0" class="data row3 col0">
(382, 382)
</td>
</tr>
<tr>
<th id="T_45284_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_45284_row4_col0" class="data row4 col0">
(384, 384)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CVATInstSegDataset(Dataset):</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class represents a PyTorch Dataset for a collection of images and their annotations.</span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The class is designed to load images along with their corresponding bounding box annotations and labels.</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb32-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb32-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Constructor for the CVATInstSegDataset class.</span></span>
<span id="cb32-9"></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_keys (list): List of unique identifiers for images.</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation_df (DataFrame): DataFrame containing the image annotations.</span></span>
<span id="cb32-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_dict (dict): Dictionary mapping image identifiers to image file paths.</span></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        class_to_idx (dict): Dictionary mapping class labels to indices.</span></span>
<span id="cb32-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transforms (callable, optional): Optional transform to be applied on a sample.</span></span>
<span id="cb32-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb32-18">        </span>
<span id="cb32-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of image keys</span></span>
<span id="cb32-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DataFrame containing annotations</span></span>
<span id="cb32-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping image keys to image paths</span></span>
<span id="cb32-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping class names to class indices</span></span>
<span id="cb32-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Image transforms to be applied</span></span>
<span id="cb32-24">        </span>
<span id="cb32-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb32-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the length of the dataset.</span></span>
<span id="cb32-28"></span>
<span id="cb32-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb32-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        int: The number of items in the dataset.</span></span>
<span id="cb32-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb32-33">        </span>
<span id="cb32-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb32-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Fetch an item from the dataset at the specified index.</span></span>
<span id="cb32-37"></span>
<span id="cb32-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb32-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        index (int): Index of the item to fetch from the dataset.</span></span>
<span id="cb32-40"></span>
<span id="cb32-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb32-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the image and its associated target (annotations).</span></span>
<span id="cb32-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the key for the image at the specified index</span></span>
<span id="cb32-45">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb32-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the annotations for this image</span></span>
<span id="cb32-47">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb32-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image and its target (bounding boxes and labels)</span></span>
<span id="cb32-49">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb32-50">        </span>
<span id="cb32-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the transformations, if any</span></span>
<span id="cb32-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb32-53">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb32-54">        </span>
<span id="cb32-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb32-56"></span>
<span id="cb32-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb32-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Load an image and its target (bounding boxes and labels).</span></span>
<span id="cb32-60"></span>
<span id="cb32-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb32-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation (pandas.Series): The annotations for an image.</span></span>
<span id="cb32-63"></span>
<span id="cb32-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb32-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        tuple: A tuple containing the image and a dictionary with 'boxes' and 'labels' keys.</span></span>
<span id="cb32-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the file path of the image</span></span>
<span id="cb32-68">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb32-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image file and convert it to RGB</span></span>
<span id="cb32-70">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb32-71"></span>
<span id="cb32-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb32-73">        polygon_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>]</span>
<span id="cb32-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb32-75">        mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(image.size, polygon[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Points'</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> polygon <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> polygon_points]</span>
<span id="cb32-76">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb32-77">        masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mask(torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs]))</span>
<span id="cb32-78">        </span>
<span id="cb32-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate bounding box annotations from segmentation masks</span></span>
<span id="cb32-80">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.masks_to_boxes(masks)</span>
<span id="cb32-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a BoundingBoxes object with the bounding boxes</span></span>
<span id="cb32-82">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb32-83">        </span>
<span id="cb32-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the class labels to indices</span></span>
<span id="cb32-85">        annotation_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> box <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polygons'</span>]]</span>
<span id="cb32-86">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_labels])</span>
<span id="cb32-87">        </span>
<span id="cb32-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: masks,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb33-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb33-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb33-4">        iou_crop,</span>
<span id="cb33-5">        transforms.ColorJitter(</span>
<span id="cb33-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb33-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb33-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb33-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb33-10">        ),</span>
<span id="cb33-11">        transforms.RandomGrayscale(),</span>
<span id="cb33-12">        transforms.RandomEqualize(),</span>
<span id="cb33-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb33-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb33-15">    ],</span>
<span id="cb33-16">)</span>
<span id="cb33-17"></span>
<span id="cb33-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb33-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-20">    resize_max, </span>
<span id="cb33-21">    pad_square,</span>
<span id="cb33-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb33-23">])</span>
<span id="cb33-24"></span>
<span id="cb33-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb33-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-27">    transforms.ToImage(), </span>
<span id="cb33-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb33-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb33-30">])</span>
<span id="cb33-31"></span>
<span id="cb33-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb33-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb33-34">    data_aug_tfms, </span>
<span id="cb33-35">    resize_pad_tfm, </span>
<span id="cb33-36">    final_tfms</span>
<span id="cb33-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb34-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb34-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CVATInstSegDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training dataset</span></span>
<span id="cb34-8">pd.Series({</span>
<span id="cb34-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb34-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_5167f">
<thead>
</thead>
<tbody>
<tr>
<th id="T_5167f_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_5167f_row0_col0" class="data row0 col0">
31
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb35-4">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb35-5"></span>
<span id="cb35-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb35-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks( </span>
<span id="cb35-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb35-9">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb35-10">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb35-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb35-12">)</span>
<span id="cb35-13"></span>
<span id="cb35-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with bounding boxes</span></span>
<span id="cb35-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb35-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb35-17">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb35-18">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb35-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb35-20">)</span>
<span id="cb35-21"></span>
<span id="cb35-22">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/images/output_60_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom segmentation annotations made with the CVAT annotation tool and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future instance segmentation projects.</p>
<p>As a next step, perhaps try annotating a custom instance segmentation dataset with CVAT and loading it with this tutorial’s code. Once you’re comfortable with that, try adapting the code in the following tutorial to train an instance segmentation model on your custom dataset.</p>
<ul>
<li><a href="../../../posts/pytorch-train-mask-rcnn-tutorial/">Training Mask R-CNN Models with PyTorch</a></li>
</ul>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-cvat-annotation-tutorials/bounding-boxes/"><strong>Working with CVAT Bounding Box Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with CVAT bounding box annotations in torchvision for object detection tasks.</li>
<li><a href="../../../posts/torchvision-cvat-annotation-tutorials/keypoints/"><strong>Working with CVAT Keypoint Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with CVAT keypoint annotations in torchvision for keypoint estimation tasks.</li>
<li><a href="http://localhost:3847/posts/pytorch-train-mask-rcnn-tutorial/"><strong>Training Mask R-CNN Models with PyTorch</strong></a><strong>:</strong> Learn how to train Mask R-CNN models on custom datasets with PyTorch.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>instance-segmentation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with CVAT Keypoint Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-cvat-annotation-tutorials/keypoints/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with keypoint annotations created with the <a href="https://github.com/opencv/cvat">CVAT annotation tool</a> in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Keypoint annotations mark specific points of interest on an object in an image for training models to recognize and interpret poses, gestures, or significant parts of objects.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/keypoints/images/keypoint-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with keypoint annotations made with CVAT for keypoint estimation tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/cvat/torchvision-cvat-keypoint-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/cvat/torchvision-cvat-keypoint-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> xml.etree.ElementTree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ET</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-17"></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-25">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-26"></span>
<span id="cb9-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw</span>
<span id="cb9-29"></span>
<span id="cb9-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-32"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-33"></span>
<span id="cb9-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-35"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-36">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-39"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-40"></span>
<span id="cb9-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. While there is currently no dedicated TVTensor class for keypoint annotations, we can use the one for bounding boxes instead. Torchvision does include a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_keypoints.html"><code>draw_keypoints</code></a> function, but we might as well stick with the <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with keypoints for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/cvat-keypoint-toy-dataset/tree/main">cvat-keypoint-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_2f713">
<thead>
</thead>
<tbody>
<tr>
<th id="T_2f713_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_2f713_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_2f713_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_2f713_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cvat-keypoint-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_01a4c">
<thead>
</thead>
<tbody>
<tr>
<th id="T_01a4c_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_01a4c_row0_col0" class="data row0 col0">
cj-mills/cvat-keypoint-toy-dataset
</td>
</tr>
<tr>
<th id="T_01a4c_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_01a4c_row1_col0" class="data row1 col0">
Datasets/../Archive/cvat-keypoint-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_01a4c_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_01a4c_row2_col0" class="data row2 col0">
Datasets/cvat-keypoint-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-images-and-annotations" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-images-and-annotations">Getting the Images and Annotations</h3>
<p>The dataset has a folder containing the sample images and an XML file containing the annotations.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming the images are stored in a subfolder named 'images'</span></span>
<span id="cb13-2">img_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images/'</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming annotation file is in XML format and located in any subdirectory of the dataset</span></span>
<span id="cb13-5">annotation_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'annotations.xml'</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb13-8">pd.Series({</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image Folder"</span>: img_dir, </span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>: annotation_file_path}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_5d6a1">
<thead>
</thead>
<tbody>
<tr>
<th id="T_5d6a1_level0_row0" class="row_heading level0 row0">
Image Folder
</th>
<td id="T_5d6a1_row0_col0" class="data row0 col0">
Datasets/cvat-keypoint-toy-dataset/images
</td>
</tr>
<tr>
<th id="T_5d6a1_level0_row1" class="row_heading level0 row1">
Annotation File
</th>
<td id="T_5d6a1_row1_col0" class="data row1 col0">
Datasets/cvat-keypoint-toy-dataset/annotations.xml
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all image files in the 'img_dir' directory</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> get_img_files(img_dir) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the image directory</span></span>
<span id="cb14-5">}</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-11">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 38</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
adorable-animal-blur-988551
</th>
<td>
Datasets/cvat-keypoint-toy-dataset/images/adorable-animal-blur-988551.jpg
</td>
</tr>
<tr>
<th>
133196
</th>
<td>
Datasets/cvat-keypoint-toy-dataset/images/133196.jpg
</td>
</tr>
<tr>
<th>
245035
</th>
<td>
Datasets/cvat-keypoint-toy-dataset/images/245035.jpg
</td>
</tr>
<tr>
<th>
245036
</th>
<td>
Datasets/cvat-keypoint-toy-dataset/images/245036.jpg
</td>
</tr>
<tr>
<th>
247937
</th>
<td>
Datasets/cvat-keypoint-toy-dataset/images/247937.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of the XML annotation file into a Pandas DataFrame so we can easily query the annotations.</p>
<section id="define-a-function-to-parse-the-cvat-xml-annotations" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-parse-the-cvat-xml-annotations">Define a function to parse the CVAT XML annotations</h4>
<p>The following helper function parses the raw XML content into a Pandas DataFrame.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parse_cvat_keypoint_xml(xml_content):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parses a CVAT XML content for keypoints and converts it into a Pandas DataFrame.</span></span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function processes an XML file used in Computer Vision Annotation Tool (CVAT) format. </span></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    It extracts key information such as image ID, image name, dimensions, and keypoints.</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    xml_content (str): A string representation of the CVAT XML content.</span></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pandas.DataFrame: A DataFrame where each row represents an image and its associated data </span></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      including image ID, image name, dimensions, and keypoints.</span></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb16-15">    </span>
<span id="cb16-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the XML content</span></span>
<span id="cb16-17">    root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ET.fromstring(xml_content)</span>
<span id="cb16-18">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb16-19"></span>
<span id="cb16-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterating through each image element in the XML</span></span>
<span id="cb16-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> root.findall(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>):</span>
<span id="cb16-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extracting basic image information</span></span>
<span id="cb16-23">        image_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb16-24">        image_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>)</span>
<span id="cb16-25">        width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>)</span>
<span id="cb16-26">        height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>)</span>
<span id="cb16-27"></span>
<span id="cb16-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Structuring image data</span></span>
<span id="cb16-29">        image_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-30">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(image_id),</span>
<span id="cb16-31">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image Name'</span>: image_name,</span>
<span id="cb16-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Width'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(width),</span>
<span id="cb16-33">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Height'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(height),</span>
<span id="cb16-34">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Keypoints'</span>: []</span>
<span id="cb16-35">        }</span>
<span id="cb16-36"></span>
<span id="cb16-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterating through keypoints within each image</span></span>
<span id="cb16-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> points <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> image.findall(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>):</span>
<span id="cb16-39">            label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> points.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>)</span>
<span id="cb16-40">            keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> points.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'points'</span>).split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)</span>
<span id="cb16-41">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(keypoints[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb16-42">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(keypoints[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb16-43"></span>
<span id="cb16-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Structuring keypoints data</span></span>
<span id="cb16-45">            keypoints_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-46">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>: label,</span>
<span id="cb16-47">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>: x,</span>
<span id="cb16-48">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>: y</span>
<span id="cb16-49">            }</span>
<span id="cb16-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding keypoints data to the image data</span></span>
<span id="cb16-51">            image_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Keypoints'</span>].append(keypoints_data)</span>
<span id="cb16-52"></span>
<span id="cb16-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adding image data to the overall data dictionary</span></span>
<span id="cb16-54">        data[image_id] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_data</span>
<span id="cb16-55"></span>
<span id="cb16-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Converting the data dictionary to a Pandas DataFrame</span></span>
<span id="cb16-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pd.DataFrame.from_dict(data, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span></code></pre></div>
</section>
<section id="load-cvat-xml-annotations-into-a-dataframe" class="level4">
<h4 class="anchored" data-anchor-id="load-cvat-xml-annotations-into-a-dataframe">Load CVAT XML annotations into a DataFrame</h4>
<p>After parsing the XML content, we will change the index for the <code>annotation_df</code> DataFrame to match the keys in the <code>img_dict</code> dictionary, allowing us to retrieve both the image paths and annotation data using the same index key.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the XML file</span></span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(annotation_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb17-3">    xml_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the XML content</span></span>
<span id="cb17-6">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse_cvat_keypoint_xml(xml_content)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a new column 'Image ID' by extracting it from 'Image Name'</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This assumes that the 'Image ID' is the part of the 'Image Name' before the first period</span></span>
<span id="cb17-10">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image Name'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the new 'Image ID' column as the index of the DataFrame</span></span>
<span id="cb17-13">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>)</span>
<span id="cb17-14"></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first few rows of the DataFrame</span></span>
<span id="cb17-16">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image Name
</th>
<th>
Width
</th>
<th>
Height
</th>
<th>
Keypoints
</th>
</tr>
<tr>
<th>
Image ID
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
133196
</th>
<td>
133196.jpg
</td>
<td>
960
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘nose’, ‘x’: 386.71, ‘y’: 297.11}]
</td>
</tr>
<tr>
<th>
245035
</th>
<td>
245035.jpg
</td>
<td>
768
</td>
<td>
1152
</td>
<td>
[{‘Label’: ‘nose’, ‘x’: 334.46, ‘y’: 319.58}]
</td>
</tr>
<tr>
<th>
245036
</th>
<td>
245036.jpg
</td>
<td>
768
</td>
<td>
1120
</td>
<td>
[{‘Label’: ‘nose’, ‘x’: 226.86, ‘y’: 240.8}]
</td>
</tr>
<tr>
<th>
247937
</th>
<td>
247937.jpg
</td>
<td>
1152
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘nose’, ‘x’: 454.66, ‘y’: 230.04}]
</td>
</tr>
<tr>
<th>
3172614
</th>
<td>
3172614.jpg
</td>
<td>
1152
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘nose’, ‘x’: 539.41, ‘y’: 608.09}]
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The source XML content corresponding to the first row in the DataFrame is available below:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">&lt;?xml</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> version=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> encoding=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">?&gt;</span></span>
<span id="cb18-2">&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">annotations</span>&gt;</span>
<span id="cb18-3">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">version</span>&gt;1.1&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">version</span>&gt;</span>
<span id="cb18-4">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span>&gt;</span>
<span id="cb18-5">  &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span>&gt;</span>
<span id="cb18-6">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">image</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"133196.jpg"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> width=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"960"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> height=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"768"</span>&gt;</span>
<span id="cb18-7">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">points</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> label=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nose"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> source=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> occluded=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> points=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"386.71,297.11"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> z_order=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>&gt;</span>
<span id="cb18-8">    &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">points</span>&gt;</span>
<span id="cb18-9">  &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">image</span>&gt;</span>
<span id="cb18-10">&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">annotations</span>&gt;</span></code></pre></div>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step won’t yield any insights for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'boxes_df' column in the annotation_df dataframe</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe and rename the 'boxes_df' column to 'boxes_df'</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'boxes_df' column of the dataframe</span></span>
<span id="cb19-4">keypoints_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Keypoints'</span>].explode().to_frame().Keypoints.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb19-5"></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb19-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keypoints_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>].unique().tolist()</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb19-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
nose
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb20-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keypoints_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>].value_counts()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb20-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb20-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb20-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb20-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb20-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb20-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/keypoints/images/output_24_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its keypoints using torchvision’s <code>BoundingBoxes</code> class and <code>draw_bounding_boxes</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to keypoints for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb21-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb21-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb21-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/keypoints/images/output_27_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb22-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb22-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb24-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb24-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb24-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb24-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (1152, 768)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/keypoints/images/output_35_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb26-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
adorable-animal-blur-988551
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
Image Name
</th>
<td>
adorable-animal-blur-988551.jpg
</td>
</tr>
<tr>
<th>
Width
</th>
<td>
1152
</td>
</tr>
<tr>
<th>
Height
</th>
<td>
768
</td>
</tr>
<tr>
<th>
Keypoints
</th>
<td>
[{‘Label’: ‘nose’, ‘x’: 349.17, ‘y’: 520.89}]
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>We can convert our keypoint annotations to bounding boxes by adding values for box width and height, making it <code>[center-x, center-y, width, height]</code> format</p>
<p>The <code>draw_bounding_boxes</code> function expects bounding box annotations in <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format, so we’ll use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.box_convert.html#torchvision.ops.box_convert"><code>box_convert</code></a> function included with torchvision to convert the bounding box annotations from <code>[cx,cy,w,h]</code> to <code>[x,y,x,y]</code> format.</p>
<p>We can reverse this process during training to extract the target keypoints for calculating the loss.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and keypoint annotations for the sample image</span></span>
<span id="cb27-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [keypoint[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> keypoint <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Keypoints'</span>]]</span>
<span id="cb27-3">keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[keypoint[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>], keypoint[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> keypoint <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Keypoints'</span>]])</span>
<span id="cb27-4">keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((torch.tensor(keypoints), torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb27-5"></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb27-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb27-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb27-9">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(keypoints_bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb27-10">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb27-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb27-12">)</span>
<span id="cb27-13"></span>
<span id="cb27-14">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/keypoints/images/output_39_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb28-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb29-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb29-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb29-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb29-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb29-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb29-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb29-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb29-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb29-12"></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb29-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb30-2">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb30-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torchvision.ops.box_convert(keypoints_bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb30-4">                           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb30-5">                           canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb30-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb30-7">}</span>
<span id="cb30-8"></span>
<span id="cb30-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb30-10">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb30-11"></span>
<span id="cb30-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb30-13">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb30-14"></span>
<span id="cb30-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb30-16">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb30-17"></span>
<span id="cb30-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb30-19">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb30-20">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb30-21">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb30-22"></span>
<span id="cb30-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb30-24">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb30-25">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb30-26">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb30-27">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb30-28">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb30-29">)</span>
<span id="cb30-30"></span>
<span id="cb30-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb30-32">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb30-33"></span>
<span id="cb30-34">pd.Series({</span>
<span id="cb30-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb30-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb30-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb30-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb30-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb30-40">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/keypoints/images/output_47_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_5e985">
<thead>
</thead>
<tbody>
<tr>
<th id="T_5e985_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_5e985_row0_col0" class="data row0 col0">
(1152, 768)
</td>
</tr>
<tr>
<th id="T_5e985_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_5e985_row1_col0" class="data row1 col0">
(1152, 768)
</td>
</tr>
<tr>
<th id="T_5e985_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_5e985_row2_col0" class="data row2 col0">
(384, 256)
</td>
</tr>
<tr>
<th id="T_5e985_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_5e985_row3_col0" class="data row3 col0">
(384, 384)
</td>
</tr>
<tr>
<th id="T_5e985_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_5e985_row4_col0" class="data row4 col0">
(384, 384)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CVATKeypointDataset(Dataset):</span>
<span id="cb31-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A dataset class for handling CVAT annotated images and keypoints.</span></span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_keys (list): List of image keys.</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _annotation_df (DataFrame): DataFrame containing annotations.</span></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_dict (dict): Dictionary mapping image keys to image file paths.</span></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _transforms (function): Transformation functions to be applied to images and targets.</span></span>
<span id="cb31-11"></span>
<span id="cb31-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb31-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_keys (list): List of image keys.</span></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation_df (DataFrame): DataFrame containing annotations.</span></span>
<span id="cb31-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_dict (dict): Dictionary mapping image keys to image file paths.</span></span>
<span id="cb31-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb31-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transforms (function, optional): Transformation functions for images and targets.</span></span>
<span id="cb31-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb31-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb31-20">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb31-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys</span>
<span id="cb31-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df</span>
<span id="cb31-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict</span>
<span id="cb31-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx</span>
<span id="cb31-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms</span>
<span id="cb31-26"></span>
<span id="cb31-27">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.BBOX_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb31-28">        </span>
<span id="cb31-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb31-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the number of items in the dataset.</span></span>
<span id="cb31-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb31-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            int: Number of items in the dataset.</span></span>
<span id="cb31-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb31-37">        </span>
<span id="cb31-38">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb31-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an item from the dataset at the specified index.</span></span>
<span id="cb31-41"></span>
<span id="cb31-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            index (int): Index of the item to retrieve.</span></span>
<span id="cb31-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb31-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its corresponding target dictionary.</span></span>
<span id="cb31-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-48">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb31-49">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb31-50">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb31-51">        </span>
<span id="cb31-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb31-53">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb31-54"></span>
<span id="cb31-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill any missing keypoints with dummy values</span></span>
<span id="cb31-56">        target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._fill_and_order_target(target)</span>
<span id="cb31-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb31-58"></span>
<span id="cb31-59">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb31-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Loads an image and its corresponding target based on the annotation.</span></span>
<span id="cb31-62"></span>
<span id="cb31-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation (DataFrame row): Annotation data for the image.</span></span>
<span id="cb31-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb31-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its target dictionary.</span></span>
<span id="cb31-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-69">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb31-70">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb31-71">        </span>
<span id="cb31-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract keypoints from the annotation and create bounding boxes for torchvision augmentations</span></span>
<span id="cb31-73">        keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Keypoints'</span>]</span>
<span id="cb31-74">        keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {keypoint[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>]: [keypoint[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>], keypoint[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> keypoint <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> keypoints}</span>
<span id="cb31-75">        keypoints <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([keypoints[name] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> class_names], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb31-76">        keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((torch.tensor(keypoints), torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-77">        keypoints_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((torch.tensor(keypoints), torch.ones(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(keypoints), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.BBOX_DIM), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-78">    </span>
<span id="cb31-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert from center x, center y, width, height format to xmin, ymin, xmax, ymax format</span></span>
<span id="cb31-80">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.box_convert(keypoints_bboxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cxcywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>)</span>
<span id="cb31-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create BoundingBoxes object with the converted bounding boxes</span></span>
<span id="cb31-82">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb31-83">    </span>
<span id="cb31-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract labels for keypoints and convert them to tensor</span></span>
<span id="cb31-85">        annotation_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [keypoint[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> keypoint <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Keypoints'</span>]]</span>
<span id="cb31-86">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_labels])</span>
<span id="cb31-87">    </span>
<span id="cb31-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span>
<span id="cb31-89"></span>
<span id="cb31-90">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _fill_and_order_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, target):</span>
<span id="cb31-91">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Fills and orders the target bounding boxes and labels based on the class index.</span></span>
<span id="cb31-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This method ensures that each target has a bounding box and label for each class,</span></span>
<span id="cb31-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        even if some classes are not present in the original target. Missing classes</span></span>
<span id="cb31-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        are filled with dummy values.</span></span>
<span id="cb31-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            target (dict): A dictionary containing 'boxes' and 'labels' keys, where</span></span>
<span id="cb31-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           'boxes' is a tensor of bounding boxes and 'labels' is a tensor</span></span>
<span id="cb31-101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                           of labels corresponding to these boxes.</span></span>
<span id="cb31-102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb31-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-104"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dict: The updated target dictionary with boxes and labels ordered and filled</span></span>
<span id="cb31-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                  according to the class index.</span></span>
<span id="cb31-106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-107">    </span>
<span id="cb31-108">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize new boxes with dummy values (-1.0) for each class</span></span>
<span id="cb31-109">        new_boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.full((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span>
<span id="cb31-110">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare labels tensor based on the class indices</span></span>
<span id="cb31-111">        new_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx.values()), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32)</span>
<span id="cb31-112">    </span>
<span id="cb31-113">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over each class label</span></span>
<span id="cb31-114">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(new_labels):</span>
<span id="cb31-115">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the current label exists in the target's labels</span></span>
<span id="cb31-116">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]:</span>
<span id="cb31-117">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the index of the current label in the target's labels</span></span>
<span id="cb31-118">                idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> label).nonzero(as_tuple<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb31-119">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assign the corresponding box to the new boxes tensor</span></span>
<span id="cb31-120">                new_boxes[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>][idx]</span>
<span id="cb31-121">    </span>
<span id="cb31-122">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update the target dictionary with the new boxes and labels</span></span>
<span id="cb31-123">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_boxes</span>
<span id="cb31-124">        target[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> new_labels</span>
<span id="cb31-125">    </span>
<span id="cb31-126">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> target</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb32-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb32-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb32-4">        iou_crop,</span>
<span id="cb32-5">        transforms.ColorJitter(</span>
<span id="cb32-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb32-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb32-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb32-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb32-10">        ),</span>
<span id="cb32-11">        transforms.RandomGrayscale(),</span>
<span id="cb32-12">        transforms.RandomEqualize(),</span>
<span id="cb32-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb32-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb32-15">    ],</span>
<span id="cb32-16">)</span>
<span id="cb32-17"></span>
<span id="cb32-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb32-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-20">    resize_max, </span>
<span id="cb32-21">    pad_square,</span>
<span id="cb32-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb32-23">])</span>
<span id="cb32-24"></span>
<span id="cb32-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb32-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-27">    transforms.ToImage(), </span>
<span id="cb32-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb32-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb32-30">])</span>
<span id="cb32-31"></span>
<span id="cb32-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb32-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-34">    data_aug_tfms, </span>
<span id="cb32-35">    resize_pad_tfm, </span>
<span id="cb32-36">    final_tfms</span>
<span id="cb32-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb33-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb33-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CVATKeypointDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb33-6"></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training dataset</span></span>
<span id="cb33-8">pd.Series({</span>
<span id="cb33-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb33-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_a73b1">
<thead>
</thead>
<tbody>
<tr>
<th id="T_a73b1_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_a73b1_row0_col0" class="data row0 col0">
38
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a sample image and its target annotations</span></span>
<span id="cb34-2">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sanitize bounding boxes to remove dummy values</span></span>
<span id="cb34-5">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb34-6">targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb34-7">sanitized_image, sanitized_targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], targets)</span>
<span id="cb34-8"></span>
<span id="cb34-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with the sanitized annotations</span></span>
<span id="cb34-10">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb34-11">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(sanitized_image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb34-12">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb34-13">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb34-14">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> sanitized_targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb34-15">)</span>
<span id="cb34-16"></span>
<span id="cb34-17">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/keypoints/images/output_56_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom keypoint annotations made with the CVAT annotation tool and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future keypoint estimation projects.</p>
<p>As a next step, perhaps try annotating a custom keypoint estimation dataset with CVAT and loading it with this tutorial’s code.</p>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-cvat-annotation-tutorials/bounding-boxes/"><strong>Working with CVAT Bounding Box Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with CVAT bounding box annotations in torchvision for object detection tasks.</li>
<li><a href="../../../posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/"><strong>Working with CVAT Segmentation Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with CVAT segmentation annotations in torchvision for instance segmentation tasks.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>keypoint-estimation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-cvat-annotation-tutorials/keypoints/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with CVAT Bounding Box Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-cvat-annotation-tutorials/bounding-boxes/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with bounding box annotations created with the <a href="https://github.com/opencv/cvat">CVAT annotation tool</a> in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Bounding box annotations specify rectangular frames around objects in images to identify and locate them for training object detection models.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/bounding-boxes/images/bounding-box-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with bounding box annotations made with CVAT for object detection tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/cvat/torchvision-cvat-bounding-box-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/cvat/torchvision-cvat-bounding-box-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> xml.etree.ElementTree <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ET</span>
<span id="cb9-5"></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-17"></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-23"></span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-25">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-26"></span>
<span id="cb9-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-29"></span>
<span id="cb9-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-32"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-33"></span>
<span id="cb9-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-35"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-36">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-39"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-40"></span>
<span id="cb9-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-42"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. The TVTensor class for bounding box annotations is called <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html"><code>BoundingBoxes</code></a>. Torchvision also includes a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with bounding boxes for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/cvat-bounding-box-toy-dataset/tree/main">cvat-bounding-box-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_1e715">
<thead>
</thead>
<tbody>
<tr>
<th id="T_1e715_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_1e715_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_1e715_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_1e715_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cvat-bounding-box-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_954b0">
<thead>
</thead>
<tbody>
<tr>
<th id="T_954b0_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_954b0_row0_col0" class="data row0 col0">
cj-mills/cvat-bounding-box-toy-dataset
</td>
</tr>
<tr>
<th id="T_954b0_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_954b0_row1_col0" class="data row1 col0">
Datasets/../Archive/cvat-bounding-box-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_954b0_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_954b0_row2_col0" class="data row2 col0">
Datasets/cvat-bounding-box-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-images-and-annotations" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-images-and-annotations">Getting the Images and Annotations</h3>
<p>The dataset has a folder containing the sample images and an XML file containing the annotations.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming the images are stored in a subfolder named 'default'</span></span>
<span id="cb13-2">img_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images/default'</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming annotation file is in XML format and located in any subdirectory of the dataset</span></span>
<span id="cb13-5">annotation_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'annotations.xml'</span></span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb13-8">pd.Series({</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image Folder"</span>: img_dir, </span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>: annotation_file_path}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_13cf3">
<thead>
</thead>
<tbody>
<tr>
<th id="T_13cf3_level0_row0" class="row_heading level0 row0">
Image Folder
</th>
<td id="T_13cf3_row0_col0" class="data row0 col0">
Datasets/cvat-bounding-box-toy-dataset/images/default
</td>
</tr>
<tr>
<th id="T_13cf3_level0_row1" class="row_heading level0 row1">
Annotation File
</th>
<td id="T_13cf3_row1_col0" class="data row1 col0">
Datasets/cvat-bounding-box-toy-dataset/annotations.xml
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all image files in the 'img_dir' directory</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> get_img_files(img_dir) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the image directory</span></span>
<span id="cb14-5">}</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-11">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 28</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
Datasets/cvat-bounding-box-toy-dataset/images/default/258421.jpg
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
Datasets/cvat-bounding-box-toy-dataset/images/default/3075367.jpg
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
Datasets/cvat-bounding-box-toy-dataset/images/default/3076319.jpg
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
Datasets/cvat-bounding-box-toy-dataset/images/default/3145551.jpg
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
Datasets/cvat-bounding-box-toy-dataset/images/default/3176048.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of the XML annotation file into a Pandas DataFrame so we can easily query the annotations.</p>
<section id="define-a-function-to-parse-the-cvat-xml-annotations" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-parse-the-cvat-xml-annotations">Define a function to parse the CVAT XML annotations</h4>
<p>The following helper function parses the raw XML content into a Pandas DataFrame.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parse_cvat_bbox_xml(xml_content):</span>
<span id="cb16-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parse the given XML content of a CVAT bounding box annotation file and</span></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    convert it into a pandas DataFrame.</span></span>
<span id="cb16-5"></span>
<span id="cb16-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This function processes the XML content to extract information about each</span></span>
<span id="cb16-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    image and its associated bounding boxes. The data is then structured into</span></span>
<span id="cb16-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    a DataFrame for easier manipulation and analysis.</span></span>
<span id="cb16-9"></span>
<span id="cb16-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb16-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    xml_content (str): A string containing the XML content from a CVAT bounding box</span></span>
<span id="cb16-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                       annotation file.</span></span>
<span id="cb16-13"></span>
<span id="cb16-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb16-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    pandas.DataFrame: A DataFrame where each row represents an image and contains</span></span>
<span id="cb16-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      the following columns:</span></span>
<span id="cb16-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      - Image ID (int): The unique identifier of the image.</span></span>
<span id="cb16-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      - Image Name (str): The name of the image.</span></span>
<span id="cb16-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      - Width (int): The width of the image in pixels.</span></span>
<span id="cb16-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      - Height (int): The height of the image in pixels.</span></span>
<span id="cb16-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      - Boxes (list): A list of dictionaries, where each dictionary</span></span>
<span id="cb16-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                      represents a bounding box with keys 'Label',</span></span>
<span id="cb16-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                      'xtl', 'ytl', 'xbr', and 'ybr' indicating the</span></span>
<span id="cb16-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                      label and coordinates of the box.</span></span>
<span id="cb16-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb16-26"></span>
<span id="cb16-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the XML content</span></span>
<span id="cb16-28">    root <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ET.fromstring(xml_content)</span>
<span id="cb16-29">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb16-30"></span>
<span id="cb16-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through each image element in the XML</span></span>
<span id="cb16-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> image <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> root.findall(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image'</span>):</span>
<span id="cb16-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract image attributes</span></span>
<span id="cb16-34">        image_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb16-35">        image_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>)</span>
<span id="cb16-36">        width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>)</span>
<span id="cb16-37">        height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>)</span>
<span id="cb16-38"></span>
<span id="cb16-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize a dictionary to store image data</span></span>
<span id="cb16-40">        image_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-41">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(image_id),</span>
<span id="cb16-42">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image Name'</span>: image_name,</span>
<span id="cb16-43">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Width'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(width),</span>
<span id="cb16-44">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Height'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(height),</span>
<span id="cb16-45">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Boxes'</span>: []</span>
<span id="cb16-46">        }</span>
<span id="cb16-47"></span>
<span id="cb16-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate through each bounding box element within the image</span></span>
<span id="cb16-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> box <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> image.findall(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'box'</span>):</span>
<span id="cb16-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract box attributes</span></span>
<span id="cb16-51">            label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> box.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>)</span>
<span id="cb16-52">            xtl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(box.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xtl'</span>))</span>
<span id="cb16-53">            ytl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(box.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ytl'</span>))</span>
<span id="cb16-54">            xbr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(box.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xbr'</span>))</span>
<span id="cb16-55">            ybr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(box.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ybr'</span>))</span>
<span id="cb16-56"></span>
<span id="cb16-57">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct a dictionary for the box data</span></span>
<span id="cb16-58">            box_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb16-59">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>: label,</span>
<span id="cb16-60">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xtl'</span>: xtl,</span>
<span id="cb16-61">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ytl'</span>: ytl,</span>
<span id="cb16-62">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xbr'</span>: xbr,</span>
<span id="cb16-63">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ybr'</span>: ybr</span>
<span id="cb16-64">            }</span>
<span id="cb16-65"></span>
<span id="cb16-66">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append the box data to the image's 'Boxes' list</span></span>
<span id="cb16-67">            image_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Boxes'</span>].append(box_data)</span>
<span id="cb16-68"></span>
<span id="cb16-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Map the image data to its ID in the data dictionary</span></span>
<span id="cb16-70">        data[image_id] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_data</span>
<span id="cb16-71"></span>
<span id="cb16-72">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the data dictionary to a DataFrame and return</span></span>
<span id="cb16-73">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pd.DataFrame.from_dict(data, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>)</span></code></pre></div>
</section>
<section id="load-cvat-xml-annotations-into-a-dataframe" class="level4">
<h4 class="anchored" data-anchor-id="load-cvat-xml-annotations-into-a-dataframe">Load CVAT XML annotations into a DataFrame</h4>
<p>After parsing the XML content, we will change the index for the <code>annotation_df</code> DataFrame to match the keys in the <code>img_dict</code> dictionary, allowing us to retrieve both the image paths and annotation data using the same index key.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the XML file</span></span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(annotation_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb17-3">    xml_content <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse the XML content</span></span>
<span id="cb17-6">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse_cvat_bbox_xml(xml_content)</span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add a new column 'Image ID' by extracting it from 'Image Name'</span></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This assumes that the 'Image ID' is the part of the 'Image Name' before the first period</span></span>
<span id="cb17-10">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image Name'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the new 'Image ID' column as the index of the DataFrame</span></span>
<span id="cb17-13">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Image ID'</span>)</span>
<span id="cb17-14"></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first few rows of the DataFrame</span></span>
<span id="cb17-16">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
Image Name
</th>
<th>
Width
</th>
<th>
Height
</th>
<th>
Boxes
</th>
</tr>
<tr>
<th>
Image ID
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
258421.jpg
</td>
<td>
768
</td>
<td>
1152
</td>
<td>
[{‘Label’: ‘person’, ‘xtl’: 386.08, ‘ytl’: 443.94, ‘xbr’: 460.82, ‘ybr’: 777.16}, {‘Label’: ‘person’, ‘xtl’: 340.25, ‘ytl’: 466.94, ‘xbr’: 418.99, ‘ybr’: 777.34}]
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
3075367.jpg
</td>
<td>
1344
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘person’, ‘xtl’: 413.32, ‘ytl’: 41.22, ‘xbr’: 919.81, ‘ybr’: 763.17}]
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
3076319.jpg
</td>
<td>
768
</td>
<td>
1120
</td>
<td>
[{‘Label’: ‘person’, ‘xtl’: 335.31, ‘ytl’: 151.75, ‘xbr’: 711.22, ‘ybr’: 1117.49}, {‘Label’: ‘person’, ‘xtl’: 8.11, ‘ytl’: 131.88, ‘xbr’: 404.2, ‘ybr’: 1119.0}]
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
3145551.jpg
</td>
<td>
1184
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘person’, ‘xtl’: 642.0, ‘ytl’: 289.85, ‘xbr’: 669.66, ‘ybr’: 398.89}, {‘Label’: ‘person’, ‘xtl’: 658.63, ‘ytl’: 281.25, ‘xbr’: 687.09, ‘ybr’: 398.61}]
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
3176048.jpg
</td>
<td>
1152
</td>
<td>
768
</td>
<td>
[{‘Label’: ‘person’, ‘xtl’: 518.23, ‘ytl’: 338.97, ‘xbr’: 594.63, ‘ybr’: 466.08}, {‘Label’: ‘person’, ‘xtl’: 683.42, ‘ytl’: 356.48, ‘xbr’: 638.86, ‘ybr’: 437.82}]
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The source XML content corresponding to the first row in the DataFrame is available below:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode xml code-with-copy"><code class="sourceCode xml"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">&lt;?xml</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> version=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1.0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> encoding=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utf-8"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">?&gt;</span></span>
<span id="cb18-2">&lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">annotations</span>&gt;</span>
<span id="cb18-3">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">version</span>&gt;1.1&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">version</span>&gt;</span>
<span id="cb18-4">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span>&gt;</span>
<span id="cb18-5">  &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">meta</span>&gt;</span>
<span id="cb18-6">  &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">image</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> id=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> name=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"258421.jpg"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> subset=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> task_id=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"7"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> width=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"768"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> height=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1152"</span>&gt;</span>
<span id="cb18-7">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">box</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> label=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> source=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> occluded=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> xtl=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"386.08"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ytl=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"443.94"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> xbr=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"460.82"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ybr=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"777.16"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> z_order=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>&gt;</span>
<span id="cb18-8">    &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">box</span>&gt;</span>
<span id="cb18-9">    &lt;<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">box</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> label=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> source=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> occluded=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> xtl=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"340.25"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ytl=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"466.94"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> xbr=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"418.99"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> ybr=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"777.34"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;"> z_order=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0"</span>&gt;</span>
<span id="cb18-10">    &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">box</span>&gt;</span>
<span id="cb18-11">  &lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">image</span>&gt;</span>
<span id="cb18-12">&lt;/<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">annotations</span>&gt;</span></code></pre></div>
<p>The the <code>xtl</code>, <code>ytl</code>, <code>xbr</code>, and <code>ybr</code> values indicate the bounding box annotations are in <code>[Top-Left X, Top-Left Y, Bottom-Right X, Bottom-Right Y]</code> format.</p>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step won’t yield any insights for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explode the 'boxes_df' column in the annotation_df dataframe</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the resulting series to a dataframe and rename the 'boxes_df' column to 'boxes_df'</span></span>
<span id="cb19-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the pandas Series function to the 'boxes_df' column of the dataframe</span></span>
<span id="cb19-4">boxes_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Boxes'</span>].explode().to_frame().Boxes.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb19-5"></span>
<span id="cb19-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb19-7">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>].unique().tolist()</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb19-10">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
person
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb20-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> boxes_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>].value_counts()</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb20-5">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb20-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb20-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb20-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb20-9">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), class_counts.index, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb20-10">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/bounding-boxes/images/output_25_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its bounding boxes using torchvision’s <code>BoundingBoxes</code> class and <code>draw_bounding_boxes</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to bounding boxes for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb21-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb21-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb21-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/bounding-boxes/images/output_29_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb22-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb22-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb24-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb24-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb24-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb24-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (768, 1152)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/bounding-boxes/images/output_37_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb26-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
258421
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
Image Name
</th>
<td>
258421.jpg
</td>
</tr>
<tr>
<th>
Width
</th>
<td>
768
</td>
</tr>
<tr>
<th>
Height
</th>
<td>
1152
</td>
</tr>
<tr>
<th>
Boxes
</th>
<td>
[{‘Label’: ‘person’, ‘xtl’: 386.08, ‘ytl’: 443.94, ‘xbr’: 460.82, ‘ybr’: 777.16}, {‘Label’: ‘person’, ‘xtl’: 340.25, ‘ytl’: 466.94, ‘xbr’: 418.99, ‘ybr’: 777.34}]
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>The <code>draw_bounding_boxes</code> function expects bounding box annotations in <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format, so we don’t need to convert the annotation values.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb27-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> box <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Boxes'</span>]]</span>
<span id="cb27-3">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xtl'</span>], box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ytl'</span>], box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xbr'</span>], box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ybr'</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> box <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Boxes'</span>]]).reshape(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb27-6">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb27-7">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb27-8">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BoundingBoxes(torch.Tensor(bboxes), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]),</span>
<span id="cb27-9">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb27-10">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb27-11">)</span>
<span id="cb27-12"></span>
<span id="cb27-13">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/bounding-boxes/images/output_41_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb28-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb29-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb29-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb29-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb29-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb29-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb29-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb29-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb29-9"></span>
<span id="cb29-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb29-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb29-12"></span>
<span id="cb29-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb29-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb30-2">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb30-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torch.Tensor(bboxes), </span>
<span id="cb30-4">                           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb30-5">                           canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb30-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb30-7">}</span>
<span id="cb30-8"></span>
<span id="cb30-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb30-10">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb30-11"></span>
<span id="cb30-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb30-13">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb30-14"></span>
<span id="cb30-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb30-16">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb30-17"></span>
<span id="cb30-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb30-19">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb30-20">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb30-21">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb30-22"></span>
<span id="cb30-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb30-24">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb30-25">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb30-26">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb30-27">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb30-28">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb30-29">)</span>
<span id="cb30-30"></span>
<span id="cb30-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb30-32">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb30-33"></span>
<span id="cb30-34">pd.Series({</span>
<span id="cb30-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb30-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb30-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb30-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb30-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb30-40">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/bounding-boxes/images/output_50_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_62824">
<thead>
</thead>
<tbody>
<tr>
<th id="T_62824_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_62824_row0_col0" class="data row0 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_62824_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_62824_row1_col0" class="data row1 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_62824_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_62824_row2_col0" class="data row2 col0">
(256, 384)
</td>
</tr>
<tr>
<th id="T_62824_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_62824_row3_col0" class="data row3 col0">
(384, 384)
</td>
</tr>
<tr>
<th id="T_62824_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_62824_row4_col0" class="data row4 col0">
(384, 384)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CVATBBoxDataset(Dataset):</span>
<span id="cb31-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A custom dataset class for handling bounding box annotations from CVAT.</span></span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This dataset class is designed to work with bounding box annotations exported</span></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    from the CVAT annotation tool. It allows for loading images and their corresponding</span></span>
<span id="cb31-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bounding box annotations for use in training machine learning models.</span></span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb31-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_keys (list): A list of image keys.</span></span>
<span id="cb31-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _annotation_df (pandas.DataFrame): A DataFrame containing annotations.</span></span>
<span id="cb31-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_dict (dict): A dictionary mapping image keys to image file paths.</span></span>
<span id="cb31-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _class_to_idx (dict): A dictionary mapping class names to class indices.</span></span>
<span id="cb31-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _transforms (callable, optional): A function/transform that takes in an image</span></span>
<span id="cb31-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            and a target, and returns a transformed version.</span></span>
<span id="cb31-16"></span>
<span id="cb31-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb31-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_keys (list): List of image keys.</span></span>
<span id="cb31-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        annotation_df (pandas.DataFrame): DataFrame containing annotations.</span></span>
<span id="cb31-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_dict (dict): Dictionary mapping image keys to image paths.</span></span>
<span id="cb31-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        class_to_idx (dict): Dictionary mapping class names to class indices.</span></span>
<span id="cb31-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transforms (callable, optional): Optional transform to be applied on a sample.</span></span>
<span id="cb31-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb31-24"></span>
<span id="cb31-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb31-26">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb31-27"></span>
<span id="cb31-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys</span>
<span id="cb31-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df</span>
<span id="cb31-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict</span>
<span id="cb31-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx</span>
<span id="cb31-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms</span>
<span id="cb31-33"></span>
<span id="cb31-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb31-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the total number of items in the dataset.</span></span>
<span id="cb31-37"></span>
<span id="cb31-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            int: Total number of items.</span></span>
<span id="cb31-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb31-42"></span>
<span id="cb31-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb31-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an image and its associated target (bounding boxes and labels) at the specified index.</span></span>
<span id="cb31-46"></span>
<span id="cb31-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            index (int): The index of the item.</span></span>
<span id="cb31-49"></span>
<span id="cb31-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing an image and its corresponding target.</span></span>
<span id="cb31-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-53">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb31-54">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb31-55">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb31-56">        </span>
<span id="cb31-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb31-58">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb31-59"></span>
<span id="cb31-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb31-61"></span>
<span id="cb31-62">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb31-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb31-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Loads an image and its corresponding target data (bounding boxes and labels) based on the provided annotation.</span></span>
<span id="cb31-65"></span>
<span id="cb31-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb31-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation (pandas.Series): The annotation data for a specific image.</span></span>
<span id="cb31-68"></span>
<span id="cb31-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb31-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and a dictionary with 'boxes' and 'labels'.</span></span>
<span id="cb31-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb31-72">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieve the file path from the image dictionary using the annotation's name as the key.</span></span>
<span id="cb31-73">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb31-74"></span>
<span id="cb31-75">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the image file and convert it to RGB.</span></span>
<span id="cb31-76">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb31-77"></span>
<span id="cb31-78">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract bounding box coordinates from the annotation and convert them to a numpy array.</span></span>
<span id="cb31-79">        bbox_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xtl'</span>], box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ytl'</span>], box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xbr'</span>], box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ybr'</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> box <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Boxes'</span>]]).reshape(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Boxes'</span>]), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb31-80"></span>
<span id="cb31-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert the numpy array of bounding boxes to a PyTorch tensor.</span></span>
<span id="cb31-82">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor(bbox_list)</span>
<span id="cb31-83"></span>
<span id="cb31-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create bounding box objects with the tensor, specifying the format and canvas size.</span></span>
<span id="cb31-85">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb31-86"></span>
<span id="cb31-87">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract labels from the annotation and map them to their corresponding indices.</span></span>
<span id="cb31-88">        annotation_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [box[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Label'</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> box <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Boxes'</span>]]</span>
<span id="cb31-89">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_labels])</span>
<span id="cb31-90"></span>
<span id="cb31-91">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the image and a dictionary containing the bounding boxes and labels.</span></span>
<span id="cb31-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb32-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb32-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb32-4">        iou_crop,</span>
<span id="cb32-5">        transforms.ColorJitter(</span>
<span id="cb32-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb32-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb32-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb32-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb32-10">        ),</span>
<span id="cb32-11">        transforms.RandomGrayscale(),</span>
<span id="cb32-12">        transforms.RandomEqualize(),</span>
<span id="cb32-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb32-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb32-15">    ],</span>
<span id="cb32-16">)</span>
<span id="cb32-17"></span>
<span id="cb32-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb32-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-20">    resize_max, </span>
<span id="cb32-21">    pad_square,</span>
<span id="cb32-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb32-23">])</span>
<span id="cb32-24"></span>
<span id="cb32-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb32-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-27">    transforms.ToImage(), </span>
<span id="cb32-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb32-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb32-30">])</span>
<span id="cb32-31"></span>
<span id="cb32-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb32-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb32-34">    data_aug_tfms, </span>
<span id="cb32-35">    resize_pad_tfm, </span>
<span id="cb32-36">    final_tfms</span>
<span id="cb32-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb33-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb33-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CVATBBoxDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb33-6"></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training dataset</span></span>
<span id="cb33-8">pd.Series({</span>
<span id="cb33-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb33-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_a69db">
<thead>
</thead>
<tbody>
<tr>
<th id="T_a69db_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_a69db_row0_col0" class="data row0 col0">
28
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb34-2"></span>
<span id="cb34-3">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb34-4">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb34-5">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb34-6">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb34-7">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb34-8">)</span>
<span id="cb34-9"></span>
<span id="cb34-10">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-cvat-annotation-tutorials/bounding-boxes/images/output_59_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom bounding box annotations made with the CVAT annotation tool and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future object detection projects.</p>
<p>As a next step, perhaps try annotating a custom object detection dataset with CVAT and loading it with this tutorial’s code. Once you’re comfortable with that, try adapting the code in the following tutorial to train an object detection model on your custom dataset.</p>
<ul>
<li><a href="../../../posts/pytorch-train-object-detector-yolox-tutorial">Training YOLOX Models for Real-Time Object Detection in PyTorch</a></li>
</ul>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-cvat-annotation-tutorials/keypoints/"><strong>Working with CVAT Keypoint Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with CVAT keypoint annotations in torchvision for keypoint estimation tasks.</li>
<li><a href="../../../posts/torchvision-cvat-annotation-tutorials/segmentation-polygons/"><strong>Working with CVAT Segmentation Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with CVAT segmentation annotations in torchvision for instance segmentation tasks.</li>
<li><a href="http://localhost:3847/posts/pytorch-train-object-detector-yolox-tutorial"><strong>Training YOLOX Models for Real-Time Object Detection in PyTorch</strong></a><strong>:</strong> Learn how to train YOLOX models for real-time object detection in PyTorch by creating a hand gesture detection model.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>object-detection</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-cvat-annotation-tutorials/bounding-boxes/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with COCO Segmentation Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-coco-annotation-tutorials/segmentation-polygons/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with <a href="https://cocodataset.org/#format-data">COCO-formatted</a> segmentation annotations in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Segmentation annotations indicate the pixels occupied by specific objects or areas of interest in images for training models to recognize and delineate these objects at a pixel level.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/segmentation-polygons/images/segmentation-mask-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with COCO segmentation annotations in torchvision for instance segmentation tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/coco/torchvision-coco-segmentation-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/coco/torchvision-coco-segmentation-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-24">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-32"></span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-34"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-35">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes, Mask</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes, draw_segmentation_masks</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. The TVTensor class for segmentation annotations is called <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.Mask.html">Mask</a>. Torchvision also includes a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_segmentation_masks.html">draw_segmentation_masks</a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with segmentation masks for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/coco-instance-segmentation-toy-dataset/tree/main">coco-instance-segmentation-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_193c3">
<thead>
</thead>
<tbody>
<tr>
<th id="T_193c3_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_193c3_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_193c3_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_193c3_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coco-instance-segmentation-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_47273">
<thead>
</thead>
<tbody>
<tr>
<th id="T_47273_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_47273_row0_col0" class="data row0 col0">
cj-mills/coco-instance-segmentation-toy-dataset
</td>
</tr>
<tr>
<th id="T_47273_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_47273_row1_col0" class="data row1 col0">
Datasets/../Archive/coco-instance-segmentation-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_47273_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_47273_row2_col0" class="data row2 col0">
Datasets/coco-instance-segmentation-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-image-and-annotation-folders" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-image-and-annotation-folders">Getting the Image and Annotation Folders</h3>
<p>The dataset has two folders containing the sample images and annotations. The image folder organizes all samples together. The annotations are in a single JSON file.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming the images are stored in a subfolder named 'images'</span></span>
<span id="cb13-2">img_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images/'</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming the annotation file is in JSON format and located in a subdirectory of the dataset</span></span>
<span id="cb13-5">annotation_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*/*.json'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb13-8">pd.Series({</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image Folder"</span>: img_dir, </span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>: annotation_file_path}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_16f35">
<thead>
</thead>
<tbody>
<tr>
<th id="T_16f35_level0_row0" class="row_heading level0 row0">
Image Folder
</th>
<td id="T_16f35_row0_col0" class="data row0 col0">
Datasets/coco-instance-segmentation-toy-dataset/images
</td>
</tr>
<tr>
<th id="T_16f35_level0_row1" class="row_heading level0 row1">
Annotation File
</th>
<td id="T_16f35_row1_col0" class="data row1 col0">
Datasets/coco-instance-segmentation-toy-dataset/annotations/instances_default.json
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all image files in the 'img_dir' directory</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> get_img_files(img_dir) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the image directory</span></span>
<span id="cb14-5">}</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-11">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 31</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
adults-affection-attractive-2760688
</th>
<td>
Datasets/coco-instance-segmentation-toy-dataset/images/adults-affection-attractive-2760688.jpg
</td>
</tr>
<tr>
<th>
258421
</th>
<td>
Datasets/coco-instance-segmentation-toy-dataset/images/258421.jpg
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
Datasets/coco-instance-segmentation-toy-dataset/images/3075367.jpg
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
Datasets/coco-instance-segmentation-toy-dataset/images/3076319.jpg
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
Datasets/coco-instance-segmentation-toy-dataset/images/3145551.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of the JSON annotation file into a Pandas DataFrame so we can easily query the annotations.</p>
<section id="load-the-annotation-file-into-a-dataframe" class="level4">
<h4 class="anchored" data-anchor-id="load-the-annotation-file-into-a-dataframe">Load the annotation file into a DataFrame</h4>
<p>We will transpose the DataFrame to store each section in the JSON file in a separate column.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the JSON file into a DataFrame, assuming the JSON is oriented by index</span></span>
<span id="cb16-2">annotation_file_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_json(annotation_file_path, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose()</span>
<span id="cb16-3">annotation_file_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
licenses
</th>
<th>
info
</th>
<th>
categories
</th>
<th>
images
</th>
<th>
annotations
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
{‘name’: ’‘, ’id’: 0, ‘url’: ’’}
</td>
<td>
contributor
</td>
<td>
{‘id’: 1, ‘name’: ‘person’, ‘supercategory’: ’’}
</td>
<td>
{‘id’: 1, ‘width’: 768, ‘height’: 1152, ‘file_name’: ‘258421.jpg’, ‘license’: 0, ‘flickr_url’: ’‘, ’coco_url’: ’‘, ’date_captured’: 0}
</td>
<td>
{‘id’: 1, ‘image_id’: 1, ‘category_id’: 1, ‘segmentation’: [[377.0, 775.5, 368.0, 774.5, 346.5, 764.0, 349.5, 751.0, 348.5, 707.0, 358.5, 668.0, 343.5, 651.0, 359.5, 605.0, 379.5, 583.0, 366.01, 583.39, 362.55, 575.78, 361.85, 565.4, 353.2, 557.09, 357.7, 547.4, 350.78, 532.53, 356.32, 520.76, 359.78, 481.31, 376.39, 467.47, 387.46, 469.55, 401.3, 484.08, 405.8, 501.04, 394.03, 505.88, 394.73, 519.03, 399.92, 531.14, 374.66, 554.33, 369.81, 571.28, 374.31, 574.05, 388.15, 574.39, 397.49, 569.9, 402.5, 578.0, 410.5, 594.0, 412.5, 668.0, 387.0, 667.5, 375.5, 692.0, 376.5, 738.0, 380.5, 753.0, 388.5, 764.0, 386.5, 772.0]], ‘area’: 11461.0, ‘bbox’: [343.5, 467.47, 69.0, 308.03], ‘iscrowd’: 0, ‘attributes’: {‘occluded’: False}}
</td>
</tr>
<tr>
<th>
1
</th>
<td>
None
</td>
<td>
date_created
</td>
<td>
{‘id’: 2, ‘name’: ‘car’, ‘supercategory’: ’’}
</td>
<td>
{‘id’: 2, ‘width’: 1344, ‘height’: 768, ‘file_name’: ‘3075367.jpg’, ‘license’: 0, ‘flickr_url’: ’‘, ’coco_url’: ’‘, ’date_captured’: 0}
</td>
<td>
{‘id’: 2, ‘image_id’: 1, ‘category_id’: 1, ‘segmentation’: [[404.0, 775.5, 396.5, 766.0, 411.5, 753.0, 411.5, 738.0, 416.5, 731.0, 412.5, 598.0, 419.5, 559.0, 416.0, 554.5, 404.0, 566.5, 387.0, 572.5, 375.5, 566.0, 377.5, 554.0, 405.5, 529.0, 413.5, 504.0, 414.5, 493.0, 386.5, 463.0, 388.5, 453.0, 399.0, 443.5, 413.0, 444.5, 423.5, 453.0, 457.5, 506.0, 452.5, 575.0, 458.5, 607.0, 447.5, 635.0, 444.5, 676.0, 452.5, 764.0, 443.0, 770.5]], ‘area’: 13476.0, ‘bbox’: [375.5, 443.5, 83.0, 332.0], ‘iscrowd’: 0, ‘attributes’: {‘occluded’: False}}
</td>
</tr>
<tr>
<th>
2
</th>
<td>
None
</td>
<td>
description
</td>
<td>
None
</td>
<td>
{‘id’: 3, ‘width’: 768, ‘height’: 1120, ‘file_name’: ‘3076319.jpg’, ‘license’: 0, ‘flickr_url’: ’‘, ’coco_url’: ’‘, ’date_captured’: 0}
</td>
<td>
{‘id’: 3, ‘image_id’: 2, ‘category_id’: 1, ‘segmentation’: [[829.0, 466.5, 825.5, 464.0, 824.5, 455.0, 825.5, 425.0, 828.0, 419.5, 833.5, 418.0, 827.5, 417.0, 822.5, 396.0, 825.5, 327.0, 843.5, 313.0, 842.5, 296.0, 833.5, 291.0, 832.5, 270.0, 837.0, 265.5, 856.0, 264.5, 868.5, 277.0, 870.5, 306.0, 881.5, 318.0, 883.5, 329.0, 893.0, 332.5, 899.5, 340.0, 901.5, 367.0, 883.5, 382.0, 849.5, 443.0, 842.5, 448.0, 838.5, 460.0]], ‘area’: 8982.0, ‘bbox’: [822.5, 264.5, 79.0, 202.0], ‘iscrowd’: 0, ‘attributes’: {‘occluded’: False}}
</td>
</tr>
<tr>
<th>
3
</th>
<td>
None
</td>
<td>
url
</td>
<td>
None
</td>
<td>
{‘id’: 4, ‘width’: 1184, ‘height’: 768, ‘file_name’: ‘3145551.jpg’, ‘license’: 0, ‘flickr_url’: ’‘, ’coco_url’: ’‘, ’date_captured’: 0}
</td>
<td>
{‘id’: 4, ‘image_id’: 2, ‘category_id’: 1, ‘segmentation’: [[714.0, 766.5, 664.0, 765.5, 654.0, 716.5, 640.0, 765.5, 578.5, 764.0, 578.5, 599.0, 570.5, 587.0, 592.5, 403.0, 583.5, 339.0, 525.5, 278.0, 463.5, 187.0, 423.5, 98.0, 422.5, 72.0, 444.0, 52.5, 460.5, 62.0, 458.5, 104.0, 485.5, 166.0, 581.0, 270.5, 623.0, 295.5, 644.5, 293.0, 630.5, 261.0, 642.5, 193.0, 667.0, 182.5, 707.0, 191.5, 719.5, 249.0, 709.0, 307.5, 774.0, 271.5, 848.5, 176.0, 875.5, 108.0, 867.5, 55.0, 902.0, 63.5, 908.5, 76.0, 902.5, 134.0, 858.5, 233.0, 759.5, 350.0, 736.5, 495.0, 752.5, 614.0]], ‘area’: 106549.0, ‘bbox’: [422.5, 52.5, 486.0, 714.0], ‘iscrowd’: 0, ‘attributes’: {‘occluded’: False}}
</td>
</tr>
<tr>
<th>
4
</th>
<td>
None
</td>
<td>
version
</td>
<td>
None
</td>
<td>
{‘id’: 5, ‘width’: 1152, ‘height’: 768, ‘file_name’: ‘3176048.jpg’, ‘license’: 0, ‘flickr_url’: ’‘, ’coco_url’: ’‘, ’date_captured’: 0}
</td>
<td>
{‘id’: 5, ‘image_id’: 2, ‘category_id’: 1, ‘segmentation’: [[359.0, 509.5, 355.0, 509.5, 350.5, 502.0, 353.5, 486.0, 349.5, 475.0, 349.5, 449.0, 345.5, 430.0, 339.5, 419.0, 337.5, 394.0, 327.5, 378.0, 331.5, 371.0, 332.5, 357.0, 342.5, 345.0, 345.5, 327.0, 354.0, 313.5, 365.5, 317.0, 366.5, 339.0, 385.0, 350.5, 399.5, 371.0, 398.5, 383.0, 390.0, 391.5, 390.5, 378.0, 383.0, 369.5, 379.5, 370.0, 380.5, 441.0, 376.5, 471.0, 370.0, 464.5, 364.5, 472.0, 362.5, 482.0, 364.5, 504.0]], ‘area’: 6422.0, ‘bbox’: [327.5, 313.5, 72.0, 196.0], ‘iscrowd’: 0, ‘attributes’: {‘occluded’: False}}
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The source JSON content corresponding to the first row in the DataFrame is available below:</p>
<div style="overflow-x:auto; max-height:500px">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"licenses"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-4">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-5">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-6">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb17-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-8">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"info"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-10">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"contributor"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-11">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"date_created"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-12">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-13">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-14">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-15">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"year"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb17-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb17-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"categories"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-19">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-20">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-21">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"supercategory"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb17-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-23">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-24">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-25">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"car"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-26">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"supercategory"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb17-27">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-28">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-29">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"images"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-30">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-31">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-32">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"width"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-33">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"height"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1152</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-34">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"file_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"258421.jpg"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-35">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"license"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-36">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flickr_url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-37">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"coco_url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-38">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"date_captured"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb17-39">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-40">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-41">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"annotations"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-42">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-43">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-44">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"image_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-45">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"category_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-46">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"segmentation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-47">                <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-48">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">377.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-49">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">775.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-50">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">368.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-51">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">774.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-52">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">346.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-53">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">764.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-54">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">349.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-55">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">751.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-56">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">348.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-57">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">707.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-58">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">358.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-59">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">668.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-60">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">343.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-61">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">651.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-62">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">359.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-63">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">605.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-64">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">379.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-65">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">583.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-66">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">366.01</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-67">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">583.39</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-68">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">362.55</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-69">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">575.78</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-70">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">361.85</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-71">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">565.4</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-72">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">353.2</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-73">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">557.09</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-74">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">357.7</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-75">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">547.4</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-76">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">350.78</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-77">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">532.53</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-78">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">356.32</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-79">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">520.76</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-80">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">359.78</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-81">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">481.31</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-82">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">376.39</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-83">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">467.47</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-84">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">387.46</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-85">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">469.55</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-86">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">401.3</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-87">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">484.08</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-88">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">405.8</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-89">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">501.04</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-90">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">394.03</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-91">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">505.88</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-92">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">394.73</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-93">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">519.03</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-94">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">399.92</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-95">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">531.14</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-96">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">374.66</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-97">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">554.33</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-98">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">369.81</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-99">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">571.28</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-100">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">374.31</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-101">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">574.05</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-102">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">388.15</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-103">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">574.39</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-104">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">397.49</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-105">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">569.9</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-106">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">402.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-107">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">578.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-108">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">410.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-109">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">594.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-110">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">412.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-111">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">668.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-112">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">387.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-113">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">667.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-114">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">375.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-115">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">692.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-116">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">376.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-117">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">738.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-118">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">380.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-119">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">753.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-120">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">388.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-121">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">764.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-122">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">386.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-123">                    <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">772.0</span></span>
<span id="cb17-124">                <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-125">            <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-126">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"area"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">11461.0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-127">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bbox"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-128">                <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">343.5</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-129">                <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">467.47</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-130">                <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">69.0</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-131">                <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">308.03</span></span>
<span id="cb17-132">            <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-133">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"iscrowd"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-134">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attributes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-135">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"occluded"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span></span>
<span id="cb17-136">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-137">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-138">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-139"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<hr>
<p>The most relevant information for our purposes is in the following sections:</p>
<ul>
<li><code>categories</code>: Stores the class names for the various object types in the dataset. Note that this toy dataset only has one object type.</li>
<li><code>images</code>: Stores the dimensions and file names for each image.</li>
<li><code>annotations</code>: Stores the image IDs, category IDs, the segmentation polygon annotations in <code>[[x1,y1, x2,y2, ..., xn,yn]]</code> format, and the encapsulating bounding box annotations in <code>[Top-Left X, Top-Left Y, Width, Height]</code> format.</li>
</ul>
</section>
<section id="extract-the-image-informationextract-the-object-classes" class="level4">
<h4 class="anchored" data-anchor-id="extract-the-image-informationextract-the-object-classes">Extract the image informationExtract the object classes</h4>
<p>We first need to extract the class names from the <code>categories</code> column of the DataFrame.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and transform the 'categories' section of the data</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This DataFrame contains category details like category ID and name</span></span>
<span id="cb18-3">categories_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_file_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'categories'</span>].dropna().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb18-4">categories_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb18-5">categories_df</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
name
</th>
<th>
supercategory
</th>
</tr>
<tr>
<th>
id
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
1
</th>
<td>
person
</td>
<td>
</td>
</tr>
<tr>
<th>
2
</th>
<td>
car
</td>
<td>
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>This toy dataset only contains a two object classes, named <code>person</code> and <code>car</code>.</p>
</section>
<section id="extract-the-image-information" class="level4">
<h4 class="anchored" data-anchor-id="extract-the-image-information">Extract the image information</h4>
<p>Next, we will extract the file names, image dimensions, and Image IDs from the <code>images</code> column of the DataFrame.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and transform the 'images' section of the data</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This DataFrame contains image details like file name, height, width, and image ID</span></span>
<span id="cb19-3">images_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_file_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>].to_frame()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>]]</span>
<span id="cb19-4">images_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
file_name
</th>
<th>
height
</th>
<th>
width
</th>
<th>
id
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
1
</th>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
<td>
2.0
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3076319.jpg
</td>
<td>
1120.0
</td>
<td>
768.0
</td>
<td>
3.0
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3145551.jpg
</td>
<td>
768.0
</td>
<td>
1184.0
</td>
<td>
4.0
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3176048.jpg
</td>
<td>
768.0
</td>
<td>
1152.0
</td>
<td>
5.0
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="extract-the-annotation-information" class="level4">
<h4 class="anchored" data-anchor-id="extract-the-annotation-information">Extract the annotation information</h4>
<p>Last, we must extract the Image IDs, segmentation annotations, bounding box annotations, and Category IDs from the <code>annotations</code> column in the DataFrame.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and transform the 'annotations' section of the data</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This DataFrame contains annotation details like image ID, segmentation points, bounding box, and category ID</span></span>
<span id="cb20-3">annotations_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_file_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'annotations'</span>].to_frame()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'annotations'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'segmentation'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bbox'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category_id'</span>]]</span>
<span id="cb20-4">annotations_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
image_id
</th>
<th>
segmentation
</th>
<th>
bbox
</th>
<th>
category_id
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1
</td>
<td>
[[377.0, 775.5, 368.0, 774.5, 346.5, 764.0, 349.5, 751.0, 348.5, 707.0, 358.5, 668.0, 343.5, 651.0, 359.5, 605.0, 379.5, 583.0, 366.01, 583.39, 362.55, 575.78, 361.85, 565.4, 353.2, 557.09, 357.7, 547.4, 350.78, 532.53, 356.32, 520.76, 359.78, 481.31, 376.39, 467.47, 387.46, 469.55, 401.3, 484.08, 405.8, 501.04, 394.03, 505.88, 394.73, 519.03, 399.92, 531.14, 374.66, 554.33, 369.81, 571.28, 374.31, 574.05, 388.15, 574.39, 397.49, 569.9, 402.5, 578.0, 410.5, 594.0, 412.5, 668.0, 387.0, 667.5, 375.5, 692.0, 376.5, 738.0, 380.5, 753.0, 388.5, 764.0, 386.5, 772.0]]
</td>
<td>
[343.5, 467.47, 69.0, 308.03]
</td>
<td>
1
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1
</td>
<td>
[[404.0, 775.5, 396.5, 766.0, 411.5, 753.0, 411.5, 738.0, 416.5, 731.0, 412.5, 598.0, 419.5, 559.0, 416.0, 554.5, 404.0, 566.5, 387.0, 572.5, 375.5, 566.0, 377.5, 554.0, 405.5, 529.0, 413.5, 504.0, 414.5, 493.0, 386.5, 463.0, 388.5, 453.0, 399.0, 443.5, 413.0, 444.5, 423.5, 453.0, 457.5, 506.0, 452.5, 575.0, 458.5, 607.0, 447.5, 635.0, 444.5, 676.0, 452.5, 764.0, 443.0, 770.5]]
</td>
<td>
[375.5, 443.5, 83.0, 332.0]
</td>
<td>
1
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2
</td>
<td>
[[829.0, 466.5, 825.5, 464.0, 824.5, 455.0, 825.5, 425.0, 828.0, 419.5, 833.5, 418.0, 827.5, 417.0, 822.5, 396.0, 825.5, 327.0, 843.5, 313.0, 842.5, 296.0, 833.5, 291.0, 832.5, 270.0, 837.0, 265.5, 856.0, 264.5, 868.5, 277.0, 870.5, 306.0, 881.5, 318.0, 883.5, 329.0, 893.0, 332.5, 899.5, 340.0, 901.5, 367.0, 883.5, 382.0, 849.5, 443.0, 842.5, 448.0, 838.5, 460.0]]
</td>
<td>
[822.5, 264.5, 79.0, 202.0]
</td>
<td>
1
</td>
</tr>
<tr>
<th>
3
</th>
<td>
2
</td>
<td>
[[714.0, 766.5, 664.0, 765.5, 654.0, 716.5, 640.0, 765.5, 578.5, 764.0, 578.5, 599.0, 570.5, 587.0, 592.5, 403.0, 583.5, 339.0, 525.5, 278.0, 463.5, 187.0, 423.5, 98.0, 422.5, 72.0, 444.0, 52.5, 460.5, 62.0, 458.5, 104.0, 485.5, 166.0, 581.0, 270.5, 623.0, 295.5, 644.5, 293.0, 630.5, 261.0, 642.5, 193.0, 667.0, 182.5, 707.0, 191.5, 719.5, 249.0, 709.0, 307.5, 774.0, 271.5, 848.5, 176.0, 875.5, 108.0, 867.5, 55.0, 902.0, 63.5, 908.5, 76.0, 902.5, 134.0, 858.5, 233.0, 759.5, 350.0, 736.5, 495.0, 752.5, 614.0]]
</td>
<td>
[422.5, 52.5, 486.0, 714.0]
</td>
<td>
1
</td>
</tr>
<tr>
<th>
4
</th>
<td>
2
</td>
<td>
[[359.0, 509.5, 355.0, 509.5, 350.5, 502.0, 353.5, 486.0, 349.5, 475.0, 349.5, 449.0, 345.5, 430.0, 339.5, 419.0, 337.5, 394.0, 327.5, 378.0, 331.5, 371.0, 332.5, 357.0, 342.5, 345.0, 345.5, 327.0, 354.0, 313.5, 365.5, 317.0, 366.5, 339.0, 385.0, 350.5, 399.5, 371.0, 398.5, 383.0, 390.0, 391.5, 390.5, 378.0, 383.0, 369.5, 379.5, 370.0, 380.5, 441.0, 376.5, 471.0, 370.0, 464.5, 364.5, 472.0, 362.5, 482.0, 364.5, 504.0]]
</td>
<td>
[327.5, 313.5, 72.0, 196.0]
</td>
<td>
1
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we have extracted the relevant information from the JSON file, we can recombine it into a single DataFrame for convenience.</p>
</section>
<section id="add-the-class-names-to-the-annotations" class="level4">
<h4 class="anchored" data-anchor-id="add-the-class-names-to-the-annotations">Add the class names to the annotations</h4>
<p>We will first add a new <code>label</code> column to the <code>annotations_df</code> DataFrame containing the corresponding class name from the <code>categories_df</code> DataFrame for each bounding box annotation.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Map 'category_id' in annotations DataFrame to category name using categories DataFrame</span></span>
<span id="cb21-2">annotations_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotations_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category_id'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: categories_df.loc[x][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>])</span>
<span id="cb21-3">annotations_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
image_id
</th>
<th>
segmentation
</th>
<th>
bbox
</th>
<th>
category_id
</th>
<th>
label
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1
</td>
<td>
[[377.0, 775.5, 368.0, 774.5, 346.5, 764.0, 349.5, 751.0, 348.5, 707.0, 358.5, 668.0, 343.5, 651.0, 359.5, 605.0, 379.5, 583.0, 366.01, 583.39, 362.55, 575.78, 361.85, 565.4, 353.2, 557.09, 357.7, 547.4, 350.78, 532.53, 356.32, 520.76, 359.78, 481.31, 376.39, 467.47, 387.46, 469.55, 401.3, 484.08, 405.8, 501.04, 394.03, 505.88, 394.73, 519.03, 399.92, 531.14, 374.66, 554.33, 369.81, 571.28, 374.31, 574.05, 388.15, 574.39, 397.49, 569.9, 402.5, 578.0, 410.5, 594.0, 412.5, 668.0, 387.0, 667.5, 375.5, 692.0, 376.5, 738.0, 380.5, 753.0, 388.5, 764.0, 386.5, 772.0]]
</td>
<td>
[343.5, 467.47, 69.0, 308.03]
</td>
<td>
1
</td>
<td>
person
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1
</td>
<td>
[[404.0, 775.5, 396.5, 766.0, 411.5, 753.0, 411.5, 738.0, 416.5, 731.0, 412.5, 598.0, 419.5, 559.0, 416.0, 554.5, 404.0, 566.5, 387.0, 572.5, 375.5, 566.0, 377.5, 554.0, 405.5, 529.0, 413.5, 504.0, 414.5, 493.0, 386.5, 463.0, 388.5, 453.0, 399.0, 443.5, 413.0, 444.5, 423.5, 453.0, 457.5, 506.0, 452.5, 575.0, 458.5, 607.0, 447.5, 635.0, 444.5, 676.0, 452.5, 764.0, 443.0, 770.5]]
</td>
<td>
[375.5, 443.5, 83.0, 332.0]
</td>
<td>
1
</td>
<td>
person
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2
</td>
<td>
[[829.0, 466.5, 825.5, 464.0, 824.5, 455.0, 825.5, 425.0, 828.0, 419.5, 833.5, 418.0, 827.5, 417.0, 822.5, 396.0, 825.5, 327.0, 843.5, 313.0, 842.5, 296.0, 833.5, 291.0, 832.5, 270.0, 837.0, 265.5, 856.0, 264.5, 868.5, 277.0, 870.5, 306.0, 881.5, 318.0, 883.5, 329.0, 893.0, 332.5, 899.5, 340.0, 901.5, 367.0, 883.5, 382.0, 849.5, 443.0, 842.5, 448.0, 838.5, 460.0]]
</td>
<td>
[822.5, 264.5, 79.0, 202.0]
</td>
<td>
1
</td>
<td>
person
</td>
</tr>
<tr>
<th>
3
</th>
<td>
2
</td>
<td>
[[714.0, 766.5, 664.0, 765.5, 654.0, 716.5, 640.0, 765.5, 578.5, 764.0, 578.5, 599.0, 570.5, 587.0, 592.5, 403.0, 583.5, 339.0, 525.5, 278.0, 463.5, 187.0, 423.5, 98.0, 422.5, 72.0, 444.0, 52.5, 460.5, 62.0, 458.5, 104.0, 485.5, 166.0, 581.0, 270.5, 623.0, 295.5, 644.5, 293.0, 630.5, 261.0, 642.5, 193.0, 667.0, 182.5, 707.0, 191.5, 719.5, 249.0, 709.0, 307.5, 774.0, 271.5, 848.5, 176.0, 875.5, 108.0, 867.5, 55.0, 902.0, 63.5, 908.5, 76.0, 902.5, 134.0, 858.5, 233.0, 759.5, 350.0, 736.5, 495.0, 752.5, 614.0]]
</td>
<td>
[422.5, 52.5, 486.0, 714.0]
</td>
<td>
1
</td>
<td>
person
</td>
</tr>
<tr>
<th>
4
</th>
<td>
2
</td>
<td>
[[359.0, 509.5, 355.0, 509.5, 350.5, 502.0, 353.5, 486.0, 349.5, 475.0, 349.5, 449.0, 345.5, 430.0, 339.5, 419.0, 337.5, 394.0, 327.5, 378.0, 331.5, 371.0, 332.5, 357.0, 342.5, 345.0, 345.5, 327.0, 354.0, 313.5, 365.5, 317.0, 366.5, 339.0, 385.0, 350.5, 399.5, 371.0, 398.5, 383.0, 390.0, 391.5, 390.5, 378.0, 383.0, 369.5, 379.5, 370.0, 380.5, 441.0, 376.5, 471.0, 370.0, 464.5, 364.5, 472.0, 362.5, 482.0, 364.5, 504.0]]
</td>
<td>
[327.5, 313.5, 72.0, 196.0]
</td>
<td>
1
</td>
<td>
person
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="merge-the-image-and-annotation-information" class="level4">
<h4 class="anchored" data-anchor-id="merge-the-image-and-annotation-information">Merge the image and annotation information</h4>
<p>Next, we will add the data from the <code>images_df</code> DataFrame and match it to the annotations using the Image IDs.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge annotations DataFrame with images DataFrame on their image ID</span></span>
<span id="cb22-2">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(annotations_df, images_df, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb22-3">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
image_id
</th>
<th>
segmentation
</th>
<th>
bbox
</th>
<th>
category_id
</th>
<th>
label
</th>
<th>
file_name
</th>
<th>
height
</th>
<th>
width
</th>
<th>
id
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1
</td>
<td>
[[377.0, 775.5, 368.0, 774.5, 346.5, 764.0, 349.5, 751.0, 348.5, 707.0, 358.5, 668.0, 343.5, 651.0, 359.5, 605.0, 379.5, 583.0, 366.01, 583.39, 362.55, 575.78, 361.85, 565.4, 353.2, 557.09, 357.7, 547.4, 350.78, 532.53, 356.32, 520.76, 359.78, 481.31, 376.39, 467.47, 387.46, 469.55, 401.3, 484.08, 405.8, 501.04, 394.03, 505.88, 394.73, 519.03, 399.92, 531.14, 374.66, 554.33, 369.81, 571.28, 374.31, 574.05, 388.15, 574.39, 397.49, 569.9, 402.5, 578.0, 410.5, 594.0, 412.5, 668.0, 387.0, 667.5, 375.5, 692.0, 376.5, 738.0, 380.5, 753.0, 388.5, 764.0, 386.5, 772.0]]
</td>
<td>
[343.5, 467.47, 69.0, 308.03]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1
</td>
<td>
[[404.0, 775.5, 396.5, 766.0, 411.5, 753.0, 411.5, 738.0, 416.5, 731.0, 412.5, 598.0, 419.5, 559.0, 416.0, 554.5, 404.0, 566.5, 387.0, 572.5, 375.5, 566.0, 377.5, 554.0, 405.5, 529.0, 413.5, 504.0, 414.5, 493.0, 386.5, 463.0, 388.5, 453.0, 399.0, 443.5, 413.0, 444.5, 423.5, 453.0, 457.5, 506.0, 452.5, 575.0, 458.5, 607.0, 447.5, 635.0, 444.5, 676.0, 452.5, 764.0, 443.0, 770.5]]
</td>
<td>
[375.5, 443.5, 83.0, 332.0]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2
</td>
<td>
[[829.0, 466.5, 825.5, 464.0, 824.5, 455.0, 825.5, 425.0, 828.0, 419.5, 833.5, 418.0, 827.5, 417.0, 822.5, 396.0, 825.5, 327.0, 843.5, 313.0, 842.5, 296.0, 833.5, 291.0, 832.5, 270.0, 837.0, 265.5, 856.0, 264.5, 868.5, 277.0, 870.5, 306.0, 881.5, 318.0, 883.5, 329.0, 893.0, 332.5, 899.5, 340.0, 901.5, 367.0, 883.5, 382.0, 849.5, 443.0, 842.5, 448.0, 838.5, 460.0]]
</td>
<td>
[822.5, 264.5, 79.0, 202.0]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
<td>
2.0
</td>
</tr>
<tr>
<th>
3
</th>
<td>
2
</td>
<td>
[[714.0, 766.5, 664.0, 765.5, 654.0, 716.5, 640.0, 765.5, 578.5, 764.0, 578.5, 599.0, 570.5, 587.0, 592.5, 403.0, 583.5, 339.0, 525.5, 278.0, 463.5, 187.0, 423.5, 98.0, 422.5, 72.0, 444.0, 52.5, 460.5, 62.0, 458.5, 104.0, 485.5, 166.0, 581.0, 270.5, 623.0, 295.5, 644.5, 293.0, 630.5, 261.0, 642.5, 193.0, 667.0, 182.5, 707.0, 191.5, 719.5, 249.0, 709.0, 307.5, 774.0, 271.5, 848.5, 176.0, 875.5, 108.0, 867.5, 55.0, 902.0, 63.5, 908.5, 76.0, 902.5, 134.0, 858.5, 233.0, 759.5, 350.0, 736.5, 495.0, 752.5, 614.0]]
</td>
<td>
[422.5, 52.5, 486.0, 714.0]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
<td>
2.0
</td>
</tr>
<tr>
<th>
4
</th>
<td>
2
</td>
<td>
[[359.0, 509.5, 355.0, 509.5, 350.5, 502.0, 353.5, 486.0, 349.5, 475.0, 349.5, 449.0, 345.5, 430.0, 339.5, 419.0, 337.5, 394.0, 327.5, 378.0, 331.5, 371.0, 332.5, 357.0, 342.5, 345.0, 345.5, 327.0, 354.0, 313.5, 365.5, 317.0, 366.5, 339.0, 385.0, 350.5, 399.5, 371.0, 398.5, 383.0, 390.0, 391.5, 390.5, 378.0, 383.0, 369.5, 379.5, 370.0, 380.5, 441.0, 376.5, 471.0, 370.0, 464.5, 364.5, 472.0, 362.5, 482.0, 364.5, 504.0]]
</td>
<td>
[327.5, 313.5, 72.0, 196.0]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
<td>
2.0
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="use-the-image-name-as-the-index" class="level4">
<h4 class="anchored" data-anchor-id="use-the-image-name-as-the-index">Use the image name as the index</h4>
<p>Then, we will change the index for the <code>annotations_df</code> DataFrame to match the keys in the <code>img_dict</code> dictionary, allowing us to retrieve both the image paths and annotation data using the same index key.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove old 'id' column post-merge</span></span>
<span id="cb23-2">annotation_df.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the image_id from the file_name (assuming file_name contains the image_id)</span></span>
<span id="cb23-5">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set 'image_id' as the index for the DataFrame</span></span>
<span id="cb23-8">annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb23-9">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
segmentation
</th>
<th>
bbox
</th>
<th>
category_id
</th>
<th>
label
</th>
<th>
file_name
</th>
<th>
height
</th>
<th>
width
</th>
</tr>
<tr>
<th>
image_id
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
[[377.0, 775.5, 368.0, 774.5, 346.5, 764.0, 349.5, 751.0, 348.5, 707.0, 358.5, 668.0, 343.5, 651.0, 359.5, 605.0, 379.5, 583.0, 366.01, 583.39, 362.55, 575.78, 361.85, 565.4, 353.2, 557.09, 357.7, 547.4, 350.78, 532.53, 356.32, 520.76, 359.78, 481.31, 376.39, 467.47, 387.46, 469.55, 401.3, 484.08, 405.8, 501.04, 394.03, 505.88, 394.73, 519.03, 399.92, 531.14, 374.66, 554.33, 369.81, 571.28, 374.31, 574.05, 388.15, 574.39, 397.49, 569.9, 402.5, 578.0, 410.5, 594.0, 412.5, 668.0, 387.0, 667.5, 375.5, 692.0, 376.5, 738.0, 380.5, 753.0, 388.5, 764.0, 386.5, 772.0]]
</td>
<td>
[343.5, 467.47, 69.0, 308.03]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
</tr>
<tr>
<th>
258421
</th>
<td>
[[404.0, 775.5, 396.5, 766.0, 411.5, 753.0, 411.5, 738.0, 416.5, 731.0, 412.5, 598.0, 419.5, 559.0, 416.0, 554.5, 404.0, 566.5, 387.0, 572.5, 375.5, 566.0, 377.5, 554.0, 405.5, 529.0, 413.5, 504.0, 414.5, 493.0, 386.5, 463.0, 388.5, 453.0, 399.0, 443.5, 413.0, 444.5, 423.5, 453.0, 457.5, 506.0, 452.5, 575.0, 458.5, 607.0, 447.5, 635.0, 444.5, 676.0, 452.5, 764.0, 443.0, 770.5]]
</td>
<td>
[375.5, 443.5, 83.0, 332.0]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
[[829.0, 466.5, 825.5, 464.0, 824.5, 455.0, 825.5, 425.0, 828.0, 419.5, 833.5, 418.0, 827.5, 417.0, 822.5, 396.0, 825.5, 327.0, 843.5, 313.0, 842.5, 296.0, 833.5, 291.0, 832.5, 270.0, 837.0, 265.5, 856.0, 264.5, 868.5, 277.0, 870.5, 306.0, 881.5, 318.0, 883.5, 329.0, 893.0, 332.5, 899.5, 340.0, 901.5, 367.0, 883.5, 382.0, 849.5, 443.0, 842.5, 448.0, 838.5, 460.0]]
</td>
<td>
[822.5, 264.5, 79.0, 202.0]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
[[714.0, 766.5, 664.0, 765.5, 654.0, 716.5, 640.0, 765.5, 578.5, 764.0, 578.5, 599.0, 570.5, 587.0, 592.5, 403.0, 583.5, 339.0, 525.5, 278.0, 463.5, 187.0, 423.5, 98.0, 422.5, 72.0, 444.0, 52.5, 460.5, 62.0, 458.5, 104.0, 485.5, 166.0, 581.0, 270.5, 623.0, 295.5, 644.5, 293.0, 630.5, 261.0, 642.5, 193.0, 667.0, 182.5, 707.0, 191.5, 719.5, 249.0, 709.0, 307.5, 774.0, 271.5, 848.5, 176.0, 875.5, 108.0, 867.5, 55.0, 902.0, 63.5, 908.5, 76.0, 902.5, 134.0, 858.5, 233.0, 759.5, 350.0, 736.5, 495.0, 752.5, 614.0]]
</td>
<td>
[422.5, 52.5, 486.0, 714.0]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
[[359.0, 509.5, 355.0, 509.5, 350.5, 502.0, 353.5, 486.0, 349.5, 475.0, 349.5, 449.0, 345.5, 430.0, 339.5, 419.0, 337.5, 394.0, 327.5, 378.0, 331.5, 371.0, 332.5, 357.0, 342.5, 345.0, 345.5, 327.0, 354.0, 313.5, 365.5, 317.0, 366.5, 339.0, 385.0, 350.5, 399.5, 371.0, 398.5, 383.0, 390.0, 391.5, 390.5, 378.0, 383.0, 369.5, 379.5, 370.0, 380.5, 441.0, 376.5, 471.0, 370.0, 464.5, 364.5, 472.0, 362.5, 482.0, 364.5, 504.0]]
</td>
<td>
[327.5, 313.5, 72.0, 196.0]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="group-annotations-by-image" class="level4">
<h4 class="anchored" data-anchor-id="group-annotations-by-image">Group annotations by image</h4>
<p>Each segmentation annotation is currently in a separate row in the DataFrame. We will want to group the annotations for each image into a single row for use with PyTorch and torchvision.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group the data by 'image_id' and aggregate information</span></span>
<span id="cb24-2">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>).agg({</span>
<span id="cb24-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'segmentation'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>,</span>
<span id="cb24-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bbox'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>, </span>
<span id="cb24-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category_id'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>,</span>
<span id="cb24-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span> :<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>,</span>
<span id="cb24-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first'</span>, </span>
<span id="cb24-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first'</span>, </span>
<span id="cb24-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first'</span></span>
<span id="cb24-10">})</span>
<span id="cb24-11"></span>
<span id="cb24-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rename columns for clarity </span></span>
<span id="cb24-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bbox' is renamed to 'bboxes' and 'label' to 'labels'</span></span>
<span id="cb24-14">annotation_df.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bbox'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bboxes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>}, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb24-15">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
segmentation
</th>
<th>
bboxes
</th>
<th>
category_id
</th>
<th>
labels
</th>
<th>
file_name
</th>
<th>
height
</th>
<th>
width
</th>
</tr>
<tr>
<th>
image_id
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
[[[377.0, 775.5, 368.0, 774.5, 346.5, 764.0, 349.5, 751.0, 348.5, 707.0, 358.5, 668.0, 343.5, 651.0, 359.5, 605.0, 379.5, 583.0, 366.01, 583.39, 362.55, 575.78, 361.85, 565.4, 353.2, 557.09, 357.7, 547.4, 350.78, 532.53, 356.32, 520.76, 359.78, 481.31, 376.39, 467.47, 387.46, 469.55, 401.3, 484.08, 405.8, 501.04, 394.03, 505.88, 394.73, 519.03, 399.92, 531.14, 374.66, 554.33, 369.81, 571.28, 374.31, 574.05, 388.15, 574.39, 397.49, 569.9, 402.5, 578.0, 410.5, 594.0, 412.5, 668.0, 387.0, 667.5, 375.5, 692.0, 376.5, 738.0, 380.5, 753.0, 388.5, 764.0, 386.5, 772.0]], [[404.0, 775.5, 396.5, 766.0, 411.5, 753.0, 411.5, 738.0, 416.5, 731.0, 412.5, 598.0, 419.5, 559.0, 416.0, 554.5, 404.0, 566.5, 387.0, 572.5, 375.5, 566.0, 377.5, 554.0, 405.5, 529.0, 413.5, 504.0, 414.5, 493.0, 386.5, 463.0, 388.5, 453.0, 399.0, 443.5, 413.0, 444.5, 423.5, 453.0, 457.5, 506.0, 452.5, 575.0, 458.5, 607.0, 447.5, 635.0, 444.5, 676.0, 452.5, 764.0, 443.0, 770.5]]]
</td>
<td>
[[343.5, 467.47, 69.0, 308.03], [375.5, 443.5, 83.0, 332.0]]
</td>
<td>
[1, 1]
</td>
<td>
[person, person]
</td>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
[[[829.0, 466.5, 825.5, 464.0, 824.5, 455.0, 825.5, 425.0, 828.0, 419.5, 833.5, 418.0, 827.5, 417.0, 822.5, 396.0, 825.5, 327.0, 843.5, 313.0, 842.5, 296.0, 833.5, 291.0, 832.5, 270.0, 837.0, 265.5, 856.0, 264.5, 868.5, 277.0, 870.5, 306.0, 881.5, 318.0, 883.5, 329.0, 893.0, 332.5, 899.5, 340.0, 901.5, 367.0, 883.5, 382.0, 849.5, 443.0, 842.5, 448.0, 838.5, 460.0]], [[714.0, 766.5, 664.0, 765.5, 654.0, 716.5, 640.0, 765.5, 578.5, 764.0, 578.5, 599.0, 570.5, 587.0, 592.5, 403.0, 583.5, 339.0, 525.5, 278.0, 463.5, 187.0, 423.5, 98.0, 422.5, 72.0, 444.0, 52.5, 460.5, 62.0, 458.5, 104.0, 485.5, 166.0, 581.0, 270.5, 623.0, 295.5, 644.5, 293.0, 630.5, 261.0, 642.5, 193.0, 667.0, 182.5, 707.0, 191.5, 719.5, 249.0, 709.0, 307.5, 774.0, 271.5, 848.5, 176.0, 875.5, 108.0, 867.5, 55.0, 902.0, 63.5, 908.5, 76.0, 902.5, 134.0, 858.5, 233.0, 759.5, 350.0, 736.5, 495.0, 752.5, 614.0]], [[359.0, 509.5, 355.0, 509.5, 350.5, 502.0, 353.5, 486.0, 349.5, 475.0, 349.5, 449.0, 345.5, 430.0, 339.5, 419.0, 337.5, 394.0, 327.5, 378.0, 331.5, 371.0, 332.5, 357.0, 342.5, 345.0, 345.5, 327.0, 354.0, 313.5, 365.5, 317.0, 366.5, 339.0, 385.0, 350.5, 399.5, 371.0, 398.5, 383.0, 390.0, 391.5, 390.5, 378.0, 383.0, 369.5, 379.5, 370.0, 380.5, 441.0, 376.5, 471.0, 370.0, 464.5, 364.5, 472.0, 362.5, 482.0, 364.5, 504.0]], [[1343.0, 764.5, 964.0, 745.5, 930.0, 764.5, 914.5, 759.0, 904.0, 722.5, 865.0, 706.5, 848.0, 735.5, 801.0, 735.5, 788.5, 699.0, 792.5, 577.0, 821.5, 476.0, 849.5, 454.0, 890.5, 382.0, 930.0, 355.5, 1021.0, 347.5, 1195.0, 358.5, 1287.0, 378.5, 1343.0, 436.0]]]
</td>
<td>
[[822.5, 264.5, 79.0, 202.0], [422.5, 52.5, 486.0, 714.0], [327.5, 313.5, 72.0, 196.0], [788.5, 347.5, 554.5, 417.0]]
</td>
<td>
[1, 1, 1, 2]
</td>
<td>
[person, person, person, car]
</td>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
[[[590.0, 1119.0, 508.5, 1119.0, 393.5, 881.0, 363.5, 778.0, 359.5, 738.0, 377.5, 685.0, 420.5, 660.0, 388.5, 650.0, 410.5, 606.0, 412.5, 477.0, 349.5, 383.0, 364.5, 338.0, 341.5, 303.0, 369.5, 313.0, 396.5, 191.0, 449.0, 157.5, 496.0, 169.5, 524.5, 203.0, 534.5, 320.0, 577.5, 380.0, 588.5, 493.0, 635.5, 554.0, 631.5, 567.0, 687.5, 625.0, 704.5, 673.0, 698.5, 743.0, 632.5, 833.0, 618.5, 955.0, 573.5, 1096.0]], [[262.0, 1119.0, 128.5, 1119.0, 131.5, 1089.0, 35.5, 901.0, 11.5, 772.0, 33.5, 686.0, 70.5, 663.0, 34.5, 612.0, 25.5, 569.0, 52.5, 375.0, 97.0, 332.5, 195.5, 306.0, 205.5, 255.0, 192.5, 220.0, 240.0, 154.5, 290.0, 133.5, 323.5, 153.0, 341.5, 209.0, 332.5, 279.0, 294.5, 326.0, 347.5, 357.0, 352.5, 399.0, 400.5, 459.0, 404.5, 517.0, 391.5, 631.0, 344.5, 679.0, 359.5, 719.0, 323.5, 907.0, 224.5, 1082.0]]]
</td>
<td>
[[341.5, 157.5, 363.0, 961.5], [11.5, 133.5, 393.0, 985.5]]
</td>
<td>
[1, 1]
</td>
<td>
[person, person]
</td>
<td>
3076319.jpg
</td>
<td>
1120.0
</td>
<td>
768.0
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
[[[683.0, 398.5, 675.0, 398.5, 671.5, 396.0, 673.5, 378.0, 669.5, 366.0, 669.5, 359.0, 664.5, 346.0, 663.5, 326.0, 661.5, 320.0, 661.5, 312.0, 666.5, 304.0, 662.5, 295.0, 666.0, 283.5, 673.0, 283.5, 674.5, 285.0, 676.5, 289.0, 676.5, 297.0, 681.5, 302.0, 685.5, 313.0, 686.5, 336.0, 683.5, 344.0, 685.5, 395.0]], [[649.0, 398.5, 644.0, 398.5, 641.5, 396.0, 640.5, 387.0, 644.5, 379.0, 650.5, 358.0, 650.5, 351.0, 644.5, 335.0, 644.5, 323.0, 646.5, 316.0, 644.5, 300.0, 648.5, 291.0, 654.0, 288.5, 661.5, 295.0, 662.5, 298.0, 658.5, 309.0, 662.5, 316.0, 664.5, 324.0, 665.5, 349.0, 669.5, 364.0, 665.5, 383.0, 666.5, 396.0, 663.0, 397.5, 659.5, 392.0, 662.5, 375.0, 662.5, 364.0, 660.0, 361.5, 649.5, 383.0]]]
</td>
<td>
[[661.5, 283.5, 25.0, 115.0], [640.5, 288.5, 29.0, 110.0]]
</td>
<td>
[1, 1]
</td>
<td>
[person, person]
</td>
<td>
3145551.jpg
</td>
<td>
768.0
</td>
<td>
1184.0
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
[[[562.0, 464.5, 552.0, 464.5, 550.5, 462.0, 553.5, 454.0, 550.5, 433.0, 558.5, 402.0, 558.5, 389.0, 561.5, 380.0, 557.0, 372.5, 549.0, 374.5, 537.0, 372.5, 533.0, 377.5, 532.5, 371.0, 529.5, 368.0, 542.0, 365.5, 551.0, 366.5, 562.0, 361.5, 567.0, 361.5, 568.5, 360.0, 567.5, 346.0, 572.0, 342.5, 577.0, 342.5, 582.5, 348.0, 581.5, 360.0, 591.5, 372.0, 593.5, 386.0, 592.0, 388.5, 587.0, 388.5, 585.5, 391.0, 578.5, 419.0, 572.5, 434.0, 571.5, 445.0, 566.5, 454.0, 565.5, 462.0]], [[661.0, 436.5, 659.5, 436.0, 660.5, 432.0, 660.5, 396.0, 659.5, 392.0, 663.5, 376.0, 661.0, 373.5, 658.0, 373.5, 650.0, 377.5, 641.0, 377.5, 640.5, 376.0, 647.0, 372.5, 651.0, 372.5, 656.0, 370.5, 666.0, 365.5, 667.5, 364.0, 667.5, 359.0, 670.0, 356.5, 674.0, 356.5, 677.5, 360.0, 676.5, 367.0, 682.5, 374.0, 683.5, 389.0, 681.0, 390.5, 678.5, 388.0, 678.5, 385.0, 677.5, 385.0, 677.5, 390.0, 673.5, 395.0, 673.5, 408.0, 671.5, 411.0, 670.5, 420.0, 668.5, 425.0, 668.5, 433.0, 669.5, 434.0]]]
</td>
<td>
[[529.5, 342.5, 64.0, 122.0], [640.5, 356.5, 43.0, 80.0]]
</td>
<td>
[1, 1]
</td>
<td>
[person, person]
</td>
<td>
3176048.jpg
</td>
<td>
768.0
</td>
<td>
1152.0
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step is not strictly necessary for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb25-2">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].explode().unique().tolist()</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb25-5">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
person
</td>
</tr>
<tr>
<th>
1
</th>
<td>
car
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb26-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].explode().tolist()).value_counts()<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#.sort_index()</span></span>
<span id="cb26-3"></span>
<span id="cb26-4">plot_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [index[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> class_counts.index]</span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb26-7">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb26-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb26-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb26-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb26-11">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), plot_labels, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb26-12">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/segmentation-polygons/images/output_37_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>Note the class distribution is quite imbalanced between the <code>person</code> and <code>car</code> classes. For a real dataset, you would want these to be much closer.</p>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its segmentation masks and bounding boxes using torchvision’s <code>BoundingBoxes</code> and <code>Mask</code> classes and <code>draw_bounding_boxes</code> and <code>draw_segmentation_masks</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to bounding boxes and segmentation masks for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb27-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb27-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb27-6"></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb27-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/segmentation-polygons/images/output_41_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb28-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb28-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb30-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb30-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb30-6"></span>
<span id="cb30-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb30-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb30-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (768, 1152)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/segmentation-polygons/images/output_48_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb32-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
adults-affection-attractive-2760688
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
segmentation
</th>
<td>
[[[389.0, 1151.0, 34.5, 1151.0, 82.5, 992.0, 103.0, 965.5, 147.5, 953.0, 135.5, 848.0, 104.5, 763.0, 97.5, 672.0, 129.5, 581.0, 186.5, 519.0, 127.5, 466.0, 106.5, 422.0, 118.5, 369.0, 181.0, 306.5, 258.0, 325.5, 301.5, 412.0, 285.5, 566.0, 291.5, 594.0, 323.5, 610.0, 335.5, 714.0, 366.5, 777.0, 341.5, 848.0, 337.5, 944.0]], [[532.0, 1151.0, 397.5, 1151.0, 345.5, 958.0, 345.5, 855.0, 369.5, 776.0, 340.5, 720.0, 344.5, 678.0, 325.5, 647.0, 326.5, 608.0, 296.5, 592.0, 294.5, 540.0, 298.0, 519.5, 341.5, 493.0, 273.5, 329.0, 284.5, 283.0, 332.0, 249.5, 385.0, 260.5, 411.5, 287.0, 431.5, 338.0, 434.0, 411.5, 449.0, 407.5, 486.0, 440.5, 601.0, 461.5, 671.5, 580.0, 698.5, 786.0, 681.5, 1090.0, 663.0, 1137.5, 549.0, 1127.5]]]
</td>
</tr>
<tr>
<th>
bboxes
</th>
<td>
[[34.5, 306.5, 354.5, 844.5], [273.5, 249.5, 425.0, 901.5]]
</td>
</tr>
<tr>
<th>
category_id
</th>
<td>
[1, 1]
</td>
</tr>
<tr>
<th>
labels
</th>
<td>
[person, person]
</td>
</tr>
<tr>
<th>
file_name
</th>
<td>
adults-affection-attractive-2760688.jpg
</td>
</tr>
<tr>
<th>
height
</th>
<td>
1152.0
</td>
</tr>
<tr>
<th>
width
</th>
<td>
768.0
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>The lists of point coordinates in the segmentation annotations are the vertices of a polygon for the individual segmentation masks. We can use these to generate images for each segmentation mask.</p>
</section>
<section id="define-a-function-to-convert-segmentation-polygons-to-images" class="level4">
<h4 class="anchored" data-anchor-id="define-a-function-to-convert-segmentation-polygons-to-images">Define a function to convert segmentation polygons to images</h4>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_polygon_mask(image_size, vertices):</span>
<span id="cb33-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Create a grayscale image with a white polygonal area on a black background.</span></span>
<span id="cb33-4"></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - image_size (tuple): A tuple representing the dimensions (width, height) of the image.</span></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - vertices (list): A list of tuples, each containing the x, y coordinates of a vertex</span></span>
<span id="cb33-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                        of the polygon. Vertices should be in clockwise or counter-clockwise order.</span></span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb33-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    - PIL.Image.Image: A PIL Image object containing the polygonal mask.</span></span>
<span id="cb33-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb33-13"></span>
<span id="cb33-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new black image with the given dimensions</span></span>
<span id="cb33-15">    mask_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>, image_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb33-16">    </span>
<span id="cb33-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw the polygon on the image. The area inside the polygon will be white (255).</span></span>
<span id="cb33-18">    ImageDraw.Draw(mask_img, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L'</span>).polygon(vertices, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>))</span>
<span id="cb33-19"></span>
<span id="cb33-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the image with the drawn polygon</span></span>
<span id="cb33-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mask_img</span></code></pre></div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>We can now generate the segmentation mask images and feed those to the <code>draw_segmentation_mask</code> function.</p>
<p>The <code>draw_bounding_boxes</code> function expects bounding box annotations in <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format, so we’ll use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.box_convert.html#torchvision.ops.box_convert"><code>box_convert</code></a> function included with torchvision to convert the bounding box annotations from <code>[x,y,w,h]</code> to <code>[x,y,x,y]</code> format.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the polygon points for segmentation mask</span></span>
<span id="cb34-2">polygon_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'segmentation'</span>]</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate mask images from polygons</span></span>
<span id="cb34-5">mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(sample_img.size, polygon[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> polygon <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> polygon_points]</span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert mask images to tensors</span></span>
<span id="cb34-8">masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs])</span>
<span id="cb34-9"></span>
<span id="cb34-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb34-11">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]</span>
<span id="cb34-12">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bboxes'</span>]</span>
<span id="cb34-13"></span>
<span id="cb34-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb34-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb34-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb34-17">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>masks, </span>
<span id="cb34-18">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb34-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb34-20">)</span>
<span id="cb34-21"></span>
<span id="cb34-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb34-23">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb34-24">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb34-25">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>),</span>
<span id="cb34-26">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb34-27">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb34-28">)</span>
<span id="cb34-29"></span>
<span id="cb34-30">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/segmentation-polygons/images/output_54_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb35-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span></code></pre></div>
</section>
<section id="initialize-the-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-the-custom-transforms">Initialize the custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb36-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb36-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb36-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb36-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb36-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb36-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb36-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb36-9"></span>
<span id="cb36-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb36-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb36-12"></span>
<span id="cb36-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb36-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb37-2">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb37-3"></span>
<span id="cb37-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb37-5">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb37-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: Mask(masks), </span>
<span id="cb37-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torchvision.ops.box_convert(torch.Tensor(bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb37-8">                           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb37-9">                           canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb37-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb37-11">}</span>
<span id="cb37-12"></span>
<span id="cb37-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb37-14">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb37-15"></span>
<span id="cb37-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb37-17">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb37-18"></span>
<span id="cb37-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb37-20">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb37-21"></span>
<span id="cb37-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb37-23">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb37-24">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb37-25">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb37-26"></span>
<span id="cb37-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb37-28">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks(</span>
<span id="cb37-29">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb37-30">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb37-31">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb37-32">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb37-33">)</span>
<span id="cb37-34"></span>
<span id="cb37-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb37-36">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb37-37">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb37-38">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb37-39">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb37-40">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb37-41">)</span>
<span id="cb37-42"></span>
<span id="cb37-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb37-44">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb37-45"></span>
<span id="cb37-46">pd.Series({</span>
<span id="cb37-47">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb37-48">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb37-49">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb37-50">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb37-51">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb37-52">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/segmentation-polygons/images/output_62_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_86ef5">
<thead>
</thead>
<tbody>
<tr>
<th id="T_86ef5_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_86ef5_row0_col0" class="data row0 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_86ef5_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_86ef5_row1_col0" class="data row1 col0">
(382, 665)
</td>
</tr>
<tr>
<th id="T_86ef5_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_86ef5_row2_col0" class="data row2 col0">
(220, 382)
</td>
</tr>
<tr>
<th id="T_86ef5_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_86ef5_row3_col0" class="data row3 col0">
(382, 382)
</td>
</tr>
<tr>
<th id="T_86ef5_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_86ef5_row4_col0" class="data row4 col0">
(384, 384)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> COCOInstSegDataset(Dataset):</span>
<span id="cb38-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb38-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A PyTorch Dataset class for COCO-style instance segmentation.</span></span>
<span id="cb38-4"></span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class is designed to handle datasets for instance segmentation tasks, specifically</span></span>
<span id="cb38-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    formatted in the style of COCO (Common Objects in Context) annotations. It supports</span></span>
<span id="cb38-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    loading images along with their corresponding segmentation masks and bounding boxes.</span></span>
<span id="cb38-8"></span>
<span id="cb38-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb38-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    _img_keys : list</span></span>
<span id="cb38-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        List of image keys (identifiers).</span></span>
<span id="cb38-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    _annotation_df : pandas.DataFrame</span></span>
<span id="cb38-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        DataFrame containing annotations for images.</span></span>
<span id="cb38-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    _img_dict : dict</span></span>
<span id="cb38-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Dictionary mapping image keys to their file paths.</span></span>
<span id="cb38-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    _class_to_idx : dict</span></span>
<span id="cb38-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Dictionary mapping class names to class indices.</span></span>
<span id="cb38-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    _transforms : torchvision.transforms (optional)</span></span>
<span id="cb38-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Transformations to be applied to the images and targets.</span></span>
<span id="cb38-20"></span>
<span id="cb38-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Methods:</span></span>
<span id="cb38-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    __init__(self, img_keys, annotation_df, img_dict, class_to_idx, transforms=None):</span></span>
<span id="cb38-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the dataset with image keys, annotations, image dictionary,</span></span>
<span id="cb38-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        class mappings, and optional transforms.</span></span>
<span id="cb38-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    __len__(self):</span></span>
<span id="cb38-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the total number of items in the dataset.</span></span>
<span id="cb38-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    __getitem__(self, index):</span></span>
<span id="cb38-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an image and its corresponding target (masks, boxes, labels) by index.</span></span>
<span id="cb38-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    _load_image_and_target(self, annotation):</span></span>
<span id="cb38-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Loads an image and its corresponding target data based on the providedannotation.</span></span>
<span id="cb38-31"></span>
<span id="cb38-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb38-33"></span>
<span id="cb38-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb38-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb38-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the COCOInstSegDataset instance.</span></span>
<span id="cb38-37"></span>
<span id="cb38-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb38-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_keys (list): List of image keys.</span></span>
<span id="cb38-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation_df (DataFrame): DataFrame containing image annotations.</span></span>
<span id="cb38-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_dict (dict): Dictionary mapping image keys to file paths.</span></span>
<span id="cb38-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            class_to_idx (dict): Dictionary mapping class names to indices.</span></span>
<span id="cb38-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            transforms (callable, optional): Optional transform to be applied on a sample.</span></span>
<span id="cb38-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb38-45">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb38-46">        </span>
<span id="cb38-47">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of image keys</span></span>
<span id="cb38-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DataFrame containing annotations</span></span>
<span id="cb38-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping image keys to image paths</span></span>
<span id="cb38-50">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping class names to class indices</span></span>
<span id="cb38-51">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Image transforms to be applied</span></span>
<span id="cb38-52"></span>
<span id="cb38-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb38-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Returns the number of items in the dataset</span></span>
<span id="cb38-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb38-56">        </span>
<span id="cb38-57">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb38-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Retrieves an image and its corresponding target by index</span></span>
<span id="cb38-59">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb38-60">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb38-61">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb38-62">        </span>
<span id="cb38-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply transformations if any</span></span>
<span id="cb38-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb38-65">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb38-66">        </span>
<span id="cb38-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb38-68"></span>
<span id="cb38-69">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb38-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loads an image and its corresponding target data (masks, boxes, labels)</span></span>
<span id="cb38-71">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb38-72">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb38-73"></span>
<span id="cb38-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process segmentation polygons</span></span>
<span id="cb38-75">        polygon_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'segmentation'</span>]</span>
<span id="cb38-76">        mask_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [create_polygon_mask(image.size, polygon[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> polygon <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> polygon_points]</span>
<span id="cb38-77">        masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mask(torch.concat([Mask(transforms.PILToTensor()(mask_img), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> mask_img <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> mask_imgs]))</span>
<span id="cb38-78">        </span>
<span id="cb38-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert bounding boxes to tensor format</span></span>
<span id="cb38-80">        bbox_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bboxes'</span>]</span>
<span id="cb38-81">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.box_convert(torch.Tensor(bbox_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>)</span>
<span id="cb38-82">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb38-83">        </span>
<span id="cb38-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Map labels to their corresponding indices</span></span>
<span id="cb38-85">        annotation_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]</span>
<span id="cb38-86">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_labels])</span>
<span id="cb38-87">        </span>
<span id="cb38-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>: masks, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb39-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb39-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb39-4">        iou_crop,</span>
<span id="cb39-5">        transforms.ColorJitter(</span>
<span id="cb39-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb39-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb39-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb39-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb39-10">        ),</span>
<span id="cb39-11">        transforms.RandomGrayscale(),</span>
<span id="cb39-12">        transforms.RandomEqualize(),</span>
<span id="cb39-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb39-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb39-15">    ],</span>
<span id="cb39-16">)</span>
<span id="cb39-17"></span>
<span id="cb39-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb39-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb39-20">    resize_max, </span>
<span id="cb39-21">    pad_square,</span>
<span id="cb39-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb39-23">])</span>
<span id="cb39-24"></span>
<span id="cb39-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb39-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb39-27">    transforms.ToImage(), </span>
<span id="cb39-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb39-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb39-30">])</span>
<span id="cb39-31"></span>
<span id="cb39-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb39-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb39-34">    data_aug_tfms, </span>
<span id="cb39-35">    resize_pad_tfm, </span>
<span id="cb39-36">    final_tfms</span>
<span id="cb39-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb40-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb40-3"></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb40-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> COCOInstSegDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb40-6"></span>
<span id="cb40-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training dataset</span></span>
<span id="cb40-8">pd.Series({</span>
<span id="cb40-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb40-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_7b3e4">
<thead>
</thead>
<tbody>
<tr>
<th id="T_7b3e4_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_7b3e4_row0_col0" class="data row0 col0">
31
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb41-2"></span>
<span id="cb41-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get colors for dataset sample</span></span>
<span id="cb41-4">sample_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb41-5"></span>
<span id="cb41-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with segmentation masks</span></span>
<span id="cb41-7">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_segmentation_masks( </span>
<span id="cb41-8">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb41-9">    masks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'masks'</span>], </span>
<span id="cb41-10">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb41-11">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb41-12">)</span>
<span id="cb41-13"></span>
<span id="cb41-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with bounding boxes</span></span>
<span id="cb41-15">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb41-16">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>annotated_tensor, </span>
<span id="cb41-17">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb41-18">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb41-19">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_colors</span>
<span id="cb41-20">)</span>
<span id="cb41-21"></span>
<span id="cb41-22">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/segmentation-polygons/images/output_71_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom COCO segmentation annotations and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future instance segmentation projects.</p>
<p>As a next step, perhaps try annotating a custom COCO segmentation dataset with a tool like <a href="https://github.com/opencv/cvat">CVAT</a> and loading it with this tutorial’s code. Once you’re comfortable with that, try adapting the code in the following tutorial to train an instance segmentation model on your custom dataset.</p>
<ul>
<li><a href="../../../posts/pytorch-train-mask-rcnn-tutorial/">Training Mask R-CNN Models with PyTorch</a></li>
</ul>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-coco-annotation-tutorials/bounding-boxes/"><strong>Working with COCO Bounding Box Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with COCO bounding box annotations in torchvision for object detection tasks.</li>
<li><a href="../../../posts/pytorch-train-mask-rcnn-tutorial/"><strong>Training Mask R-CNN Models with PyTorch</strong></a><strong>:</strong> Learn how to train Mask R-CNN models on custom datasets with PyTorch.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>instance-segmentation</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-coco-annotation-tutorials/segmentation-polygons/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Working with COCO Bounding Box Annotations in Torchvision</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/torchvision-coco-annotation-tutorials/bounding-boxes/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/tutorials/torchvision-annotation-tutorials-series.html"><strong>Torchvision Annotation Tutorials</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Getting Started with the Code</li>
<li>Setting Up Your Python Environment</li>
<li>Importing the Required Dependencies</li>
<li>Loading and Exploring the Dataset</li>
<li>Preparing the Data</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Welcome to this hands-on guide for working with <a href="https://cocodataset.org/#format-data">COCO-formatted</a> bounding box annotations in <a href="https://pytorch.org/vision/stable/index.html">torchvision</a>. Bounding box annotations specify rectangular frames around objects in images to identify and locate them for training object detection models.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/bounding-boxes/images/bounding-box-hero-img.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>The tutorial walks through setting up a Python environment, loading the raw annotations into a <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html">Pandas DataFrame</a>, annotating and augmenting images using torchvision’s <a href="https://pytorch.org/vision/stable/auto_examples/transforms/plot_transforms_getting_started.html#sphx-glr-auto-examples-transforms-plot-transforms-getting-started-py">Transforms V2 API</a>, and creating a custom <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">Dataset</a> class to feed samples to a model.</p>
<p>This guide is suitable for beginners and experienced practitioners, providing the code, explanations, and resources needed to understand and implement each step. By the end, you will have a solid foundation for working with COCO bounding box annotations in torchvision for object detection tasks.</p>
</section>
<section id="getting-started-with-the-code" class="level2">
<h2 class="anchored" data-anchor-id="getting-started-with-the-code">Getting Started with the Code</h2>
<p>The tutorial code is available as a <a href="https://jupyter.org/">Jupyter Notebook</a>, which you can run locally or in a cloud-based environment like <a href="https://colab.research.google.com/">Google Colab</a>. I have dedicated tutorials for those new to these platforms or who need guidance setting up:</p>
<div class="callout callout-style-default callout-tip callout-titled" title="Setup Guides">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Setup Guides
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><p><a href="../../../posts/google-colab-getting-started-tutorial/"><strong>Getting Started with Google Colab</strong></a></p></li>
<li><p><a href="../../../posts/mamba-getting-started-tutorial-windows/"><strong>Setting Up a Local Python Environment with Mamba for Machine Learning Projects on Windows</strong></a></p></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled" title="Tutorial Code">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tutorial Code
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Jupyter Notebook:</th>
<th><a href="https://github.com/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/coco/torchvision-coco-bounding-box-annotations.ipynb">GitHub Repository</a></th>
<th><a href="https://colab.research.google.com/github/cj-mills/torchvision-annotation-tutorials/blob/main/notebooks/coco/torchvision-coco-bounding-box-annotations.ipynb">Open In Colab</a></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="setting-up-your-python-environment" class="level2">
<h2 class="anchored" data-anchor-id="setting-up-your-python-environment">Setting Up Your Python Environment</h2>
<p>Before diving into the code, we’ll cover the steps to create a local Python environment and install the necessary dependencies.</p>
<section id="creating-a-python-environment" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-python-environment">Creating a Python Environment</h3>
<p>First, we’ll create a Python environment using <a href="https://docs.conda.io/en/latest/">Conda</a>/<a href="https://mamba.readthedocs.io/en/latest/">Mamba</a>. Open a terminal with Conda/Mamba installed and run the following commands:</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">Conda</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Mamba</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> activate pytorch-env</span></code></pre></div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new Python 3.10 environment</span></span>
<span id="cb2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> pytorch-env python=3.10 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Activate the environment</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mamba</span> activate pytorch-env</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-pytorch" class="level3">
<h3 class="anchored" data-anchor-id="installing-pytorch">Installing PyTorch</h3>
<p>Next, we’ll install <a href="https://pytorch.org/">PyTorch</a>. Run the appropriate command for your hardware and operating system.</p>
<div class="tabset-margin-container"></div><div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-2-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-1" aria-controls="tabset-2-1" aria-selected="true">Linux/Windows (CUDA)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-2" aria-controls="tabset-2-2" aria-selected="false">Mac</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-3-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-3" aria-controls="tabset-2-3" aria-selected="false">Linux (CPU)</a></li><li class="nav-item"><a class="nav-link" id="tabset-2-4-tab" data-bs-toggle="tab" data-bs-target="#tabset-2-4" aria-controls="tabset-2-4" aria-selected="false">Windows (CPU)</a></li></ul>
<div class="tab-content">
<div id="tabset-2-1" class="tab-pane active" aria-labelledby="tabset-2-1-tab">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch with CUDA</span></span>
<span id="cb3-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cu121</span></code></pre></div>
</div>
<div id="tabset-2-2" class="tab-pane" aria-labelledby="tabset-2-2-tab">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MPS (Metal Performance Shaders) acceleration is available on MacOS 12.3+</span></span>
<span id="cb4-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
<div id="tabset-2-3" class="tab-pane" aria-labelledby="tabset-2-3-tab">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb5-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--index-url</span> https://download.pytorch.org/whl/cpu</span></code></pre></div>
</div>
<div id="tabset-2-4" class="tab-pane" aria-labelledby="tabset-2-4-tab">
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install PyTorch for CPU only</span></span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install torch torchvision torchaudio</span></code></pre></div>
</div>
</div>
</div>
</section>
<section id="installing-additional-libraries" class="level3">
<h3 class="anchored" data-anchor-id="installing-additional-libraries">Installing Additional Libraries</h3>
<p>We also need to install some additional libraries for our project.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>jupyter</code></td>
<td>An open-source web application that allows you to create and share documents that contain live code, equations, visualizations, and narrative text. (<a href="https://jupyter.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>matplotlib</code></td>
<td>This package provides a comprehensive collection of visualization tools to create high-quality plots, charts, and graphs for data exploration and presentation. (<a href="https://matplotlib.org/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>pandas</code></td>
<td>This package provides fast, powerful, and flexible data analysis and manipulation tools. (<a href="https://pandas.pydata.org/">link</a>)</td>
</tr>
<tr class="even">
<td><code>pillow</code></td>
<td>The Python Imaging Library adds image processing capabilities. (<a href="https://pillow.readthedocs.io/en/stable/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>tqdm</code></td>
<td>A Python library that provides fast, extensible progress bars for loops and other iterable objects in Python. (<a href="https://tqdm.github.io/">link</a>)</td>
</tr>
<tr class="even">
<td><code>distinctipy</code></td>
<td>A lightweight python package providing functions to generate colours that are visually distinct from one another. (<a href="https://distinctipy.readthedocs.io/en/latest/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install these additional libraries:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional dependencies</span></span>
<span id="cb7-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install distinctipy jupyter matplotlib pandas pillow tqdm</span></code></pre></div>
</section>
<section id="installing-utility-packages" class="level3">
<h3 class="anchored" data-anchor-id="installing-utility-packages">Installing Utility Packages</h3>
<p>We will also install some utility packages I made, which provide shortcuts for routine tasks.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Package Descriptions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Package Descriptions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<table class="table">
<thead>
<tr class="header">
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>cjm_pil_utils</code></td>
<td>Some PIL utility functions I frequently use. (<a href="https://cj-mills.github.io/cjm-pil-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_psl_utils</code></td>
<td>Some utility functions using the Python Standard Library. (<a href="https://cj-mills.github.io/cjm-psl-utils/">link</a>)</td>
</tr>
<tr class="odd">
<td><code>cjm_pytorch_utils</code></td>
<td>Some utility functions for working with PyTorch. (<a href="https://cj-mills.github.io/cjm-pytorch-utils/">link</a>)</td>
</tr>
<tr class="even">
<td><code>cjm_torchvision_tfms</code></td>
<td>Some custom Torchvision tranforms. (<a href="https://cj-mills.github.io/cjm-torchvision-tfms/">link</a>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p>Run the following commands to install the utility packages:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install additional utility packages</span></span>
<span id="cb8-2">pip install cjm_pil_utils cjm_psl_utils cjm_pytorch_utils cjm_torchvision_tfms</span></code></pre></div>
<p>With our environment set up, we can open our Jupyter Notebook and dive into the code.</p>
</section>
</section>
<section id="importing-the-required-dependencies" class="level2">
<h2 class="anchored" data-anchor-id="importing-the-required-dependencies">Importing the Required Dependencies</h2>
<p>First, we will import the necessary Python packages into our Jupyter Notebook.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import Python Standard Library dependencies</span></span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import utility functions</span></span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pil_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_img_files</span>
<span id="cb9-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_psl_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> download_file, file_extract</span>
<span id="cb9-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_pytorch_utils.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor_to_pil</span>
<span id="cb9-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cjm_torchvision_tfms.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ResizeMax, PadSquare, CustomRandomIoUCrop</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the distinctipy module</span></span>
<span id="cb9-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> distinctipy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distinctipy</span>
<span id="cb9-13"></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import matplotlib for creating plots</span></span>
<span id="cb9-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import numpy</span></span>
<span id="cb9-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-19"></span>
<span id="cb9-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import the pandas package</span></span>
<span id="cb9-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb9-22"></span>
<span id="cb9-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do not truncate the contents of cells and display all rows and columns</span></span>
<span id="cb9-24">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max_colwidth'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb9-25"></span>
<span id="cb9-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PIL for image manipulation</span></span>
<span id="cb9-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb9-28"></span>
<span id="cb9-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import PyTorch dependencies</span></span>
<span id="cb9-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb9-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset, DataLoader</span>
<span id="cb9-32"></span>
<span id="cb9-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import torchvision dependencies</span></span>
<span id="cb9-34"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision</span>
<span id="cb9-35">torchvision.disable_beta_transforms_warning()</span>
<span id="cb9-36"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.tv_tensors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BoundingBoxes</span>
<span id="cb9-37"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> draw_bounding_boxes</span>
<span id="cb9-38"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.v2  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb9-39"></span>
<span id="cb9-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import tqdm for progress bar</span></span>
<span id="cb9-41"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm.auto <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span></code></pre></div>
<p>Torchvision provides dedicated <a href="https://pytorch.org/docs/stable/tensors.html"><code>torch.Tensor</code></a> subclasses for different annotation types called <a href="https://pytorch.org/vision/stable/tv_tensors.html"><code>TVTensors</code></a>. Torchvision’s V2 transforms use these subclasses to update the annotations based on the applied image augmentations. The TVTensor class for bounding box annotations is called <a href="https://pytorch.org/vision/stable/generated/torchvision.tv_tensors.BoundingBoxes.html"><code>BoundingBoxes</code></a>. Torchvision also includes a <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function to annotate images.</p>
</section>
<section id="loading-and-exploring-the-dataset" class="level2">
<h2 class="anchored" data-anchor-id="loading-and-exploring-the-dataset">Loading and Exploring the Dataset</h2>
<p>After importing the dependencies, we can start working with our data. I annotated a toy dataset with bounding boxes for this tutorial using images from the free stock photo site <a href="https://www.pexels.com/">Pexels</a>. The dataset is available on <a href="https://huggingface.co/">HuggingFace Hub</a> at the link below:</p>
<ul>
<li><strong>Dataset Repository:</strong> <a href="https://huggingface.co/datasets/cj-mills/coco-bounding-box-toy-dataset/tree/main">coco-bounding-box-toy-dataset</a></li>
</ul>
<section id="setting-the-directory-paths" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-directory-paths">Setting the Directory Paths</h3>
<p>We first need to specify a place to store our dataset and a location to download the zip file containing it. The following code creates the folders in the current directory (<code>./</code>). Update the path if that is not suitable for you.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store datasets</span></span>
<span id="cb10-2">dataset_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./Datasets/"</span>)</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the dataset directory if it does not exist</span></span>
<span id="cb10-4">dataset_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define path to store archive files</span></span>
<span id="cb10-7">archive_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'../Archive'</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the archive directory if it does not exist</span></span>
<span id="cb10-9">archive_dir.mkdir(parents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb10-12">pd.Series({</span>
<span id="cb10-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Directory:"</span>: dataset_dir, </span>
<span id="cb10-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Directory:"</span>: archive_dir</span>
<span id="cb10-15">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_5502a">
<thead>
</thead>
<tbody>
<tr>
<th id="T_5502a_level0_row0" class="row_heading level0 row0">
Dataset Directory:
</th>
<td id="T_5502a_row0_col0" class="data row0 col0">
Datasets
</td>
</tr>
<tr>
<th id="T_5502a_level0_row1" class="row_heading level0 row1">
Archive Directory:
</th>
<td id="T_5502a_row1_col0" class="data row1 col0">
Datasets/../Archive
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="setting-the-dataset-path" class="level3">
<h3 class="anchored" data-anchor-id="setting-the-dataset-path">Setting the Dataset Path</h3>
<p>Next, we construct the name for the Hugging Face Hub dataset and set where to download and extract the dataset.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the dataset</span></span>
<span id="cb11-2">dataset_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coco-bounding-box-toy-dataset'</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset name by combining the username and dataset name</span></span>
<span id="cb11-5">hf_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'cj-mills/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the zip file that contains the dataset</span></span>
<span id="cb11-8">archive_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>archive_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip'</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the path to the directory where the dataset will be extracted</span></span>
<span id="cb11-11">dataset_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_dir<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb11-12"></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the dataset name and paths and converting it to a DataFrame for display</span></span>
<span id="cb11-14">pd.Series({</span>
<span id="cb11-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HuggingFace Dataset:"</span>: hf_dataset, </span>
<span id="cb11-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Archive Path:"</span>: archive_path, </span>
<span id="cb11-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset Path:"</span>: dataset_path</span>
<span id="cb11-18">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_6f643">
<thead>
</thead>
<tbody>
<tr>
<th id="T_6f643_level0_row0" class="row_heading level0 row0">
HuggingFace Dataset:
</th>
<td id="T_6f643_row0_col0" class="data row0 col0">
cj-mills/coco-bounding-box-toy-dataset
</td>
</tr>
<tr>
<th id="T_6f643_level0_row1" class="row_heading level0 row1">
Archive Path:
</th>
<td id="T_6f643_row1_col0" class="data row1 col0">
Datasets/../Archive/coco-bounding-box-toy-dataset.zip
</td>
</tr>
<tr>
<th id="T_6f643_level0_row2" class="row_heading level0 row2">
Dataset Path:
</th>
<td id="T_6f643_row2_col0" class="data row2 col0">
Datasets/coco-bounding-box-toy-dataset
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="downloading-the-dataset" class="level3">
<h3 class="anchored" data-anchor-id="downloading-the-dataset">Downloading the Dataset</h3>
<p>We can now download the archive file and extract the dataset using the <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#download_file"><code>download_file</code></a> and <a href="https://cj-mills.github.io/cjm-psl-utils/core.html#file_extract"><code>file_extract</code></a> functions from the <code>cjm_psl_utils</code> package. We can delete the archive afterward to save space.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the HuggingFace Hub dataset URL</span></span>
<span id="cb12-2">dataset_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://huggingface.co/datasets/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hf_dataset<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/resolve/main/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.zip"</span></span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"HuggingFace Dataset URL: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dataset_url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set whether to delete the archive file after extracting the dataset</span></span>
<span id="cb12-6">delete_archive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the dataset if not present</span></span>
<span id="cb12-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> dataset_path.is_dir():</span>
<span id="cb12-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dataset folder already exists"</span>)</span>
<span id="cb12-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Downloading dataset..."</span>)</span>
<span id="cb12-13">    download_file(dataset_url, archive_dir)    </span>
<span id="cb12-14">    </span>
<span id="cb12-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extracting dataset..."</span>)</span>
<span id="cb12-16">    file_extract(fname<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>archive_path, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_dir)</span>
<span id="cb12-17">    </span>
<span id="cb12-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Delete the archive if specified</span></span>
<span id="cb12-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> delete_archive: archive_path.unlink()</span></code></pre></div>
</section>
<section id="getting-the-image-and-annotation-folders" class="level3">
<h3 class="anchored" data-anchor-id="getting-the-image-and-annotation-folders">Getting the Image and Annotation Folders</h3>
<p>The dataset has two folders containing the sample images and annotations. The image folder organizes all samples together. The annotations are in a single JSON file.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming the images are stored in a subfolder named 'images'</span></span>
<span id="cb13-2">img_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images/'</span></span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assuming the annotation file is in JSON format and located in a subdirectory of the dataset</span></span>
<span id="cb13-5">annotation_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(dataset_path.glob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*/*.json'</span>))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating a Series with the paths and converting it to a DataFrame for display</span></span>
<span id="cb13-8">pd.Series({</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Image Folder"</span>: img_dir, </span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Annotation File"</span>: annotation_file_path}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_3ae81">
<thead>
</thead>
<tbody>
<tr>
<th id="T_3ae81_level0_row0" class="row_heading level0 row0">
Image Folder
</th>
<td id="T_3ae81_row0_col0" class="data row0 col0">
Datasets/coco-bounding-box-toy-dataset/images
</td>
</tr>
<tr>
<th id="T_3ae81_level0_row1" class="row_heading level0 row1">
Annotation File
</th>
<td id="T_3ae81_row1_col0" class="data row1 col0">
Datasets/coco-bounding-box-toy-dataset/annotations/instances_default.json
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-file-paths" class="level3">
<h3 class="anchored" data-anchor-id="get-image-file-paths">Get Image File Paths</h3>
<p>Each image file has a unique name that we can use to locate the corresponding annotation data. We can make a dictionary that maps image names to file paths. The dictionary will allow us to retrieve the file path for a given image more efficiently.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get all image files in the 'img_dir' directory</span></span>
<span id="cb14-2">img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.stem : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary that maps file names to file paths</span></span>
<span id="cb14-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> get_img_files(img_dir) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of image files in the image directory</span></span>
<span id="cb14-5">}</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of image files</span></span>
<span id="cb14-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Number of Images: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(img_dict)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first five entries from the dictionary using a Pandas DataFrame</span></span>
<span id="cb14-11">pd.DataFrame.from_dict(img_dict, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).head()</span></code></pre></div>
<pre class="text"><code>Number of Images: 28</code></pre>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
Datasets/coco-bounding-box-toy-dataset/images/258421.jpg
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
Datasets/coco-bounding-box-toy-dataset/images/3075367.jpg
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
Datasets/coco-bounding-box-toy-dataset/images/3076319.jpg
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
Datasets/coco-bounding-box-toy-dataset/images/3145551.jpg
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
Datasets/coco-bounding-box-toy-dataset/images/3176048.jpg
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="get-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="get-image-annotations">Get Image Annotations</h3>
<p>Next, we read the content of the JSON annotation file into a Pandas DataFrame so we can easily query the annotations.</p>
<section id="load-the-annotation-file-into-a-dataframe" class="level4">
<h4 class="anchored" data-anchor-id="load-the-annotation-file-into-a-dataframe">Load the annotation file into a DataFrame</h4>
<p>We will transpose the DataFrame to store each section in the JSON file in a separate column.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the JSON file into a DataFrame, assuming the JSON is oriented by index</span></span>
<span id="cb16-2">annotation_file_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_json(annotation_file_path, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>).transpose()</span>
<span id="cb16-3">annotation_file_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
licenses
</th>
<th>
info
</th>
<th>
categories
</th>
<th>
images
</th>
<th>
annotations
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
{‘name’: ’‘, ’id’: 0, ‘url’: ’’}
</td>
<td>
contributor
</td>
<td>
{‘id’: 1, ‘name’: ‘person’, ‘supercategory’: ’’}
</td>
<td>
{‘id’: 1, ‘width’: 768, ‘height’: 1152, ‘file_name’: ‘258421.jpg’, ‘license’: 0, ‘flickr_url’: ’‘, ’coco_url’: ’‘, ’date_captured’: 0}
</td>
<td>
{‘id’: 1, ‘image_id’: 1, ‘category_id’: 1, ‘segmentation’: [], ‘area’: 24904.862800000003, ‘bbox’: [386.08, 443.94, 74.74, 333.22], ‘iscrowd’: 0, ‘attributes’: {‘occluded’: False, ‘rotation’: 0.0}}
</td>
</tr>
<tr>
<th>
1
</th>
<td>
None
</td>
<td>
date_created
</td>
<td>
None
</td>
<td>
{‘id’: 2, ‘width’: 1344, ‘height’: 768, ‘file_name’: ‘3075367.jpg’, ‘license’: 0, ‘flickr_url’: ’‘, ’coco_url’: ’‘, ’date_captured’: 0}
</td>
<td>
{‘id’: 2, ‘image_id’: 1, ‘category_id’: 1, ‘segmentation’: [], ‘area’: 24440.896000000004, ‘bbox’: [340.25, 466.94, 78.74, 310.4], ‘iscrowd’: 0, ‘attributes’: {‘occluded’: False, ‘rotation’: 0.0}}
</td>
</tr>
<tr>
<th>
2
</th>
<td>
None
</td>
<td>
description
</td>
<td>
None
</td>
<td>
{‘id’: 3, ‘width’: 768, ‘height’: 1120, ‘file_name’: ‘3076319.jpg’, ‘license’: 0, ‘flickr_url’: ’‘, ’coco_url’: ’‘, ’date_captured’: 0}
</td>
<td>
{‘id’: 3, ‘image_id’: 2, ‘category_id’: 1, ‘segmentation’: [], ‘area’: 365660.4554999999, ‘bbox’: [413.32, 41.22, 506.49, 721.95], ‘iscrowd’: 0, ‘attributes’: {‘occluded’: False, ‘rotation’: 0.0}}
</td>
</tr>
<tr>
<th>
3
</th>
<td>
None
</td>
<td>
url
</td>
<td>
None
</td>
<td>
{‘id’: 4, ‘width’: 1184, ‘height’: 768, ‘file_name’: ‘3145551.jpg’, ‘license’: 0, ‘flickr_url’: ’‘, ’coco_url’: ’‘, ’date_captured’: 0}
</td>
<td>
{‘id’: 4, ‘image_id’: 3, ‘category_id’: 1, ‘segmentation’: [], ‘area’: 363031.32340000005, ‘bbox’: [335.31, 151.75, 375.91, 965.74], ‘iscrowd’: 0, ‘attributes’: {‘occluded’: False, ‘rotation’: 0.0}}
</td>
</tr>
<tr>
<th>
4
</th>
<td>
None
</td>
<td>
version
</td>
<td>
None
</td>
<td>
{‘id’: 5, ‘width’: 1152, ‘height’: 768, ‘file_name’: ‘3176048.jpg’, ‘license’: 0, ‘flickr_url’: ’‘, ’coco_url’: ’‘, ’date_captured’: 0}
</td>
<td>
{‘id’: 5, ‘image_id’: 3, ‘category_id’: 1, ‘segmentation’: [], ‘area’: 390988.36079999997, ‘bbox’: [8.11, 131.88, 396.09, 987.12], ‘iscrowd’: 0, ‘attributes’: {‘occluded’: False, ‘rotation’: 0.0}}
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Let’s examine the source JSON content corresponding to the first row in the DataFrame.</p>
<div style="overflow-x:auto; max-height:500px">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"licenses"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-3">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-4">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-5">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-6">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb17-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-8">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"info"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-10">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"contributor"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-11">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"date_created"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-12">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-13">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-14">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"version"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-15">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"year"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb17-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb17-17">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"categories"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-18">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-19">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-20">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"person"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-21">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"supercategory"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb17-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-23">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-24">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"images"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-25">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-26">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-27">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"width"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">768</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-28">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"height"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1152</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-29">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"file_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"258421.jpg"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-30">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"license"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-31">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"flickr_url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-32">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"coco_url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-33">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"date_captured"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb17-34">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-35">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-36">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"annotations"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-37">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-38">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-39">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"image_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-40">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"category_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-41">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"segmentation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-42">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"area"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">24904.862800000003</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-43">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bbox"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb17-44">                <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">386.08</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-45">                <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">443.94</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-46">                <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">74.74</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-47">                <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">333.22</span></span>
<span id="cb17-48">            <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-49">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"iscrowd"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-50">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attributes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb17-51">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"occluded"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">false</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb17-52">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rotation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb17-53">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-54">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-55">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb17-56"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<hr>
<p>The most relevant information for our purposes is in the following sections:</p>
<ul>
<li><code>categories</code>: Stores the class names for the various object types in the dataset. Note that this toy dataset only has one object type.</li>
<li><code>images</code>: Stores the dimensions and file names for each image.</li>
<li><code>annotations</code>: Stores the image IDs, category IDs, and the bounding box annotations in <code>[Top-Left X, Top-Left Y, Width, Height]</code> format.</li>
</ul>
</section>
<section id="extract-the-object-classes" class="level4">
<h4 class="anchored" data-anchor-id="extract-the-object-classes">Extract the object classes</h4>
<p>We first need to extract the class names from the <code>categories</code> column of the DataFrame.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and transform the 'categories' section of the data</span></span>
<span id="cb18-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This DataFrame contains category details like category ID and name</span></span>
<span id="cb18-3">categories_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_file_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'categories'</span>].dropna().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)</span>
<span id="cb18-4">categories_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb18-5">categories_df</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
name
</th>
<th>
supercategory
</th>
</tr>
<tr>
<th>
id
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
1
</th>
<td>
person
</td>
<td>
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>This toy dataset only contains a single object class, named <code>person</code>.</p>
</section>
<section id="extract-the-image-information" class="level4">
<h4 class="anchored" data-anchor-id="extract-the-image-information">Extract the image information</h4>
<p>Next, we will extract the file names, image dimensions, and Image IDs from the <code>images</code> column of the DataFrame.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and transform the 'images' section of the data</span></span>
<span id="cb19-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This DataFrame contains image details like file name, height, width, and image ID</span></span>
<span id="cb19-3">images_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_file_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>].to_frame()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'images'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>]]</span>
<span id="cb19-4">images_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
file_name
</th>
<th>
height
</th>
<th>
width
</th>
<th>
id
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
1
</th>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
<td>
2.0
</td>
</tr>
<tr>
<th>
2
</th>
<td>
3076319.jpg
</td>
<td>
1120.0
</td>
<td>
768.0
</td>
<td>
3.0
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3145551.jpg
</td>
<td>
768.0
</td>
<td>
1184.0
</td>
<td>
4.0
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3176048.jpg
</td>
<td>
768.0
</td>
<td>
1152.0
</td>
<td>
5.0
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="extract-the-annotation-information" class="level4">
<h4 class="anchored" data-anchor-id="extract-the-annotation-information">Extract the annotation information</h4>
<p>Last, we must extract the Image IDs, bounding box annotations, and Category IDs from the <code>annotations</code> column in the DataFrame.</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract and transform the 'annotations' section of the data</span></span>
<span id="cb20-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This DataFrame contains annotation details like image ID, bounding box, and category ID</span></span>
<span id="cb20-3">annotations_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_file_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'annotations'</span>].to_frame()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'annotations'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(pd.Series)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bbox'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category_id'</span>]]</span>
<span id="cb20-4">annotations_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
image_id
</th>
<th>
bbox
</th>
<th>
category_id
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1
</td>
<td>
[386.08, 443.94, 74.74, 333.22]
</td>
<td>
1
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1
</td>
<td>
[340.25, 466.94, 78.74, 310.4]
</td>
<td>
1
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2
</td>
<td>
[413.32, 41.22, 506.49, 721.95]
</td>
<td>
1
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3
</td>
<td>
[335.31, 151.75, 375.91, 965.74]
</td>
<td>
1
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3
</td>
<td>
[8.11, 131.88, 396.09, 987.12]
</td>
<td>
1
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we have extracted the relevant information from the JSON file, we can recombine it into a single DataFrame for convenience.</p>
</section>
<section id="add-the-class-names-to-the-annotations" class="level4">
<h4 class="anchored" data-anchor-id="add-the-class-names-to-the-annotations">Add the class names to the annotations</h4>
<p>We will first add a new <code>label</code> column to the <code>annotations_df</code> DataFrame containing the corresponding class name from the <code>categories_df</code> DataFrame for each bounding box annotation.</p>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Map 'category_id' in annotations DataFrame to category name using categories DataFrame</span></span>
<span id="cb21-2">annotations_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotations_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category_id'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: categories_df.loc[x][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>])</span>
<span id="cb21-3">annotations_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
image_id
</th>
<th>
bbox
</th>
<th>
category_id
</th>
<th>
label
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1
</td>
<td>
[386.08, 443.94, 74.74, 333.22]
</td>
<td>
1
</td>
<td>
person
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1
</td>
<td>
[340.25, 466.94, 78.74, 310.4]
</td>
<td>
1
</td>
<td>
person
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2
</td>
<td>
[413.32, 41.22, 506.49, 721.95]
</td>
<td>
1
</td>
<td>
person
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3
</td>
<td>
[335.31, 151.75, 375.91, 965.74]
</td>
<td>
1
</td>
<td>
person
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3
</td>
<td>
[8.11, 131.88, 396.09, 987.12]
</td>
<td>
1
</td>
<td>
person
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="merge-the-image-and-annotation-information" class="level4">
<h4 class="anchored" data-anchor-id="merge-the-image-and-annotation-information">Merge the image and annotation information</h4>
<p>Next, we will add the data from the <code>images_df</code> DataFrame and match it to the bounding box annotations using the Image IDs.</p>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge annotations DataFrame with images DataFrame on their image ID</span></span>
<span id="cb22-2">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(annotations_df, images_df, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>)</span>
<span id="cb22-3">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
image_id
</th>
<th>
bbox
</th>
<th>
category_id
</th>
<th>
label
</th>
<th>
file_name
</th>
<th>
height
</th>
<th>
width
</th>
<th>
id
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
1
</td>
<td>
[386.08, 443.94, 74.74, 333.22]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
1
</th>
<td>
1
</td>
<td>
[340.25, 466.94, 78.74, 310.4]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
2
</th>
<td>
2
</td>
<td>
[413.32, 41.22, 506.49, 721.95]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
<td>
2.0
</td>
</tr>
<tr>
<th>
3
</th>
<td>
3
</td>
<td>
[335.31, 151.75, 375.91, 965.74]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3076319.jpg
</td>
<td>
1120.0
</td>
<td>
768.0
</td>
<td>
3.0
</td>
</tr>
<tr>
<th>
4
</th>
<td>
3
</td>
<td>
[8.11, 131.88, 396.09, 987.12]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3076319.jpg
</td>
<td>
1120.0
</td>
<td>
768.0
</td>
<td>
3.0
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="use-the-image-name-as-the-index" class="level4">
<h4 class="anchored" data-anchor-id="use-the-image-name-as-the-index">Use the image name as the index</h4>
<p>Then, we will change the index for the <code>annotations_df</code> DataFrame to match the keys in the <code>img_dict</code> dictionary, allowing us to retrieve both the image paths and annotation data using the same index key.</p>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove old 'id' column post-merge</span></span>
<span id="cb23-2">annotation_df.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'id'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the image_id from the file_name (assuming file_name contains the image_id)</span></span>
<span id="cb23-5">annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: x.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb23-6"></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set 'image_id' as the index for the DataFrame</span></span>
<span id="cb23-8">annotation_df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb23-9">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
bbox
</th>
<th>
category_id
</th>
<th>
label
</th>
<th>
file_name
</th>
<th>
height
</th>
<th>
width
</th>
</tr>
<tr>
<th>
image_id
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
[386.08, 443.94, 74.74, 333.22]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
</tr>
<tr>
<th>
258421
</th>
<td>
[340.25, 466.94, 78.74, 310.4]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
[413.32, 41.22, 506.49, 721.95]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
[335.31, 151.75, 375.91, 965.74]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3076319.jpg
</td>
<td>
1120.0
</td>
<td>
768.0
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
[8.11, 131.88, 396.09, 987.12]
</td>
<td>
1
</td>
<td>
person
</td>
<td>
3076319.jpg
</td>
<td>
1120.0
</td>
<td>
768.0
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="group-annotations-by-image" class="level4">
<h4 class="anchored" data-anchor-id="group-annotations-by-image">Group annotations by image</h4>
<p>Each bounding box annotation is currently in a separate row in the DataFrame. We will want to group the annotations for each image into a single row for use with PyTorch and torchvision.</p>
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Group the data by 'image_id' and aggregate information</span></span>
<span id="cb24-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This results in each image ID having a list of bounding boxes, category IDs, labels, and the respective file name, height, and width</span></span>
<span id="cb24-3">annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_id'</span>).agg({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bbox'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>, </span>
<span id="cb24-4">                                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category_id'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>,</span>
<span id="cb24-5">                                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span> :<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>,</span>
<span id="cb24-6">                                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first'</span>, </span>
<span id="cb24-7">                                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'height'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first'</span>, </span>
<span id="cb24-8">                                           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'width'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'first'</span></span>
<span id="cb24-9">                                                      })</span>
<span id="cb24-10"></span>
<span id="cb24-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rename columns for clarity </span></span>
<span id="cb24-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'bbox' is renamed to 'bboxes' and 'label' to 'labels'</span></span>
<span id="cb24-13">annotation_df.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bbox'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bboxes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>}, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb24-14">annotation_df.head()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
bboxes
</th>
<th>
category_id
</th>
<th>
labels
</th>
<th>
file_name
</th>
<th>
height
</th>
<th>
width
</th>
</tr>
<tr>
<th>
image_id
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
258421
</th>
<td>
[[386.08, 443.94, 74.74, 333.22], [340.25, 466.94, 78.74, 310.4]]
</td>
<td>
[1, 1]
</td>
<td>
[person, person]
</td>
<td>
258421.jpg
</td>
<td>
1152.0
</td>
<td>
768.0
</td>
</tr>
<tr>
<th>
3075367
</th>
<td>
[[413.32, 41.22, 506.49, 721.95]]
</td>
<td>
[1]
</td>
<td>
[person]
</td>
<td>
3075367.jpg
</td>
<td>
768.0
</td>
<td>
1344.0
</td>
</tr>
<tr>
<th>
3076319
</th>
<td>
[[335.31, 151.75, 375.91, 965.74], [8.11, 131.88, 396.09, 987.12]]
</td>
<td>
[1, 1]
</td>
<td>
[person, person]
</td>
<td>
3076319.jpg
</td>
<td>
1120.0
</td>
<td>
768.0
</td>
</tr>
<tr>
<th>
3145551
</th>
<td>
[[642.0, 289.85, 27.66, 109.04], [658.63, 281.25, 28.46, 117.36]]
</td>
<td>
[1, 1]
</td>
<td>
[person, person]
</td>
<td>
3145551.jpg
</td>
<td>
768.0
</td>
<td>
1184.0
</td>
</tr>
<tr>
<th>
3176048
</th>
<td>
[[518.23, 338.97, 76.4, 127.11], [683.42, 356.48, -44.56, 81.34]]
</td>
<td>
[1, 1]
</td>
<td>
[person, person]
</td>
<td>
3176048.jpg
</td>
<td>
768.0
</td>
<td>
1152.0
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>With the annotations loaded, we can start inspecting our dataset.</p>
</section>
</section>
<section id="inspecting-the-class-distribution" class="level3">
<h3 class="anchored" data-anchor-id="inspecting-the-class-distribution">Inspecting the Class Distribution</h3>
<p>First, we get the names of all the classes in our dataset and inspect the distribution of samples among these classes. This step won’t yield any insights for the toy dataset but is worth doing for real-world projects. A balanced dataset (where each class has approximately the same number of instances) is ideal for training a machine-learning model.</p>
<section id="get-image-classes" class="level4">
<h4 class="anchored" data-anchor-id="get-image-classes">Get image classes</h4>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique labels in the 'annotation_df' DataFrame</span></span>
<span id="cb25-2">class_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].explode().unique().tolist()</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display labels using a Pandas DataFrame</span></span>
<span id="cb25-5">pd.DataFrame(class_names)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
0
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
0
</th>
<td>
person
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="visualize-the-class-distribution" class="level4">
<h4 class="anchored" data-anchor-id="visualize-the-class-distribution">Visualize the class distribution</h4>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the number of samples for each object class</span></span>
<span id="cb26-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(annotation_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>].explode().tolist()).value_counts()</span>
<span id="cb26-3"></span>
<span id="cb26-4">plot_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [index[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> class_counts.index]</span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the distribution</span></span>
<span id="cb26-7">class_counts.plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb26-8">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class distribution'</span>)</span>
<span id="cb26-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb26-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Classes'</span>)</span>
<span id="cb26-11">plt.xticks(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_counts.index)), plot_labels, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the x-axis tick labels</span></span>
<span id="cb26-12">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/bounding-boxes/images/output_37_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="visualizing-image-annotations" class="level3">
<h3 class="anchored" data-anchor-id="visualizing-image-annotations">Visualizing Image Annotations</h3>
<p>In this section, we will annotate a single image with its bounding boxes using torchvision’s <code>BoundingBoxes</code> class and <code>draw_bounding_boxes</code> function.</p>
<section id="generate-a-color-map" class="level4">
<h4 class="anchored" data-anchor-id="generate-a-color-map">Generate a color map</h4>
<p>While not required, assigning a unique color to bounding boxes for each object class enhances visual distinction, allowing for easier identification of different objects in the scene. We can use the <a href="https://distinctipy.readthedocs.io/en/latest/"><code>distinctipy</code></a> package to generate a visually distinct colormap.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a list of colors with a length equal to the number of labels</span></span>
<span id="cb27-2">colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distinctipy.get_colors(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(class_names))</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make a copy of the color map in integer format</span></span>
<span id="cb27-5">int_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> color) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors]</span>
<span id="cb27-6"></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a color swatch to visualize the color map</span></span>
<span id="cb27-8">distinctipy.color_swatch(colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/bounding-boxes/images/output_41_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="download-a-font-file" class="level4">
<h4 class="anchored" data-anchor-id="download-a-font-file">Download a font file</h4>
<p>The <a href="https://pytorch.org/vision/stable/generated/torchvision.utils.draw_bounding_boxes.html"><code>draw_bounding_boxes</code></a> function included with torchvision uses a pretty small font size. We can increase the font size if we use a custom font. Font files are available on sites like <a href="https://fonts.google.com/">Google Fonts</a>, or we can use one included with the operating system.</p>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the name of the font file</span></span>
<span id="cb28-2">font_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KFOlCnqEu92Fr1MmEU9vAw.ttf'</span></span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download the font file</span></span>
<span id="cb28-5">download_file(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://fonts.gstatic.com/s/roboto/v30/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>font_file<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./"</span>)</span></code></pre></div>
</section>
<section id="define-the-bounding-box-annotation-function" class="level4">
<h4 class="anchored" data-anchor-id="define-the-bounding-box-annotation-function">Define the bounding box annotation function</h4>
<p>We can make a partial function using <code>draw_bounding_boxes</code> since we’ll use the same box thickness and font each time we visualize bounding boxes.</p>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">draw_bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> partial(draw_bounding_boxes, fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, font<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>font_file, font_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</section>
</section>
<section id="selecting-a-sample-image" class="level3">
<h3 class="anchored" data-anchor-id="selecting-a-sample-image">Selecting a Sample Image</h3>
<p>We can use the unique ID for an image in the image dictionary to get the image file path and the associated annotations from the annotation DataFrame.</p>
<section id="load-the-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="load-the-sample-image">Load the sample image</h4>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the file ID of the first image file</span></span>
<span id="cb30-2">file_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the associated image file as a RGB image</span></span>
<span id="cb30-5">sample_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(img_dict[file_id]).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb30-6"></span>
<span id="cb30-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the dimensions of the image</span></span>
<span id="cb30-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Image Dims: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sample_img<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show the image</span></span>
<span id="cb30-11">sample_img</span></code></pre></div>
<pre class="text"><code>Image Dims: (768, 1152)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/bounding-boxes/images/output_48_1.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
<section id="inspect-the-corresponding-annotation-data" class="level4">
<h4 class="anchored" data-anchor-id="inspect-the-corresponding-annotation-data">Inspect the corresponding annotation data</h4>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the row from the 'annotation_df' DataFrame corresponding to the 'file_id'</span></span>
<span id="cb32-2">annotation_df.loc[file_id].to_frame()</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table class="dataframe table table-sm table-striped small">
<thead>
<tr>
<th>
</th>
<th>
258421
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
bboxes
</th>
<td>
[[386.08, 443.94, 74.74, 333.22], [340.25, 466.94, 78.74, 310.4]]
</td>
</tr>
<tr>
<th>
category_id
</th>
<td>
[1, 1]
</td>
</tr>
<tr>
<th>
labels
</th>
<td>
[person, person]
</td>
</tr>
<tr>
<th>
file_name
</th>
<td>
258421.jpg
</td>
</tr>
<tr>
<th>
height
</th>
<td>
1152.0
</td>
</tr>
<tr>
<th>
width
</th>
<td>
768.0
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="annotate-sample-image" class="level4">
<h4 class="anchored" data-anchor-id="annotate-sample-image">Annotate sample image</h4>
<p>The <code>draw_bounding_boxes</code> function expects bounding box annotations in <code>[top-left X, top-left Y, bottom-right X, bottom-right Y]</code> format, so we’ll use the <a href="https://pytorch.org/vision/stable/generated/torchvision.ops.box_convert.html#torchvision.ops.box_convert"><code>box_convert</code></a> function included with torchvision to convert the bounding box annotations from <code>[x,y,w,h]</code> to <code>[x,y,x,y]</code> format.</p>
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract the labels and bounding box annotations for the sample image</span></span>
<span id="cb33-2">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]</span>
<span id="cb33-3">bboxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df.loc[file_id][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bboxes'</span>]</span>
<span id="cb33-4"></span>
<span id="cb33-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the sample image with labels and bounding boxes</span></span>
<span id="cb33-6">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb33-7">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sample_img), </span>
<span id="cb33-8">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torchvision.ops.box_convert(torch.Tensor(bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>),</span>
<span id="cb33-9">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, </span>
<span id="cb33-10">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb33-11">)</span>
<span id="cb33-12"></span>
<span id="cb33-13">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/bounding-boxes/images/output_52_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<p>We have loaded the dataset, inspected its class distribution, and visualized the annotations for a sample image. In the final section, we will cover how to augment images using torchvision’s Transforms V2 API and create a custom Dataset class for training.</p>
</section>
</section>
</section>
<section id="preparing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="preparing-the-data">Preparing the Data</h2>
<p>In this section, we will first walk through a single example of how to apply augmentations to a single annotated image using torchvision’s Transforms V2 API before putting everything together in a custom Dataset class.</p>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Here, we will define some data augmentations to apply to images during training. I created a few custom image transforms to help streamline the code.</p>
<p>The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#customrandomioucrop">first</a> extends the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.RandomIoUCrop.html#torchvision.transforms.v2.RandomIoUCrop"><code>RandomIoUCrop</code></a> transform included with torchvision to give the user more control over how much it crops into bounding box areas. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#resizemax">second</a> resizes images based on their largest dimension rather than their smallest. The <a href="https://cj-mills.github.io/cjm-torchvision-tfms/core.html#padsquare">third</a> applies square padding and allows the padding to be applied equally on both sides or randomly split between the two sides.</p>
<p>All three are available through the <a href="https://cj-mills.github.io/cjm-torchvision-tfms/"><code>cjm-torchvision-tfms</code></a> package.</p>
<section id="set-training-image-size" class="level4">
<h4 class="anchored" data-anchor-id="set-training-image-size">Set training image size</h4>
<p>Next, we will specify the image size to use during training.</p>
<div class="sourceCode" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set training image size</span></span>
<span id="cb34-2">train_sz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">384</span></span></code></pre></div>
</section>
<section id="initialize-custom-transforms" class="level4">
<h4 class="anchored" data-anchor-id="initialize-custom-transforms">Initialize custom transforms</h4>
<p>Now, we can initialize the transform objects.</p>
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a RandomIoUCrop object</span></span>
<span id="cb35-2">iou_crop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRandomIoUCrop(min_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, </span>
<span id="cb35-3">                               max_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, </span>
<span id="cb35-4">                               min_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, </span>
<span id="cb35-5">                               max_aspect_ratio<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span>, </span>
<span id="cb35-6">                               sampler_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>],</span>
<span id="cb35-7">                               trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, </span>
<span id="cb35-8">                               jitter_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb35-9"></span>
<span id="cb35-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `ResizeMax` object</span></span>
<span id="cb35-11">resize_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ResizeMax(max_sz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_sz)</span>
<span id="cb35-12"></span>
<span id="cb35-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a `PadSquare` object</span></span>
<span id="cb35-14">pad_square <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PadSquare(shift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</section>
<section id="test-the-transforms" class="level4">
<h4 class="anchored" data-anchor-id="test-the-transforms">Test the transforms</h4>
<p>Torchvision’s V2 image transforms take an image and a <code>targets</code> dictionary. The <code>targets</code> dictionary contains the annotations and labels for the image.</p>
<p>We will pass input through the <code>CustomRandomIoUCrop</code> transform first and then through <code>ResizeMax</code> and <code>PadSquare</code>. We can pass the result through a final resize operation to ensure both sides match the <code>train_sz</code> value.</p>
<div class="sourceCode" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare bounding box targets</span></span>
<span id="cb36-2">targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb36-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: BoundingBoxes(torchvision.ops.box_convert(torch.Tensor(bboxes), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>), </span>
<span id="cb36-4">                           <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, </span>
<span id="cb36-5">                           canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sample_img.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), </span>
<span id="cb36-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: torch.Tensor([class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels])</span>
<span id="cb36-7">}</span>
<span id="cb36-8"></span>
<span id="cb36-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crop the image</span></span>
<span id="cb36-10">cropped_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iou_crop(sample_img, targets)</span>
<span id="cb36-11"></span>
<span id="cb36-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Resize the image</span></span>
<span id="cb36-13">resized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize_max(cropped_img, targets)</span>
<span id="cb36-14"></span>
<span id="cb36-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pad the image</span></span>
<span id="cb36-16">padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pad_square(resized_img, targets)</span>
<span id="cb36-17"></span>
<span id="cb36-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ensure the padded image is the target size</span></span>
<span id="cb36-19">resize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb36-20">resized_padded_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> resize(padded_img, targets)</span>
<span id="cb36-21">sanitized_img, targets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.SanitizeBoundingBoxes()(resized_padded_img, targets)</span>
<span id="cb36-22"></span>
<span id="cb36-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Annotate the augmented image with updated labels and bounding boxes</span></span>
<span id="cb36-24">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb36-25">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.PILToTensor()(sanitized_img), </span>
<span id="cb36-26">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb36-27">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(label.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> targets[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb36-28">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[i] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [class_names.index(label) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> labels]]</span>
<span id="cb36-29">)</span>
<span id="cb36-30"></span>
<span id="cb36-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the annotated image</span></span>
<span id="cb36-32">display(tensor_to_pil(annotated_tensor))</span>
<span id="cb36-33"></span>
<span id="cb36-34">pd.Series({</span>
<span id="cb36-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Source Image:"</span>: sample_img.size,</span>
<span id="cb36-36">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cropped Image:"</span>: cropped_img.size,</span>
<span id="cb36-37">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Image:"</span>: resized_img.size,</span>
<span id="cb36-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Padded Image:"</span>: padded_img.size,</span>
<span id="cb36-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Resized Padded Image:"</span>: resized_padded_img.size,</span>
<span id="cb36-40">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/bounding-boxes/images/output_60_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_cc3ae">
<thead>
</thead>
<tbody>
<tr>
<th id="T_cc3ae_level0_row0" class="row_heading level0 row0">
Source Image:
</th>
<td id="T_cc3ae_row0_col0" class="data row0 col0">
(768, 1152)
</td>
</tr>
<tr>
<th id="T_cc3ae_level0_row1" class="row_heading level0 row1">
Cropped Image:
</th>
<td id="T_cc3ae_row1_col0" class="data row1 col0">
(653, 941)
</td>
</tr>
<tr>
<th id="T_cc3ae_level0_row2" class="row_heading level0 row2">
Resized Image:
</th>
<td id="T_cc3ae_row2_col0" class="data row2 col0">
(266, 383)
</td>
</tr>
<tr>
<th id="T_cc3ae_level0_row3" class="row_heading level0 row3">
Padded Image:
</th>
<td id="T_cc3ae_row3_col0" class="data row3 col0">
(383, 383)
</td>
</tr>
<tr>
<th id="T_cc3ae_level0_row4" class="row_heading level0 row4">
Resized Padded Image:
</th>
<td id="T_cc3ae_row4_col0" class="data row4 col0">
(384, 384)
</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>Now that we know how to apply data augmentations, we can put all the steps we’ve covered into a custom Dataset class.</p>
</section>
</section>
<section id="training-dataset-class" class="level3">
<h3 class="anchored" data-anchor-id="training-dataset-class">Training Dataset Class</h3>
<p>The following custom Dataset class is responsible for loading a single image, preparing the associated annotations, applying any image transforms, and returning the final <code>image</code> tensor and its <code>target</code> dictionary during training.</p>
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> COCOBBoxDataset(Dataset):</span>
<span id="cb37-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb37-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A dataset class for COCO-style datasets with bounding box annotations.</span></span>
<span id="cb37-4"></span>
<span id="cb37-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class is designed to handle datasets where images are annotated with bounding boxes,</span></span>
<span id="cb37-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    such as object detection tasks. It supports loading images, applying transformations, </span></span>
<span id="cb37-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and retrieving the associated bounding box annotations.</span></span>
<span id="cb37-8"></span>
<span id="cb37-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb37-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_keys (list): A list of keys (identifiers) for each image in the dataset.</span></span>
<span id="cb37-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _annotation_df (DataFrame): A DataFrame containing annotations for the images. </span></span>
<span id="cb37-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                                    Each row corresponds to an image, indexed by its key.</span></span>
<span id="cb37-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _img_dict (dict): A dictionary mapping image keys to their file paths.</span></span>
<span id="cb37-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _class_to_idx (dict): A dictionary mapping class names to their corresponding indices.</span></span>
<span id="cb37-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _transforms (callable, optional): Optional transform to be applied on a sample.</span></span>
<span id="cb37-16"></span>
<span id="cb37-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Methods:</span></span>
<span id="cb37-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        __len__: Returns the number of images in the dataset.</span></span>
<span id="cb37-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        __getitem__: Retrieves an image and its corresponding target (bounding boxes and labels) </span></span>
<span id="cb37-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                     by index.</span></span>
<span id="cb37-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        _load_image_and_target: Helper function to load an image and its corresponding target.</span></span>
<span id="cb37-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb37-23"></span>
<span id="cb37-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_keys, annotation_df, img_dict, class_to_idx, transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb37-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb37-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initializes the COCOBBoxDataset instance.</span></span>
<span id="cb37-27"></span>
<span id="cb37-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb37-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_keys (list): List of image keys.</span></span>
<span id="cb37-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation_df (DataFrame): DataFrame containing image annotations.</span></span>
<span id="cb37-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            img_dict (dict): Dictionary mapping image keys to file paths.</span></span>
<span id="cb37-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            class_to_idx (dict): Dictionary mapping class names to indices.</span></span>
<span id="cb37-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            transforms (callable, optional): Optional transform to be applied on a sample.</span></span>
<span id="cb37-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb37-35">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Dataset, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb37-36">        </span>
<span id="cb37-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_keys  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of image keys</span></span>
<span id="cb37-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation_df  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DataFrame containing annotations</span></span>
<span id="cb37-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_dict  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping image keys to image paths</span></span>
<span id="cb37-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_to_idx  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary mapping class names to class indices</span></span>
<span id="cb37-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Image transforms to be applied</span></span>
<span id="cb37-42">        </span>
<span id="cb37-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb37-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb37-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns the total number of images in the dataset.</span></span>
<span id="cb37-46"></span>
<span id="cb37-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb37-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            int: The number of images in the dataset.</span></span>
<span id="cb37-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb37-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys)</span>
<span id="cb37-51">        </span>
<span id="cb37-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb37-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb37-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Retrieves an image and its corresponding target (bounding boxes and labels) by index.</span></span>
<span id="cb37-55"></span>
<span id="cb37-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb37-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            index (int): The index of the image in the dataset.</span></span>
<span id="cb37-58"></span>
<span id="cb37-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb37-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its target. The target is a dictionary with </span></span>
<span id="cb37-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                   keys 'boxes' and 'labels'.</span></span>
<span id="cb37-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb37-63">        img_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_keys[index]</span>
<span id="cb37-64">        annotation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._annotation_df.loc[img_key]</span>
<span id="cb37-65">        image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_image_and_target(annotation)</span>
<span id="cb37-66">        </span>
<span id="cb37-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms:</span>
<span id="cb37-68">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply the specified transformations to the image and target</span></span>
<span id="cb37-69">            image, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._transforms(image, target)</span>
<span id="cb37-70">        </span>
<span id="cb37-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, target</span>
<span id="cb37-72"></span>
<span id="cb37-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _load_image_and_target(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, annotation):</span>
<span id="cb37-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb37-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Helper function to load an image and its corresponding target.</span></span>
<span id="cb37-76"></span>
<span id="cb37-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The target includes bounding boxes and labels for the image.</span></span>
<span id="cb37-78"></span>
<span id="cb37-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Parameters:</span></span>
<span id="cb37-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            annotation (pandas.Series): The annotation data for the image, typically a row from the DataFrame.</span></span>
<span id="cb37-81"></span>
<span id="cb37-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb37-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            tuple: A tuple containing the image and its target, where the target is a dictionary </span></span>
<span id="cb37-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                   with keys 'boxes' and 'labels'.</span></span>
<span id="cb37-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb37-86">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the image file using the path from the image dictionary</span></span>
<span id="cb37-87">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._img_dict[annotation.name]</span>
<span id="cb37-88">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(filepath).convert(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>)</span>
<span id="cb37-89"></span>
<span id="cb37-90">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract bounding box data from the annotations and convert to the desired format</span></span>
<span id="cb37-91">        bbox_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bboxes'</span>]</span>
<span id="cb37-92">        bbox_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchvision.ops.box_convert(torch.Tensor(bbox_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xywh'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>)</span>
<span id="cb37-93">        boxes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BoundingBoxes(bbox_tensor, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'xyxy'</span>, canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>image.size[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb37-94"></span>
<span id="cb37-95">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert class labels in the annotation to their corresponding indices</span></span>
<span id="cb37-96">        annotation_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annotation[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]</span>
<span id="cb37-97">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.Tensor([<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._class_to_idx[label] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> annotation_labels])</span>
<span id="cb37-98"></span>
<span id="cb37-99">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>: boxes, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>: labels}</span></code></pre></div>
</section>
<section id="image-transforms" class="level3">
<h3 class="anchored" data-anchor-id="image-transforms">Image Transforms</h3>
<p>Here, we will specify and organize all the image transforms to apply during training.</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms for data augmentation</span></span>
<span id="cb38-2">data_aug_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose(</span>
<span id="cb38-3">    transforms<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb38-4">        iou_crop,</span>
<span id="cb38-5">        transforms.ColorJitter(</span>
<span id="cb38-6">                brightness <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.875</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.125</span>),</span>
<span id="cb38-7">                contrast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb38-8">                saturation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>),</span>
<span id="cb38-9">                hue <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>),</span>
<span id="cb38-10">        ),</span>
<span id="cb38-11">        transforms.RandomGrayscale(),</span>
<span id="cb38-12">        transforms.RandomEqualize(),</span>
<span id="cb38-13">        transforms.RandomPosterize(bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb38-14">        transforms.RandomHorizontalFlip(p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb38-15">    ],</span>
<span id="cb38-16">)</span>
<span id="cb38-17"></span>
<span id="cb38-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to resize and pad input images</span></span>
<span id="cb38-19">resize_pad_tfm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb38-20">    resize_max, </span>
<span id="cb38-21">    pad_square,</span>
<span id="cb38-22">    transforms.Resize([train_sz] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, antialias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb38-23">])</span>
<span id="cb38-24"></span>
<span id="cb38-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compose transforms to sanitize bounding boxes and normalize input data</span></span>
<span id="cb38-26">final_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb38-27">    transforms.ToImage(), </span>
<span id="cb38-28">    transforms.ToDtype(torch.float32, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb38-29">    transforms.SanitizeBoundingBoxes(),</span>
<span id="cb38-30">])</span>
<span id="cb38-31"></span>
<span id="cb38-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the transformations for training and validation datasets</span></span>
<span id="cb38-33">train_tfms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb38-34">    data_aug_tfms, </span>
<span id="cb38-35">    resize_pad_tfm, </span>
<span id="cb38-36">    final_tfms</span>
<span id="cb38-37">])</span></code></pre></div>
<div class="callout callout-style-default callout-important callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Important
</div>
</div>
<div class="callout-body-container callout-body">
<p>Always use the <a href="https://pytorch.org/vision/stable/generated/torchvision.transforms.v2.SanitizeBoundingBoxes.html#torchvision.transforms.v2.SanitizeBoundingBoxes"><code>SanitizeBoundingBoxes</code></a> transform to clean up annotations after using data augmentations that alter bounding boxes (e.g., cropping, warping, etc.).</p>
</div>
</div>
</section>
<section id="initialize-dataset" class="level3">
<h3 class="anchored" data-anchor-id="initialize-dataset">Initialize Dataset</h3>
<p>Now, we can create the dataset object using the image dictionary, the annotation DataFrame, and the image transforms.</p>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from class names to class indices</span></span>
<span id="cb39-2">class_to_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {c: i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(class_names)}</span>
<span id="cb39-3"></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instantiate the dataset using the defined transformations</span></span>
<span id="cb39-5">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> COCOBBoxDataset(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(img_dict.keys()), annotation_df, img_dict, class_to_idx, train_tfms)</span>
<span id="cb39-6"></span>
<span id="cb39-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the number of samples in the training dataset</span></span>
<span id="cb39-8">pd.Series({</span>
<span id="cb39-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Training dataset size:'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(train_dataset),</span>
<span id="cb39-10">}).to_frame().style.hide(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'columns'</span>)</span></code></pre></div>
<div style="overflow-x:auto; max-height:500px">
<table id="T_69f73">
<thead>
</thead>
<tbody>
<tr>
<th id="T_69f73_level0_row0" class="row_heading level0 row0">
Training dataset size:
</th>
<td id="T_69f73_row0_col0" class="data row0 col0">
28
</td>
</tr>
</tbody>
</table>
</div>
</section>
<section id="inspect-samples" class="level3">
<h3 class="anchored" data-anchor-id="inspect-samples">Inspect Samples</h3>
<p>To close out, we should verify the dataset object works as intended by inspecting the first sample.</p>
<section id="inspect-training-set-sample" class="level4">
<h4 class="anchored" data-anchor-id="inspect-training-set-sample">Inspect training set sample</h4>
<div class="sourceCode" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">dataset_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb40-2"></span>
<span id="cb40-3">annotated_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw_bboxes(</span>
<span id="cb40-4">    image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.uint8), </span>
<span id="cb40-5">    boxes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'boxes'</span>], </span>
<span id="cb40-6">    labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[class_names[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]], </span>
<span id="cb40-7">    colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[int_colors[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(i.item())] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_sample[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'labels'</span>]]</span>
<span id="cb40-8">)</span>
<span id="cb40-9"></span>
<span id="cb40-10">tensor_to_pil(annotated_tensor)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="christianjmills.com/posts/torchvision-coco-annotation-tutorials/bounding-boxes/images/output_69_0.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></p>
</figure>
</div>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>In this tutorial, we covered how to load custom COCO bounding box annotations and work with them using torchvision’s Transforms V2 API. The skills and knowledge you acquired here provide a solid foundation for future object detection projects.</p>
<p>As a next step, perhaps try annotating a custom COCO object detection dataset with a tool like <a href="https://github.com/opencv/cvat">CVAT</a> and loading it with this tutorial’s code. Once you’re comfortable with that, try adapting the code in the following tutorial to train an object detection model on your custom dataset.</p>
<ul>
<li><a href="../../../posts/pytorch-train-object-detector-yolox-tutorial">Training YOLOX Models for Real-Time Object Detection in PyTorch</a></li>
</ul>
<p>If you found this guide helpful, consider sharing it with others and exploring some of my other tutorials linked below.</p>
</section>
<section id="recommended-tutorials" class="level2">
<h2 class="anchored" data-anchor-id="recommended-tutorials">Recommended Tutorials</h2>
<ul>
<li><a href="../../../posts/torchvision-coco-annotation-tutorials/segmentation-polygons/"><strong>Working with COCO Segmentation Annotations in Torchvision</strong></a><strong>:</strong> Learn how to work with COCO segmentation annotations in torchvision for instance segmentation tasks.<br>
</li>
<li><a href="../../../posts/pytorch-train-object-detector-yolox-tutorial"><strong>Training YOLOX Models for Real-Time Object Detection in PyTorch</strong></a><strong>:</strong> Learn how to train YOLOX models for real-time object detection in PyTorch by creating a hand gesture detection model.</li>
</ul>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>image-annotation</category>
  <category>object-detection</category>
  <category>tutorial</category>
  <guid>christianjmills.com/posts/torchvision-coco-annotation-tutorials/bounding-boxes/</guid>
  <pubDate>Sun, 21 Jan 2024 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Chip War Part 8: The Chip Choke</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/chip-war-book-notes/part-8/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/chip-war-book-notes.html"><strong>Chip War: The Fight for the World’s Most Critical Technology</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>“Everything We’re Competing On”</li>
<li>Fujian Jinhua</li>
<li>The Assault on Huawei</li>
<li>China’s Sputnik Moment?</li>
<li>Shortages and Supply Chains</li>
<li>The Taiwan Dilemma</li>
</ul>
<section id="everything-were-competing-on" class="level2">
<h2 class="anchored" data-anchor-id="everything-were-competing-on">“Everything We’re Competing On”</h2>
<p>Chapter 49 addresses the growing concerns in the U.S. about China’s advances in the semiconductor industry. Intel CEO Brian Krzanich, in his role as chairman of the Semiconductor Industry Association in 2015, expressed anxiety over China’s push to seize a larger share of the global chip industry. The chapter discusses the U.S. semiconductor firms’ dilemma of relying on China as a crucial market while facing the threat of being cut out of China’s supply chain due to its massive semiconductor subsidies. The chapter also touches on the Obama administration’s slow response to the semiconductor issue, the Pentagon’s concerns over China’s computing power in new weapons systems, and the shift in U.S. policy under the Trump administration towards a more combative approach to technology policy.</p>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ol type="1">
<li>The U.S. semiconductor industry’s increasing anxiety over China’s growing presence in the global chip market.</li>
<li>The complex relationship between U.S. chip firms and China, where China is both a key market and a competitive threat.</li>
<li>China’s formal policy to reduce reliance on foreign semiconductors and develop its own chip industry.</li>
<li>The Obama administration’s initial underestimation of the importance of semiconductors in geopolitical competition.</li>
<li>The Pentagon’s concern over China’s use of computing power in developing new weapons systems.</li>
<li>The Trump administration’s shift to a more aggressive stance on technology policy, particularly regarding China.</li>
<li>The strategic importance of semiconductors in global power dynamics and the U.S.-China rivalry.</li>
<li>The semiconductor industry’s fear of Chinese retaliation and the dilemma faced by U.S. firms operating in China.</li>
<li>The perceived need for stronger export control regimes to prevent technological leakage to China.</li>
<li>The increasing focus of the U.S. government on semiconductors as a critical component of national security and global competitiveness.</li>
</ol>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ol type="1">
<li>The U.S. semiconductor industry is increasingly concerned about China’s growing influence in the global chip market.</li>
<li>U.S. semiconductor firms face a complex dynamic with China, balancing market opportunities with competitive threats.</li>
<li>China’s government has implemented policies aimed at reducing reliance on foreign semiconductors.</li>
<li>The U.S. government initially underestimated the strategic importance of semiconductors in global competition.</li>
<li>The Pentagon is concerned about China’s application of computing power in new military technologies.</li>
<li>The Trump administration adopted a more aggressive technology policy stance towards China.</li>
<li>Semiconductors are increasingly viewed as critical to national security and global power dynamics.</li>
<li>U.S. semiconductor firms are cautious about Chinese retaliation and face dilemmas in their operations in China.</li>
<li>The U.S. government has recognized the need for stronger export controls to limit technological transfer to China.</li>
<li>Semiconductors have become a central focus of U.S. national security and competitiveness strategies.</li>
</ol>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ol type="1">
<li>Analyze the strategic implications of China’s growing influence in the semiconductor industry for U.S. firms and national security.</li>
<li>Study the evolving U.S. government policies towards semiconductor technology and export controls in response to China’s advances.</li>
<li>Investigate the role of semiconductors in the U.S.-China technology rivalry and its impact on global power dynamics.</li>
<li>Examine the challenges faced by U.S. semiconductor companies operating in the Chinese market.</li>
<li>Assess the impact of China’s semiconductor development on the global technology landscape.</li>
<li>Explore the implications of semiconductor technology on military and intelligence applications in the context of U.S.-China competition.</li>
<li>Consider the effectiveness of U.S. strategies in maintaining a competitive edge in semiconductor technology.</li>
<li>Understand the complexities of the semiconductor supply chain and its geopolitical significance.</li>
<li>Reflect on the broader implications of the semiconductor industry’s evolution for global economic and technological leadership.</li>
<li>Evaluate the long-term consequences of the U.S.-China semiconductor rivalry on the global technology industry.</li>
</ol>
</section>
</section>
<section id="fujian-jinhua" class="level2">
<h2 class="anchored" data-anchor-id="fujian-jinhua">Fujian Jinhua</h2>
<p>Chapter 50 recounts the espionage incident involving Micron Technology, an American semiconductor company, and Fujian Jinhua, a Chinese state-backed firm. Kenny Wang, an employee at Micron’s Taiwan facility, downloaded confidential files related to Micron’s DRAM technology and transferred them to Google Drive before moving to United Microelectronics Corporation (UMC), which was in partnership with Fujian Jinhua. This case highlights the intense competition and espionage activities in the semiconductor industry, reflecting broader geopolitical tensions and the strategic importance of advanced technology in global power dynamics.</p>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ol type="1">
<li>The theft of Micron’s DRAM technology by Fujian Jinhua illustrates the high stakes and aggressive tactics in the semiconductor industry.</li>
<li>Kenny Wang’s role in downloading and transferring Micron’s confidential information to UMC and subsequently to Fujian Jinhua.</li>
<li>Fujian Jinhua’s strategy of partnering with UMC to acquire DRAM technology, despite UMC not being in the DRAM business.</li>
<li>The involvement of multiple employees from Micron’s Taiwan facility in the espionage, highlighting the vulnerability of intellectual property in global companies.</li>
<li>The Taiwanese government’s response to Micron’s complaint about the intellectual property theft.</li>
<li>The broader context of China’s efforts to develop its semiconductor industry and reduce reliance on foreign technology.</li>
<li>The implications of the case for U.S.-China relations and the semiconductor industry’s global landscape.</li>
<li>The impact of intellectual property theft on the competitive dynamics of the semiconductor industry.</li>
<li>The strategic importance of DRAM technology and its role in the global semiconductor market.</li>
<li>The case as an example of the complex interplay between corporate espionage, international law, and global technology competition.</li>
</ol>
</section>
<section id="facts-1" class="level3">
<h3 class="anchored" data-anchor-id="facts-1">Facts</h3>
<ol type="1">
<li>Fujian Jinhua, a Chinese state-backed semiconductor firm, was involved in the theft of DRAM technology from Micron Technology.</li>
<li>Kenny Wang, a former employee at Micron’s Taiwan facility, played a key role in downloading and transferring confidential information.</li>
<li>UMC partnered with Fujian Jinhua to acquire DRAM technology, despite not being in the DRAM business.</li>
<li>The case involved multiple individuals from Micron’s Taiwan facility, suggesting a coordinated effort to acquire Micron’s technology.</li>
<li>The incident led to legal actions and raised serious concerns about intellectual property theft in the semiconductor industry.</li>
<li>The case reflects the intense competition and strategic importance of semiconductor technology in global markets.</li>
<li>China’s efforts to develop its semiconductor industry involve significant state investment and strategies to acquire foreign technology.</li>
<li>The incident has implications for U.S.-China relations and the global semiconductor industry.</li>
<li>DRAM technology is a critical component in the global semiconductor market, with significant competitive implications.</li>
<li>The case exemplifies the challenges of protecting intellectual property in a globalized and highly competitive technological environment.</li>
</ol>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ol type="1">
<li>Analyze the strategic implications of intellectual property theft in the semiconductor industry.</li>
<li>Study the legal and geopolitical aspects of the Fujian Jinhua case and its impact on U.S.-China relations.</li>
<li>Investigate the role of state-backed companies in China’s semiconductor strategy.</li>
<li>Examine the challenges faced by global companies like Micron in protecting their intellectual property.</li>
<li>Assess the importance of DRAM technology in the competitive landscape of the semiconductor industry.</li>
<li>Explore the broader implications of corporate espionage on international trade and technology competition.</li>
<li>Consider the impact of such incidents on global semiconductor market dynamics and company strategies.</li>
<li>Reflect on the role of technology in national security and global power dynamics.</li>
<li>Understand the complexities of intellectual property protection in a highly competitive and globalized industry.</li>
<li>Evaluate the long-term effects of state-backed industrial strategies on global technology markets and competition.</li>
</ol>
</section>
</section>
<section id="the-assault-on-huawei" class="level2">
<h2 class="anchored" data-anchor-id="the-assault-on-huawei">The Assault on Huawei</h2>
<p>Chapter 51 focuses on the U.S. government’s actions against Huawei, a leading Chinese technology company. The chapter outlines the Trump administration’s efforts to restrict Huawei’s access to U.S. technology, particularly semiconductors, citing national security concerns and allegations of Huawei’s involvement in espionage. It discusses the broader context of the U.S.-China technology rivalry, Huawei’s significant role in global telecom infrastructure, and the geopolitical implications of the U.S.’s actions. The chapter also explores the global reactions to the U.S. campaign against Huawei, including varying responses from allies, and the impact on Huawei’s business operations and China’s technological ambitions.</p>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ol type="1">
<li>Huawei became a focal point in the U.S.-China technology rivalry, with the U.S. government citing national security concerns.</li>
<li>President Trump’s administration took significant steps to restrict Huawei’s access to American technology, particularly in the semiconductor sector.</li>
<li>Huawei’s critical role in global telecom infrastructure, particularly in 5G networks, was a key factor in the U.S.’s actions.</li>
<li>The U.S.’s campaign against Huawei reflected broader efforts to curb China’s technological rise and influence.</li>
<li>The restrictions on Huawei had significant implications for the company’s operations, including its smartphone and server businesses.</li>
<li>The U.S. government’s actions were part of a broader strategy to maintain technological superiority over China.</li>
<li>Huawei’s position as a leading global tech firm made it a target for U.S. efforts to limit China’s access to advanced technology.</li>
<li>The global response to the U.S. campaign against Huawei varied, with some countries following the U.S.’s lead and others resisting.</li>
<li>The chapter discusses the impact of U.S. restrictions on the global semiconductor ecosystem and supply chains.</li>
<li>The U.S. actions against Huawei were seen as a move to send a message worldwide, influencing other countries’ technology policies and alliances.</li>
</ol>
</section>
<section id="facts-2" class="level3">
<h3 class="anchored" data-anchor-id="facts-2">Facts</h3>
<ol type="1">
<li>The U.S. government targeted Huawei with restrictions, citing national security concerns.</li>
<li>Huawei is a major player in the global telecom infrastructure, especially in 5G technology.</li>
<li>The Trump administration’s actions against Huawei were part of a broader U.S.-China technology rivalry.</li>
<li>The restrictions had a significant impact on Huawei’s business operations and its ability to access critical semiconductor technology.</li>
<li>The U.S. aimed to maintain its technological superiority and curb China’s technological advancements.</li>
<li>Huawei’s global influence made it a strategic target in the U.S.’s efforts to limit China’s technological rise.</li>
<li>Responses to the U.S. campaign against Huawei varied globally, affecting international technology policies and alliances.</li>
<li>The U.S. restrictions influenced the global semiconductor ecosystem and supply chains.</li>
<li>The U.S.’s actions against Huawei were intended to influence other countries’ technology policies and alliances.</li>
<li>The U.S. strategy against Huawei was part of a broader effort to control key points in the global technology supply chain.</li>
</ol>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ol type="1">
<li>Analyze the strategic reasons behind the U.S. government’s actions against Huawei.</li>
<li>Study the impact of U.S. restrictions on Huawei’s business and the global semiconductor industry.</li>
<li>Investigate the role of Huawei in the global telecom infrastructure and its significance in the U.S.-China technology rivalry.</li>
<li>Examine the global responses to the U.S. campaign against Huawei and their implications for international technology alliances.</li>
<li>Assess the broader implications of the U.S.-China technology rivalry on global technological advancement and supply chains.</li>
<li>Explore the impact of national security concerns on technology policies and the semiconductor industry.</li>
<li>Consider the effectiveness of U.S. strategies in maintaining technological superiority over China.</li>
<li>Understand the complexities of the global technology market and the geopolitical implications of U.S. actions against Huawei.</li>
<li>Reflect on the broader context of U.S.-China relations and their impact on global technology dynamics.</li>
<li>Evaluate the long-term consequences of the U.S. campaign against Huawei on the global technology industry and international relations.</li>
</ol>
</section>
</section>
<section id="chinas-sputnik-moment" class="level2">
<h2 class="anchored" data-anchor-id="chinas-sputnik-moment">China’s Sputnik Moment?</h2>
<p>Chapter 52 explores China’s ambitious efforts to develop its semiconductor industry, especially during the COVID-19 pandemic. The chapter focuses on Yangtze Memory Technologies Corporation (YMTC) in Wuhan, China’s leading NAND memory producer, as a symbol of China’s push for technological independence. Despite the pandemic lockdown, YMTC continued operations, reflecting the government’s prioritization of semiconductor development. The chapter also touches on China’s response to U.S. export controls, viewing them as a catalyst for accelerating its quest for tech dominance. The narrative delves into the risks and challenges China faces in this endeavor, highlighting failed projects and the complexities of achieving technological independence in the semiconductor industry.</p>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ol type="1">
<li>YMTC’s continued operation during the COVID-19 lockdown in Wuhan illustrates China’s commitment to semiconductor development.</li>
<li>U.S. export controls on semiconductor technology have spurred China’s efforts to boost its domestic chip industry.</li>
<li>The chapter suggests that China’s response to these controls mirrors the U.S.’s reaction to the Soviet Union’s Sputnik launch, triggering significant investment in technology.</li>
<li>Despite substantial government support, including billions in funding, China’s path to semiconductor independence faces hurdles, including failed projects and technological challenges.</li>
<li>The narrative questions whether China’s massive investment in semiconductors will yield successful technological advancement or lead to wasteful expenditure.</li>
<li>China’s goal of technological independence is complicated by the multinational nature of the semiconductor supply chain and the country’s current technological capabilities.</li>
<li>The chapter discusses China’s interest in developing alternative architectures, like RISC-V, to reduce reliance on foreign technology.</li>
<li>China’s semiconductor strategy involves not only cutting-edge technology but also investment in older process technologies and emerging materials like silicon carbide and gallium nitride.</li>
<li>The chapter analyzes the geopolitical implications of China’s semiconductor ambitions and their potential impact on the global technology landscape.</li>
<li>The narrative explores the intersection of China’s national goals and commercial interests in the semiconductor sector, highlighting the government’s influence on chip companies.</li>
</ol>
</section>
</section>
<section id="facts-3" class="level2">
<h2 class="anchored" data-anchor-id="facts-3">Facts</h2>
<ol type="1">
<li>YMTC in Wuhan symbolizes China’s focus on developing its semiconductor industry.</li>
<li>U.S. export controls have intensified China’s efforts to establish technological independence in semiconductors.</li>
<li>China’s response to these controls is likened to the U.S.’s reaction to the Sputnik launch.</li>
<li>Despite heavy investment, China’s semiconductor independence efforts face significant challenges.</li>
<li>The narrative questions the effectiveness of China’s massive investment in the semiconductor industry.</li>
<li>China’s pursuit of technological independence is hindered by the global nature of the semiconductor supply chain.</li>
<li>China is exploring alternative architectures like RISC-V to reduce foreign dependency.</li>
<li>China’s strategy includes investment in various semiconductor technologies and materials.</li>
<li>The chapter highlights the geopolitical implications of China’s ambitions in the semiconductor field.</li>
<li>The government’s influence in China’s semiconductor sector is a key theme in the chapter.</li>
</ol>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ol type="1">
<li>Study the strategic implications of China’s semiconductor industry development, particularly in response to U.S. export controls.</li>
<li>Analyze the challenges and risks associated with China’s massive investment in semiconductor technology.</li>
<li>Investigate the role of companies like YMTC in China’s quest for technological independence.</li>
<li>Explore the geopolitical and economic impacts of China’s semiconductor ambitions.</li>
<li>Assess the potential of alternative semiconductor architectures and materials in reducing China’s reliance on foreign technology.</li>
<li>Consider the effectiveness of China’s national strategies in achieving semiconductor independence.</li>
<li>Examine the global semiconductor industry dynamics in the context of China’s technological efforts.</li>
<li>Reflect on the broader implications of China’s semiconductor strategy for international technology competition.</li>
<li>Understand the complexities and potential outcomes of China’s investment in the semiconductor sector.</li>
<li>Evaluate the long-term effects of China’s pursuit of semiconductor independence on global technology leadership and market dynamics.</li>
</ol>
</section>
</section>
<section id="shortages-and-supply-chains" class="level2">
<h2 class="anchored" data-anchor-id="shortages-and-supply-chains">Shortages and Supply Chains</h2>
<p>Chapter 53 discusses the semiconductor shortages and supply chain issues, particularly during the COVID-19 pandemic. It highlights President Biden’s emphasis on the need for the U.S. to boost its investments in technology to compete globally. The chapter delves into the semiconductor supply chain problems, exacerbated by the pandemic and strategic stockpiling by countries like China. It also covers the impact of these shortages on various industries, especially the automotive sector, and the U.S. government’s response to address these challenges. The chapter underscores the complex dynamics of the global semiconductor industry, including geopolitical aspects and the shifting landscape of chip manufacturing.</p>
<section id="ideas-4" class="level3">
<h3 class="anchored" data-anchor-id="ideas-4">Ideas</h3>
<ol type="1">
<li>The COVID-19 pandemic revealed the fragility and significance of semiconductor supply chains.</li>
<li>President Biden’s focus on strengthening U.S. investments in technology to maintain global competitiveness.</li>
<li>The impact of semiconductor shortages on industries like automotive, leading to significant production and revenue losses.</li>
<li>China’s strategic stockpiling of chips and the U.S.’s export controls contributing to global semiconductor shortages.</li>
<li>The shift in demand for various types of chips during the pandemic, including a surge in demand for PCs and servers.</li>
<li>The U.S. government’s interpretation of the chip shortage as a supply chain problem and its efforts to address it.</li>
<li>The broader implications of semiconductor supply chain issues for the global economy and technological advancement.</li>
<li>The dynamics between different countries and regions in the semiconductor industry, including the U.S., China, South Korea, and Taiwan.</li>
<li>The role of national policies and government interventions in shaping the semiconductor market and supply chains.</li>
<li>The challenges and strategies of semiconductor companies in navigating the complex and changing landscape of chip manufacturing and supply.</li>
</ol>
</section>
<section id="facts-4" class="level3">
<h3 class="anchored" data-anchor-id="facts-4">Facts</h3>
<ol type="1">
<li>The COVID-19 pandemic significantly impacted semiconductor supply chains.</li>
<li>The U.S. government, under President Biden, focused on addressing technology investment to compete globally.</li>
<li>The automotive industry faced substantial losses due to semiconductor shortages.</li>
<li>China’s stockpiling and U.S. export controls contributed to global chip shortages.</li>
<li>There was a significant increase in demand for chips used in PCs and servers during the pandemic.</li>
<li>The U.S. government interpreted the chip shortage as a supply chain issue and initiated measures to address it.</li>
<li>The semiconductor shortage highlighted the interconnected nature of global supply chains.</li>
<li>The global semiconductor industry experienced a record production year in 2021.</li>
<li>National policies and government interventions play a crucial role in the semiconductor market.</li>
<li>The global reliance on Taiwanese semiconductor production continues to increase.</li>
</ol>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ol type="1">
<li>Analyze the impact of the COVID-19 pandemic on global semiconductor supply chains.</li>
<li>Study the U.S. government’s response to semiconductor shortages and its strategy to enhance technology investments.</li>
<li>Investigate the causes and consequences of semiconductor shortages in various industries.</li>
<li>Explore the geopolitical aspects of semiconductor production and</li>
</ol>
<p>trade, especially between the U.S. and China.</p>
<ol start="5" type="1">
<li>Assess the effectiveness of national policies and government interventions in addressing semiconductor supply chain issues.</li>
<li>Consider the changing demand dynamics for different types of semiconductor chips during the pandemic.</li>
<li>Examine the role of Taiwan in the global semiconductor industry and the implications of its central position.</li>
<li>Reflect on the broader implications of semiconductor shortages for global economic stability and technological advancement.</li>
<li>Understand the complexities of managing semiconductor supply chains in a globalized economy.</li>
<li>Evaluate the long-term effects of the pandemic on the semiconductor industry and global technology markets.</li>
</ol>
</section>
</section>
<section id="the-taiwan-dilemma" class="level2">
<h2 class="anchored" data-anchor-id="the-taiwan-dilemma">The Taiwan Dilemma</h2>
<p>Chapter 54 discusses the geopolitical tensions surrounding Taiwan, focusing on its critical role in the global semiconductor industry. The chapter highlights TSMC (Taiwan Semiconductor Manufacturing Company), the world’s largest contract chipmaker, as a central figure in these tensions. It delves into the risks posed by China’s increasing military activities near Taiwan and the potential implications of a conflict for the global semiconductor supply chain. The narrative explores various scenarios of how a conflict over Taiwan could unfold, emphasizing the strategic importance of the island due to its semiconductor production capabilities and the global reliance on these technologies.</p>
<section id="ideas-5" class="level3">
<h3 class="anchored" data-anchor-id="ideas-5">Ideas</h3>
<ol type="1">
<li>TSMC’s pivotal role in the global semiconductor industry makes Taiwan a focal point in U.S.-China geopolitical tensions.</li>
<li>China’s military activities near Taiwan, including exercises and drills, heighten the risk of conflict and global economic disruption.</li>
<li>The potential scenarios for a conflict over Taiwan range from a full-scale invasion to limited military pressure.</li>
<li>The global economy’s dependency on Taiwan’s semiconductor industry is a significant factor in the geopolitical calculus of the U.S. and China.</li>
<li>The chapter discusses the strategic importance of TSMC’s chip manufacturing facilities and the risks posed by their location in a geopolitically sensitive area.</li>
<li>A conflict involving Taiwan could severely disrupt global semiconductor supply chains, impacting a wide range of industries.</li>
<li>The U.S. and China’s military strategies in the region are influenced by the strategic value of Taiwan’s semiconductor production.</li>
<li>The chapter examines the challenges in ensuring the security of Taiwan and its semiconductor industry.</li>
<li>The implications of Taiwan’s geopolitical situation extend beyond military concerns to global technological and economic stability.</li>
<li>The narrative explores the complex interplay between global technology markets, military strategy, and geopolitical dynamics centered around Taiwan.</li>
</ol>
</section>
<section id="facts-5" class="level3">
<h3 class="anchored" data-anchor-id="facts-5">Facts</h3>
<ol type="1">
<li>Taiwan, home to TSMC, is crucial to the global semiconductor industry.</li>
<li>The island is a focal point in the geopolitical tensions between the U.S. and China.</li>
<li>China’s military activities near Taiwan raise the risk of conflict.</li>
<li>The global economy heavily depends on Taiwan’s semiconductor production.</li>
<li>TSMC is the largest contract chipmaker in the world.</li>
<li>A conflict involving Taiwan could disrupt global semiconductor supply chains.</li>
<li>The U.S. and China’s military strategies consider the strategic value of Taiwan’s semiconductor industry.</li>
<li>Taiwan’s geopolitical situation is complex and has far-reaching implications.</li>
<li>The security of Taiwan’s semiconductor industry is a significant global concern.</li>
<li>The stability of global technology markets is closely tied to Taiwan’s geopolitical situation.</li>
</ol>
</section>
<section id="recommendations-5" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-5">Recommendations</h3>
<ol type="1">
<li>Study the strategic implications of Taiwan’s role in the global semiconductor industry.</li>
<li>Analyze the potential impact of geopolitical tensions involving Taiwan on</li>
</ol>
<p>global technology markets.</p>
<ol start="3" type="1">
<li>Explore the scenarios and consequences of a military conflict over Taiwan.</li>
<li>Assess the global economic risks associated with disruptions in Taiwan’s semiconductor production.</li>
<li>Investigate the strategies of the U.S. and China regarding Taiwan and its semiconductor industry.</li>
<li>Examine the challenges in ensuring the security and stability of Taiwan’s semiconductor supply chain.</li>
<li>Consider the broader implications of Taiwan’s geopolitical situation for global technology and economic stability.</li>
<li>Reflect on the interplay of military strategy, technology markets, and geopolitics in the context of Taiwan.</li>
<li>Understand the complexities of managing global technology supply chains in a geopolitically sensitive environment.</li>
<li>Evaluate the long-term effects of Taiwan’s situation on global semiconductor production and technology leadership.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/chip-war-book-notes/part-8/</guid>
  <pubDate>Tue, 21 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Chip War Part 7: China’s Challenge</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/chip-war-book-notes/part-7/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/chip-war-book-notes.html"><strong>Chip War: The Fight for the World’s Most Critical Technology</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Made in China</li>
<li>Call Forth the Assault</li>
<li>Technology Transfer</li>
<li>“Merges Are Bound to Happen”</li>
<li>The Rise of Huawei</li>
<li>The 5G Future</li>
<li>The Next Offset</li>
</ul>
<section id="made-in-china" class="level2">
<h2 class="anchored" data-anchor-id="made-in-china">Made in China</h2>
<p>Chapter 42 explores China’s ambitious strategy to become a leader in the global semiconductor industry. The chapter delves into Xi Jinping’s policies emphasizing cybersecurity and informatization as pillars of national security and modernization. It highlights China’s reliance on foreign technologies, especially in semiconductors, despite its success in building large Internet companies. Xi’s efforts to reduce this dependence and achieve technological self-reliance are discussed, including strategies to develop domestic chip manufacturing capabilities and reduce reliance on foreign chips, particularly from the U.S. and its allies.</p>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ol type="1">
<li>Xi Jinping emphasized the critical importance of cybersecurity and informatization for China’s national security and modernization.</li>
<li>China’s technological development, particularly in the digital realm, was heavily reliant on imported semiconductors, despite the success of its internet companies.</li>
<li>Xi aimed to reduce China’s dependence on foreign technologies and enhance its self-reliance in core technologies, including semiconductors.</li>
<li>China’s efforts to build its semiconductor industry involved strategies like government investment, luring home trained scientists and engineers, and technology transfer partnerships.</li>
<li>The chapter illustrates China’s approach to leveraging its market size to negotiate technology transfers and training from foreign firms.</li>
<li>Xi’s policies were driven by a sense of vulnerability regarding China’s reliance on foreign, particularly American, technology.</li>
<li>The chapter discusses the disparity between China’s success in software and its reliance on foreign hardware for critical technologies.</li>
<li>China’s ambition to become a semiconductor powerhouse was part of a broader strategy to ascend to great power status and achieve national rejuvenation.</li>
<li>The semiconductor industry was seen as a key area where China could gain a competitive edge and reduce vulnerabilities in its supply chain.</li>
<li>China’s leaders recognized the strategic importance of domestically produced semiconductors in supporting its growing technological infrastructure.</li>
<li>The development of China’s semiconductor industry was seen as essential to avoid supply chain vulnerabilities and assert technological independence.</li>
<li>China’s aspiration to produce core technologies aimed to transform its economic model from low-profit manufacturing to high-value technology production.</li>
<li>The chapter reflects on China’s historical context and current strategies to develop a competitive semiconductor industry.</li>
<li>Xi Jinping’s leadership was pivotal in driving China’s focus on technological development, particularly in semiconductors.</li>
<li>The chapter underscores the geopolitical implications of China’s pursuit of semiconductor independence and its impact on global technology dynamics.</li>
</ol>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ol type="1">
<li>Xi Jinping emphasized the importance of cybersecurity and informatization for China’s national security.</li>
<li>China’s digital economy and technological advancements are heavily reliant on imported semiconductors.</li>
<li>China aims to reduce its dependence on foreign technologies and enhance self-reliance in semiconductors.</li>
<li>Strategies to develop China’s semiconductor industry include government investment, talent repatriation, technology transfer, and leveraging market size.</li>
<li>China’s reliance on foreign technology is seen as a vulnerability and a barrier to achieving greater economic and technological independence.</li>
<li>Xi Jinping’s leadership focused on transforming China’s economic model to high-value technology production.</li>
<li>The development of a domestic semiconductor industry is a strategic priority for China.</li>
<li>China’s pursuit of semiconductor independence has significant geopolitical implications.</li>
</ol>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ol type="1">
<li>Study the strategic importance of cybersecurity and informatization in national security policies, particularly in China.</li>
<li>Analyze the implications of China’s reliance on imported semiconductors and its efforts to develop domestic capabilities.</li>
<li>Explore the geopolitical and economic impacts of China’s ambition to become a semiconductor powerhouse.</li>
<li>Assess the effectiveness of China’s strategies to develop its semiconductor industry, including government investment and technology partnerships.</li>
<li>Consider the role of leadership in driving national technological agendas, as exemplified by Xi Jinping’s focus on semiconductors.</li>
<li>Reflect on the global implications of China’s pursuit of technological self-reliance and independence.</li>
<li>Investigate the challenges and opportunities in China’s transformation from a manufacturing-based economy to a technology-driven one.</li>
<li>Examine the impact of China’s technological ambitions on global supply chains and trade dynamics.</li>
<li>Understand the broader context of China’s technological development within its national rejuvenation goals.</li>
<li>Evaluate the potential outcomes of China’s efforts to achieve semiconductor independence on the global technology landscape.</li>
</ol>
</section>
</section>
<section id="call-forth-the-assault" class="level2">
<h2 class="anchored" data-anchor-id="call-forth-the-assault">Call Forth the Assault</h2>
<p>Chapter 43 discusses China’s ambitious goal to achieve semiconductor independence under Xi Jinping’s leadership. It contrasts Xi’s international rhetoric of economic openness with his domestic emphasis on self-reliance in core technologies, particularly semiconductors. The chapter outlines China’s heavy reliance on imported chips, despite its significant advancements in the digital realm. Xi’s call for a technological assault emphasizes the urgency to develop domestic chip production capabilities, reduce foreign dependence, and gain a competitive edge in the global market.</p>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ol type="1">
<li>Xi Jinping’s vision for China includes a strong emphasis on cybersecurity and informatization as pillars of national security.</li>
<li>Despite its success in creating large internet companies, China remains heavily reliant on imported semiconductors.</li>
<li>Xi aims to reduce China’s dependence on foreign technology, particularly in the semiconductor sector.</li>
<li>The chapter details China’s strategies to develop its semiconductor industry, including attracting talent, forming technology partnerships, and leveraging its market size.</li>
<li>Xi’s rhetoric underscores a vulnerability and strategic need to build more chips domestically.</li>
<li>The disparity between China’s software success and hardware dependence is highlighted.</li>
<li>China’s ambition to become a semiconductor leader is part of a broader strategy for national rejuvenation and technological independence.</li>
<li>The chapter discusses the importance of domestically produced semiconductors for China’s growing technological infrastructure.</li>
<li>China’s efforts to produce core technologies aim to transform its economy from low-profit manufacturing to high-tech production.</li>
<li>The geopolitical implications of China’s push for semiconductor independence are explored, emphasizing its impact on global technology dynamics.</li>
</ol>
</section>
<section id="facts-1" class="level3">
<h3 class="anchored" data-anchor-id="facts-1">Facts</h3>
<ol type="1">
<li>Xi Jinping has placed significant emphasis on cybersecurity and informatization for China’s national security.</li>
<li>China heavily relies on imported semiconductors, despite having large internet companies.</li>
<li>Xi is focused on reducing China’s dependence on foreign technology and enhancing self-reliance in semiconductors.</li>
<li>China’s strategies for developing its semiconductor industry involve government investment, technology transfer partnerships, and leveraging its market size.</li>
<li>There is a strategic need for China to increase its domestic chip production.</li>
<li>China’s semiconductor ambition is part of its broader strategy for national rejuvenation.</li>
<li>The development of China’s semiconductor industry is seen as essential to avoid supply chain vulnerabilities.</li>
<li>China aims to transform from a low-profit manufacturing economy to a high-tech production model.</li>
<li>The geopolitical implications of China’s semiconductor independence efforts are significant.</li>
</ol>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ol type="1">
<li><p>Examine the strategic importance of cybersecurity and informatization in national security, with a focus on China’s policies.</p></li>
<li><p>Analyze the challenges and strategies in reducing China’s reliance on imported semiconductors and achieving technological self-reliance.</p></li>
<li><p>Investigate the geopolitical and economic impacts of China’s ambition to become a global semiconductor leader.</p></li>
<li><p>Explore the implications of China’s heavy dependence on foreign chips for its technological infrastructure.</p></li>
<li><p>Consider the role of leadership in shaping national technology agendas, using Xi Jinping’s focus on semiconductors as a case study.</p></li>
<li><p>Assess the impact of China’s technological ambitions on global supply chains and trade dynamics.</p></li>
<li><p>Study the effectiveness of China’s strategies in developing its semiconductor industry, including talent attraction and technology partnerships.</p></li>
<li><p>Reflect on the broader context of China’s technological development and its impact on global technology dynamics.</p></li>
<li><p>Understand the challenges in transforming China’s economy from manufacturing-based to technology-driven.</p></li>
<li><p>Evaluate the potential outcomes of China’s efforts to achieve semiconductor independence and its implications for the global technology landscape.</p></li>
</ol>
</section>
</section>
<section id="technology-transfer" class="level2">
<h2 class="anchored" data-anchor-id="technology-transfer">Technology Transfer</h2>
<p>Chapter 44 discusses the complex dynamics of technology transfer between U.S. tech firms and China. It focuses on China’s efforts to gain access to advanced semiconductor technology, highlighting the strategies employed by major U.S. companies like IBM, Qualcomm, and AMD in navigating this landscape. The chapter sheds light on the delicate balance these companies struck between accessing the lucrative Chinese market and protecting their technological assets. It also touches on the geopolitical implications of these technology transfers and their impact on the global semiconductor industry.</p>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ol type="1">
<li>China’s strategy to become a semiconductor leader involves acquiring technology from foreign companies.</li>
<li>U.S. tech firms, like IBM, Qualcomm, and AMD, have engaged in various forms of technology transfer with China.</li>
<li>IBM’s approach included offering semiconductor technology to enhance cooperation in integrated circuit development with Chinese partners.</li>
<li>Qualcomm’s joint venture with a Chinese company to develop server chips represented a strategic move to gain a foothold in China’s market.</li>
<li>AMD’s controversial deal to license the production of modified x86 chips for the Chinese market exemplifies the complexities of technology transfer.</li>
<li>The chapter highlights the challenges faced by U.S. companies in balancing business interests with national security concerns.</li>
<li>Intel’s reluctance to engage in similar deals with China contrasts with other American firms’ strategies.</li>
<li>China’s strong-arming tactics to pressure U.S. companies into technology transfers are discussed.</li>
<li>The chapter explores the broader implications of technology transfers on U.S. competitiveness and China’s semiconductor ambitions.</li>
<li>The geopolitical tension arising from these technology transfers and their impact on the U.S.-China technological rivalry is a key theme.</li>
</ol>
</section>
<section id="facts-2" class="level3">
<h3 class="anchored" data-anchor-id="facts-2">Facts</h3>
<ol type="1">
<li>China is aggressively pursuing technology transfer to develop its semiconductor industry.</li>
<li>U.S. tech firms, including IBM, Qualcomm, and AMD, have engaged in technology transfer with Chinese entities.</li>
<li>IBM’s strategy involved offering semiconductor technology to Chinese partners for integrated circuit development.</li>
<li>Qualcomm’s joint venture in China was aimed at developing server chips.</li>
<li>AMD’s deal to license x86 chip production in China was controversial and seen as a risk to U.S. interests.</li>
<li>U.S. companies face challenges in balancing market access in China with national security concerns.</li>
<li>China employs strong-arming tactics to acquire foreign technology.</li>
<li>The technology transfers are part of China’s broader strategy to reduce dependence on foreign semiconductors.</li>
<li>These activities have significant implications for the global semiconductor industry and U.S.-China relations.</li>
<li>The impact of these technology transfers extends to geopolitical tensions and the technological rivalry between the U.S. and China.</li>
</ol>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ol type="1">
<li>Analyze the strategic motivations behind China’s pursuit of foreign semiconductor technology.</li>
<li>Study the approaches of U.S. tech firms like IBM, Qualcomm, and AMD in managing technology transfer to China.</li>
<li>Examine the balance between market access and technological protection for U.S. companies in China.</li>
<li>Assess the</li>
</ol>
<p>geopolitical implications of technology transfers in the U.S.-China semiconductor rivalry.</p>
<ol start="5" type="1">
<li>Investigate the impact of these transfers on global semiconductor industry dynamics.</li>
<li>Explore the challenges and opportunities faced by U.S. tech firms in the Chinese market.</li>
<li>Consider the role of national security concerns in shaping U.S. tech firms’ strategies in China.</li>
<li>Reflect on the broader implications of China’s semiconductor ambitions for global technology leadership.</li>
<li>Understand the complexities of U.S.-China relations in the context of technology transfers.</li>
<li>Evaluate the long-term effects of these technology transfers on the competitiveness of the U.S. semiconductor industry.</li>
</ol>
</section>
</section>
<section id="merges-are-bound-to-happen" class="level2">
<h2 class="anchored" data-anchor-id="merges-are-bound-to-happen">“Merges Are Bound to Happen”</h2>
<p>Chapter 45 covers Zhao Weiguo’s journey from a rural upbringing to becoming a chip billionaire in China. Zhao, who attended Tsinghua University, later shifted from a technical role to investment, eventually leading Tsinghua Uni Group. The group, linked to the university, was involved in various investments, including real estate, but later focused on semiconductor technology. Zhao’s aggressive strategy in the semiconductor industry involved acquiring several Chinese and international chip companies, reflecting China’s broader ambition to become a global leader in this field. His actions aligned with Xi Jinping’s call for technological self-reliance, especially in semiconductors.</p>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ol type="1">
<li>Zhao Weiguo’s rise from a rural background to a leading figure in China’s semiconductor industry.</li>
<li>Tsinghua Uni Group’s transformation under Zhao from a university-affiliated investment group to a major player in the semiconductor sector.</li>
<li>The strategic acquisitions of Chinese and foreign semiconductor firms by Tsinghua Uni Group as part of China’s national priority in chip technology.</li>
<li>Zhao’s partnership with Intel aimed at combining wireless modem and smartphone processor technologies.</li>
<li>The aggressive investment and expansion approach of Tsinghua Uni Group in the semiconductor industry, including a failed bid for Micron and other U.S. firms.</li>
<li>The geopolitical and economic implications of China’s push for semiconductor independence and its impact on global technology dynamics.</li>
<li>Zhao’s role in aligning Tsinghua Uni Group’s strategies with Xi Jinping’s national directive for technological self-reliance.</li>
<li>The challenges and controversies surrounding Tsinghua Uni Group’s investments and acquisitions in the semiconductor industry.</li>
<li>The broader context of China’s state-backed investment strategies in pursuing global semiconductor leadership.</li>
<li>Zhao’s perspective on the inevitability of mergers between big U.S. and Chinese companies in the semiconductor sector.</li>
</ol>
</section>
<section id="facts-3" class="level3">
<h3 class="anchored" data-anchor-id="facts-3">Facts</h3>
<ol type="1">
<li>Zhao Weiguo rose from a humble background to lead Tsinghua Uni Group.</li>
<li>Tsinghua Uni Group shifted its focus under Zhao to become a key player in the semiconductor industry.</li>
<li>The group made strategic acquisitions and investments in the semiconductor sector, both domestically and internationally.</li>
<li>Zhao’s approach aligned with Xi Jinping’s directive for China to achieve technological self-reliance.</li>
<li>Tsinghua Uni Group’s strategies in the semiconductor industry reflect China’s broader national ambitions.</li>
<li>The group’s investment activities have significant geopolitical and economic implications.</li>
<li>China’s pursuit of semiconductor independence has led to aggressive investment and acquisition strategies.</li>
<li>Tsinghua Uni Group’s activities in the semiconductor sector have been controversial and faced challenges.</li>
<li>The push for semiconductor independence is part of China’s larger goal to become a global technology leader.</li>
<li>Zhao Weiguo’s actions in the semiconductor industry are reflective of the Chinese government’s strategic objectives.</li>
</ol>
</section>
<section id="resources" class="level3">
<h3 class="anchored" data-anchor-id="resources">Resources</h3>
<ol type="1">
<li>Person: Zhao Weiguo and his leadership in China’s semiconductor industry.</li>
<li>Company: Tsinghua Uni Group and its role in China’s semiconductor strategy.</li>
<li>Industry Trend: China’s national priority in semiconductor technology.</li>
<li>Geopolitical Context: The implications of China’s semiconductor strategy on global technology dynamics.</li>
<li>Economic Strategy: China’s investment and acquisition strategies in the semiconductor sector.</li>
<li>Technology: The importance of semiconductors in China’s technological infrastructure.</li>
<li>Market Dynamics: The global semiconductor industry and China’s role in it.</li>
<li>National Policy: China’s directive for technological self-reliance and its impact on the semiconductor industry.</li>
<li>Industry Evolution: The changing landscape of the global semiconductor industry due to China’s strategies.</li>
<li>Geopolitical Implications: The impact of China’s actions in the semiconductor sector on international relations and trade.</li>
</ol>
</section>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ol type="1">
<li><p>Study the impact of individual leadership, like Zhao Weiguo’s, on national technology strategies.</p></li>
<li><p>Analyze the role of companies like Tsinghua Uni Group in shaping China’s semiconductor industry.</p></li>
<li><p>Explore the geopolitical and economic implications of China’s aggressive semiconductor strategy.</p></li>
<li><p>Assess the impact of China’s push for semiconductor independence on global technology dynamics.</p></li>
<li><p>Investigate the broader context of China’s state-backed investment strategies in the semiconductor sector.</p></li>
<li><p>Consider the challenges and controversies surrounding investment and acquisition strategies in the semiconductor industry.</p></li>
<li><p>Reflect on the global implications of China’s pursuit of semiconductor leadership.</p></li>
<li><p>Understand the complexities of national directives like technological self-reliance in shaping industry strategies.</p></li>
<li><p>Examine the role of China in the global semiconductor industry and its impact on market dynamics.</p></li>
<li><p>Evaluate the long-term effects of China’s semiconductor strategies on international technology leadership and competition.</p></li>
</ol>
</section>
</section>
<section id="the-rise-of-huawei" class="level2">
<h2 class="anchored" data-anchor-id="the-rise-of-huawei">The Rise of Huawei</h2>
<p>Chapter 46 delves into the story of Ren Zhengfei and the growth of Huawei as a global technology powerhouse. The chapter outlines Huawei’s journey from a small telecom equipment provider to one of the world’s largest providers of mobile internet infrastructure and smartphones. It highlights Huawei’s strategy of producing high-quality technology at lower costs and its aggressive global expansion. The chapter also discusses the controversies surrounding Huawei, including allegations of intellectual property theft and its complex relationship with the Chinese government.</p>
<section id="ideas-4" class="level3">
<h3 class="anchored" data-anchor-id="ideas-4">Ideas</h3>
<ol type="1">
<li>Ren Zhengfei’s transformation of Huawei from a small importer of telecom switches to a global technology leader.</li>
<li>Huawei’s role in the global telecom infrastructure, rivalling giants like Nokia and Ericsson.</li>
<li>The company’s success in the smartphone market, competing with Apple and Samsung.</li>
<li>Allegations of intellectual property theft and espionage against Huawei, contributing to its controversial reputation.</li>
<li>Huawei’s adoption of efficient manufacturing processes and emphasis on R&amp;D spending.</li>
<li>The company’s unique business model, differing significantly from other Chinese tech firms.</li>
<li>Huawei’s global orientation, contrasting with the domestic focus of other Chinese tech giants.</li>
<li>The impact of Western consulting firms, particularly IBM, on Huawei’s development and business processes.</li>
<li>The role of the Chinese government in supporting Huawei’s expansion.</li>
<li>Huawei’s investment in R&amp;D, positioning it as a major player in the tech ecosystem.</li>
</ol>
</section>
<section id="facts-4" class="level3">
<h3 class="anchored" data-anchor-id="facts-4">Facts</h3>
<ol type="1">
<li>Huawei, founded by Ren Zhengfei, grew from a small telecom equipment importer to a global tech leader.</li>
<li>Huawei competes globally in the mobile internet infrastructure and smartphone markets.</li>
<li>The company has been embroiled in controversies, including allegations of intellectual property theft.</li>
<li>Huawei is known for its efficient manufacturing processes and high R&amp;D expenditure.</li>
<li>The company’s business model and global orientation differ from other Chinese tech firms.</li>
<li>Huawei received support from Western consulting firms like IBM and the Chinese government.</li>
<li>The company’s R&amp;D investment positions it as a key player in the global tech ecosystem.</li>
</ol>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ol type="1">
<li>Study the transformation of Huawei from a regional player to a global tech leader.</li>
<li>Analyze Huawei’s strategies for competing in the global telecom and smartphone markets.</li>
<li>Investigate the controversies surrounding Huawei, including intellectual property issues.</li>
<li>Explore the impact of R&amp;D investment on Huawei’s growth and market position.</li>
<li>Examine the role of government support and international partnerships in Huawei’s expansion.</li>
<li>Assess the unique business model of Huawei and its differentiation from other Chinese tech firms.</li>
<li>Consider the implications of Huawei’s growth for global tech dynamics and competition.</li>
<li>Reflect on the lessons from Huawei’s adoption of Western business practices.</li>
<li>Understand the geopolitical context of Huawei’s expansion and the responses from various governments.</li>
<li>Evaluate the long-term impact of Huawei’s strategies on the global technology landscape.</li>
</ol>
</section>
</section>
<section id="the-5g-future" class="level2">
<h2 class="anchored" data-anchor-id="the-5g-future">The 5G Future</h2>
<p>Chapter 47 explores the evolution and significance of 5G technology, focusing on its transformative impact on computing and the pivotal role of semiconductors. The chapter traces the history of mobile networking from its early stages to the advanced 5G networks, emphasizing the steady increase in data transmission capabilities. It discusses how 5G technology, driven by sophisticated semiconductors, is not just about improving phone capabilities but reshaping the landscape of mobile computing and connectivity. The chapter also highlights the role of companies like Huawei and Tesla in integrating advanced semiconductors into their products, illustrating the broader implications of 5G technology in various industries.</p>
<section id="ideas-5" class="level3">
<h3 class="anchored" data-anchor-id="ideas-5">Ideas</h3>
<ol type="1">
<li>5G technology represents a significant leap in mobile networking, enhancing data transmission capabilities and reshaping mobile computing.</li>
<li>The evolution of mobile networks from 1G to 5G reflects the steady increase in data transmission and the growing complexity of technology.</li>
<li>Advanced semiconductors are fundamental to the functioning of 5G networks, enabling more efficient data transmission and processing.</li>
<li>5G networks will facilitate a broader range of applications, including the Internet of Things (IoT), by connecting a vast array of devices.</li>
<li>The chapter discusses the transformative impact of 5G on industries like automotive, agriculture, and healthcare, where data collection and processing are crucial.</li>
<li>Huawei’s leading role in 5G technology development and deployment is highlighted, despite the controversies surrounding the company.</li>
<li>Tesla’s use of custom-designed chips for its electric and autonomous vehicles is an example of the growing integration of advanced semiconductors in various products.</li>
<li>The chapter explores the geopolitical implications of the race for 5G dominance, particularly between China and the U.S.</li>
<li>5G technology is expected to drive significant changes in consumer behavior and expectations regarding mobile and connected devices.</li>
<li>The development of 5G networks is seen as a critical factor in the future of global connectivity and technological advancement.</li>
</ol>
</section>
<section id="facts-5" class="level3">
<h3 class="anchored" data-anchor-id="facts-5">Facts</h3>
<ol type="1">
<li>5G technology represents a major advancement in mobile networking, offering significantly enhanced data transmission capabilities.</li>
<li>The evolution of mobile networks from 1G to 5G has been marked by increasing complexity and data transmission efficiency.</li>
<li>Semiconductors play a crucial role in the functioning and advancement of 5G networks.</li>
<li>5G technology is expected to transform various industries by enabling the connection of a wide range of devices and facilitating data-intensive applications.</li>
<li>Companies like Huawei and Tesla are integrating advanced semiconductors into their products, demonstrating the impact of 5G in different sectors.</li>
<li>The development of 5G technology has significant geopolitical implications, particularly in the context of the U.S.-China technology race.</li>
<li>The deployment of 5G networks is poised to change consumer behaviors and expectations regarding mobile and connected technologies.</li>
<li>The future of global connectivity and technological progress is closely tied to the development and implementation of 5G networks.</li>
</ol>
</section>
<section id="recommendations-5" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-5">Recommendations</h3>
<ol type="1">
<li>Study the technological advancements and implications of 5G mobile networking.</li>
<li>Analyze the role of semiconductors in the development and functioning of 5G networks.</li>
<li>Explore the impact of 5G on various industries and its potential to transform consumer behavior.</li>
<li>Investigate the geopolitical dynamics surrounding the global race for 5G technology dominance.</li>
<li>Examine the integration of advanced semiconductor technology in products like electric vehicles and smartphones.</li>
<li>Assess the future prospects of global connectivity and technological advancement in the 5G era.</li>
<li>Consider the economic and strategic implications of companies like Huawei and Tesla in the 5G landscape.</li>
<li>Reflect on the changing consumer expectations and market dynamics in the context of 5G deployment.</li>
<li>Understand the potential of 5G technology in driving significant changes in industries such as healthcare, agriculture, and automotive.</li>
<li>Evaluate the long-term effects of 5G technology on global technological progress and connectivity.</li>
</ol>
</section>
</section>
<section id="the-next-offset" class="level2">
<h2 class="anchored" data-anchor-id="the-next-offset">The Next Offset</h2>
<p>Chapter 48 discusses the evolving nature of warfare and the crucial role of computing power in modern military strategy. It focuses on how advancements in semiconductors and artificial intelligence (AI) are reshaping the dynamics of global military power, particularly between the U.S. and China. The chapter details China’s investment in high-tech weaponry and its efforts to match or surpass U.S. capabilities in areas like AI and cybersecurity. It also highlights the importance of semiconductor technology in various military applications, from autonomous drones to cyber warfare, and the strategic implications of these developments.</p>
<section id="ideas-6" class="level3">
<h3 class="anchored" data-anchor-id="ideas-6">Ideas</h3>
<ol type="1">
<li>Modern warfare is increasingly defined by computing power, with semiconductors playing a central role.</li>
<li>China has heavily invested in high-tech weaponry, aiming to offset U.S. military advantages.</li>
<li>The development and deployment of AI in military systems are a key focus for both the U.S. and China.</li>
<li>Semiconductor technology underpins various advanced military applications, including autonomous drones and cyber warfare capabilities.</li>
<li>The U.S. military’s historical technological edge is being challenged by China’s advancements.</li>
<li>China’s military strategies involve leveraging AI and computing power to gain a competitive advantage.</li>
<li>The chapter discusses the geopolitical ramifications of the race for technological superiority in military applications.</li>
<li>The U.S. seeks to maintain its military advantage through innovation in AI and autonomous systems.</li>
<li>China’s approach to military modernization reflects its broader ambitions for global technological leadership.</li>
<li>The intersection of military needs and semiconductor technology highlights the strategic importance of chip manufacturing and design.</li>
</ol>
</section>
<section id="facts-6" class="level3">
<h3 class="anchored" data-anchor-id="facts-6">Facts</h3>
<ol type="1">
<li>The nature of warfare is evolving, with a growing emphasis on computing power and technology.</li>
<li>China’s military modernization includes a focus on high-tech weaponry and AI.</li>
<li>The U.S. and China are engaged in a strategic race to develop advanced military technologies.</li>
<li>Semiconductors are crucial in various military technologies, including drones and cyber warfare systems.</li>
<li>The U.S. military’s technological superiority is being challenged by China’s advancements.</li>
<li>AI and computing power are central to modern military strategies and capabilities.</li>
<li>The global military balance is influenced by advancements in semiconductor technology.</li>
<li>China’s military strategies are part of its broader ambition for technological and geopolitical leadership.</li>
<li>The U.S. seeks to maintain its military edge through innovation in technology.</li>
<li>The race for technological superiority in military applications has significant geopolitical implications.</li>
</ol>
</section>
<section id="recommendations-6" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-6">Recommendations</h3>
<ol type="1">
<li>Study the impact of computing power and AI on the evolution of modern warfare.</li>
<li>Analyze the strategic importance of semiconductors in military technology.</li>
<li>Explore the geopolitical implications of the U.S.-China rivalry in military technology development.</li>
<li>Assess the role of technological advancements in shaping global military power dynamics.</li>
<li>Investigate the significance of AI and autonomous systems in military strategies.</li>
<li>Consider the challenges and opportunities in developing advanced military technologies.</li>
<li>Examine the impact of organizations like DARPA</li>
</ol>
<p>on innovation in military technology.</p>
<ol start="8" type="1">
<li>Reflect on the global competition for technological superiority in military applications.</li>
<li>Understand the strategic implications of military technology advancements for national security.</li>
<li>Evaluate the long-term effects of the race for technological dominance on global military balance and security.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/chip-war-book-notes/part-7/</guid>
  <pubDate>Tue, 21 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Chip War Part 6: Offshore Innovation?</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/chip-war-book-notes/part-6/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/chip-war-book-notes.html"><strong>Chip War: The Fight for the World’s Most Critical Technology</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>“Real Men Have Fabs”</li>
<li>The Fabless Revolution</li>
<li>Morris Chang’s Grand Alliance</li>
<li>Apple Silicon</li>
<li>EUV</li>
<li>There Is No Plan B</li>
<li>How Intel Forgot Innovation</li>
</ul>
<section id="real-men-have-fabs" class="level2">
<h2 class="anchored" data-anchor-id="real-men-have-fabs">“Real Men Have Fabs”</h2>
<p>Chapter 35 explores Jerry Sanders’ philosophy regarding semiconductor fabrication. Sanders, the founder of AMD, strongly believed in the importance of maintaining in-house manufacturing capabilities, contrasting with the rising trend of outsourcing to foundries like TSMC. The chapter discusses the economic and strategic implications of this philosophy, highlighting the evolution of the semiconductor industry and the shift towards fabless manufacturing.</p>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ol type="1">
<li><strong>Sanders’ Belief in In-house Manufacturing</strong>: Jerry Sanders’ strong stance on the strategic importance of owning semiconductor fabrication plants.</li>
<li><strong>Shift to Outsourcing with Foundries like TSMC</strong>: The significant industry shift towards outsourcing manufacturing to foundries.</li>
<li><strong>Challenges of Maintaining Fabs</strong>: The economic and technological hurdles of sustaining fabs, particularly with increasing costs.</li>
<li><strong>Contrast with Fabless Trend</strong>: Sanders’ philosophy as a contrast to the emerging trend of fabless companies focusing on design and outsourcing production.</li>
<li><strong>Evolution Reflecting Globalization and Strategic Models</strong>: How the semiconductor industry’s evolution mirrors broader trends in globalization and strategic business approaches.</li>
<li><strong>Differing Views on Competitiveness and Innovation</strong>: The varied perspectives on the best path to competitiveness in the semiconductor industry, whether through maintaining or divesting fabs.</li>
<li><strong>Importance of Control Over Production</strong>: Sanders’ approach emphasizing control over the manufacturing process.</li>
<li><strong>Fabless Model and Design Innovation</strong>: How the fabless business model enables a focus on design innovation without manufacturing complexities.</li>
<li><strong>Shift to Fabless Manufacturing Impacting Innovation</strong>: The significant change in innovation and production approaches with the industry’s move to fabless manufacturing.</li>
<li><strong>Economic Implications of Fabs</strong>: Discussion of the high costs and risks associated with maintaining fabs.</li>
</ol>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ol type="1">
<li>Jerry Sanders, founder of AMD, was known for his strong belief in the importance of owning semiconductor fabs.</li>
<li>The rise of foundries like TSMC marked a significant shift in the semiconductor industry towards outsourcing manufacturing.</li>
<li>Maintaining semiconductor fabs became increasingly expensive with each generation of technological improvement.</li>
<li>The fabless business model, focusing on chip design and outsourcing manufacturing, emerged as a significant trend in the semiconductor industry.</li>
<li>The chapter discusses the strategic and economic considerations in the decision to maintain or divest fabs in the semiconductor industry.</li>
<li>Texas Instruments is highlighted as the biggest analog chip maker today.</li>
<li>The memory market, particularly DRAM and NAND, has seen a push towards offshoring production, primarily in East Asia.</li>
<li>The number of firms capable of fabricating advanced logic chips has decreased due to the high costs and technological complexities involved.</li>
<li>The shift towards fabless manufacturing represents a broader trend of specialization and efficiency in the global economy.</li>
</ol>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ol type="1">
<li>Analyze the strategic implications of owning versus outsourcing semiconductor fabrication facilities.</li>
<li>Explore the economic and technological challenges associated with maintaining fabs in the semiconductor industry.</li>
<li>Consider the impact of the fabless business model on innovation and competitiveness in the semiconductor industry.</li>
<li>Study the evolution of the semiconductor industry, particularly the shift towards fabless manufacturing and its broader implications.</li>
<li>Reflect on the decisions of traditional semiconductor companies like AMD in contrast to new fabless companies.</li>
<li>Investigate the role of foundries like TSMC in transforming the semiconductor manufacturing landscape.</li>
<li>Assess the strategic and economic considerations of offshoring production in the semiconductor industry.</li>
<li>Examine the implications of the increasing cost and complexity of semiconductor fabrication on industry dynamics.</li>
<li>Understand the broader trends of specialization and efficiency in the global economy as exemplified by the semiconductor industry.</li>
<li>Consider the perspectives of industry figures like Jerry Sanders on the future of manufacturing and innovation in semiconductors.</li>
</ol>
</section>
</section>
<section id="the-fabless-revolution" class="level2">
<h2 class="anchored" data-anchor-id="the-fabless-revolution">The Fabless Revolution</h2>
<p>Chapter 36 discusses the rise of fabless semiconductor companies in Silicon Valley. It chronicles the journey of companies like Nvidia and Qualcomm, which designed chips in-house but outsourced manufacturing, primarily to TSMC. The chapter highlights the impact of this model on the semiconductor industry, emphasizing the shift from traditional fabrication methods to innovative approaches in chip design and the strategic use of foundries.</p>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ol type="1">
<li><strong>Rise of the Fabless Semiconductor Model</strong>: The revolution in the industry led by companies like Nvidia and Qualcomm focusing on in-house design and outsourcing manufacturing.</li>
<li><strong>Innovation and Growth through Fabless Model</strong>: This model’s contribution to rapid growth and innovation in the semiconductor sector, particularly in fields like computer graphics and mobile communications.</li>
<li><strong>Emphasis on Design Over Manufacturing</strong>: The significant operational change in semiconductor companies, emphasizing design rather than traditional manufacturing.</li>
<li><strong>Success of Nvidia in GPUs</strong>: The potential of the fabless model demonstrated by Nvidia’s achievements in graphics processor units.</li>
<li><strong>Qualcomm’s Mobile Communications Technology</strong>: The company’s pivotal role in advancing mobile communications technology through the fabless model.</li>
<li><strong>Democratization of Chip Design</strong>: How the emergence of fabless companies lowered barriers for startups and encouraged competition.</li>
<li><strong>Leveraging Manufacturing Expertise of Foundries</strong>: The ability of companies to focus on design and innovation while utilizing the manufacturing capabilities of foundries like TSMC.</li>
<li><strong>Importance of Parallel Processing</strong>: Nvidia’s expansion beyond graphics into applications like CUDA software.</li>
<li><strong>Rapid Innovation in Mobile Phone Technology</strong>: Qualcomm’s success in mobile technology as a testament to the fabless model’s efficiency.</li>
<li><strong>Expansion of Semiconductor Industry Scope</strong>: The fabless revolution’s role in developing new chip categories and technologies, broadening the semiconductor industry’s impact.</li>
</ol>
</section>
<section id="facts-1" class="level3">
<h3 class="anchored" data-anchor-id="facts-1">Facts</h3>
<ol type="1">
<li><p>Nvidia and Qualcomm are examples of successful fabless semiconductor companies.</p></li>
<li><p>Nvidia specialized in GPUs for computer graphics and gaming, later expanding into parallel processing with CUDA.</p></li>
<li><p>Qualcomm played a pivotal role in the development of mobile communications technology, significantly contributing to 2G and later generations.</p></li>
<li><p>The fabless business model allowed for significant reductions in startup costs and entry barriers in the semiconductor industry.</p></li>
<li><p>The emergence of semiconductor foundries like TSMC facilitated the growth of fabless companies by providing manufacturing services.</p></li>
<li><p>Fabless companies contributed to the evolution of new computing paradigms, such as advanced mobile phones and graphics processing.</p></li>
<li><p>Field-programmable gate arrays, an innovation in chip technology, were developed by fabless companies like Xilinx and Altera.</p></li>
<li><p>The fabless model led to a democratization of chip design, enabling more companies to compete in the semiconductor industry.</p></li>
<li><p>The chapter discusses the impact of the fabless model on the global semiconductor supply chain and manufacturing landscape.</p></li>
<li><p>The success of fabless firms like Nvidia and Qualcomm highlights the shift in the semiconductor industry towards design innovation.</p></li>
</ol>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ol type="1">
<li>Study the strategic advantages and challenges of the fabless semiconductor model in the industry.</li>
<li>Analyze the impact of companies like Nvidia and Qualcomm on the evolution of the semiconductor sector.</li>
<li>Explore the role of foundries like TSMC in enabling the growth of fabless companies.</li>
<li>Consider the implications of the fabless model for innovation and competition in the semiconductor industry.</li>
<li>Examine the technological advancements brought about by fabless companies, especially in fields like mobile communications and graphics processing.</li>
<li>Assess the economic and technological shifts that led to the rise of the fabless model in the semiconductor industry.</li>
<li>Investigate the role of new technologies like field-programmable gate arrays in the evolution of chip design.</li>
<li>Reflect on the impact of the fabless model on global semiconductor supply chains and manufacturing landscapes.</li>
<li>Understand the broader trends of specialization and efficiency in the global economy as reflected in the semiconductor industry.</li>
<li>Evaluate the long-term effects of the shift towards design-centric approaches in the semiconductor sector.</li>
</ol>
</section>
</section>
<section id="morris-changs-grand-alliance" class="level2">
<h2 class="anchored" data-anchor-id="morris-changs-grand-alliance">Morris Chang’s Grand Alliance</h2>
<p>Chapter 37 focuses on the visionary leadership of Morris Chang, the founder of TSMC. It contrasts the fading era of semiconductor pioneers like Jerry Sanders of AMD with the rise of a new generation of leaders who embraced the fabless model. The chapter highlights Chang’s strategic foresight in recognizing the potential of smartphones and his commitment to maintaining TSMC’s leadership in the foundry business, especially during the financial crisis of 2008-2009.</p>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ol type="1">
<li><strong>Morris Chang’s Pivotal Leadership at TSMC</strong>: Chang’s influence in transitioning the industry to a foundry-based model.</li>
<li><strong>Vision for the Impact of Mobile Devices</strong>: Anticipating the significance of mobile computing in the semiconductor sector.</li>
<li><strong>Contrast with Traditional Semiconductor Approaches</strong>: The differing approaches of companies like AMD with in-house fabrication versus TSMC’s fabless model.</li>
<li><strong>Chang’s “Grand Alliance” Strategy</strong>: Building a cooperative ecosystem through collaboration with various companies.</li>
<li><strong>Transition in Semiconductor Leadership</strong>: The shift from pioneers like Jerry Sanders to new executives with different business models.</li>
<li><strong>Strategic Investment During Economic Downturns</strong>: Chang’s decision to invest heavily during the financial crisis, reflecting his belief in the industry’s growth.</li>
<li><strong>Innovation and Capacity Expansion at TSMC</strong>: Commitment to maintaining market leadership through continuous innovation.</li>
<li><strong>Technological Advancements in Manufacturing</strong>: The shift to advanced manufacturing technologies like FinFET transistors.</li>
<li><strong>Chang’s Investment Focus Over Cost-Cutting</strong>: Prioritizing R&amp;D and capacity investment over traditional cost-cutting measures.</li>
<li><strong>TSMC’s Role as a Neutral Industry Player</strong>: Its ability to collaborate effectively without direct competition.</li>
</ol>
</section>
<section id="facts-2" class="level3">
<h3 class="anchored" data-anchor-id="facts-2">Facts</h3>
<ol type="1">
<li>Morris Chang was a visionary leader in the semiconductor industry, founding TSMC.</li>
<li>Chang’s Grand Alliance strategy involved collaboration with a wide network of companies in the semiconductor ecosystem.</li>
<li>TSMC played a central role in the shift towards the fable</li>
</ol>
<p>ss semiconductor model.</p>
<ol start="4" type="1">
<li>Chang’s strategic decisions during the 2008-2009 financial crisis were crucial in maintaining TSMC’s industry leadership.</li>
<li>TSMC’s approach under Chang’s leadership focused on innovation, R&amp;D investment, and expanding manufacturing capacity.</li>
<li>The chapter discusses the evolution of semiconductor manufacturing technology, including the introduction of FinFET transistors.</li>
<li>Morris Chang’s return to active leadership at TSMC was a response to the challenges faced during the financial crisis.</li>
<li>TSMC’s strategy focused on being a neutral player in the industry, manufacturing chips for a wide range of clients.</li>
<li>Chang emphasized the importance of collaboration and innovation within TSMC’s ecosystem.</li>
<li>The shift in semiconductor industry leadership from founders like Jerry Sanders of AMD to a new generation of executives is highlighted.</li>
</ol>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ol type="1">
<li>Study the impact of leadership styles and strategic decisions on the success of companies in the semiconductor industry.</li>
<li>Analyze the role of foundries like TSMC in the evolution of the semiconductor manufacturing model.</li>
<li>Explore the technological advancements in semiconductor manufacturing, such as FinFET transistors.</li>
<li>Consider the implications of the 2008-2009 financial crisis on strategic decision-making in high-tech industries.</li>
<li>Reflect on the importance of collaboration and innovation in sustaining industry leadership.</li>
<li>Assess the shift in industry dynamics from integrated manufacturing to a foundry-based model.</li>
<li>Investigate the strategic importance of maintaining R&amp;D investment and capacity expansion during economic downturns.</li>
<li>Examine the role of TSMC’s Grand Alliance strategy in fostering a cooperative semiconductor ecosystem.</li>
<li>Understand the changing landscape of the semiconductor industry and the challenges faced by traditional companies.</li>
<li>Evaluate the long-term impacts of visionary leadership and strategic foresight in the semiconductor sector.</li>
</ol>
</section>
</section>
<section id="apple-silicon" class="level2">
<h2 class="anchored" data-anchor-id="apple-silicon">Apple Silicon</h2>
<p>Chapter 38 examines Apple’s strategic shift in designing its own silicon chips for devices like the iPhone and iPad. The chapter highlights Apple’s evolution from outsourcing chip design and production to Samsung, to acquiring PA Semi and developing its own A4 processor. This move underscored the significance of controlling hardware and software integration, a vision Steve Jobs had since Apple’s early days. Apple’s investment in chip design, particularly in facilities in Bavaria, Israel, and Silicon Valley, is discussed, along with the role of foundries like TSMC in fabricating Apple’s processors.</p>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ol type="1">
<li><strong>Strategic Shift to In-House Chip Design</strong>: Apple’s transition to designing its own silicon chips to enhance hardware and software integration.</li>
<li><strong>Foundation of Steve Jobs’ Vision</strong>: The integral role of Jobs’ vision in integrating software and hardware in Apple’s product development.</li>
<li><strong>Significance of PA Semi Acquisition</strong>: Apple’s pivotal move in acquiring PA Semi to advance its in-house chip design capabilities.</li>
<li><strong>Milestone with A4 Processor Development</strong>: The creation of the A4 processor as a key step in Apple’s journey towards chip self-reliance.</li>
<li><strong>Contrast with Other Smartphone Companies</strong>: Apple’s distinct strategy compared to competitors relying on external chip suppliers.</li>
<li><strong>Global Investment in Chip Design Facilities</strong>: The importance of Apple’s R&amp;D and design facilities worldwide for silicon innovation.</li>
<li><strong>Partnership with TSMC for Fabrication</strong>: Apple’s processors, designed in-house but fabricated by TSMC, showcasing global semiconductor manufacturing dynamics.</li>
<li><strong>Role of Specialized Silicon in Apple Products</strong>: The impact of proprietary chip technology on the performance and efficiency of Apple devices.</li>
<li><strong>Fabless Model Adoption by Apple</strong>: The significance of Apple’s approach to design innovation in the semiconductor industry.</li>
<li><strong>Strategic Advantage in Smartphone Market</strong>: Apple’s in-house chip design as a key competitive edge in the smartphone industry.</li>
</ol>
</section>
<section id="facts-3" class="level3">
<h3 class="anchored" data-anchor-id="facts-3">Facts</h3>
<ol type="1">
<li>Apple’s transition to designing its own silicon chips was significant in the technology industry.</li>
<li>The company acquired PA Semi for its expertise in energy-efficient processing, which led to the development of the A4 processor.</li>
<li>Apple’s in-house chip design efforts differentiated its products in the competitive smartphone market.</li>
<li>The company invested heavily in R&amp;D and chip design facilities in various global locations.</li>
<li>TSMC plays a critical role in fabricating Apple’s processors.</li>
<li>Apple’s strategic move to design its own chips contributed to its dominance in smartphone profits.</li>
<li>The chapter highlights the global nature of semiconductor manufacturing and supply chains.</li>
<li>Apple’s approach to chip design and fabrication reflects a broader trend in the electronics industry.</li>
<li>The company designs not only the main processors for its devices but also ancillary chips for accessories.</li>
<li>Apple’s strategy in chip design is part</li>
</ol>
<p>of its larger vision for integrating hardware and software.</p>
</section>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ol type="1">
<li>Study the impact of in-house chip design on a technology company’s competitive advantage in the market.</li>
<li>Analyze the role of foundries like TSMC in the global semiconductor manufacturing ecosystem.</li>
<li>Explore the strategic implications of Apple’s shift from outsourcing chip design to developing its own processors.</li>
<li>Consider the effects of proprietary chip technology on product performance and market dominance.</li>
<li>Examine the importance of global R&amp;D and chip design facilities in driving technological innovation.</li>
<li>Assess the impact of the fabless model on the semiconductor industry’s business strategies.</li>
<li>Investigate the changing dynamics of the smartphone market and the role of chip design in market competition.</li>
<li>Reflect on the broader trends in the electronics industry, such as the integration of hardware and software.</li>
<li>Understand the complexities of global semiconductor supply chains and their implications for technology companies.</li>
<li>Evaluate the long-term effects of strategic decisions in chip design on a company’s success in the technology sector.</li>
</ol>
</section>
</section>
<section id="euv" class="level2">
<h2 class="anchored" data-anchor-id="euv">EUV</h2>
<p>Chapter 39 delves into the development of extreme ultraviolet (EUV) lithography, a critical technology in semiconductor manufacturing. It focuses on ASML, the Dutch lithography company, and its nearly two-decade journey to make EUV lithography functional. The chapter highlights the complex global supply chain and the collaboration of companies and national labs across the world. It discusses the enormous technological challenges and investments from major players like Intel, Samsung, and TSMC in ASML to develop this groundbreaking technology.</p>
<section id="ideas-4" class="level3">
<h3 class="anchored" data-anchor-id="ideas-4">Ideas</h3>
<ol type="1">
<li><strong>EUV as a Technological Leap in Semiconductor Manufacturing</strong>: The significance of EUV lithography in creating smaller, more efficient chips.</li>
<li><strong>Global Collaboration in Developing EUV</strong>: ASML’s worldwide sourcing and collaboration to develop EUV technology.</li>
<li><strong>High-Stakes Investments from Industry Giants</strong>: The enormous investment from leading semiconductor companies like Intel, Samsung, and TSMC in EUV development.</li>
<li><strong>Overcoming Technical Challenges</strong>: The transition from visible light to EUV lithography involved overcoming numerous technical barriers.</li>
<li><strong>Innovation in Laser Technology</strong>: Developing new types of powerful, precision lasers for EUV lithography.</li>
<li><strong>Complexity of EUV Lithography Tools</strong>: Illustrating the advanced state of modern semiconductor manufacturing through the complexity of EUV tools.</li>
<li><strong>Crucial Role of EUV Mirrors by Zeiss</strong>: The development of mirrors capable of reflecting EUV light, a critical component in the technology.</li>
<li><strong>ASML’s Supply Chain Expertise</strong>: The success of EUV attributed to ASML’s ability to manage a complex, global supply chain.</li>
<li><strong>Interdependence in the Semiconductor Industry</strong>: The collaborative and global nature of the industry, as showcased by the development of EUV technology.</li>
<li><strong>Milestone in Semiconductor Manufacturing</strong>: The transition to EUV marking a significant advancement in meeting modern electronics demands.</li>
</ol>
</section>
<section id="facts-4" class="level3">
<h3 class="anchored" data-anchor-id="facts-4">Facts</h3>
<ol type="1">
<li><p>ASML, a Dutch company, has been instrumental in developing EUV lithography technology over two decades.</p></li>
<li><p>EUV lithography is essential for creating smaller, more efficient semiconductor chips.</p></li>
<li><p>Significant investments were made by major semiconductor companies like Intel, Samsung, and TSMC in ASML to develop EUV technology.</p></li>
<li><p>The development of EUV lithography involved global collaboration and a complex supply chain.</p></li>
<li><p>Producing EUV light required new technological innovations, including the use of high-powered lasers to create plasma from tin droplets.</p></li>
<li><p>German companies like Trumpf and Zeiss played crucial roles in developing components for EUV technology, including powerful lasers and advanced mirrors.</p></li>
<li><p>The complexity and cost of EUV lithography tools are unprecedented in the history of mass-produced machine tools.</p></li>
<li><p>The development of EUV technology involved overcoming numerous technical challenges, such as creating mirrors capable of reflecting EUV light.</p></li>
<li><p>ASML’s success in EUV lithography is attributed to its expertise in supply chain management and collaboration with global partners.</p></li>
<li><p>The EUV lithography tool represents a multinational effort, with crucial components sourced from various countries.</p></li>
</ol>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ol type="1">
<li>Study the role of EUV lithography in advancing semiconductor technology and its impact on the industry.</li>
<li>Analyze the collaborative nature of technological innovations like EUV lithography and the role of global supply chains.</li>
<li>Reflect on the strategic importance of investments in cutting-edge technologies by leading semiconductor companies.</li>
<li>Explore the technical challenges and innovations involved in developing EUV lithography.</li>
<li>Consider the impact of multinational contributions in the development of advanced manufacturing technologies.</li>
<li>Examine the role of companies like Trumpf and Zeiss in supporting the development of key components for EUV technology.</li>
<li>Assess the significance of ASML’s expertise in supply chain management for the successful development of EUV lithography.</li>
<li>Investigate the economic and technological implications of the transition from traditional to EUV lithography in chip manufacturing.</li>
<li>Understand the complexities and costs associated with developing and implementing breakthrough technologies like EUV lithography.</li>
<li>Evaluate the long-term impacts of EUV technology on the global semiconductor industry and its future direction.</li>
</ol>
</section>
</section>
<section id="there-is-no-plan-b" class="level2">
<h2 class="anchored" data-anchor-id="there-is-no-plan-b">There Is No Plan B</h2>
<p>Chapter 40 focuses on the pivotal role of extreme ultraviolet (EUV) lithography in the semiconductor industry. It highlights Tony Yen’s contributions, who after joining TSMC in the late 1990s, played a key role in the development of EUV lithography. The chapter underscores the high stakes involved in developing EUV technology, with significant investments from industry leaders like TSMC, Intel, Samsung, and GlobalFoundries. It also touches on the challenges and decisions faced by GlobalFoundries, which eventually abandoned its EUV program due to financial constraints.</p>
<section id="ideas-5" class="level3">
<h3 class="anchored" data-anchor-id="ideas-5">Ideas</h3>
<ol type="1">
<li><strong>EUV Lithography as a Technological Leap</strong>: The critical role of EUV lithography in enabling smaller transistor fabrication and sustaining Moore’s Law.</li>
<li><strong>Tony Yen’s Impact at TSMC</strong>: Yen’s significant role in advancing lithography technology at TSMC.</li>
<li><strong>Collaborative Development of EUV Technology</strong>: The necessity of multi-company collaboration and substantial financial investment in EUV.</li>
<li><strong>Intel’s Major Investment in ASML</strong>: Highlighting the strategic value of EUV lithography through Intel’s significant financial commitment.</li>
<li><strong>Transitioning from DUV to EUV Lithography</strong>: The array of technical hurdles faced in moving from deep ultraviolet to EUV lithography.</li>
<li><strong>EUV as the Only Viable Path Forward</strong>: EUV lithography’s role as the singular path for continued miniaturization in semiconductor manufacturing.</li>
<li><strong>Morris Chang’s Visionary Bet on EUV</strong>: TSMC’s substantial investment in EUV technology reflecting Chang’s foresight.</li>
<li><strong>GlobalFoundries’ Challenges with EUV</strong>: The financial and technical difficulties smaller foundries face in adopting cutting-edge technologies.</li>
<li><strong>Financial and Strategic Divergence in EUV Adoption</strong>: Contrasting financial positions and strategies of major semiconductor companies regarding EUV technology.</li>
<li><strong>Consolidation in Semiconductor Manufacturing</strong>: The decline in the number of companies capable of fabricating leading-edge logic chips.</li>
</ol>
</section>
<section id="facts-5" class="level3">
<h3 class="anchored" data-anchor-id="facts-5">Facts</h3>
<ol type="1">
<li>EUV lithography was critical for the continued miniaturization of semiconductor components.</li>
<li>Tony Yen’s work at TSMC significantly contributed to the advancement of EUV technology.</li>
<li>Intel’s investment in ASML for EUV development was a major financial commitment to semiconductor technology.</li>
<li>The transition from deep ultraviolet to EUV lithography required overcoming several technical challenges.</li>
<li>TSMC, under Morris Chang, heavily invested in EUV technology.</li>
<li>GlobalFoundries eventually abandoned its EUV program due to financial constraints.</li>
<li>The development of EUV technology marked a significant technological advancement in semiconductor manufacturing.</li>
<li>The semiconductor industry faced intense competition and pressure to innovate, especially in lithography technology.</li>
<li>EUV technology was crucial for maintaining the pace of Moore’s Law.</li>
<li>The semiconductor industry saw consolidation, with a reduction in the</li>
</ol>
<p>number of companies capable of fabricating leading-edge logic chips.</p>
</section>
<section id="recommendations-5" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-5">Recommendations</h3>
<ol type="1">
<li>Study the strategic importance of EUV lithography in the semiconductor industry and its impact on technological advancement.</li>
<li>Analyze the role of major semiconductor companies and their investments in EUV technology development.</li>
<li>Reflect on the technical challenges and innovations involved in transitioning from deep ultraviolet to EUV lithography.</li>
<li>Consider the financial and strategic implications for semiconductor companies in adopting cutting-edge technologies like EUV.</li>
<li>Explore the competitive dynamics in the semiconductor industry, particularly in the area of lithography technology.</li>
<li>Assess the impact of industry consolidation on the development and implementation of advanced technologies.</li>
<li>Investigate the role of global collaboration and supply chains in the development of EUV lithography.</li>
<li>Examine the factors contributing to the decisions of companies like GlobalFoundries to abandon their EUV programs.</li>
<li>Understand the broader trends in semiconductor manufacturing, including the pressure to continuously innovate.</li>
<li>Evaluate the long-term effects of technological advancements like EUV lithography on the global semiconductor industry.</li>
</ol>
</section>
</section>
<section id="how-intel-forgot-innovation" class="level2">
<h2 class="anchored" data-anchor-id="how-intel-forgot-innovation">How Intel Forgot Innovation</h2>
<p>Chapter 41 examines the decline of Intel’s leadership in the semiconductor industry. It focuses on Intel’s challenges in adapting to new technologies and market shifts, particularly in artificial intelligence (AI) and data center processors. The chapter contrasts Intel’s struggles with the rise of competitors like Nvidia, who embraced AI and developed GPUs optimized for this purpose. Intel’s foray into the foundry business and its failure to keep up with advancements in manufacturing processes like EUV lithography are also discussed, highlighting the company’s missed opportunities and strategic missteps.</p>
<section id="ideas-6" class="level3">
<h3 class="anchored" data-anchor-id="ideas-6">Ideas</h3>
<ol type="1">
<li><strong>Intel’s Missed Technological Shifts</strong>: Intel’s decline due to its failure to adapt to emerging technologies, particularly in AI and data centers.</li>
<li><strong>Limited Focus on CPUs Over GPUs</strong>: Intel’s limited competitiveness owing to its continued focus on CPUs, while GPUs gained prominence in AI and parallel processing.</li>
<li><strong>Nvidia’s Successful Pivot to AI</strong>: Nvidia’s strategic success in GPU design for AI, highlighting Intel’s missed opportunities.</li>
<li><strong>Integrated Model Becoming a Liability</strong>: The shift in the industry making Intel’s integrated chip design and manufacturing model less advantageous.</li>
<li><strong>Struggles in the Foundry Business</strong>: Intel’s unsuccessful foray into the foundry business and difficulties in adapting to its open, service-oriented nature.</li>
<li><strong>Delay in Adopting EUV Lithography</strong>: Intel falling behind in manufacturing technology due to its delayed adoption of EUV lithography.</li>
<li><strong>Intel’s Internal Bureaucratic Stagnation</strong>: Challenges within Intel, including bureaucratic hurdles and a lack of innovation.</li>
<li><strong>Decline in Market Share and Influence</strong>: Intel’s diminishing influence and market share amid delays and technical issues in its manufacturing processes.</li>
<li><strong>Shift in Global Semiconductor Landscape</strong>: The rise of Asian foundries and the decline of American manufacturing prowess.</li>
<li><strong>Importance of Continuous Innovation</strong>: Intel’s struggles underscoring the necessity for continuous innovation and adaptability in the tech industry.</li>
</ol>
</section>
<section id="facts-6" class="level3">
<h3 class="anchored" data-anchor-id="facts-6">Facts</h3>
<ol type="1">
<li><p>Intel, once a leader in the semiconductor industry, struggled to adapt to new technologies and market shifts.</p></li>
<li><p>The company’s focus on CPUs became a limitation with the rise of AI and the need for GPUs.</p></li>
<li><p>Nvidia successfully adapted to the AI market, leveraging its GPU technology.</p></li>
<li><p>Intel’s integrated model of chip design and manufacturing became less effective in a changing industry.</p></li>
<li><p>Intel’s foray into the foundry business was unsuccessful, contrasting with the success of foundries like TSMC.</p></li>
<li><p>The company faced significant delays and technical challenges in advancing its manufacturing processes.</p></li>
<li><p>Intel’s delay in adopting EUV lithography was a critical factor in its technological lag.</p></li>
<li><p>Intel’s internal challenges included bureaucracy and a lack of innovation.</p></li>
<li><p>The company’s market share and influence in the semiconductor industry declined over time.</p></li>
<li><p>The global semiconductor landscape shifted, with Asian foundries rising and American manufacturing losing ground.</p></li>
</ol>
</section>
<section id="recommendations-6" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-6">Recommendations</h3>
<ol type="1">
<li>Analyze the impact of technological shifts on leading semiconductor companies like Intel.</li>
<li>Study the strategic importance of adapting to market changes, such as the rise of AI in computing.</li>
<li>Reflect on the challenges and opportunities in transitioning from traditional CPU manufacturing to GPU and specialized processors.</li>
<li>Consider the role of continuous innovation in maintaining competitiveness in the semiconductor industry.</li>
<li>Explore the implications of internal corporate challenges, like bureaucracy and innovation stagnation, on a company’s market position.</li>
<li>Assess the strategic decisions of companies like Nvidia in pivoting towards AI and GPU technology.</li>
<li>Investigate the impact of manufacturing technology advancements, like EUV lithography, on the semiconductor industry.</li>
<li>Examine the global dynamics of the semiconductor industry, particularly the rise of Asian manufacturing and the decline of American manufacturing.</li>
<li>Understand the broader trends in computing demands, such as the need for efficient AI processing.</li>
<li>Evaluate the potential future directions for companies like Intel in regaining their leadership in semiconductor technology.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/chip-war-book-notes/part-6/</guid>
  <pubDate>Tue, 21 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Chip War Part 5: Integrated Circuits, Integrated World?</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/chip-war-book-notes/part-5/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/chip-war-book-notes.html"><strong>Chip War: The Fight for the World’s Most Critical Technology</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>We Want a Semiconductor Industry in Taiwan</li>
<li>All People Must Make Semiconductors</li>
<li>“Sharing God’s Love With the Chinese”</li>
<li>Lithography Wars</li>
<li>The Innovator’s Dilemma</li>
<li>Running Faster?</li>
</ul>
<section id="we-want-a-semiconductor-industry-in-taiwan" class="level2">
<h2 class="anchored" data-anchor-id="we-want-a-semiconductor-industry-in-taiwan">We Want a Semiconductor Industry in Taiwan</h2>
<p>Chapter Twenty-Nine narrates Taiwan’s ascent as a semiconductor powerhouse. It focuses on Morris Chang’s role in leading Taiwan Semiconductor Manufacturing Company (TSMC) and Taiwan’s deliberate strategy to integrate into global semiconductor supply chains. The chapter highlights Taiwan’s transition from assembling devices to producing advanced chips, supported by government investment and collaboration with the U.S. semiconductor industry. It underscores Taiwan’s strategic positioning in the semiconductor market, driven by Chang’s vision and the government’s backing.</p>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ol type="1">
<li>Taiwan’s government, particularly Minister K.T. Lee, identified semiconductors as a strategic industry and actively promoted its development.</li>
<li>Morris Chang, a former Texas Instruments executive, played a central role in Taiwan’s semiconductor industry, leading TSMC.</li>
<li>Taiwan’s entry into the semiconductor market was part of a broader strategy for economic growth and technological advancement.</li>
<li>The government’s significant investment and support were crucial in the establishment and success of TSMC.</li>
<li>Collaboration with U.S. firms and technology transfer were key factors in Taiwan’s rise as a semiconductor hub.</li>
<li>Taiwan’s shift from assembly to chip fabrication marked a significant technological leap.</li>
<li>TSMC’s foundry model, focusing on manufacturing chips designed by customers, was a novel approach that reshaped the industry.</li>
<li>The success of TSMC and Taiwan’s semiconductor industry is a testament to strategic planning, governmental support, and entrepreneurial vision.</li>
<li>Taiwan’s emergence as a leading semiconductor producer had significant implications for global technology and economics.</li>
<li>The chapter illustrates how a small nation strategically positioned itself in a critical global industry through innovation and government-industry collaboration.</li>
</ol>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ol type="1">
<li>Taiwan’s government, led by Minister K.T. Lee, played a pivotal role in developing the country’s semiconductor industry.</li>
<li>Morris Chang was instrumental in leading TSMC and shaping Taiwan’s semiconductor sector.</li>
<li>Taiwan’s strategy involved transitioning from assembly to advanced chip production.</li>
<li>The Taiwanese government provided significant investment and support for TSMC.</li>
<li>Collaboration with U.S. companies and technology transfer were crucial in Taiwan’s semiconductor industry development.</li>
<li>TSMC’s foundry model, focusing on manufacturing customer-designed chips, was innovative and influential.</li>
<li>Taiwan’s rise as a semiconductor hub was a result of strategic planning and government-industry collaboration.</li>
<li>TSMC and Taiwan’s success in semiconductors had major global technological and economic implications.</li>
<li>The Taiwanese semiconductor industry’s growth was marked by strategic government support and entrepreneurial vision.</li>
<li>Taiwan’s emergence as a leading semiconductor producer significantly impacted the global technology landscape.</li>
</ol>
</section>
</section>
<section id="all-people-must-make-semiconductors" class="level2">
<h2 class="anchored" data-anchor-id="all-people-must-make-semiconductors">All People Must Make Semiconductors</h2>
<p>Chapter 30 contrasts the semiconductor industry’s evolution in Taiwan and China. It highlights Taiwan’s technological advancement through TSMC and the founding of Huawei in China, emphasizing the impact of political and economic policies on the development of the semiconductor industry in both regions.</p>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ol type="1">
<li>Taiwan’s advancement in semiconductor technology was rapid and significant, largely due to TSMC.</li>
<li>China’s technological development in the semiconductor industry was initially slow due to political and economic constraints.</li>
<li>Political policies, particularly in China, had a profound impact on the development of the semiconductor industry.</li>
<li>Taiwan and China’s approaches to technology and semiconductor development were markedly different.</li>
<li>The founding of TSMC and Huawei represented different strategies in technology adoption and development.</li>
<li>Taiwan’s semiconductor success was aided by its connection to global tech companies and educated engineers.</li>
<li>China’s initial backwardness in technology was a result of its isolationist policies and political turmoil.</li>
<li>The Chinese government’s late realization of the importance of semiconductors changed its approach to technology.</li>
<li>Taiwan leveraged its skilled workforce and international connections to excel in semiconductor manufacturing.</li>
<li>The Cultural Revolution in China severely hampered technological progress, particularly in the semiconductor industry.</li>
</ol>
</section>
<section id="facts-1" class="level3">
<h3 class="anchored" data-anchor-id="facts-1">Facts</h3>
<ol type="1">
<li>TSMC was founded in Taiwan in 1987 by Morris Chang.</li>
<li>Huawei, a major telecommunications company, was established in China in 1987 by Ren Zhengfei.</li>
<li>Taiwan’s success in the semiconductor industry is partly due to its skilled engineers educated at top universities like Stanford and Berkeley.</li>
<li>China’s semiconductor industry lagged due to its political and economic isolation.</li>
<li>The Chinese government, under Jiang Zemin, identified electronics as a priority in the 1980s.</li>
<li>China’s technological capabilities in the 1980s were over a decade behind the global cutting edge.</li>
<li>Mao Zedong’s policies, especially the Cultural Revolution, hindered China’s technological advancement.</li>
<li>Taiwan’s economic strategies significantly differed from China’s, leading to a more advanced semiconductor industry.</li>
<li>The development of the semiconductor industry in East Asia was heavily influenced by political decisions and global economics.</li>
<li>Deng Xiaoping’s policy changes in the late 1970s marked a shift towards modernization in China, impacting its technological development.</li>
</ol>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ol type="1">
<li>Study the history of Taiwan’s semiconductor industry to understand its success.</li>
<li>Examine the impact of China’s political policies on its technological development.</li>
<li>Understand the significance of key figures like Morris Chang and Ren Zhengfei in the tech industry.</li>
<li>Consider the role of education and global connections in technological advancement.</li>
<li>Analyze the effects of political turmoil, like the Cultural Revolution, on scientific progress.</li>
<li>Explore how national policies can drastically impact technological industries.</li>
<li>Recognize the strategic importance of the semiconductor industry in global power dynamics.</li>
<li>Consider the implications of global economic forces on technological development and national policies.</li>
<li>Observe how late policy shifts, like those under Deng Xiaoping, can transform a country’s technological landscape.</li>
<li>Understand the pivotal role of semiconductors in modern technology and global politics.</li>
</ol>
</section>
</section>
<section id="sharing-gods-love-with-the-chinese" class="level2">
<h2 class="anchored" data-anchor-id="sharing-gods-love-with-the-chinese">“Sharing God’s Love With the Chinese”</h2>
<p>Chapter 31 focuses on Richard Chang’s efforts to establish a semiconductor industry in China, contrasting the different approaches and challenges faced by East Asian countries in semiconductor production. It highlights the geopolitical and economic shifts in chip fabrication, detailing the roles of TSMC, Huawei, and other major players in shaping the industry.</p>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ol type="1">
<li>Richard Chang’s vision for semiconductor manufacturing in China was driven by a mix of personal conviction and economic strategy.</li>
<li>The global geography of chip fabrication shifted significantly from the 1990s to the 2000s, with East Asian countries becoming more prominent.</li>
<li>U.S. dominance in chip production declined over two decades, while Asian countries increased their market share.</li>
<li>The growth of the semiconductor industry in countries like South Korea, Singapore, and Taiwan was fueled by government investment and strategic partnerships.</li>
<li>China’s approach to building a semiconductor industry included a mix of government subsidies, foreign investment, and technology transfer attempts.</li>
<li>The complexity and cost of semiconductor production require significant financial backing and technological expertise.</li>
<li>Samsung’s success in the memory chip market illustrates the competitive nature of the semiconductor industry.</li>
<li>The semiconductor industry’s evolution reflects broader trends in globalization and technological advancement.</li>
<li>The entry of China into semiconductor manufacturing marked a significant shift in the global tech landscape.</li>
<li>Political and economic decisions play a crucial role in shaping the semiconductor industry.</li>
</ol>
</section>
<section id="facts-2" class="level3">
<h3 class="anchored" data-anchor-id="facts-2">Facts</h3>
<ol type="1">
<li>Richard Chang played a pivotal role in establishing China’s semiconductor industry.</li>
<li>The U.S. share of global chip production declined from 37% in 1990 to 13% in 2010.</li>
<li>Asian countries, particularly South Korea, Singapore, and Taiwan, increased their chip production significantly.</li>
<li>Samsung became the world leader in memory chip production in 1992.</li>
<li>The semiconductor industry requires substantial investment and often relies on government support.</li>
<li>China’s chip manufacturing capabilities in the 1990s were significantly behind those of Taiwan and South Korea.</li>
<li>SMIC, founded by Richard Chang, received substantial investment from both Chinese and international sources, including U.S. investors.</li>
<li>The development of China’s semiconductor industry involved significant technology transfer and overseas hiring.</li>
<li>SMIC’s strategy mirrored that of TSMC, focusing on hiring skilled engineers and acquiring the best available tools.</li>
<li>The semiconductor industry’s growth is intertwined with the rise of smartphones and fabless semiconductor designers.</li>
</ol>
</section>
<section id="recommendations-1" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-1">Recommendations</h3>
<ol type="1">
<li>Examine the strategic importance of semiconductor technology in national economies.</li>
<li>Analyze the impact of government policies and subsidies on the semiconductor industry.</li>
<li>Consider the role of key individuals like Richard Chang in shaping the semiconductor landscape.</li>
<li>Study the competitive dynamics of the semiconductor market, including the DRAM sector.</li>
<li>Observe the impact of globalization on the semiconductor industry.</li>
<li>Understand the technological and financial challenges in semiconductor manufacturing.</li>
<li>Recognize the significance of semiconductor technology in the rise of smartphones and modern devices.</li>
<li>Explore the role of international collaboration and investment in semiconductor industry growth.</li>
<li>Assess the geopolitical implications of the semiconductor industry’s development in East Asia.</li>
<li>Reflect on the broader economic and technological trends influencing the semiconductor industry.</li>
</ol>
</section>
</section>
<section id="lithography-wars" class="level2">
<h2 class="anchored" data-anchor-id="lithography-wars">Lithography Wars</h2>
<p>Chapter 32 discusses the technological and financial challenges Intel faced in developing extreme ultraviolet (EUV) lithography. It narrates John Carruthers’ quest for funding from Intel CEO Andy Grove and the strategic decisions that led to ASML becoming the dominant player in the EUV lithography market, highlighting the geopolitical implications of these developments.</p>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ol type="1">
<li>The development of EUV lithography was a significant technological challenge, requiring substantial investment and innovation.</li>
<li>Intel’s commitment to Moore’s Law drove its investment in advanced lithography technologies.</li>
<li>The shift from deep ultraviolet to EUV lithography was essential for maintaining the pace of semiconductor miniaturization.</li>
<li>The lithography industry experienced a period of intense competition and technological experimentation.</li>
<li>ASML’s rise as a dominant player in the lithography market illustrates the importance of strategic partnerships and global supply chains.</li>
<li>The semiconductor industry’s evolution reflects broader trends in globalization, technological advancement, and corporate strategy.</li>
<li>The decline of U.S. dominance in lithography equipment manufacturing had significant geopolitical implications.</li>
<li>The collaboration between ASML and TSMC was pivotal in advancing semiconductor technology.</li>
<li>The concentration of advanced lithography technology in a few companies raised concerns about supply chain security and technological sovereignty.</li>
<li>Intel’s funding decisions reflected the complex interplay of science, business, and politics in the semiconductor industry.</li>
</ol>
</section>
<section id="facts-3" class="level3">
<h3 class="anchored" data-anchor-id="facts-3">Facts</h3>
<ol type="1">
<li>Intel invested heavily in developing EUV lithography, a key technology for semiconductor manufacturing.</li>
<li>By 1992, Intel had regained its position as the world’s biggest chipmaker.</li>
<li>The shift from deep ultraviolet to EUV lithography was critical for producing smaller and more efficient semiconductors.</li>
<li>ASML, a Dutch company, emerged as a key player in the advanced lithography market.</li>
<li>The development of EUV lithography required global collaboration and significant financial investment.</li>
<li>U.S. chipmakers lost their dominance in lithography tool manufacturing to international competitors.</li>
<li>The U.S. government’s policy decisions influenced the development and export of lithography technology.</li>
<li>The concentration of lithography technology in a few companies raised concerns about global supply chain security.</li>
<li>The collaboration between ASML and TSMC was crucial for advancing semiconductor technology.</li>
<li>The development of EUV lithography involved challenges in engineering, business, and geopolitics.</li>
</ol>
</section>
<section id="recommendations-2" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-2">Recommendations</h3>
<ol type="1">
<li>Explore the strategic importance of advanced lithography technology in semiconductor manufacturing.</li>
<li>Analyze the impact of corporate investment and government policies on technological innovation.</li>
<li>Study the evolution of the lithography industry and the rise of companies like ASML.</li>
<li>Consider the geopolitical implications of shifts in technological leadership and supply chain control.</li>
<li>Understand the importance of international collaboration in advancing semiconductor technology.</li>
<li>Reflect on the role of technological sovereignty and supply chain security in global technology development.</li>
<li>Examine the challenges and opportunities presented by the globalization of the semiconductor industry.</li>
<li>Recognize the importance of strategic partnerships, like that between ASML and TSMC, in technological advancement.</li>
<li>Investigate the impact of financial investment and research and development on technological progress.</li>
<li>Consider the long-term implications of the “lithography wars” on the global semiconductor industry.</li>
</ol>
</section>
</section>
<section id="the-innovators-dilemma" class="level2">
<h2 class="anchored" data-anchor-id="the-innovators-dilemma">The Innovator’s Dilemma</h2>
<p>Chapter 33 explores Intel’s strategic decisions and missed opportunities in the semiconductor industry. It highlights the contrast between Intel’s focus on x86 architecture for PCs and servers and the rise of mobile devices. The chapter illustrates how Intel’s prioritization of profit margins and its reluctance to embrace new technologies like ARM architecture led to missed opportunities in the rapidly evolving mobile market, exemplified by Intel’s decision to decline Apple’s iPhone chip contract.</p>
<section id="ideas-4" class="level3">
<h3 class="anchored" data-anchor-id="ideas-4">Ideas</h3>
<ol type="1">
<li><strong>Intel’s Business Strategy and x86 Architecture</strong>: The heavy influence of Intel’s commitment to x86 architecture and high profit margins on its business strategy.</li>
<li><strong>Missed Opportunities in Mobile Markets</strong>: Intel’s focus on PCs and servers leading to overlooked opportunities in the burgeoning mobile device sector.</li>
<li><strong>Short-term Financial Goals vs.&nbsp;Long-term Innovation</strong>: The prioritization of short-term financial goals over long-term technological innovation under CEO Paul Otellini.</li>
<li><strong>Shift from Engineering to Management-Driven Decisions</strong>: The transition at Intel impacting its adaptability to new market trends.</li>
<li><strong>Strategic Misstep with Apple’s iPhone</strong>: Intel’s significant strategic error in declining to produce chips for Apple’s iPhone.</li>
<li><strong>Underestimating Mobile Market Growth</strong>: The failure to recognize the rapid growth and importance of the mobile market in the semiconductor industry.</li>
<li><strong>Cultural Shift Impacting Market Position</strong>: The shift from engineering innovation to financial management within Intel and its profound market implications.</li>
<li><strong>The Innovator’s Dilemma in Intel’s Context</strong>: The challenges established companies like Intel face in adapting to technological shifts.</li>
<li><strong>Conservative Approach to Innovation Risks</strong>: The risks of Intel’s conservative approach to innovation in a rapidly evolving industry.</li>
<li><strong>Paradigm Shift in Semiconductor Industry</strong>: The rise of mobile computing representing a paradigm shift that Intel was slow to recognize and capitalize on.</li>
</ol>
</section>
<section id="facts-4" class="level3">
<h3 class="anchored" data-anchor-id="facts-4">Facts</h3>
<ol type="1">
<li>Intel’s dominance in the PC and server chip market was heavily reliant on its x86 architecture.</li>
<li>Intel’s leadership, especially under CEO Paul Otellini, focused more on financial management than engineering innovation.</li>
<li>Intel missed the opportunity to produce chips for Apple’s iPhone, which later proved to be a significant market.</li>
<li>ARM architecture, which Intel had considered but rejected, became dominant in the mobile device market.</li>
<li>Intel’s conservative approach to innovation led to missed opportunities in the rapidly evolving semiconductor industry.</li>
<li>The rise of mobile devices represented a major shift in the semiconductor industry, which Intel was slow to adapt to.</li>
<li>Intel’s focus on maintaining high profit margins influenced its reluctance to invest in new technologies.</li>
<li>The partnership between Intel and Apple for Mac computers was a notable success, but did not extend to mobile devices.</li>
<li>Intel’s market position was challenged by its conservative approach to embracing new market trends and technologies.</li>
<li>The semiconductor industry’s evolution required companies to be agile and forward-thinking, a challenge for Intel’s traditional business</li>
</ol>
<p>strategy.</p>
</section>
<section id="recommendations-3" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-3">Recommendations</h3>
<ol type="1">
<li>Study the impact of corporate culture on a company’s ability to innovate and adapt to new market trends.</li>
<li>Explore the strategic implications of focusing on traditional profitable lines versus investing in emerging technologies.</li>
<li>Understand the importance of agile decision-making in rapidly evolving industries like the semiconductor market.</li>
<li>Analyze the impact of leadership styles on a company’s technological and market position.</li>
<li>Consider the risks and opportunities associated with the innovator’s dilemma in technology companies.</li>
<li>Examine the evolution of the semiconductor industry, particularly the shift towards mobile computing.</li>
<li>Reflect on the strategic decisions of companies like Intel and Apple and their long-term market implications.</li>
<li>Investigate the importance of technological adaptability in maintaining market leadership in the semiconductor industry.</li>
<li>Assess the influence of technological trends, such as ARM architecture, on the global semiconductor market.</li>
<li>Explore the role of strategic partnerships in shaping a company’s position in the technology industry.</li>
</ol>
</section>
</section>
<section id="running-faster" class="level2">
<h2 class="anchored" data-anchor-id="running-faster">Running Faster?</h2>
<p>Chapter 34 focuses on Andy Grove’s perspective on offshoring in the semiconductor industry. It details Grove’s concerns about the offshoring of advanced manufacturing jobs and the U.S.’s diminishing role in semiconductor manufacturing. The chapter highlights the strategic and geopolitical implications of these trends, with a particular focus on the rise of China’s semiconductor capabilities and the U.S.’s reliance on foreign manufacturing.</p>
<section id="ideas-5" class="level3">
<h3 class="anchored" data-anchor-id="ideas-5">Ideas</h3>
<ol type="1">
<li><strong>Grove’s Concerns About Offshoring</strong>: Andy Grove’s worries about the risks of losing domestic advanced manufacturing capabilities.</li>
<li><strong>Shift of Manufacturing to Asia</strong>: The relocation of semiconductor manufacturing from the U.S. to Asia, particularly China and Taiwan, and its strategic and economic implications.</li>
<li><strong>Globalization in High-Tech Industries</strong>: Reflection on the broader implications of globalization in the high-tech sector.</li>
<li><strong>Importance of Domestic Manufacturing</strong>: Grove’s emphasis on the necessity of a strong domestic manufacturing base for strategic industries.</li>
<li><strong>Rise of China’s Semiconductor Industry</strong>: The significant shift in global technological dynamics marked by the development of China’s semiconductor sector.</li>
<li><strong>U.S. Policies Impacting the Industry</strong>: How U.S. government policies on technology exports and trade shaped the semiconductor industry.</li>
<li><strong>Contrast in Manufacturing Approaches</strong>: The differences between the U.S. and China’s strategies in semiconductor manufacturing, highlighting diverse economic and strategic priorities.</li>
<li><strong>Grove’s Skepticism of Offshoring</strong>: Challenge to the prevailing views on the long-term benefits of offshoring.</li>
<li><strong>Risks in Global Supply Chains</strong>: The dependence on key facilities in Taiwan for chip manufacturing and its risks to global supply chains.</li>
<li><strong>Balancing Economic Efficiency and Strategy</strong>: The complexities of aligning economic efficiency with strategic considerations in global manufacturing.</li>
</ol>
</section>
<section id="facts-5" class="level3">
<h3 class="anchored" data-anchor-id="facts-5">Facts</h3>
<ol type="1">
<li>Andy Grove was a key figure at Intel and had concerns about the impact of offshoring on U.S. manufacturing.</li>
<li>The shift in semiconductor manufacturing from the U.S. to Asia, particularly to China, was significant.</li>
<li>The rise of China’s semiconductor industry, including companies like SMIC, indicated a major shift in global technology dynamics.</li>
<li>The U.S. government’s approach to technology exports and trade agreements played a role in the semiconductor industry’s globalization.</li>
<li>The reliance on a few facilities in Taiwan for semiconductor manufacturing created vulnerabilities in global supply chains.</li>
<li>The chapter discusses the economic and strategic implications of offshoring in high-tech industries.</li>
<li>Andy Grove’s perspective challenges the prevailing attitudes toward globalization in the semiconductor industry.</li>
<li>The U.S.’s position in the global semiconductor industry was changing, with potential implications for its technological leadership.</li>
<li>The debate over technology exports from the U.S. highlighted tensions between economic interests and national security.</li>
<li>The narrative illustrates the complexities and risks associated with the global semiconductor supply chain.</li>
</ol>
</section>
<section id="recommendations-4" class="level3">
<h3 class="anchored" data-anchor-id="recommendations-4">Recommendations</h3>
<ol type="1">
<li>Consider the strategic importance of maintaining domestic manufacturing capabilities in critical industries.</li>
<li>Analyze the impact of globalization on high-tech industries, particularly semiconductor manufacturing.</li>
<li>Reflect on the implications of the U.S.’s diminishing role in semiconductor manufacturing for its technological leadership.</li>
<li>Explore the contrasting approaches of the U.S. and China in the semiconductor industry and their economic and strategic outcomes.</li>
<li>Examine the vulnerabilities created by global semiconductor supply chains and the reliance on a few key manufacturing locations.</li>
<li>Debate the merits and risks of offshoring in the context of national security and economic resilience.</li>
<li>Assess the long-term impacts of the U.S.’s policies on technology exports and trade agreements in the semiconductor industry.</li>
<li>Investigate the changing landscape of the global semiconductor industry and the evolving position of the U.S. within it.</li>
<li>Evaluate the perspectives and predictions of industry figures like Andy Grove on the future of manufacturing and innovation.</li>
<li>Study the balance between economic efficiency and strategic considerations in global manufacturing decisions.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/chip-war-book-notes/part-5/</guid>
  <pubDate>Tue, 21 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Chip War Part 4: America Resurgent</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/chip-war-book-notes/part-4/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/chip-war-book-notes.html"><strong>Chip War: The Fight for the World’s Most Critical Technology</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>The Potato Chip King</li>
<li>Disrupting Intel</li>
<li>My Enemy’s Enemy: The Rise of Korea</li>
<li>This Is the Future</li>
<li>The KGB’s Directorate T</li>
<li>Weapons of Mass Destruction: The Impact of the Offset</li>
<li>War Hero</li>
<li>The Cold War Is Over and You Have Won</li>
</ul>
<section id="the-potato-chip-king" class="level2">
<h2 class="anchored" data-anchor-id="the-potato-chip-king">The Potato Chip King</h2>
<p>Chapter Twenty-One centers on Jack Simplot, the Idaho billionaire who played a pivotal role in reviving America’s semiconductor industry. Known for his success in the potato business, Simplot invested in Micron, a DRAM chip company. The chapter details Micron’s challenges and innovations in the competitive DRAM market, dominated by Japanese firms. Simplot’s unconventional approach and focus on cost-cutting and efficiency helped Micron survive and eventually thrive, contributing to the resurgence of the U.S. semiconductor industry in the face of Japanese competition.</p>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ol type="1">
<li>Jack Simplot’s transition from the potato industry to semiconductors symbolized a unique American entrepreneurial spirit.</li>
<li>Simplot’s investment in Micron was initially seen as unlikely to succeed, given the intense competition from Japanese DRAM manufacturers.</li>
<li>Micron, despite its small size and lack of experience, managed to innovate and compete effectively in the DRAM market.</li>
<li>The chapter highlights the importance of cost-cutting and efficient manufacturing in the semiconductor industry.</li>
<li>Simplot’s unconventional business strategies were key to Micron’s survival and growth.</li>
<li>Micron’s success story serves as a counterexample to the decline of other American semiconductor companies in the 1980s.</li>
<li>The narrative illustrates the broader theme of American resilience and adaptability in high-tech industries.</li>
<li>Simplot and Micron’s journey reflects the challenges and opportunities in the global semiconductor market.</li>
<li>Micron’s ability to outmaneuver both Japanese and American competitors showcased the value of creative and strategic thinking in the semiconductor sector.</li>
<li>The resurgence of the U.S. semiconductor industry, as exemplified by Micron, was crucial for maintaining global technological competitiveness.</li>
</ol>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ol type="1">
<li>Jack Simplot, known for his success in the potato business, played a crucial role in the semiconductor industry by investing in Micron.</li>
<li>Micron was an American DRAM chip company that faced fierce competition from Japanese manufacturers.</li>
<li>Despite initial skepticism, Simplot’s investment in Micron and his business strategies contributed to the company’s success.</li>
<li>Micron managed to innovate and effectively compete in the DRAM market, which was dominated by Japanese firms.</li>
<li>The chapter highlights the significance of cost-cutting and efficient manufacturing practices in the semiconductor industry.</li>
<li>Micron’s success under Simplot’s guidance helped revive the American semiconductor industry.</li>
<li>The story of Simplot and Micron illustrates American resilience and adaptability in high-tech industries.</li>
<li>Micron’s ability to compete against both Japanese and American competitors in the semiconductor sector was notable.</li>
<li>The success of Micron is seen as a counterexample to the broader decline of American semiconductor companies in the 1980s.</li>
<li>Micron’s resurgence was significant for maintaining the U.S.’s global competitiveness in technology.</li>
</ol>
</section>
</section>
<section id="disrupting-intel" class="level2">
<h2 class="anchored" data-anchor-id="disrupting-intel">Disrupting Intel</h2>
<p>Chapter Twenty-Two focuses on Intel’s strategic pivot under Andy Grove’s leadership in the face of Japanese competition. The chapter highlights how Grove’s intense management style and decision to shift from DRAM to microprocessors saved Intel from bankruptcy, positioning it as a dominant player in the PC era. It details the challenges faced by Intel, including quality issues and Japanese dominance in DRAM, and how Grove’s “Copy Exactly” manufacturing strategy and focus on microprocessors, along with favorable economic conditions, led to Intel’s resurgence.</p>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ol type="1">
<li>Andy Grove’s leadership was pivotal in transforming Intel during a crucial period.</li>
<li>Intel faced significant challenges from Japanese DRAM manufacturers and internal quality issues.</li>
<li>Grove’s management style was intense and focused, driven by a sense of paranoia about competition and failure.</li>
<li>The shift from DRAM to microprocessors marked a strategic pivot for Intel in response to market changes.</li>
<li>The “Copy Exactly” manufacturing strategy was implemented to improve quality and efficiency.</li>
<li>External factors, such as the rising value of the yen and falling U.S. interest rates, aided Intel’s resurgence.</li>
<li>Intel’s success with microprocessors was bolstered by the growth of the PC market, particularly IBM’s and Compaq’s use of Intel chips.</li>
<li>Intel established a virtual monopoly in the PC chip market, driven by continuous innovation and new product releases.</li>
<li>The chapter illustrates the importance of strategic adaptation and strong leadership in the high-tech industry.</li>
<li>Intel’s turnaround under Grove is a textbook case of Silicon Valley capitalism and the value of disruptive innovation.</li>
</ol>
</section>
<section id="facts-1" class="level3">
<h3 class="anchored" data-anchor-id="facts-1">Facts</h3>
<ol type="1">
<li>Andy Grove played a critical role in transforming Intel during a challenging period.</li>
<li>Intel faced intense competition from Japanese DRAM manufacturers and internal quality issues.</li>
<li>Grove’s management style was characterized by intensity and a focus on operational efficiency.</li>
<li>Intel’s strategic shift from DRAM to microprocessors was crucial for its survival and future success.</li>
<li>The “Copy Exactly” manufacturing strategy improved Intel’s production quality and efficiency.</li>
<li>External economic factors, including the rising yen and falling U.S. interest rates, helped Intel’s resurgence.</li>
<li>Intel’s success in the microprocessor market was closely tied to the growth of the PC industry.</li>
<li>Intel established a dominant position in the PC chip market through continuous innovation.</li>
<li>Grove’s leadership at Intel is an example of disruptive innovation and strategic adaptation in the tech industry.</li>
<li>Intel’s turnaround under Grove’s leadership is a key example of successful business strategy in Silicon Valley.</li>
</ol>
</section>
</section>
<section id="my-enemys-enemy-the-rise-of-korea" class="level2">
<h2 class="anchored" data-anchor-id="my-enemys-enemy-the-rise-of-korea">My Enemy’s Enemy: The Rise of Korea</h2>
<p>Chapter Twenty-Three narrates the emergence of South Korea as a semiconductor powerhouse. It focuses on Lee Byung-chul, founder of Samsung, who capitalized on the U.S.-Japan semiconductor rivalry to establish South Korea’s semiconductor industry. The chapter details how Silicon Valley, particularly Intel, collaborated with Korean firms like Samsung to counter Japanese dominance in DRAM production. This strategic alliance, driven by economic and geopolitical motives, propelled South Korea to become a leading center for memory chip production.</p>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ol type="1">
<li>The rise of South Korea’s semiconductor industry was influenced by the U.S.-Japan semiconductor competition.</li>
<li>Lee Byung-chul’s vision transformed Samsung from a modest business into a semiconductor superpower.</li>
<li>Samsung’s entry into semiconductor manufacturing was part of South Korea’s broader industrialization strategy.</li>
<li>The U.S. semiconductor industry saw Korean companies as strategic partners against Japanese competition.</li>
<li>Silicon Valley companies, like Intel, formed joint ventures with Korean firms to offset Japanese dominance in DRAMs.</li>
<li>The U.S. government’s trade policies indirectly benefited Korean semiconductor companies.</li>
<li>The transition of South Korea’s economy from basic assembly to cutting-edge chipmaking was a significant technological leap.</li>
<li>Korean firms benefited from lower costs and wages compared to Japan, providing a competitive edge in the global market.</li>
<li>The collaboration between U.S. and Korean companies involved technology transfer and joint production efforts.</li>
<li>South Korea’s emergence as a memory chip production center was a result of strategic alliances, governmental support, and economic necessity.</li>
</ol>
</section>
<section id="facts-2" class="level3">
<h3 class="anchored" data-anchor-id="facts-2">Facts</h3>
<ol type="1">
<li>South Korea’s rise in the semiconductor industry was influenced by the competition between the U.S. and Japan.</li>
<li>Lee Byung-chul transformed Samsung into a major player in the semiconductor sector.</li>
<li>Samsung’s entry into chipmaking was part of South Korea’s industrial strategy, supported by the government.</li>
<li>The U.S. semiconductor industry collaborated with Korean firms to counter Japanese dominance in DRAMs.</li>
<li>Intel and other Silicon Valley companies formed joint ventures with Korean companies like Samsung.</li>
<li>U.S. trade policies with Japan indirectly benefited Korean semiconductor companies.</li>
<li>South Korea’s shift to advanced chipmaking marked a significant technological development.</li>
<li>Lower costs and wages in Korea provided a competitive advantage over Japanese firms.</li>
<li>Technology transfer and joint production were key aspects of U.S.-Korean semiconductor collaborations.</li>
<li>South Korea became one of the world’s leading centers for memory chip production due to strategic alliances and governmental support.</li>
</ol>
</section>
</section>
<section id="this-is-the-future" class="level2">
<h2 class="anchored" data-anchor-id="this-is-the-future">This Is the Future</h2>
<p>Chapter Twenty-Four focuses on the technological advancements and key figures that led to the resurgence of the U.S. semiconductor industry in the late 1980s and early 1990s. It highlights the role of DARPA and other government initiatives in supporting semiconductor research and development, the influence of innovators like Lin Conway and Carver Mead in standardizing chip design, and the impact of Qualcomm’s Irwin Jacobs in wireless communication. The chapter underscores the pivotal shift in chip design methodology and the rise of powerful microprocessors, exemplified by Intel’s 486 microprocessor with 1.2 million transistors.</p>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ol type="1">
<li>The U.S. semiconductor industry’s revival was fueled by a combination of government support, industry collaboration, and technological innovation.</li>
<li>DARPA played a crucial role in funding research and development in semiconductors, contributing to technological breakthroughs.</li>
<li>Innovators like Lin Conway and Carver Mead revolutionized chip design, enabling more complex and powerful microprocessors.</li>
<li>Qualcomm, founded by Irwin Jacobs, leveraged advancements in microprocessors for wireless communications, expanding the scope of semiconductor applications.</li>
<li>The shift to automated chip design methodologies represented a significant technological leap in the semiconductor industry.</li>
<li>The development of the Intel 486 microprocessor, with 1.2 million transistors, marked a milestone in computing power and efficiency.</li>
<li>Government efforts were most effective when they capitalized on pre-existing American strengths in technology and innovation.</li>
<li>The collaboration between academia and industry played a vital role in advancing semiconductor technology and applications.</li>
<li>The evolution of chip design techniques had far-reaching implications for various industries, including computing and telecommunications.</li>
<li>The chapter highlights the dynamic interplay between government policy, scientific research, and industrial innovation in driving technological progress.</li>
</ol>
</section>
<section id="facts-3" class="level3">
<h3 class="anchored" data-anchor-id="facts-3">Facts</h3>
<ol type="1">
<li>The late 1980s and early 1990s saw a resurgence in the U.S. semiconductor industry.</li>
<li>DARPA played a key role in funding semiconductor research and development.</li>
<li>Innovations by Lin Conway and Carver Mead standardized chip design, leading to more advanced microprocessors.</li>
<li>Qualcomm, led by Irwin Jacobs, expanded the use of semiconductors in wireless communications.</li>
<li>The shift to automated chip design methodologies marked a significant advancement in the semiconductor industry.</li>
<li>Intel’s 486 microprocessor with 1.2 million transistors was a significant technological achievement.</li>
<li>Government support was crucial in fostering innovation and technological breakthroughs in the semiconductor sector.</li>
<li>Collaboration between academia and industry was vital for the advancement of semiconductor technology.</li>
<li>The chapter highlights the importance of technological innovation and government policy in driving the semiconductor industry.</li>
<li>The rise of powerful microprocessors had a significant impact on computing and telecommunications.</li>
</ol>
</section>
</section>
<section id="the-kgbs-directorate-t" class="level2">
<h2 class="anchored" data-anchor-id="the-kgbs-directorate-t">The KGB’s Directorate T</h2>
<p>Chapter Twenty-Five examines the Soviet Union’s espionage efforts to acquire Western semiconductor technology. The chapter centers on Vladimir Vetrov, a KGB spy, who was part of Directorate T, a division focused on stealing Western technology, particularly integrated circuits. It details the extensive scale of Soviet espionage, including stealing chips and manufacturing equipment, and the challenges of replicating advanced Western technology in the USSR. The chapter underscores the limitations of the Soviet “copy it” strategy and the significant technological gap between the Soviet Union and the West.</p>
<section id="ideas-4" class="level3">
<h3 class="anchored" data-anchor-id="ideas-4">Ideas</h3>
<ol type="1">
<li>The Soviet Union heavily relied on espionage to acquire Western semiconductor technology.</li>
<li>Directorate T of the KGB played a central role in these efforts, focusing on stealing and replicating Western integrated circuits.</li>
<li>The Soviet strategy of copying Western technology was hindered by their inability to replicate complex manufacturing processes.</li>
<li>Vladimir Vetrov’s involvement in Directorate T highlights the extent of Soviet efforts to bridge the technology gap.</li>
<li>The Soviet Union’s reliance on espionage for technological advancement underscored their lag in innovation.</li>
<li>Soviet espionage targeted not only semiconductor designs but also manufacturing equipment.</li>
<li>Despite extensive efforts, the USSR struggled to keep pace with Western advancements in microprocessor technology.</li>
<li>The Soviet “copy it” strategy was ultimately limited in its effectiveness due to the complexities of semiconductor technology.</li>
<li>The chapter reveals the challenges faced by the Soviet Union in developing a self-sustaining semiconductor industry.</li>
<li>The technological gap between the Soviet Union and the West was significant, despite the USSR’s espionage efforts.</li>
</ol>
</section>
<section id="facts-4" class="level3">
<h3 class="anchored" data-anchor-id="facts-4">Facts</h3>
<ol type="1">
<li>The Soviet Union relied on espionage to gain access to Western semiconductor technology.</li>
<li>Directorate T of the KGB was specifically tasked with stealing Western technology, focusing on integrated circuits.</li>
<li>Soviet efforts to copy Western technology were hindered by manufacturing challenges.</li>
<li>Vladimir Vetrov, a KGB spy, was deeply involved in these espionage activities.</li>
<li>The Soviet “copy it” strategy faced limitations due to the complexities of semiconductor technology.</li>
<li>Soviet espionage included stealing both semiconductor designs and manufacturing equipment.</li>
<li>Despite extensive efforts, the Soviet Union lagged behind the West in microprocessor technology.</li>
<li>The Soviet strategy of replicating Western technology was limited in effectiveness.</li>
<li>The USSR’s reliance on espionage underscored their innovation gap with the West.</li>
<li>The scale of Soviet theft from Western industries was extensive and significant.</li>
</ol>
</section>
</section>
<section id="weapons-of-mass-destruction-the-impact-of-the-offset" class="level2">
<h2 class="anchored" data-anchor-id="weapons-of-mass-destruction-the-impact-of-the-offset">Weapons of Mass Destruction: The Impact of the Offset</h2>
<p>Chapter Twenty-Six discusses the pivotal role of semiconductor technology in modern warfare. It focuses on Soviet Marshal Nikolai Ogarkov’s predictions about the transformation of conventional explosives into weapons of mass destruction through advanced technology. The chapter illustrates how the U.S.’s offset strategy, led by figures like Bill Perry, capitalized on microelectronics to create precision-guided weapons systems, significantly shifting the balance of military power. It also highlights the technological gap between the U.S. and the Soviet Union, with the latter falling behind in semiconductor technology, impacting its military capabilities.</p>
<section id="ideas-5" class="level3">
<h3 class="anchored" data-anchor-id="ideas-5">Ideas</h3>
<ol type="1">
<li>Advances in semiconductor technology fundamentally changed military strategies and capabilities, particularly for the U.S.</li>
<li>The U.S.’s offset strategy involved integrating microelectronics into conventional weapons, enhancing their precision and effectiveness.</li>
<li>Soviet Marshal Nikolai Ogarkov recognized the potential of semiconductors to revolutionize warfare.</li>
<li>The technological gap in semiconductors became a crucial factor in the military balance between the U.S. and the Soviet Union.</li>
<li>Bill Perry’s offset strategy was instrumental in advancing U.S. military technology using semiconductor-based systems.</li>
<li>The Soviet Union struggled to keep pace with the U.S. in developing advanced military technologies due to its lag in semiconductor innovation.</li>
<li>The chapter underscores the strategic importance of semiconductors in national defense and global power dynamics.</li>
<li>Soviet efforts to compensate for their technological lag included espionage and attempts to replicate Western technology.</li>
<li>The U.S.’s advancements in semiconductor technology gave it a significant advantage in precision-guided munitions and missile systems.</li>
<li>The chapter highlights the intersection of technology, military strategy, and geopolitics during the Cold War.</li>
</ol>
</section>
<section id="facts-5" class="level3">
<h3 class="anchored" data-anchor-id="facts-5">Facts</h3>
<ol type="1">
<li>Semiconductor technology played a vital role in modernizing military weaponry and strategies.</li>
<li>The U.S. used its technological edge in semiconductors to develop precision-guided munitions and advanced combat systems.</li>
<li>Soviet Marshal Nikolai Ogarkov acknowledged the transformative potential of advanced technology in warfare.</li>
<li>The Soviet Union lagged behind the U.S. in semiconductor technology, impacting its military capabilities.</li>
<li>Bill Perry’s offset strategy in the U.S. leveraged semiconductor technology to enhance military systems.</li>
<li>The U.S.’s technological advancements in semiconductors provided a significant military advantage.</li>
<li>The Soviet Union’s efforts in semiconductors were hindered by a lack of innovation and reliance on espionage.</li>
<li>The chapter illustrates the critical importance of semiconductors in national defense and global military balance.</li>
<li>American advancements in missile guidance and submarine detection systems were powered by semiconductor technology.</li>
<li>The Soviet Union’s attempts to improve its semiconductor capabilities were largely unsuccessful.</li>
</ol>
</section>
</section>
<section id="war-hero" class="level2">
<h2 class="anchored" data-anchor-id="war-hero">War Hero</h2>
<p>Chapter Twenty-Seven examines the impact of semiconductor technology on modern warfare, particularly during the Persian Gulf War. It highlights the transformation of conventional explosives into precision-guided weapons, largely due to advanced microelectronics. The chapter focuses on the U.S.’s successful use of Paveway bombs and Tomahawk missiles, showcasing the effectiveness of semiconductor-based guidance systems. It underscores the significant shift in warfare brought about by semiconductors, changing the nature of military power and demonstrating the strategic importance of this technology in global conflict.</p>
<section id="ideas-6" class="level3">
<h3 class="anchored" data-anchor-id="ideas-6">Ideas</h3>
<ol type="1">
<li>The Persian Gulf War marked a turning point in the use of semiconductor technology in warfare.</li>
<li>Precision-guided munitions, like Paveway bombs, revolutionized military tactics and effectiveness.</li>
<li>The U.S. military’s reliance on semiconductor-based weapons systems demonstrated their strategic importance in modern conflict.</li>
<li>The success of these weapons systems in the Persian Gulf War highlighted the technological gap between the U.S. and other nations, particularly the Soviet Union.</li>
<li>Advanced microelectronics enabled the development of more accurate, efficient, and lethal weaponry.</li>
<li>The chapter illustrates the profound impact of semiconductors on the character and outcome of wars.</li>
<li>Semiconductor technology transformed conventional explosives into highly precise and destructive tools.</li>
<li>The U.S.’s technological superiority in semiconductors was a key factor in its military success during the Gulf War.</li>
<li>The effectiveness of semiconductor-based weapons systems in the Gulf War altered global perceptions of military power and technology.</li>
<li>The chapter underscores the critical role of semiconductors in shaping modern military capabilities and strategies.</li>
</ol>
</section>
<section id="facts-6" class="level3">
<h3 class="anchored" data-anchor-id="facts-6">Facts</h3>
<ol type="1">
<li>The Persian Gulf War was a significant demonstration of the use of semiconductor technology in modern warfare.</li>
<li>Precision-guided munitions like Paveway bombs played a crucial role in the U.S. military strategy.</li>
<li>The U.S.’s reliance on semiconductor-based weapons systems was a key factor in its military success.</li>
<li>The Gulf War highlighted the technological gap between the U.S. and other nations, including the Soviet Union.</li>
<li>Advanced microelectronics were essential in the development of precision-guided weaponry.</li>
<li>The success of these weapons systems changed the nature of warfare and global military strategies.</li>
<li>Semiconductor technology transformed conventional explosives into highly precise and effective weapons.</li>
<li>The U.S.’s technological superiority in semiconductors contributed significantly to its military capabilities.</li>
<li>The Gulf War altered global perceptions of military power and the importance of technology.</li>
<li>Semiconductors played a critical role in shaping modern military capabilities and strategies.</li>
</ol>
</section>
</section>
<section id="the-cold-war-is-over-and-you-have-won" class="level2">
<h2 class="anchored" data-anchor-id="the-cold-war-is-over-and-you-have-won">The Cold War Is Over and You Have Won</h2>
<p>Chapter Twenty-Eight explores the decline of Japan’s semiconductor industry in the early 1990s and the end of the Cold War. It focuses on Sony co-founder Akio Morita and the economic crisis in Japan, contrasting it with the resurgence of the U.S. The chapter discusses Japan’s overinvestment in semiconductor production and the challenges it faced, including the rise of competitors like Micron and Samsung. The downfall of Japan’s semiconductor dominance and the Soviet Union’s technological lag are highlighted, illustrating the shifts in global power dynamics.</p>
<section id="ideas-7" class="level3">
<h3 class="anchored" data-anchor-id="ideas-7">Ideas</h3>
<ol type="1">
<li>Japan’s semiconductor industry, once dominant, faced a significant decline in the early 1990s.</li>
<li>Sony’s Akio Morita witnessed Japan’s economic downturn and the diminishing influence of Japanese semiconductor firms.</li>
<li>Overinvestment and lack of innovation contributed to the challenges faced by Japan’s semiconductor industry.</li>
<li>The U.S. semiconductor industry regained its leading position, bolstered by companies like Intel, Micron, and Qualcomm.</li>
<li>South Korea, led by firms like Samsung, emerged as a strong competitor in the semiconductor market.</li>
<li>The Soviet Union’s technological backwardness became evident as the Cold War ended, impacting its global position.</li>
<li>The chapter underscores the importance of innovation, efficient investment, and market adaptability in the semiconductor industry.</li>
<li>The decline of Japan’s semiconductor dominance marked a shift in the global economic and technological landscape.</li>
<li>The end of the Cold War highlighted the critical role of technology in global power dynamics.</li>
<li>The U.S.’s resurgence in semiconductors was a combination of strategic moves, technological advancements, and changing market conditions.</li>
</ol>
</section>
<section id="facts-7" class="level3">
<h3 class="anchored" data-anchor-id="facts-7">Facts</h3>
<ol type="1">
<li>Japan’s semiconductor industry faced a significant downturn in the early 1990s.</li>
<li>Akio Morita observed the decline of Japan’s economic and semiconductor influence.</li>
<li>Overinvestment and a lack of innovation were key factors in Japan’s semiconductor challenges.</li>
<li>The U.S. regained its position as a leader in the semiconductor industry.</li>
<li>South Korea emerged as a significant competitor in semiconductors.</li>
<li>The Soviet Union’s technological backwardness became apparent with the end of the Cold War.</li>
<li>The decline of Japan’s semiconductor dominance marked a shift in global technological dynamics.</li>
<li>The end of the Cold War highlighted the importance of technology in global power structures.</li>
<li>The U.S.’s resurgence in the semiconductor industry was due to strategic, technological, and market factors.</li>
<li>Silicon Valley’s success was a key factor in the U.S.’s regained dominance in semiconductors.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/chip-war-book-notes/part-4/</guid>
  <pubDate>Tue, 21 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Chip War Part 3: Leadership Lost?</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/chip-war-book-notes/part-3/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/chip-war-book-notes.html"><strong>Chip War: The Fight for the World’s Most Critical Technology</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>That Competition is Tough</li>
<li>At War with Japan</li>
<li>Shipping Junk</li>
<li>The Crude Oil of the 1980s</li>
<li>Death Spiral</li>
<li>The Japan That Can Say No</li>
</ul>
<section id="that-competition-is-tough" class="level2">
<h2 class="anchored" data-anchor-id="that-competition-is-tough">That Competition is Tough</h2>
<p>Chapter Fifteen delves into the intense competition faced by the U.S. semiconductor sector in the 1980s, particularly from Japan. It centers on the struggles of American companies like Intel and Texas Instruments against Japanese firms such as Toshiba and NEC, known for producing high-quality DRAM chips. The chapter highlights the shift in global semiconductor dynamics, with Japanese companies excelling in quality and efficiency, challenging American technological dominance. This competition spurred significant changes in the U.S. industry, impacting companies, policies, and the broader technological landscape.</p>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ol type="1">
<li>The 1980s were a challenging decade for the U.S. semiconductor industry due to intense competition from Japan.</li>
<li>Japanese firms like Toshiba and NEC gained a significant edge in producing high-quality DRAM chips.</li>
<li>American companies underestimated Japanese competitors, who excelled in quality and efficiency.</li>
<li>Hewlett-Packard’s Richard Anderson found Japanese chips to have far lower failure rates than American counterparts.</li>
<li>The quality gap between American and Japanese chips raised questions about the viability of U.S. products in the market.</li>
<li>Japan’s rise in consumer electronics was marked by high-quality products, challenging American economic preeminence.</li>
<li>The success of Japanese companies like Sony in consumer electronics was a result of both innovation and efficient mass manufacturing.</li>
<li>American beliefs in their innovation superiority were challenged by the practical successes of Japanese firms.</li>
<li>The U.S. post-war strategy of supporting Japan’s technological development contributed to the rise of its semiconductor industry.</li>
<li>The competition from Japan caused concern in the U.S. about losing its technological edge.</li>
<li>The efficiency and productivity of Japanese semiconductor manufacturing were seen as a significant threat to American companies.</li>
<li>The shift in the semiconductor industry was part of a broader trend of Japanese excellence in various industries.</li>
<li>The U.S. semiconductor sector’s struggles reflected broader changes in global economic and technological dynamics.</li>
<li>The competition from Japan forced American semiconductor companies to reevaluate their strategies and practices.</li>
<li>The chapter highlights the global nature of the semiconductor industry and the interplay of national strategies, corporate competition, and technological innovation.</li>
</ol>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ol type="1">
<li>The 1980s were marked by intense competition in the U.S. semiconductor industry from Japanese firms.</li>
<li>Japanese companies like Toshiba and NEC produced high-quality DRAM chips, challenging U.S. dominance.</li>
<li>American semiconductor companies initially underestimated the capabilities of their Japanese counterparts.</li>
<li>Hewlett-Packard’s analysis revealed that Japanese chips had significantly lower failure rates than American ones.</li>
<li>Japan’s rise in consumer electronics was characterized by high-quality and efficient manufacturing.</li>
<li>The success of Japanese firms in the global market challenged the belief in American innovation superiority.</li>
<li>The U.S. post-war strategy contributed to the technological rise of Japan, particularly in semiconductors.</li>
<li>The competition from Japan raised concerns in the U.S. about maintaining its technological edge.</li>
<li>American semiconductor companies faced challenges in matching the efficiency and productivity of Japanese manufacturing.</li>
<li>The struggle of the U.S. semiconductor sector in the 1980s reflected broader shifts in global economic and technological dynamics.</li>
</ol>
</section>
</section>
<section id="at-war-with-japan" class="level2">
<h2 class="anchored" data-anchor-id="at-war-with-japan">At War with Japan</h2>
<p>Chapter Sixteen chronicles the fierce competition between U.S. and Japanese semiconductor companies in the 1980s. Focusing on Jerry Sanders, CEO of Advanced Micro Devices, and Charlie Spork, the chapter explores the challenges faced by American firms like Intel and AMD in competing with Japanese companies such as Toshiba and NEC. It delves into issues of intellectual property, espionage, market access, and the advantages Japanese firms held in quality, government support, and capital access, painting a picture of a high-stakes economic battle in the semiconductor industry.</p>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ol type="1">
<li>The 1980s semiconductor industry was marked by intense competition between American and Japanese companies.</li>
<li>Japanese firms, like Toshiba and NEC, gained an edge in the DRAM market, challenging U.S. companies.</li>
<li>American semiconductor firms faced difficulties in competing with the quality and efficiency of Japanese products.</li>
<li>Intellectual property disputes and accusations of espionage added to the tensions between U.S. and Japanese companies.</li>
<li>The U.S. struggled with market access in Japan, where domestic firms dominated semiconductor sales.</li>
<li>Japanese government policies, including subsidies and collaboration encouragement, supported their semiconductor industry.</li>
<li>U.S. companies faced higher capital costs, impacting their competitiveness against Japanese firms.</li>
<li>The competition highlighted the strategic importance of the semiconductor industry in global economic and technological leadership.</li>
<li>Silicon Valley firms had to adapt to the aggressive market strategies and efficient production models of Japanese companies.</li>
<li>The rivalry reflected broader economic and political dynamics between the U.S. and Japan during this period.</li>
<li>The U.S. semiconductor industry’s struggles were indicative of changing global economic and technological landscapes.</li>
<li>The semiconductor battle was not just about technology, but also about national pride, economic policies, and global influence.</li>
<li>Accusations of unfair competition and trade practices were rampant between the U.S. and Japan.</li>
<li>The high stakes of the semiconductor industry led to legal battles, political interventions, and strategic corporate maneuvers.</li>
<li>This period marked a critical phase in the history of the semiconductor industry, with lasting impacts on the global technological landscape.</li>
</ol>
</section>
<section id="facts-1" class="level3">
<h3 class="anchored" data-anchor-id="facts-1">Facts</h3>
<ol type="1">
<li>The 1980s semiconductor industry was dominated by competition between U.S. and Japanese firms.</li>
<li>Japanese companies gained a significant edge in DRAM technology, challenging U.S. dominance.</li>
<li>American semiconductor firms faced challenges in quality and efficiency compared to their Japanese counterparts.</li>
<li>Intellectual property and espionage were key issues in the U.S.-Japan semiconductor rivalry.</li>
<li>Market access in Japan was a major hurdle for U.S. semiconductor companies.</li>
<li>Japanese government policies supported the domestic semiconductor industry with subsidies and collaborative initiatives.</li>
<li>High capital costs were a significant disadvantage for U.S. semiconductor firms against Japanese competition.</li>
<li>The competition between U.S. and Japanese semiconductor companies had far-reaching economic and political implications.</li>
<li>Silicon Valley had to adapt to the aggressive strategies and efficient production models of Japanese semiconductor companies.</li>
<li>The rivalry between the U.S. and Japan in the semiconductor sector was reflective of broader economic and political tensions.</li>
</ol>
</section>
</section>
<section id="shipping-junk" class="level2">
<h2 class="anchored" data-anchor-id="shipping-junk">Shipping Junk</h2>
<p>Chapter Seventeen discusses the decline of America’s lithography industry, focusing on GCA Corporation. It traces GCA’s journey from a leader in photolithography equipment to a company struggling amid intense competition, particularly from Japan. The chapter highlights CEO Milton Greenberg’s ambitious but ultimately flawed management, detailing GCA’s challenges in maintaining market dominance, manufacturing quality, and customer service. It exemplifies the broader challenges faced by U.S. high-tech firms in the 1980s, contrasting with Japan’s rising dominance in the semiconductor industry.</p>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ol type="1">
<li>GCA Corporation’s decline mirrored the broader challenges faced by the U.S. semiconductor industry in the 1980s.</li>
<li>Milton Greenberg’s leadership at GCA was marked by ambition but lacked focus on essential business aspects.</li>
<li>GCA initially led the lithography market but struggled with manufacturing quality and customer service.</li>
<li>The company’s decline was exacerbated by competition from Japanese firms like Nikon, which provided better technology and customer responsiveness.</li>
<li>The U.S. semiconductor industry’s struggle was partly due to high-tech firms not adapting to changing market demands and manufacturing standards.</li>
<li>Mismanagement and operational inefficiencies contributed significantly to GCA’s decline.</li>
<li>GCA’s inability to keep up with technological advancements and market trends led to a loss of market share.</li>
<li>The story of GCA highlights the shift in global semiconductor dominance from the U.S. to Japan in the 1980s.</li>
<li>The chapter illustrates the consequences of failing to innovate and maintain quality in a highly competitive industry.</li>
<li>GCA’s downfall serves as a cautionary tale about the importance of customer service, manufacturing quality, and adaptability in high-tech industries.</li>
</ol>
</section>
<section id="facts-2" class="level3">
<h3 class="anchored" data-anchor-id="facts-2">Facts</h3>
<ol type="1">
<li>GCA Corporation was a leading American company in photolithography equipment in the 1980s.</li>
<li>CEO Milton Greenberg’s management style was marked by ambition but lacked essential business focus.</li>
<li>GCA struggled with maintaining manufacturing quality and customer service amid intense competition.</li>
<li>The company faced significant challenges from Japanese competitors, notably Nikon.</li>
<li>Operational inefficiencies and mismanagement were key factors in GCA’s decline.</li>
<li>GCA’s downfall was part of a broader trend of U.S. high-tech firms struggling in the 1980s.</li>
<li>The U.S. semiconductor industry’s challenges were contrasted with Japan’s rising dominance.</li>
<li>GCA’s decline highlights the importance of innovation, quality control, and customer responsiveness in the semiconductor industry.</li>
<li>The story of GCA illustrates the shift in global semiconductor industry dominance from the U.S. to Japan.</li>
<li>The chapter sheds light on the consequences of failing to adapt to changing technological and market dynamics in high-tech industries.</li>
</ol>
</section>
</section>
<section id="the-crude-oil-of-the-1980s" class="level2">
<h2 class="anchored" data-anchor-id="the-crude-oil-of-the-1980s">The Crude Oil of the 1980s</h2>
<p>Chapter Eighteen covers the U.S. semiconductor industry’s response to Japanese competition in the 1980s. It highlights a pivotal meeting of tech leaders like Bob Noyce, Jerry Sanders, and Charlie Spork at Ming’s Chinese restaurant in Palo Alto, where they strategized to seek government support. The chapter emphasizes the strategic importance of semiconductors, likened to crude oil, underscoring their essential role in military and civilian technology. It details the U.S. industry’s efforts, including the formation of the Semiconductor Industry Association, to lobby Washington for support against Japan’s growing dominance, which was seen as a national security issue.</p>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ol type="1">
<li>The U.S. semiconductor industry in the 1980s faced significant challenges due to Japanese competition.</li>
<li>Industry leaders, realizing the strategic importance of semiconductors, likened them to “the crude oil of the 1980s.”</li>
<li>The meeting at Ming’s Chinese restaurant marked a shift in the industry’s approach, from competition to collaboration and seeking government support.</li>
<li>Semiconductors were crucial not just for consumer electronics but also for military applications, making them a national security concern.</li>
<li>The formation of the Semiconductor Industry Association was a response to the need for a unified front in lobbying Washington.</li>
<li>Japan’s advancements in semiconductors and lithography equipment threatened U.S. technological and military superiority.</li>
<li>The U.S. semiconductor industry’s lobbying efforts were aimed at countering Japan’s subsidies and market dominance.</li>
<li>The chapter highlights the interplay between technology, economics, and national security in the context of the semiconductor industry.</li>
<li>The U.S. military’s dependence on advanced semiconductor technology underscored the urgency of supporting the domestic industry.</li>
<li>The semiconductor competition between the U.S. and Japan reflected broader global economic and geopolitical dynamics.</li>
</ol>
</section>
<section id="facts-3" class="level3">
<h3 class="anchored" data-anchor-id="facts-3">Facts</h3>
<ol type="1">
<li>In the 1980s, the U.S. semiconductor industry was challenged by Japanese competition.</li>
<li>Industry leaders likened semiconductors to crude oil due to their strategic importance.</li>
<li>A pivotal meeting at Ming’s Chinese restaurant led to a new strategy for the U.S. semiconductor industry.</li>
<li>Semiconductors were essential for both civilian technology and military applications.</li>
<li>The Semiconductor Industry Association was formed to lobby for government support.</li>
<li>Japan’s growing dominance in semiconductors was seen as a threat to U.S. technological and military superiority.</li>
<li>The U.S. semiconductor industry lobbied Washington to counter Japanese subsidies and market control.</li>
<li>The U.S. military’s reliance on semiconductors highlighted the industry’s national security importance.</li>
<li>The competition between the U.S. and Japan in semiconductors had significant economic and geopolitical implications.</li>
<li>The chapter emphasizes the critical role of semiconductors in global technology and security landscapes.</li>
</ol>
</section>
</section>
<section id="death-spiral" class="level2">
<h2 class="anchored" data-anchor-id="death-spiral">Death Spiral</h2>
<p>Chapter Nineteen discusses the struggles of the U.S. semiconductor industry in the late 1980s. It focuses on the decline of GCA Corporation, a leader in photolithography equipment, amidst fierce Japanese competition. Bob Noyce, a key figure in the semiconductor industry, reflects on the challenges faced by American companies, including intellectual property disputes, market access issues, and the need for government support. The chapter highlights the strategic importance of semiconductors, likened to crude oil, and details the industry’s efforts, including the creation of Sematech, to regain competitiveness.</p>
<section id="ideas-4" class="level3">
<h3 class="anchored" data-anchor-id="ideas-4">Ideas</h3>
<ol type="1">
<li>The U.S. semiconductor industry in the late 1980s was in a “death spiral” due to intense Japanese competition.</li>
<li>GCA Corporation’s decline exemplified the broader challenges facing American semiconductor companies.</li>
<li>Intellectual property disputes and market access issues were significant hurdles for U.S. firms.</li>
<li>Semiconductors were seen as strategically vital, akin to crude oil, due to their importance in technology and defense.</li>
<li>The U.S. government’s support was sought to counterbalance Japanese dominance in the semiconductor market.</li>
<li>Sematech was created as a consortium to enhance the competitiveness of U.S. semiconductor firms.</li>
<li>Bob Noyce’s involvement in Sematech was crucial, given his stature in the industry.</li>
<li>The U.S. semiconductor industry’s challenges reflected broader economic and technological shifts globally.</li>
<li>GCA Corporation struggled with mismanagement and an inability to compete with Japanese technological advancements.</li>
<li>The U.S. semiconductor industry’s struggles were symptomatic of the declining competitiveness of American high-tech industries.</li>
</ol>
</section>
<section id="facts-4" class="level3">
<h3 class="anchored" data-anchor-id="facts-4">Facts</h3>
<ol type="1">
<li>The late 1980s were a challenging period for the U.S. semiconductor industry due to Japanese competition.</li>
<li>GCA Corporation’s decline was indicative of the broader struggles of American semiconductor firms.</li>
<li>Intellectual property disputes and market access issues were significant challenges for U.S. companies.</li>
<li>Semiconductors were regarded as strategically crucial, similar to crude oil, due to their role in technology and defense.</li>
<li>The creation of Sematech was an industry response to improve U.S. competitiveness in semiconductors.</li>
<li>Bob Noyce, a prominent figure in the semiconductor industry, was heavily involved in Sematech.</li>
<li>The struggles of the U.S. semiconductor industry mirrored wider economic and technological changes globally.</li>
<li>GCA Corporation faced difficulties due to mismanagement and competition with Japanese technology.</li>
<li>The U.S. semiconductor industry’s difficulties were symptomatic of declining American competitiveness in high-tech sectors.</li>
<li>The U.S. government’s support was sought to help American semiconductor companies compete with Japanese firms.</li>
</ol>
</section>
</section>
<section id="the-japan-that-can-say-no" class="level2">
<h2 class="anchored" data-anchor-id="the-japan-that-can-say-no">The Japan That Can Say No</h2>
<p>Chapter Twenty discusses the rise of Japanese power and influence in the semiconductor industry. It focuses on Sony co-founder Akio Morita and his perspective on Japan’s technological and economic ascent. The chapter portrays Morita as a key figure in redefining Japan’s image from a producer of low-cost goods to a leader in high-tech industries. It delves into the changing dynamics of U.S.-Japan relations, highlighting the shift in economic power and the growing confidence of Japanese leaders in asserting their country’s technological and economic strengths.</p>
<section id="ideas-5" class="level3">
<h3 class="anchored" data-anchor-id="ideas-5">Ideas</h3>
<ol type="1">
<li>Japan’s transformation into a high-tech powerhouse was symbolized by Sony’s global success and Morita’s influence.</li>
<li>Morita played a significant role in changing Japan’s international image from a producer of cheap goods to a high-tech leader.</li>
<li>The success of Japanese companies in consumer electronics and semiconductors reshaped global economic dynamics.</li>
<li>Japan’s technological advancements led to a reassessment of its role in the global economy and politics.</li>
<li>Morita’s leadership at Sony demonstrated the potential of Japanese innovation and business acumen.</li>
<li>The book “The Japan That Can Say No,” co-authored by Morita, reflected a newfound assertiveness in Japanese foreign policy.</li>
<li>The changing U.S.-Japan relationship was marked by Japan’s growing confidence in challenging American economic and technological dominance.</li>
<li>Japanese advancements in semiconductors were seen as a strategic challenge to the U.S., particularly in the context of military technology.</li>
<li>The rise of Japan as a technological power led to a reevaluation of the global balance of power.</li>
<li>Morita’s views expressed in the book indicated a shift in Japanese attitudes towards the U.S., moving from deference to a more equal footing.</li>
</ol>
</section>
<section id="facts-5" class="level3">
<h3 class="anchored" data-anchor-id="facts-5">Facts</h3>
<ol type="1">
<li>Japan transformed into a global leader in high-tech industries, symbolized by Sony’s success under Akio Morita.</li>
<li>Morita influenced Japan’s international image, shifting it from a producer of cheap goods to a high-tech leader.</li>
<li>The success of Japanese companies in consumer electronics and semiconductors had a significant impact on global economic dynamics.</li>
<li>Japan’s technological advancements led to changes in its global economic and political role.</li>
<li>The book “The Japan That Can Say No,” co-authored by Morita, expressed a new assertiveness in Japanese foreign policy.</li>
<li>The U.S.-Japan relationship evolved with Japan gaining confidence in challenging American dominance.</li>
<li>Japanese advancements in semiconductors posed a strategic challenge to the U.S., particularly in military technology.</li>
<li>Japan’s rise as a technological power led to a reevaluation of the global balance of power.</li>
<li>Morita’s views in the book indicated a shift in Japanese attitudes toward the U.S.</li>
<li>The rise of Japanese semiconductor technology was seen as part of an emerging Pax Nipponica.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/chip-war-book-notes/part-3/</guid>
  <pubDate>Tue, 21 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Chip War Part 2: The Circuitry of the American World</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/chip-war-book-notes/part-2/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/chip-war-book-notes.html"><strong>Chip War: The Fight for the World’s Most Critical Technology</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Soviet Silicon Valley</li>
<li>Copy It</li>
<li>The Transistor Salesman</li>
<li>Transistor Girls</li>
<li>Precision Strike</li>
<li>Supply Chain Statecraft</li>
<li>Intel’s Revolutionaries</li>
<li>The Pentagon’s Offset Strategy</li>
</ul>
<section id="soviet-silicon-valley" class="level2">
<h2 class="anchored" data-anchor-id="soviet-silicon-valley">Soviet Silicon Valley</h2>
<p>Chapter Seven explores the Soviet Union’s response to the U.S.’s advancements in semiconductor technology during the Cold War. It highlights Anatoly Trutko, a Soviet semiconductor engineer who studied in the U.S., and the USSR’s efforts to build its own semiconductor industry. The chapter details how the Soviet Union, recognizing the strategic importance of semiconductors, invested heavily in this technology, including creating Zelenograd, a city dedicated to semiconductor research and production, mirroring Silicon Valley.</p>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ol type="1">
<li>The Cold War era was marked by intense competition in semiconductor technology between the U.S. and the USSR.</li>
<li>Soviet scientists, like Anatoly Trutko, were sent to the U.S. to study advanced semiconductor technologies.</li>
<li>The Soviet Union recognized the strategic importance of semiconductors in both civilian and military applications.</li>
<li>The USSR’s efforts in semiconductor research were part of a broader strategy to compete with the U.S. in technology.</li>
<li>Zelenograd, the “Soviet Silicon Valley,” was established to concentrate efforts in semiconductor development.</li>
<li>Soviet semiconductor advancements were heavily influenced by what they learned from the U.S. and their own innovations.</li>
<li>The KGB’s involvement in the Soviet semiconductor industry illustrates the technology’s importance in espionage and defense.</li>
<li>The Soviets’ translation of William Shockley’s textbook into Russian underscored their commitment to semiconductor education.</li>
<li>The CIA monitored Soviet advancements in semiconductors to gauge the technological gap between the superpowers.</li>
<li>The story of Joel Barr, a Soviet spy who contributed significantly to Soviet semiconductor efforts, highlights the Cold War’s clandestine nature.</li>
</ol>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ol type="1">
<li>The Soviet Union actively pursued semiconductor technology during the Cold War.</li>
<li>Anatoly Trutko, a Soviet engineer, studied semiconductors at Stanford University.</li>
<li>The USSR viewed semiconductors as crucial for both civilian and military uses.</li>
<li>Zelenograd was established as a center for semiconductor research and production in the USSR.</li>
<li>Soviet advancements in semiconductors were partially influenced by U.S. technologies and strategies.</li>
<li>The KGB played a role in the Soviet semiconductor industry, reflecting its strategic importance.</li>
<li>The CIA closely monitored the Soviet Union’s progress in semiconductor technology.</li>
<li>Nikita Khrushchev saw semiconductor technology as a key area to compete with the U.S.</li>
<li>The USSR’s semiconductor industry was a mix of espionage, state-driven initiatives, and scientific research.</li>
<li>Soviet efforts in semiconductors were aimed at achieving technological parity with the U.S.</li>
</ol>
</section>
</section>
<section id="copy-it" class="level2">
<h2 class="anchored" data-anchor-id="copy-it">Copy It</h2>
<p>Chapter Eight examines the Soviet Union’s approach to semiconductor technology during the Cold War. It details the USSR’s efforts to replicate American semiconductor designs, particularly focusing on the directive of Soviet official Alexander Shokhin to copy a Texas Instruments integrated circuit. The chapter delves into the limitations and challenges of the Soviet “copy it” strategy, highlighting the difficulties in replicating complex manufacturing processes and the rapid advancements in semiconductor technology led by companies like TI and Fairchild.</p>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ol type="1">
<li>The Soviet Union’s semiconductor strategy during the Cold War heavily relied on copying American technology.</li>
<li>Soviet scientists, like Boris Malin, were tasked with reverse-engineering Western semiconductor devices.</li>
<li>The USSR struggled with the complex manufacturing processes required for high-quality chip production.</li>
<li>Soviet reliance on espionage and copying reflected a fundamental misunderstanding of the semiconductor industry’s dynamics.</li>
<li>The rapid advancement of semiconductor technology in the West, driven by Moore’s Law, made it difficult for the Soviet Union to keep pace.</li>
<li>The Soviet semiconductor industry was hindered by a lack of access to advanced materials and manufacturing techniques.</li>
<li>American companies like Texas Instruments and Fairchild Semiconductor were continually innovating, leaving Soviet counterparts behind.</li>
<li>The Soviet focus on military applications limited the scope for creativity and civilian product development in their semiconductor industry.</li>
<li>The CoCom restrictions imposed by Western allies significantly impacted the Soviet Union’s ability to access advanced technologies.</li>
<li>The Soviet “copy it” strategy resulted in an industry that was always several steps behind its American counterparts.</li>
</ol>
</section>
<section id="facts-1" class="level3">
<h3 class="anchored" data-anchor-id="facts-1">Facts</h3>
<ol type="1">
<li>The Soviet Union attempted to replicate American semiconductor technology during the Cold War.</li>
<li>Soviet scientists, including Boris Malin, were involved in reverse-engineering efforts.</li>
<li>The USSR faced significant challenges in matching the quality of Western semiconductor manufacturing.</li>
<li>Soviet semiconductor strategy was largely reactive, focusing on copying rather than innovating.</li>
<li>The rapid advancement of semiconductor technology in the West, exemplified by Moore’s Law, outpaced Soviet efforts.</li>
<li>Soviet semiconductor industry was heavily centralized and state-controlled.</li>
<li>Restrictions by Western allies limited the USSR’s access to advanced semiconductor technologies.</li>
<li>The Soviet focus on military applications limited their semiconductor industry’s scope for civilian innovation.</li>
<li>Soviet semiconductor facilities often used less sophisticated equipment and materials.</li>
<li>The Soviet Union’s semiconductor industry was fundamentally behind its American counterparts due to its reactive strategy.</li>
</ol>
</section>
</section>
<section id="the-transistor-salesman" class="level2">
<h2 class="anchored" data-anchor-id="the-transistor-salesman">The Transistor Salesman</h2>
<p>Chapter Nine discusses Japan’s rise in the semiconductor industry. It focuses on the role of Japanese Prime Minister Hayato Ikeda and Sony co-founder Akio Morita in embracing and promoting transistor technology. The chapter illustrates Japan’s strategic integration into America’s semiconductor industry, highlighting the transition from post-war recovery to becoming a global leader in consumer electronics, driven by innovation, licensing agreements, and government support.</p>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ol type="1">
<li>Japan’s post-World War II recovery included a strategic focus on semiconductor technology.</li>
<li>Akio Morita and Sony played a pivotal role in Japan’s semiconductor industry development.</li>
<li>The U.S. government’s support of Japan’s technological growth was part of its Cold War strategy.</li>
<li>Japan’s integration into the global semiconductor market was deliberate and supported by business elites.</li>
<li>The transistor’s introduction to Japan marked the beginning of a significant shift in the electronics industry.</li>
<li>Japanese companies, like Sony, focused on consumer electronics, diversifying from the American focus on computing and military applications.</li>
<li>Licensing agreements with American firms were crucial for Japan’s access to semiconductor technology.</li>
<li>Sony’s initial ventures in transistor radios revolutionized consumer electronics.</li>
<li>Japan’s government policies played a significant role in supporting and regulating the electronics industry.</li>
<li>The development of the Japanese semiconductor industry was marked by a focus on innovation, product design, and marketing.</li>
</ol>
</section>
<section id="facts-2" class="level3">
<h3 class="anchored" data-anchor-id="facts-2">Facts</h3>
<ol type="1">
<li>Japan’s post-war strategy included a focus on developing semiconductor technology.</li>
<li>Akio Morita and Sony were instrumental in Japan’s rise in the semiconductor industry.</li>
<li>The U.S. government supported Japan’s technological development as part of its Cold War strategy.</li>
<li>Japan strategically integrated into the global semiconductor market with support from its business elites.</li>
<li>Sony’s venture into transistor radios was pivotal in revolutionizing consumer electronics.</li>
<li>Licensing agreements with American companies were key for Japan’s access to semiconductor technology.</li>
<li>The Japanese government played a significant role in supporting and regulating the electronics industry.</li>
<li>Japan’s focus on consumer electronics differentiated it from the American focus on computing and military applications.</li>
<li>Japanese companies’ success in global electronics markets was marked by manufacturing efficiency and market adaptiveness.</li>
<li>Collaboration between Japanese and American companies was crucial in the spread of semiconductor technology globally.</li>
</ol>
</section>
</section>
<section id="transistor-girls" class="level2">
<h2 class="anchored" data-anchor-id="transistor-girls">Transistor Girls</h2>
<p>Chapter Ten delves into the role of labor, particularly women’s labor, in the semiconductor industry’s growth. It explores how companies like Fairchild Semiconductor, led by figures like Charlie Sporck, shifted semiconductor assembly to Asia, capitalizing on low labor costs and lax labor laws. The chapter discusses the establishment of facilities in Hong Kong, Singapore, and Malaysia, highlighting the industry’s globalization and the exploitation of cheap, predominantly female labor.</p>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ol type="1">
<li>The semiconductor industry’s expansion relied heavily on cheap, skilled labor, particularly women.</li>
<li>Charlie Sporck’s drive for efficiency led to the offshoring of semiconductor assembly to Asia.</li>
<li>Fairchild Semiconductor was among the first to move assembly operations to Hong Kong due to lower labor costs.</li>
<li>Women were preferred in assembly line jobs due to perceived dexterity and willingness to tolerate monotonous work.</li>
<li>The semiconductor industry’s globalization began decades before it became a widespread phenomenon.</li>
<li>Asian countries like Malaysia, Singapore, and South Korea became key sites for semiconductor assembly due to low labor costs.</li>
<li>The move to Asia for chip assembly was driven by financial motives, not a strategic plan for globalization.</li>
<li>Semiconductor firms faced union challenges in the U.S. but not in Asian countries.</li>
<li>Foreign policy strategies of the U.S. saw Asian workers as vulnerable to communist influence, while industry leaders saw them as a workforce opportunity.</li>
<li>The semiconductor industry’s shift to Asia laid the groundwork for today’s Asia-centric supply chains.</li>
</ol>
</section>
<section id="facts-3" class="level3">
<h3 class="anchored" data-anchor-id="facts-3">Facts</h3>
<ol type="1">
<li>Women played a crucial role in the assembly of semiconductors, especially in Asian facilities.</li>
<li>Charlie Sporck’s management at Fairchild Semiconductor led to the offshoring of assembly operations to Asia.</li>
<li>Fairchild was one of the first semiconductor firms to establish assembly facilities in Hong Kong.</li>
<li>Lower labor costs in Asia were a primary driver for the semiconductor industry’s shift to the region.</li>
<li>The semiconductor industry’s globalization began in the 1960s, well before it became common in other industries.</li>
<li>Countries like Malaysia, Singapore, and South Korea became central to semiconductor assembly due to low wages.</li>
<li>The decision to move assembly operations to Asia was primarily financially motivated.</li>
<li>The semiconductor industry faced labor union challenges in the U.S. but not in Asian countries.</li>
<li>The shift to Asia for semiconductor assembly laid the groundwork for modern supply chains centered in the region.</li>
<li>The exploitation of cheap labor in Asia was instrumental in maintaining low semiconductor production costs.</li>
</ol>
</section>
</section>
<section id="precision-strike" class="level2">
<h2 class="anchored" data-anchor-id="precision-strike">Precision Strike</h2>
<p>Chapter Eleven examines the impact of semiconductor technology on warfare, focusing on the Vietnam War. It details how Texas Instruments (TI) developed advanced weaponry, specifically precision-guided munitions, leveraging semiconductor electronics. The chapter highlights the transformation of aerial bombing tactics with the introduction of laser-guided bombs, illustrating the pivotal role of microelectronics in modern military technology and the significant shift in warfare strategies.</p>
<section id="ideas-4" class="level3">
<h3 class="anchored" data-anchor-id="ideas-4">Ideas</h3>
<ol type="1">
<li>The Vietnam War saw a significant evolution in military technology, heavily influenced by advancements in semiconductors.</li>
<li>Texas Instruments played a crucial role in developing precision-guided munitions, changing the nature of aerial bombing.</li>
<li>Semiconductor technology enabled the creation of laser-guided bombs, drastically improving accuracy and effectiveness.</li>
<li>The development of these advanced weapons systems was a result of combining microelectronics with traditional weaponry.</li>
<li>The introduction of precision-guided munitions marked a shift from quantity to quality in aerial bombing strategies.</li>
<li>The Vietnam War served as a testing ground for new military technologies that would later revolutionize warfare.</li>
<li>TI’s innovations in weapon design reflected the broader impact of semiconductors on military capabilities.</li>
<li>The use of semiconductors in military technology highlighted the growing intersection between technology and warfare.</li>
<li>Precision-guided munitions, like those developed by TI, became essential tools in modern military arsenals.</li>
<li>The development of these technologies was driven by the need for more effective and efficient military strategies.</li>
</ol>
</section>
<section id="facts-4" class="level3">
<h3 class="anchored" data-anchor-id="facts-4">Facts</h3>
<ol type="1">
<li>The Vietnam War saw the introduction of semiconductor-based precision-guided munitions.</li>
<li>Texas Instruments developed laser-guided bombs, significantly enhancing aerial bombing accuracy.</li>
<li>Semiconductor technology was crucial in the development of these advanced military weapons.</li>
<li>The use of precision-guided munitions marked a strategic shift in military tactics.</li>
<li>The Vietnam War served as a proving ground for new military technologies involving semiconductors.</li>
<li>The integration of microelectronics into military equipment revolutionized warfare strategies.</li>
<li>TI’s role in developing these technologies highlighted the intersection of commercial technology and military applications.</li>
<li>The introduction of these advanced weapons changed the nature of aerial combat and military strategy.</li>
<li>Laser-guided bombs represented a major advancement in the efficiency and effectiveness of aerial bombing.</li>
<li>The Vietnam War’s challenges spurred significant innovation in military technology.</li>
</ol>
</section>
</section>
<section id="supply-chain-statecraft" class="level2">
<h2 class="anchored" data-anchor-id="supply-chain-statecraft">Supply Chain Statecraft</h2>
<p>Chapter Twelve examines the strategic expansion of semiconductor supply chains into Asia, focusing on Taiwan. It details the efforts of Texas Instruments (TI) executive Mark Shepherd and Morris Chang in establishing semiconductor facilities in Taiwan. The chapter highlights the geopolitical and economic motivations behind this move, illustrating how semiconductors became integral to Taiwan’s economic development and U.S.-Asia relations, particularly amid the Vietnam War and rising tensions with China.</p>
<section id="ideas-5" class="level3">
<h3 class="anchored" data-anchor-id="ideas-5">Ideas</h3>
<ol type="1">
<li>The expansion of semiconductor supply chains to Asia, particularly Taiwan, was a strategic economic and geopolitical decision.</li>
<li>Mark Shepherd of Texas Instruments played a pivotal role in offshoring production to Taiwan.</li>
<li>Morris Chang, an influential figure in the semiconductor industry, was instrumental in TI’s expansion into Taiwan.</li>
<li>The move was motivated by low labor costs, favorable business climates, and geopolitical considerations during the Cold War.</li>
<li>Taiwan’s integration into the global semiconductor supply chain was part of a broader strategy to counter communist influence in Asia.</li>
<li>The development of semiconductor facilities in Taiwan bolstered the island’s economy and political stability.</li>
<li>The U.S. foreign policy during the Vietnam War era viewed semiconductor investments in Asia as a means to strengthen anti-communist allies.</li>
<li>The establishment of semiconductor plants in Taiwan and other Asian countries was also driven by the need for cheaper labor and manufacturing costs.</li>
<li>The semiconductor industry played a significant role in the economic transformation of Taiwan and other Asian countries.</li>
<li>The shift of semiconductor manufacturing to Asia marked the beginning of a new era in global technology and supply chain dynamics.</li>
</ol>
</section>
<section id="facts-5" class="level3">
<h3 class="anchored" data-anchor-id="facts-5">Facts</h3>
<ol type="1">
<li>Texas Instruments expanded semiconductor production to Taiwan as part of a strategic decision.</li>
<li>Mark Shepherd and Morris Chang were key figures in TI’s expansion into Taiwan.</li>
<li>The decision was influenced by low labor costs and geopolitical considerations during the Cold War.</li>
<li>The establishment of semiconductor facilities in Taiwan was part of a broader anti-communist strategy in Asia.</li>
<li>Semiconductor investments in Taiwan and other Asian countries were driven by both economic and political motives.</li>
<li>The expansion of semiconductor manufacturing to Asia was a significant shift in global technology and supply chains.</li>
<li>Taiwan’s economic development was significantly impacted by the semiconductor industry.</li>
<li>The U.S. foreign policy during the Vietnam War era influenced semiconductor investments in Asia.</li>
<li>The semiconductor industry’s growth in Asia reshaped the region’s economic and political dynamics.</li>
<li>The relocation of semiconductor manufacturing to Asia created new global technology hubs.</li>
</ol>
</section>
</section>
<section id="intels-revolutionaries" class="level2">
<h2 class="anchored" data-anchor-id="intels-revolutionaries">Intel’s Revolutionaries</h2>
<p>Chapter Thirteen focuses on the founding of Intel in 1968 by Bob Noyce and Gordon Moore. The chapter details Intel’s groundbreaking work in developing Dynamic Random Access Memory (DRAM) and the microprocessor, setting the stage for the modern computing era. It highlights the cultural and technological shifts of the late 1960s, contrasting the societal upheavals with the quieter but revolutionary developments at Intel that would profoundly impact technology and society.</p>
<section id="ideas-6" class="level3">
<h3 class="anchored" data-anchor-id="ideas-6">Ideas</h3>
<ol type="1">
<li>Intel’s founding by Noyce and Moore marked a significant turning point in the semiconductor industry.</li>
<li>The development of DRAM by Intel represented a major advancement in computer memory technology.</li>
<li>Intel’s work on the microprocessor laid the foundation for the modern computing era.</li>
<li>The cultural context of the late 1960s, with societal upheaval and technological innovation, was a backdrop to Intel’s revolutionary work.</li>
<li>Intel’s strategy focused on mass-producing standardized chips, leading to economies of scale.</li>
<li>The company’s vision was to make transistors the cheapest and most widely used product.</li>
<li>Intel’s microprocessors enabled the proliferation of computing power in various devices.</li>
<li>The establishment of Intel marked a shift from industrial to digital society.</li>
<li>The semiconductor industry’s growth in Silicon Valley was driven by specialized knowledge, networks, and financial incentives.</li>
<li>Intel’s success illustrated the power of technology to reshape society and the economy.</li>
</ol>
</section>
<section id="facts-6" class="level3">
<h3 class="anchored" data-anchor-id="facts-6">Facts</h3>
<ol type="1">
<li>Intel was founded in 1968 by Bob Noyce and Gordon Moore.</li>
<li>Intel developed the first DRAM, a significant advancement in computer memory.</li>
<li>The company also developed the world’s first microprocessor, revolutionizing computing.</li>
<li>Intel’s strategy focused on mass-producing memory chips and standardized logic chips.</li>
<li>The development of the microprocessor facilitated the widespread use of computing power.</li>
<li>Intel’s innovations marked a shift towards a digital society and economy.</li>
<li>The semiconductor industry in Silicon Valley was driven by innovation and financial incentives.</li>
<li>Intel’s work on the microprocessor began the era of widespread computing and the tech tycoon.</li>
<li>The company’s leaders foresaw the potential of their technology to drive societal change.</li>
<li>The development of the microprocessor significantly increased the rate of information processing.</li>
</ol>
</section>
</section>
<section id="the-pentagons-offset-strategy" class="level2">
<h2 class="anchored" data-anchor-id="the-pentagons-offset-strategy">The Pentagon’s Offset Strategy</h2>
<p>Chapter Fourteen explores the U.S. Department of Defense’s strategic shift in leveraging semiconductor technology for military advantage. It focuses on William Perry’s role as the Under Secretary of Defense for Research and Engineering and his vision to integrate microprocessors and memory chips into military systems. The chapter highlights how this strategy, driven by the need to offset the Soviet Union’s military strength, led to advancements in guided missiles and precision weaponry, fundamentally changing the nature of warfare.</p>
<section id="ideas-7" class="level3">
<h3 class="anchored" data-anchor-id="ideas-7">Ideas</h3>
<ol type="1">
<li>The U.S. Defense Department’s offset strategy aimed to gain a technological edge over the Soviet Union.</li>
<li>William Perry played a critical role in incorporating semiconductor technology into military systems.</li>
<li>The use of microprocessors and memory chips in weapons systems marked a significant shift in military technology.</li>
<li>The Pentagon’s investment in new technologies was a response to the Soviet Union’s military advancements.</li>
<li>The development of precision-guided munitions was central to the U.S. military’s new strategy.</li>
<li>The U.S. aimed to counter the Soviet quantitative advantage with qualitatively superior weapons.</li>
<li>Perry’s vision was to integrate computing power into military hardware, enhancing efficiency and accuracy.</li>
<li>The shift to high-tech weaponry was seen as a solution to the challenges faced in the Vietnam War.</li>
<li>The strategy involved significant investments in guided missiles, satellites, and advanced chip technology.</li>
<li>The Pentagon’s approach represented a radical departure from traditional warfare, focusing on precision and information superiority.</li>
</ol>
</section>
<section id="facts-7" class="level3">
<h3 class="anchored" data-anchor-id="facts-7">Facts</h3>
<ol type="1">
<li>The U.S. Defense Department’s offset strategy aimed to leverage semiconductor technology to gain a military advantage.</li>
<li>William Perry, as the Under Secretary of Defense for Research and Engineering, played a crucial role in this strategic shift.</li>
<li>The strategy focused on integrating microprocessors and memory chips into military systems.</li>
<li>The development of precision-guided munitions was central to the U.S. military’s new strategy.</li>
<li>The Pentagon’s approach aimed to counter the Soviet Union’s military strength with technological superiority.</li>
<li>The strategy involved significant investments in guided missiles, satellite technology, and advanced chip development.</li>
<li>The use of semiconductor technology in military systems marked a fundamental change in the nature of warfare.</li>
<li>The U.S. aimed to force the Soviet Union into a costly arms race, particularly in anti-missile defenses.</li>
<li>The Pentagon’s strategy was a response to the challenges and failures experienced in the Vietnam War.</li>
<li>The U.S. military’s technological advancements during this period were heavily dependent on the semiconductor industry’s innovations.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/chip-war-book-notes/part-2/</guid>
  <pubDate>Tue, 21 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Chip War Part 1: Cold War Chips</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/chip-war-book-notes/part-1/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/chip-war-book-notes.html"><strong>Chip War: The Fight for the World’s Most Critical Technology</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>From Steel to Silicon</li>
<li>The Switch</li>
<li>Noyce, Kilby, and the Integrated Circuit</li>
<li>Liftoff</li>
<li>Mortars and Mass Production</li>
<li>I Want To Get Rich</li>
</ul>
<section id="from-steel-to-silicon" class="level2">
<h2 class="anchored" data-anchor-id="from-steel-to-silicon">From Steel to Silicon</h2>
<p>Chapter One explores the transformation from the industrial age of World War II to the emergence of the semiconductor era. It highlights the experiences of key figures like Akio Morita, Morris Chang, and Andy Grove during the war, setting the stage for their future impacts in the semiconductor industry.</p>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ol type="1">
<li>World War II marked a transition from industrial warfare to technology-driven conflict.</li>
<li>The experiences of key individuals during WWII influenced the semiconductor industry’s development.</li>
<li>Akio Morita’s wartime research foreshadowed the future of guided missile technology.</li>
<li>The early life of Morris Chang in war-torn China highlighted resilience and adaptability.</li>
<li>Andy Grove’s experience in Hungary during WWII showed the human cost of war.</li>
<li>The concept of computation evolved significantly during and after WWII.</li>
<li>Mechanical computers in WWII were limited and paved the way for electronic advancements.</li>
<li>The war accelerated the need for more sophisticated computing power.</li>
<li>The development of radar and other technologies during WWII showcased the importance of innovation in warfare.</li>
<li>The atomic bombs on Hiroshima and Nagasaki signaled a new era of technological warfare.</li>
</ol>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ol type="1">
<li>World War II was a pivotal moment in the transition from industrial to technological warfare.</li>
<li>Akio Morita was involved in developing heat-seeking missile technology during WWII.</li>
<li>Morris Chang experienced the chaos and displacement of war in China during his youth.</li>
<li>Andy Grove’s early life in Hungary was marked by the harsh realities of WWII.</li>
<li>The technological developments of WWII laid the groundwork for future advancements in computing.</li>
<li>Mechanical computers used during WWII were limited in their capabilities.</li>
<li>The development of radar and other electronic devices was crucial during WWII.</li>
<li>The atomic bombings represented a significant shift in the nature of warfare.</li>
<li>The invention of the vacuum tube was a major advancement in computing technology.</li>
<li>Digital computing emerged as a response to the limitations of analog computation.</li>
</ol>
</section>
</section>
<section id="the-switch" class="level2">
<h2 class="anchored" data-anchor-id="the-switch">The Switch</h2>
<p>Chapter Two focuses on William Shockley’s contributions to semiconductor technology. It details Shockley’s background, his work at Bell Labs, and the development of the transistor, a pivotal invention in the field. The chapter also covers the collaborative efforts of Shockley’s colleagues at Bell Labs, highlighting the transistor’s revolutionary impact on technology and its initial underestimation by the public.</p>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ol type="1">
<li>William Shockley’s early life and education significantly influenced his work in semiconductors.</li>
<li>Shockley’s personality traits, like his sense of superiority, impacted his professional relationships.</li>
<li>Semiconductors’ unique properties enable them to conduct electricity under certain conditions.</li>
<li>The concept of doping semiconductors was crucial for developing new electronic devices.</li>
<li>Shockley’s initial experiments with silicon and electric fields laid the groundwork for the transistor.</li>
<li>The early instruments of the 1940s were inadequate for detecting small electric currents in semiconductors.</li>
<li>Shockley’s colleagues, Walter Bratton and John Bardeen, played key roles in proving his theories.</li>
<li>The invention of the transistor at Bell Labs marked a significant advancement in electronic technology.</li>
<li>AT&amp;T initially saw the transistor as a tool for improving telephone technology.</li>
<li>Transistors eventually replaced vacuum tubes in various electronic devices.</li>
</ol>
</section>
<section id="facts-1" class="level3">
<h3 class="anchored" data-anchor-id="facts-1">Facts</h3>
<ol type="1">
<li>William Shockley was a key figure in the development of semiconductor technology.</li>
<li>Shockley’s background included education at Caltech and MIT, and work at Bell Labs.</li>
<li>Semiconductors can conduct electricity under specific conditions.</li>
<li>Doping semiconductors with certain materials allows for the flow of electric currents.</li>
<li>Shockley’s early experiments aimed to transform silicon into a conductive material using electric fields.</li>
<li>The transistor was a significant technological advancement in electronic computing.</li>
<li>AT&amp;T’s initial interest in the transistor was for telephone signal amplification.</li>
<li>The transistor replaced less reliable vacuum tubes in various electronic devices.</li>
<li>Shockley’s further research on transistors was driven by a desire to outperform his colleagues.</li>
<li>The transistor’s amplification capability was a major breakthrough.</li>
</ol>
</section>
</section>
<section id="noyce-kilby-and-the-integrated-circuit" class="level2">
<h2 class="anchored" data-anchor-id="noyce-kilby-and-the-integrated-circuit">Noyce, Kilby, and the Integrated Circuit</h2>
<p>Chapter Three describes the development of the integrated circuit. It details the efforts of Jack Kilby at Texas Instruments and the Fairchild Semiconductor team, including Bob Noyce and Gordon Moore, to overcome the complexity and limitations of transistor-based systems. This chapter highlights the revolutionary nature of the integrated circuit and its critical role in advancing computing and electronics.</p>
<section id="ideas-2" class="level3">
<h3 class="anchored" data-anchor-id="ideas-2">Ideas</h3>
<ol type="1">
<li>The transition from individual transistors to integrated circuits was a major technological leap.</li>
<li>Jack Kilby’s work at Texas Instruments was pivotal in simplifying transistor-based systems.</li>
<li>The integrated circuit was born out of the need to reduce complexity in electronic devices.</li>
<li>Bob Noyce and Gordon Moore at Fairchild Semiconductor played crucial roles in advancing integrated circuit technology.</li>
<li>William Shockley’s management style at Shockley Semiconductor led to significant talent migration, contributing to the founding of Fairchild Semiconductor.</li>
<li>The Fairchild team’s innovation was driven by the challenges of transistor manufacturing.</li>
<li>Kilby’s invention of the integrated circuit was initially a solution to reduce wiring complexities.</li>
<li>The integrated circuit represented a significant step towards miniaturization in electronics.</li>
<li>Noyce’s planar process innovation was key in developing more reliable and efficient integrated circuits.</li>
<li>The initial high cost of producing integrated circuits was a challenge for their commercial viability.</li>
</ol>
</section>
<section id="facts-2" class="level3">
<h3 class="anchored" data-anchor-id="facts-2">Facts</h3>
<ol type="1">
<li>Jack Kilby at Texas Instruments played a crucial role in developing the integrated circuit.</li>
<li>The integrated circuit was designed to address the complexities of wiring in transistor-based systems.</li>
<li>Bob Noyce and Gordon Moore at Fairchild Semiconductor significantly advanced integrated circuit technology.</li>
<li>The departure of key engineers from Shockley Semiconductor was a turning point in the history of Silicon Valley.</li>
<li>The integrated circuit represented a major advancement in the miniaturization of electronics.</li>
<li>Noyce’s planar process was critical in creating more efficient and reliable integrated circuits.</li>
<li>The initial production cost of integrated circuits was significantly higher than that of simpler devices.</li>
<li>The integrated circuit was a key milestone in the evolution of computing technology.</li>
<li>Eugene Kleiner, a member of the “traitorous eight,” later founded Kleiner Perkins, a major venture capital firm.</li>
<li>The concept of Moore’s Law, later coined by Gordon Moore, reflected the rapid advancement in computing power.</li>
</ol>
</section>
</section>
<section id="liftoff" class="level2">
<h2 class="anchored" data-anchor-id="liftoff">Liftoff</h2>
<p>Chapter Four discusses the role of integrated circuits in the space race and military technology. It highlights the launch of Sputnik by the Soviet Union, prompting the United States to accelerate its space and missile programs. This chapter emphasizes how the demand from NASA and the U.S. military, especially for the Apollo and Minuteman programs, propelled the development and commercial success of integrated circuits, particularly for companies like Fairchild and Texas Instruments.</p>
<section id="ideas-3" class="level3">
<h3 class="anchored" data-anchor-id="ideas-3">Ideas</h3>
<ol type="1">
<li>Sputnik’s launch marked a turning point in global technological competition, emphasizing the importance of advanced electronics in space exploration.</li>
<li>The U.S. response to the Soviet space achievements included significant investment in technology and innovation.</li>
<li>NASA’s Apollo program became a key driver for the development of integrated circuits.</li>
<li>The Apollo Guidance Computer, using integrated circuits, was a groundbreaking advancement in computing for space exploration.</li>
<li>Fairchild Semiconductor’s integrated circuits were critical in the Apollo program, demonstrating their reliability in harsh environments.</li>
<li>The Minuteman missile program significantly contributed to the demand and advancement of integrated circuit technology.</li>
<li>Texas Instruments’ Pat Haggerty recognized the military potential of integrated circuits early on.</li>
<li>The shift from discrete transistors to integrated circuits marked a significant advancement in computing power and efficiency.</li>
<li>The Apollo and Minuteman programs showcased the practical applications of integrated circuits in critical and high-stakes environments.</li>
<li>The U.S. military became a major consumer of integrated circuits, influencing the direction of the semiconductor industry.</li>
</ol>
</section>
<section id="facts-3" class="level3">
<h3 class="anchored" data-anchor-id="facts-3">Facts</h3>
<ol type="1">
<li>Sputnik’s launch by the Soviet Union marked a critical moment in the space race.</li>
<li>The U.S. Apollo program’s reliance on integrated circuits was pivotal for the semiconductor industry.</li>
<li>Fairchild Semiconductor’s chips played a significant role in the Apollo Guidance Computer.</li>
<li>The Minuteman missile program greatly increased the demand for integrated circuits.</li>
<li>Texas Instruments, under Pat Haggerty, foresaw the military applications of integrated circuits.</li>
<li>Integrated circuits were a major technological advancement over discrete transistors.</li>
<li>The U.S. military became a significant market for integrated circuits, influencing their development.</li>
<li>NASA’s adoption of integrated circuits in the Apollo program validated their reliability and efficiency.</li>
<li>The mass production of integrated circuits was a challenge initially faced by companies like Texas Instruments.</li>
<li>The Minuteman program’s need for lightweight, efficient computers was a key driver for the adoption of integrated circuits.</li>
</ol>
</section>
</section>
<section id="mortars-and-mass-production" class="level2">
<h2 class="anchored" data-anchor-id="mortars-and-mass-production">Mortars and Mass Production</h2>
<p>Chapter Five focuses on the evolution of semiconductor manufacturing, particularly photolithography. It traces the contributions of Jay Lathrop at Texas Instruments and the efforts of Morris Chang and others in advancing production techniques. The chapter underscores the challenges in mass-producing reliable transistors and integrated circuits, highlighting the role of military and space programs in driving these innovations.</p>
<section id="ideas-4" class="level3">
<h3 class="anchored" data-anchor-id="ideas-4">Ideas</h3>
<ol type="1">
<li>Photolithography, pioneered by Jay Lathrop, revolutionized semiconductor manufacturing by enabling the miniaturization of transistors.</li>
<li>The complexity of manufacturing reliable transistors required innovative approaches and extensive trial and error.</li>
<li>Morris Chang’s methodical approach at Texas Instruments significantly improved transistor production yields.</li>
<li>The military and space programs, particularly the Minuteman missile and Apollo spacecraft, drove the demand for large quantities of integrated circuits.</li>
<li>Texas Instruments’ commitment to mastering photolithography and mass production techniques was vital for the semiconductor industry’s growth.</li>
<li>The development of integrated circuits was not just a scientific achievement but also a triumph of engineering and manufacturing innovation.</li>
<li>The early semiconductor industry faced challenges in purifying chemicals and materials for chip production.</li>
<li>The invention of the transistor and the integrated circuit required a combination of theoretical physics and practical engineering.</li>
<li>The semiconductor industry’s growth was heavily influenced by the needs of the U.S. military during the Cold War.</li>
<li>Texas Instruments and Fairchild Semiconductor’s efforts in the 1960s laid the groundwork for the semiconductor industry’s future.</li>
</ol>
</section>
<section id="facts-4" class="level3">
<h3 class="anchored" data-anchor-id="facts-4">Facts</h3>
<ol type="1">
<li>Photolithography, developed by Jay Lathrop, was a key innovation in semiconductor manufacturing.</li>
<li>The process of manufacturing reliable transistors and integrated circuits was complex and required extensive experimentation.</li>
<li>Morris Chang played a significant role in improving the production yield of transistors at Texas Instruments.</li>
<li>The U.S. military’s demand for integrated circuits for programs like Minuteman and Apollo was a major driver for the semiconductor industry.</li>
<li>Texas Instruments’ dedication to mastering photolithography and mass production was critical to the industry.</li>
<li>The development of integrated circuits was not just a scientific achievement but also a manufacturing breakthrough.</li>
<li>Challenges in purifying chemicals and materials were significant obstacles in early semiconductor production.</li>
<li>The semiconductor industry’s evolution was heavily influenced by military needs during the Cold War.</li>
<li>The mass production of semiconductors involved precise control of temperature, pressure, and chemical reactions.</li>
<li>Collaboration between universities and industry was vital in advancing semiconductor technology.</li>
</ol>
</section>
</section>
<section id="i-want-to-get-rich" class="level2">
<h2 class="anchored" data-anchor-id="i-want-to-get-rich">I Want To Get Rich</h2>
<p>Chapter Six explores the shift from military to civilian markets in the semiconductor industry during the 1960s. It focuses on Bob Noyce and Gordon Moore at Fairchild Semiconductor, highlighting their strategic decision to prioritize civilian applications over military contracts. The chapter details the industry’s expansion into the commercial sector, driven by innovations, price cuts, and the growing demand for consumer electronics, ultimately leading to a booming chip market and the birth of Silicon Valley.</p>
<section id="ideas-5" class="level3">
<h3 class="anchored" data-anchor-id="ideas-5">Ideas</h3>
<ol type="1">
<li>The semiconductor industry’s initial growth was heavily reliant on military and space programs.</li>
<li>Bob Noyce envisioned a larger civilian market for integrated circuits beyond military applications.</li>
<li>Noyce’s strategic decision to keep Fairchild’s R&amp;D independent from military influence was pivotal.</li>
<li>Fairchild Semiconductor played a crucial role in the transition from military to civilian markets in the semiconductor industry.</li>
<li>The invention of the integrated circuit opened opportunities in consumer electronics like hearing aids and radios.</li>
<li>The challenge for the industry was to produce affordable chips for the consumer market.</li>
<li>Civilian markets for integrated circuits were significantly larger than military markets.</li>
<li>Gordon Moore’s prediction of exponential growth in computing power, later known as Moore’s Law, was a key foresight.</li>
<li>Fairchild’s aggressive price cuts expanded the civilian market for chips.</li>
<li>The computer industry became a major consumer of integrated circuits, overtaking military demand.</li>
</ol>
</section>
<section id="facts-5" class="level3">
<h3 class="anchored" data-anchor-id="facts-5">Facts</h3>
<ol type="1">
<li>The semiconductor industry was initially driven by demand from military and space programs.</li>
<li>Bob Noyce and Gordon Moore at Fairchild Semiconductor focused on developing civilian applications for integrated circuits.</li>
<li>The invention of the integrated circuit enabled the expansion into consumer electronics.</li>
<li>Fairchild Semiconductor’s strategy included keeping its R&amp;D independent from military influence.</li>
<li>The civilian market for integrated circuits surpassed military demand in size and potential.</li>
<li>Moore’s Law predicted the exponential growth of computing power on integrated circuits.</li>
<li>Fairchild’s price cuts significantly expanded the civilian market for chips.</li>
<li>The computer industry became a major consumer of integrated circuits by the mid-1960s.</li>
<li>The growth of the semiconductor industry in Silicon Valley was fueled by venture capital and the rise of competing firms.</li>
<li>Financial incentives and equity became important for attracting talent in the semiconductor industry.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/chip-war-book-notes/part-1/</guid>
  <pubDate>Tue, 21 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Chip War Book Overview</title>
  <dc:creator>Christian Mills</dc:creator>
  <link>christianjmills.com/posts/chip-war-book-notes/overview/</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This post is part of the following series:
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li><a href="../../../series/notes/chip-war-book-notes.html"><strong>Chip War: The Fight for the World’s Most Critical Technology</strong></a></li>
</ul>
</div>
</div>
<ul>
<li>Introduction</li>
<li>Conclusion</li>
</ul>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>“Chip War: The Fight for the World’s Most Critical Technology” by Chris Miller delves into the pivotal role of semiconductors in shaping the global economy, international politics, and military power. It covers historical developments, influential figures in the semiconductor industry, and the geopolitical tensions surrounding this technology.</p>
<section id="ideas" class="level3">
<h3 class="anchored" data-anchor-id="ideas">Ideas</h3>
<ol type="1">
<li>Semiconductors are central to modern technology and global power dynamics.</li>
<li>The U.S. and China’s struggle for technological supremacy focuses heavily on computing power.</li>
<li>Taiwan’s TSMC is crucial in global semiconductor production.</li>
<li>Semiconductors have transformed from a niche invention to a backbone of the global economy.</li>
<li>Moore’s Law has driven exponential growth in computing power.</li>
<li>The semiconductor industry’s success is a blend of scientific, manufacturing, and business expertise.</li>
<li>Silicon Valley’s rise was fueled by scientific expertise, manufacturing know-how, and visionary business thinking.</li>
<li>Semiconductors are a critical component in a vast range of devices.</li>
<li>The global chip industry is a triumph of efficiency but also a significant vulnerability.</li>
<li>The concentration of chip manufacturing in East Asia is a result of deliberate decisions by governments and corporations.</li>
</ol>
</section>
<section id="facts" class="level3">
<h3 class="anchored" data-anchor-id="facts">Facts</h3>
<ol type="1">
<li>TSMC is the world’s most crucial chip maker.</li>
<li>Taiwan Semiconductor Manufacturing Company (TSMC) produces the majority of the world’s advanced processor chips.</li>
<li>The U.S. and China are major players in the global semiconductor industry.</li>
<li>Advanced chip manufacturing is concentrated in Taiwan, South Korea, and Japan.</li>
<li>Silicon Valley’s development was heavily influenced by the U.S. military’s technological needs.</li>
<li>Moore’s Law predicts the doubling of computing power on chips every couple of years.</li>
<li>The chip industry’s revenue is significantly driven by smartphone sales.</li>
<li>Semiconductors are crucial in a wide range of devices, from phones to cars.</li>
<li>Globalization is heavily reliant on semiconductor trade.</li>
<li>The pandemic caused significant disruptions in the semiconductor supply chain.</li>
</ol>
</section>
<section id="recommendations" class="level3">
<h3 class="anchored" data-anchor-id="recommendations">Recommendations</h3>
<ol type="1">
<li>Explore the history of the semiconductor industry to understand its current landscape.</li>
<li>Consider the geopolitical implications of semiconductor manufacturing locations.</li>
<li>Recognize the importance of Taiwan and TSMC in the global tech industry.</li>
<li>Acknowledge the role of semiconductors in modern military technology.</li>
<li>Understand the impact of Moore’s Law on technological progress.</li>
<li>Appreciate the complexities and vulnerabilities of the semiconductor supply chain.</li>
<li>Stay informed about the ongoing U.S.-China technology rivalry.</li>
<li>Consider the broader economic and political factors influencing the tech industry.</li>
<li>Recognize the critical role of scientific research and innovation in advancing technology.</li>
<li>Acknowledge the importance of global collaboration in the tech industry’s development.</li>
</ol>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>The conclusion connects the early history of semiconductor innovation, starting from Jack Kilby’s demonstration at Texas Instruments, to the current geopolitical landscape. It emphasizes the strategic importance of semiconductors, the pivotal role of key figures like Morris Chang, and the ongoing technological race, particularly between the U.S. and China, shaping the future of global power.</p>
<section id="ideas-1" class="level3">
<h3 class="anchored" data-anchor-id="ideas-1">Ideas</h3>
<ol type="1">
<li>The birth of semiconductor technology is closely linked to geopolitical tensions and military funding.</li>
<li>Innovators like Morris Chang significantly advanced semiconductor fabrication processes.</li>
<li>The U.S.’s technological edge, especially in defense, has been heavily reliant on semiconductor advances.</li>
<li>The migration of talented individuals to the U.S. contributed greatly to its technological leadership.</li>
<li>Semiconductor innovation is not just a product of science but also of market needs and business acumen.</li>
<li>Moore’s Law has driven the semiconductor industry, but its future is uncertain due to physical and economic limitations.</li>
<li>The semiconductor industry is at a crossroads, with potential shifts in global supply chains and technological leadership.</li>
<li>The end of Moore’s Law could significantly impact the semiconductor industry and global technological progress.</li>
<li>Semiconductor innovation continues to attract significant investment, indicating ongoing potential for growth and advancement.</li>
<li>The shift from general-purpose computing to specialized chips, especially for AI, is reshaping the semiconductor landscape.</li>
<li>The future of computing power is not just about transistor density but also about cost-effectiveness and practical applications.</li>
<li>The evolution of the semiconductor industry is a testament to human ingenuity and the relentless pursuit of technological advancement.</li>
</ol>
</section>
<section id="facts-1" class="level3">
<h3 class="anchored" data-anchor-id="facts-1">Facts</h3>
<ol type="1">
<li>Jack Kilby’s innovation at Texas Instruments was a milestone in semiconductor history.</li>
<li>Morris Chang’s contributions greatly advanced semiconductor fabrication.</li>
<li>The semiconductor industry’s growth was propelled by defense funding and global talent migration to the U.S.</li>
<li>The end of Moore’s Law poses a potential challenge to the future of semiconductor innovation.</li>
<li>The shift towards specialized chips, especially for AI, marks a significant change in the semiconductor industry.</li>
<li>The cost and physical limitations of semiconductor manufacturing are becoming increasingly significant challenges.</li>
</ol>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <category>history</category>
  <guid>christianjmills.com/posts/chip-war-book-notes/overview/</guid>
  <pubDate>Tue, 21 Nov 2023 08:00:00 GMT</pubDate>
  <media:content url="christianjmills.com/images/empty.gif" medium="image" type="image/gif"/>
</item>
</channel>
</rss>
